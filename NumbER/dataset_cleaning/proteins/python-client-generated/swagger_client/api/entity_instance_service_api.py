# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class EntityInstanceServiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_branched_entity_instance_by_id(self, entry_id, asym_id, **kwargs):  # noqa: E501
        """Get branched entity instance description by ENTRY ID and ASYM ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_branched_entity_instance_by_id(entry_id, asym_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entry_id: ID of the entry that needs to be fetched. (required)
        :param str asym_id: ID of the instance (chain) that needs to be fetched. (required)
        :return: CorePolymerEntityInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_branched_entity_instance_by_id_with_http_info(entry_id, asym_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_branched_entity_instance_by_id_with_http_info(entry_id, asym_id, **kwargs)  # noqa: E501
            return data

    def get_branched_entity_instance_by_id_with_http_info(self, entry_id, asym_id, **kwargs):  # noqa: E501
        """Get branched entity instance description by ENTRY ID and ASYM ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_branched_entity_instance_by_id_with_http_info(entry_id, asym_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entry_id: ID of the entry that needs to be fetched. (required)
        :param str asym_id: ID of the instance (chain) that needs to be fetched. (required)
        :return: CorePolymerEntityInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entry_id', 'asym_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_branched_entity_instance_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'entry_id' is set
        if ('entry_id' not in params or
                params['entry_id'] is None):
            raise ValueError("Missing the required parameter `entry_id` when calling `get_branched_entity_instance_by_id`")  # noqa: E501
        # verify the required parameter 'asym_id' is set
        if ('asym_id' not in params or
                params['asym_id'] is None):
            raise ValueError("Missing the required parameter `asym_id` when calling `get_branched_entity_instance_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'entry_id' in params:
            path_params['entry_id'] = params['entry_id']  # noqa: E501
        if 'asym_id' in params:
            path_params['asym_id'] = params['asym_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/branched_entity_instance/{entry_id}/{asym_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CorePolymerEntityInstance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_non_polymer_entity_instance_by_id(self, entry_id, asym_id, **kwargs):  # noqa: E501
        """Get non-polymer entity instance description by ENTRY ID and ASYM ID (label_asym_id).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_non_polymer_entity_instance_by_id(entry_id, asym_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entry_id: ENTRY ID of the entry. (required)
        :param str asym_id: ASYM ID (label_asym_id) of the instance (chain). (required)
        :return: CoreNonpolymerEntityInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_non_polymer_entity_instance_by_id_with_http_info(entry_id, asym_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_non_polymer_entity_instance_by_id_with_http_info(entry_id, asym_id, **kwargs)  # noqa: E501
            return data

    def get_non_polymer_entity_instance_by_id_with_http_info(self, entry_id, asym_id, **kwargs):  # noqa: E501
        """Get non-polymer entity instance description by ENTRY ID and ASYM ID (label_asym_id).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_non_polymer_entity_instance_by_id_with_http_info(entry_id, asym_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entry_id: ENTRY ID of the entry. (required)
        :param str asym_id: ASYM ID (label_asym_id) of the instance (chain). (required)
        :return: CoreNonpolymerEntityInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entry_id', 'asym_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_non_polymer_entity_instance_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'entry_id' is set
        if ('entry_id' not in params or
                params['entry_id'] is None):
            raise ValueError("Missing the required parameter `entry_id` when calling `get_non_polymer_entity_instance_by_id`")  # noqa: E501
        # verify the required parameter 'asym_id' is set
        if ('asym_id' not in params or
                params['asym_id'] is None):
            raise ValueError("Missing the required parameter `asym_id` when calling `get_non_polymer_entity_instance_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'entry_id' in params:
            path_params['entry_id'] = params['entry_id']  # noqa: E501
        if 'asym_id' in params:
            path_params['asym_id'] = params['asym_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/nonpolymer_entity_instance/{entry_id}/{asym_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CoreNonpolymerEntityInstance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_polymer_entity_instance_by_id(self, entry_id, asym_id, **kwargs):  # noqa: E501
        """Get polymer entity instance (a.k.a chain) data by ENTRY ID and ASYM ID (label_asym_id).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_polymer_entity_instance_by_id(entry_id, asym_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entry_id: ENTRY ID of the entry. (required)
        :param str asym_id: ASYM ID (label_asym_id) of the instance (chain). (required)
        :return: CorePolymerEntityInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_polymer_entity_instance_by_id_with_http_info(entry_id, asym_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_polymer_entity_instance_by_id_with_http_info(entry_id, asym_id, **kwargs)  # noqa: E501
            return data

    def get_polymer_entity_instance_by_id_with_http_info(self, entry_id, asym_id, **kwargs):  # noqa: E501
        """Get polymer entity instance (a.k.a chain) data by ENTRY ID and ASYM ID (label_asym_id).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_polymer_entity_instance_by_id_with_http_info(entry_id, asym_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entry_id: ENTRY ID of the entry. (required)
        :param str asym_id: ASYM ID (label_asym_id) of the instance (chain). (required)
        :return: CorePolymerEntityInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entry_id', 'asym_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_polymer_entity_instance_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'entry_id' is set
        if ('entry_id' not in params or
                params['entry_id'] is None):
            raise ValueError("Missing the required parameter `entry_id` when calling `get_polymer_entity_instance_by_id`")  # noqa: E501
        # verify the required parameter 'asym_id' is set
        if ('asym_id' not in params or
                params['asym_id'] is None):
            raise ValueError("Missing the required parameter `asym_id` when calling `get_polymer_entity_instance_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'entry_id' in params:
            path_params['entry_id'] = params['entry_id']  # noqa: E501
        if 'asym_id' in params:
            path_params['asym_id'] = params['asym_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/polymer_entity_instance/{entry_id}/{asym_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CorePolymerEntityInstance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
