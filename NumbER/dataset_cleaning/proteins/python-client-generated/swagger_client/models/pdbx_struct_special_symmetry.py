# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PdbxStructSpecialSymmetry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pdb_model_num': 'int',
        'auth_seq_id': 'str',
        'id': 'int',
        'label_asym_id': 'str',
        'label_comp_id': 'str'
    }

    attribute_map = {
        'pdb_model_num': 'PDB_model_num',
        'auth_seq_id': 'auth_seq_id',
        'id': 'id',
        'label_asym_id': 'label_asym_id',
        'label_comp_id': 'label_comp_id'
    }

    def __init__(self, pdb_model_num=None, auth_seq_id=None, id=None, label_asym_id=None, label_comp_id=None):  # noqa: E501
        """PdbxStructSpecialSymmetry - a model defined in Swagger"""  # noqa: E501
        self._pdb_model_num = None
        self._auth_seq_id = None
        self._id = None
        self._label_asym_id = None
        self._label_comp_id = None
        self.discriminator = None
        if pdb_model_num is not None:
            self.pdb_model_num = pdb_model_num
        if auth_seq_id is not None:
            self.auth_seq_id = auth_seq_id
        self.id = id
        if label_asym_id is not None:
            self.label_asym_id = label_asym_id
        if label_comp_id is not None:
            self.label_comp_id = label_comp_id

    @property
    def pdb_model_num(self):
        """Gets the pdb_model_num of this PdbxStructSpecialSymmetry.  # noqa: E501

        Part of the identifier for the molecular component.  This data item is a pointer to _atom_site.pdbx_PDB_model_num in the ATOM_SITE category.  # noqa: E501

        :return: The pdb_model_num of this PdbxStructSpecialSymmetry.  # noqa: E501
        :rtype: int
        """
        return self._pdb_model_num

    @pdb_model_num.setter
    def pdb_model_num(self, pdb_model_num):
        """Sets the pdb_model_num of this PdbxStructSpecialSymmetry.

        Part of the identifier for the molecular component.  This data item is a pointer to _atom_site.pdbx_PDB_model_num in the ATOM_SITE category.  # noqa: E501

        :param pdb_model_num: The pdb_model_num of this PdbxStructSpecialSymmetry.  # noqa: E501
        :type: int
        """

        self._pdb_model_num = pdb_model_num

    @property
    def auth_seq_id(self):
        """Gets the auth_seq_id of this PdbxStructSpecialSymmetry.  # noqa: E501

        Part of the identifier for the molecular component.   This data item is a pointer to _atom_site.auth_seq_id in the  ATOM_SITE category.  # noqa: E501

        :return: The auth_seq_id of this PdbxStructSpecialSymmetry.  # noqa: E501
        :rtype: str
        """
        return self._auth_seq_id

    @auth_seq_id.setter
    def auth_seq_id(self, auth_seq_id):
        """Sets the auth_seq_id of this PdbxStructSpecialSymmetry.

        Part of the identifier for the molecular component.   This data item is a pointer to _atom_site.auth_seq_id in the  ATOM_SITE category.  # noqa: E501

        :param auth_seq_id: The auth_seq_id of this PdbxStructSpecialSymmetry.  # noqa: E501
        :type: str
        """

        self._auth_seq_id = auth_seq_id

    @property
    def id(self):
        """Gets the id of this PdbxStructSpecialSymmetry.  # noqa: E501

        The value of _pdbx_struct_special_symmetry.id must uniquely identify  each item in the PDBX_STRUCT_SPECIAL_SYMMETRY list.   This is an integer serial number.  # noqa: E501

        :return: The id of this PdbxStructSpecialSymmetry.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PdbxStructSpecialSymmetry.

        The value of _pdbx_struct_special_symmetry.id must uniquely identify  each item in the PDBX_STRUCT_SPECIAL_SYMMETRY list.   This is an integer serial number.  # noqa: E501

        :param id: The id of this PdbxStructSpecialSymmetry.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def label_asym_id(self):
        """Gets the label_asym_id of this PdbxStructSpecialSymmetry.  # noqa: E501

        Part of the identifier for the molecular component.   This data item is a pointer to _atom_site.label_asym_id in the  ATOM_SITE category.  # noqa: E501

        :return: The label_asym_id of this PdbxStructSpecialSymmetry.  # noqa: E501
        :rtype: str
        """
        return self._label_asym_id

    @label_asym_id.setter
    def label_asym_id(self, label_asym_id):
        """Sets the label_asym_id of this PdbxStructSpecialSymmetry.

        Part of the identifier for the molecular component.   This data item is a pointer to _atom_site.label_asym_id in the  ATOM_SITE category.  # noqa: E501

        :param label_asym_id: The label_asym_id of this PdbxStructSpecialSymmetry.  # noqa: E501
        :type: str
        """

        self._label_asym_id = label_asym_id

    @property
    def label_comp_id(self):
        """Gets the label_comp_id of this PdbxStructSpecialSymmetry.  # noqa: E501

        Part of the identifier for the molecular component.   This data item is a pointer to _atom_site.label_comp_id in the  ATOM_SITE category.  # noqa: E501

        :return: The label_comp_id of this PdbxStructSpecialSymmetry.  # noqa: E501
        :rtype: str
        """
        return self._label_comp_id

    @label_comp_id.setter
    def label_comp_id(self, label_comp_id):
        """Sets the label_comp_id of this PdbxStructSpecialSymmetry.

        Part of the identifier for the molecular component.   This data item is a pointer to _atom_site.label_comp_id in the  ATOM_SITE category.  # noqa: E501

        :param label_comp_id: The label_comp_id of this PdbxStructSpecialSymmetry.  # noqa: E501
        :type: str
        """

        self._label_comp_id = label_comp_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PdbxStructSpecialSymmetry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdbxStructSpecialSymmetry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
