# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RcsbPolymerEntityContainerIdentifiers(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asym_ids': 'list[str]',
        'auth_asym_ids': 'list[str]',
        'chem_comp_monomers': 'list[str]',
        'chem_comp_nstd_monomers': 'list[str]',
        'chem_ref_def_id': 'str',
        'entity_id': 'str',
        'entry_id': 'str',
        'prd_id': 'str',
        'rcsb_id': 'str',
        'reference_sequence_identifiers': 'list[RcsbPolymerEntityContainerIdentifiersReferenceSequenceIdentifiers]',
        'uniprot_ids': 'list[str]'
    }

    attribute_map = {
        'asym_ids': 'asym_ids',
        'auth_asym_ids': 'auth_asym_ids',
        'chem_comp_monomers': 'chem_comp_monomers',
        'chem_comp_nstd_monomers': 'chem_comp_nstd_monomers',
        'chem_ref_def_id': 'chem_ref_def_id',
        'entity_id': 'entity_id',
        'entry_id': 'entry_id',
        'prd_id': 'prd_id',
        'rcsb_id': 'rcsb_id',
        'reference_sequence_identifiers': 'reference_sequence_identifiers',
        'uniprot_ids': 'uniprot_ids'
    }

    def __init__(self, asym_ids=None, auth_asym_ids=None, chem_comp_monomers=None, chem_comp_nstd_monomers=None, chem_ref_def_id=None, entity_id=None, entry_id=None, prd_id=None, rcsb_id=None, reference_sequence_identifiers=None, uniprot_ids=None):  # noqa: E501
        """RcsbPolymerEntityContainerIdentifiers - a model defined in Swagger"""  # noqa: E501
        self._asym_ids = None
        self._auth_asym_ids = None
        self._chem_comp_monomers = None
        self._chem_comp_nstd_monomers = None
        self._chem_ref_def_id = None
        self._entity_id = None
        self._entry_id = None
        self._prd_id = None
        self._rcsb_id = None
        self._reference_sequence_identifiers = None
        self._uniprot_ids = None
        self.discriminator = None
        if asym_ids is not None:
            self.asym_ids = asym_ids
        if auth_asym_ids is not None:
            self.auth_asym_ids = auth_asym_ids
        if chem_comp_monomers is not None:
            self.chem_comp_monomers = chem_comp_monomers
        if chem_comp_nstd_monomers is not None:
            self.chem_comp_nstd_monomers = chem_comp_nstd_monomers
        if chem_ref_def_id is not None:
            self.chem_ref_def_id = chem_ref_def_id
        self.entity_id = entity_id
        self.entry_id = entry_id
        if prd_id is not None:
            self.prd_id = prd_id
        if rcsb_id is not None:
            self.rcsb_id = rcsb_id
        if reference_sequence_identifiers is not None:
            self.reference_sequence_identifiers = reference_sequence_identifiers
        if uniprot_ids is not None:
            self.uniprot_ids = uniprot_ids

    @property
    def asym_ids(self):
        """Gets the asym_ids of this RcsbPolymerEntityContainerIdentifiers.  # noqa: E501

        Instance identifiers corresponding to copies of the entity in this container.  # noqa: E501

        :return: The asym_ids of this RcsbPolymerEntityContainerIdentifiers.  # noqa: E501
        :rtype: list[str]
        """
        return self._asym_ids

    @asym_ids.setter
    def asym_ids(self, asym_ids):
        """Sets the asym_ids of this RcsbPolymerEntityContainerIdentifiers.

        Instance identifiers corresponding to copies of the entity in this container.  # noqa: E501

        :param asym_ids: The asym_ids of this RcsbPolymerEntityContainerIdentifiers.  # noqa: E501
        :type: list[str]
        """

        self._asym_ids = asym_ids

    @property
    def auth_asym_ids(self):
        """Gets the auth_asym_ids of this RcsbPolymerEntityContainerIdentifiers.  # noqa: E501

        Author instance identifiers corresponding to copies of the entity in this container.  # noqa: E501

        :return: The auth_asym_ids of this RcsbPolymerEntityContainerIdentifiers.  # noqa: E501
        :rtype: list[str]
        """
        return self._auth_asym_ids

    @auth_asym_ids.setter
    def auth_asym_ids(self, auth_asym_ids):
        """Sets the auth_asym_ids of this RcsbPolymerEntityContainerIdentifiers.

        Author instance identifiers corresponding to copies of the entity in this container.  # noqa: E501

        :param auth_asym_ids: The auth_asym_ids of this RcsbPolymerEntityContainerIdentifiers.  # noqa: E501
        :type: list[str]
        """

        self._auth_asym_ids = auth_asym_ids

    @property
    def chem_comp_monomers(self):
        """Gets the chem_comp_monomers of this RcsbPolymerEntityContainerIdentifiers.  # noqa: E501

        Unique list of monomer chemical component identifiers in the polymer entity in this container.  # noqa: E501

        :return: The chem_comp_monomers of this RcsbPolymerEntityContainerIdentifiers.  # noqa: E501
        :rtype: list[str]
        """
        return self._chem_comp_monomers

    @chem_comp_monomers.setter
    def chem_comp_monomers(self, chem_comp_monomers):
        """Sets the chem_comp_monomers of this RcsbPolymerEntityContainerIdentifiers.

        Unique list of monomer chemical component identifiers in the polymer entity in this container.  # noqa: E501

        :param chem_comp_monomers: The chem_comp_monomers of this RcsbPolymerEntityContainerIdentifiers.  # noqa: E501
        :type: list[str]
        """

        self._chem_comp_monomers = chem_comp_monomers

    @property
    def chem_comp_nstd_monomers(self):
        """Gets the chem_comp_nstd_monomers of this RcsbPolymerEntityContainerIdentifiers.  # noqa: E501

        Unique list of non-standard monomer chemical component identifiers in the polymer entity in this container.  # noqa: E501

        :return: The chem_comp_nstd_monomers of this RcsbPolymerEntityContainerIdentifiers.  # noqa: E501
        :rtype: list[str]
        """
        return self._chem_comp_nstd_monomers

    @chem_comp_nstd_monomers.setter
    def chem_comp_nstd_monomers(self, chem_comp_nstd_monomers):
        """Sets the chem_comp_nstd_monomers of this RcsbPolymerEntityContainerIdentifiers.

        Unique list of non-standard monomer chemical component identifiers in the polymer entity in this container.  # noqa: E501

        :param chem_comp_nstd_monomers: The chem_comp_nstd_monomers of this RcsbPolymerEntityContainerIdentifiers.  # noqa: E501
        :type: list[str]
        """

        self._chem_comp_nstd_monomers = chem_comp_nstd_monomers

    @property
    def chem_ref_def_id(self):
        """Gets the chem_ref_def_id of this RcsbPolymerEntityContainerIdentifiers.  # noqa: E501

        The chemical reference definition identifier for the entity in this container.  # noqa: E501

        :return: The chem_ref_def_id of this RcsbPolymerEntityContainerIdentifiers.  # noqa: E501
        :rtype: str
        """
        return self._chem_ref_def_id

    @chem_ref_def_id.setter
    def chem_ref_def_id(self, chem_ref_def_id):
        """Sets the chem_ref_def_id of this RcsbPolymerEntityContainerIdentifiers.

        The chemical reference definition identifier for the entity in this container.  # noqa: E501

        :param chem_ref_def_id: The chem_ref_def_id of this RcsbPolymerEntityContainerIdentifiers.  # noqa: E501
        :type: str
        """

        self._chem_ref_def_id = chem_ref_def_id

    @property
    def entity_id(self):
        """Gets the entity_id of this RcsbPolymerEntityContainerIdentifiers.  # noqa: E501

        Entity identifier for the container.  # noqa: E501

        :return: The entity_id of this RcsbPolymerEntityContainerIdentifiers.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this RcsbPolymerEntityContainerIdentifiers.

        Entity identifier for the container.  # noqa: E501

        :param entity_id: The entity_id of this RcsbPolymerEntityContainerIdentifiers.  # noqa: E501
        :type: str
        """
        if entity_id is None:
            raise ValueError("Invalid value for `entity_id`, must not be `None`")  # noqa: E501

        self._entity_id = entity_id

    @property
    def entry_id(self):
        """Gets the entry_id of this RcsbPolymerEntityContainerIdentifiers.  # noqa: E501

        Entry identifier for the container.  # noqa: E501

        :return: The entry_id of this RcsbPolymerEntityContainerIdentifiers.  # noqa: E501
        :rtype: str
        """
        return self._entry_id

    @entry_id.setter
    def entry_id(self, entry_id):
        """Sets the entry_id of this RcsbPolymerEntityContainerIdentifiers.

        Entry identifier for the container.  # noqa: E501

        :param entry_id: The entry_id of this RcsbPolymerEntityContainerIdentifiers.  # noqa: E501
        :type: str
        """
        if entry_id is None:
            raise ValueError("Invalid value for `entry_id`, must not be `None`")  # noqa: E501

        self._entry_id = entry_id

    @property
    def prd_id(self):
        """Gets the prd_id of this RcsbPolymerEntityContainerIdentifiers.  # noqa: E501

        The BIRD identifier for the entity in this container.  # noqa: E501

        :return: The prd_id of this RcsbPolymerEntityContainerIdentifiers.  # noqa: E501
        :rtype: str
        """
        return self._prd_id

    @prd_id.setter
    def prd_id(self, prd_id):
        """Sets the prd_id of this RcsbPolymerEntityContainerIdentifiers.

        The BIRD identifier for the entity in this container.  # noqa: E501

        :param prd_id: The prd_id of this RcsbPolymerEntityContainerIdentifiers.  # noqa: E501
        :type: str
        """

        self._prd_id = prd_id

    @property
    def rcsb_id(self):
        """Gets the rcsb_id of this RcsbPolymerEntityContainerIdentifiers.  # noqa: E501

        A unique identifier for each object in this entity container formed by  an underscore separated concatenation of entry and entity identifiers.  # noqa: E501

        :return: The rcsb_id of this RcsbPolymerEntityContainerIdentifiers.  # noqa: E501
        :rtype: str
        """
        return self._rcsb_id

    @rcsb_id.setter
    def rcsb_id(self, rcsb_id):
        """Sets the rcsb_id of this RcsbPolymerEntityContainerIdentifiers.

        A unique identifier for each object in this entity container formed by  an underscore separated concatenation of entry and entity identifiers.  # noqa: E501

        :param rcsb_id: The rcsb_id of this RcsbPolymerEntityContainerIdentifiers.  # noqa: E501
        :type: str
        """

        self._rcsb_id = rcsb_id

    @property
    def reference_sequence_identifiers(self):
        """Gets the reference_sequence_identifiers of this RcsbPolymerEntityContainerIdentifiers.  # noqa: E501


        :return: The reference_sequence_identifiers of this RcsbPolymerEntityContainerIdentifiers.  # noqa: E501
        :rtype: list[RcsbPolymerEntityContainerIdentifiersReferenceSequenceIdentifiers]
        """
        return self._reference_sequence_identifiers

    @reference_sequence_identifiers.setter
    def reference_sequence_identifiers(self, reference_sequence_identifiers):
        """Sets the reference_sequence_identifiers of this RcsbPolymerEntityContainerIdentifiers.


        :param reference_sequence_identifiers: The reference_sequence_identifiers of this RcsbPolymerEntityContainerIdentifiers.  # noqa: E501
        :type: list[RcsbPolymerEntityContainerIdentifiersReferenceSequenceIdentifiers]
        """

        self._reference_sequence_identifiers = reference_sequence_identifiers

    @property
    def uniprot_ids(self):
        """Gets the uniprot_ids of this RcsbPolymerEntityContainerIdentifiers.  # noqa: E501


        :return: The uniprot_ids of this RcsbPolymerEntityContainerIdentifiers.  # noqa: E501
        :rtype: list[str]
        """
        return self._uniprot_ids

    @uniprot_ids.setter
    def uniprot_ids(self, uniprot_ids):
        """Sets the uniprot_ids of this RcsbPolymerEntityContainerIdentifiers.


        :param uniprot_ids: The uniprot_ids of this RcsbPolymerEntityContainerIdentifiers.  # noqa: E501
        :type: list[str]
        """

        self._uniprot_ids = uniprot_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RcsbPolymerEntityContainerIdentifiers, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RcsbPolymerEntityContainerIdentifiers):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
