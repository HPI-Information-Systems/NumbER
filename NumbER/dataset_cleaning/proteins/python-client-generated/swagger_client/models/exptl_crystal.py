# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExptlCrystal(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'colour': 'str',
        'density_matthews': 'float',
        'density_meas': 'float',
        'density_percent_sol': 'float',
        'description': 'str',
        'id': 'str',
        'pdbx_mosaicity': 'float',
        'pdbx_mosaicity_esd': 'float',
        'preparation': 'str'
    }

    attribute_map = {
        'colour': 'colour',
        'density_matthews': 'density_Matthews',
        'density_meas': 'density_meas',
        'density_percent_sol': 'density_percent_sol',
        'description': 'description',
        'id': 'id',
        'pdbx_mosaicity': 'pdbx_mosaicity',
        'pdbx_mosaicity_esd': 'pdbx_mosaicity_esd',
        'preparation': 'preparation'
    }

    def __init__(self, colour=None, density_matthews=None, density_meas=None, density_percent_sol=None, description=None, id=None, pdbx_mosaicity=None, pdbx_mosaicity_esd=None, preparation=None):  # noqa: E501
        """ExptlCrystal - a model defined in Swagger"""  # noqa: E501
        self._colour = None
        self._density_matthews = None
        self._density_meas = None
        self._density_percent_sol = None
        self._description = None
        self._id = None
        self._pdbx_mosaicity = None
        self._pdbx_mosaicity_esd = None
        self._preparation = None
        self.discriminator = None
        if colour is not None:
            self.colour = colour
        if density_matthews is not None:
            self.density_matthews = density_matthews
        if density_meas is not None:
            self.density_meas = density_meas
        if density_percent_sol is not None:
            self.density_percent_sol = density_percent_sol
        if description is not None:
            self.description = description
        self.id = id
        if pdbx_mosaicity is not None:
            self.pdbx_mosaicity = pdbx_mosaicity
        if pdbx_mosaicity_esd is not None:
            self.pdbx_mosaicity_esd = pdbx_mosaicity_esd
        if preparation is not None:
            self.preparation = preparation

    @property
    def colour(self):
        """Gets the colour of this ExptlCrystal.  # noqa: E501

        The colour of the crystal.  # noqa: E501

        :return: The colour of this ExptlCrystal.  # noqa: E501
        :rtype: str
        """
        return self._colour

    @colour.setter
    def colour(self, colour):
        """Sets the colour of this ExptlCrystal.

        The colour of the crystal.  # noqa: E501

        :param colour: The colour of this ExptlCrystal.  # noqa: E501
        :type: str
        """

        self._colour = colour

    @property
    def density_matthews(self):
        """Gets the density_matthews of this ExptlCrystal.  # noqa: E501

        The density of the crystal, expressed as the ratio of the  volume of the asymmetric unit to the molecular mass of a  monomer of the structure, in units of angstroms^3^ per dalton.   Ref: Matthews, B. W. (1968). J. Mol. Biol. 33, 491-497.  # noqa: E501

        :return: The density_matthews of this ExptlCrystal.  # noqa: E501
        :rtype: float
        """
        return self._density_matthews

    @density_matthews.setter
    def density_matthews(self, density_matthews):
        """Sets the density_matthews of this ExptlCrystal.

        The density of the crystal, expressed as the ratio of the  volume of the asymmetric unit to the molecular mass of a  monomer of the structure, in units of angstroms^3^ per dalton.   Ref: Matthews, B. W. (1968). J. Mol. Biol. 33, 491-497.  # noqa: E501

        :param density_matthews: The density_matthews of this ExptlCrystal.  # noqa: E501
        :type: float
        """

        self._density_matthews = density_matthews

    @property
    def density_meas(self):
        """Gets the density_meas of this ExptlCrystal.  # noqa: E501

        Density values measured using standard chemical and physical  methods. The units are megagrams per cubic metre (grams per  cubic centimetre).  # noqa: E501

        :return: The density_meas of this ExptlCrystal.  # noqa: E501
        :rtype: float
        """
        return self._density_meas

    @density_meas.setter
    def density_meas(self, density_meas):
        """Sets the density_meas of this ExptlCrystal.

        Density values measured using standard chemical and physical  methods. The units are megagrams per cubic metre (grams per  cubic centimetre).  # noqa: E501

        :param density_meas: The density_meas of this ExptlCrystal.  # noqa: E501
        :type: float
        """

        self._density_meas = density_meas

    @property
    def density_percent_sol(self):
        """Gets the density_percent_sol of this ExptlCrystal.  # noqa: E501

        Density value P calculated from the crystal cell and contents,  expressed as per cent solvent.   P = 1 - (1.23 N MMass) / V   N     = the number of molecules in the unit cell  MMass = the molecular mass of each molecule (gm/mole)  V     = the volume of the unit cell (A^3^)  1.23  = a conversion factor evaluated as:           (0.74 cm^3^/g) (10^24^ A^3^/cm^3^)          --------------------------------------               (6.02*10^23^) molecules/mole           where 0.74 is an assumed value for the partial specific          volume of the molecule  # noqa: E501

        :return: The density_percent_sol of this ExptlCrystal.  # noqa: E501
        :rtype: float
        """
        return self._density_percent_sol

    @density_percent_sol.setter
    def density_percent_sol(self, density_percent_sol):
        """Sets the density_percent_sol of this ExptlCrystal.

        Density value P calculated from the crystal cell and contents,  expressed as per cent solvent.   P = 1 - (1.23 N MMass) / V   N     = the number of molecules in the unit cell  MMass = the molecular mass of each molecule (gm/mole)  V     = the volume of the unit cell (A^3^)  1.23  = a conversion factor evaluated as:           (0.74 cm^3^/g) (10^24^ A^3^/cm^3^)          --------------------------------------               (6.02*10^23^) molecules/mole           where 0.74 is an assumed value for the partial specific          volume of the molecule  # noqa: E501

        :param density_percent_sol: The density_percent_sol of this ExptlCrystal.  # noqa: E501
        :type: float
        """

        self._density_percent_sol = density_percent_sol

    @property
    def description(self):
        """Gets the description of this ExptlCrystal.  # noqa: E501

        A description of the quality and habit of the crystal.  The crystal dimensions should not normally be reported here;  use instead the specific items in the EXPTL_CRYSTAL category  relating to size for the gross dimensions of the crystal and  data items in the EXPTL_CRYSTAL_FACE category to describe the  relationship between individual faces.  # noqa: E501

        :return: The description of this ExptlCrystal.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ExptlCrystal.

        A description of the quality and habit of the crystal.  The crystal dimensions should not normally be reported here;  use instead the specific items in the EXPTL_CRYSTAL category  relating to size for the gross dimensions of the crystal and  data items in the EXPTL_CRYSTAL_FACE category to describe the  relationship between individual faces.  # noqa: E501

        :param description: The description of this ExptlCrystal.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this ExptlCrystal.  # noqa: E501

        The value of _exptl_crystal.id must uniquely identify a record in  the EXPTL_CRYSTAL list.   Note that this item need not be a number; it can be any unique  identifier.  # noqa: E501

        :return: The id of this ExptlCrystal.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExptlCrystal.

        The value of _exptl_crystal.id must uniquely identify a record in  the EXPTL_CRYSTAL list.   Note that this item need not be a number; it can be any unique  identifier.  # noqa: E501

        :param id: The id of this ExptlCrystal.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def pdbx_mosaicity(self):
        """Gets the pdbx_mosaicity of this ExptlCrystal.  # noqa: E501

        Isotropic approximation of the distribution of mis-orientation angles specified in degrees of all the mosaic domain blocks in the crystal, represented as a standard deviation. Here, a mosaic block is a set of contiguous unit cells assumed to be perfectly aligned. Lower mosaicity indicates better ordered crystals. See for example:  Nave, C. (1998). Acta Cryst. D54, 848-853.  Note that many software packages estimate the mosaic rotation distribution differently and may combine several physical properties of the experiment into a single mosaic term. This term will help fit the modeled spots to the observed spots without necessarily being directly related to the physics of the crystal itself.  # noqa: E501

        :return: The pdbx_mosaicity of this ExptlCrystal.  # noqa: E501
        :rtype: float
        """
        return self._pdbx_mosaicity

    @pdbx_mosaicity.setter
    def pdbx_mosaicity(self, pdbx_mosaicity):
        """Sets the pdbx_mosaicity of this ExptlCrystal.

        Isotropic approximation of the distribution of mis-orientation angles specified in degrees of all the mosaic domain blocks in the crystal, represented as a standard deviation. Here, a mosaic block is a set of contiguous unit cells assumed to be perfectly aligned. Lower mosaicity indicates better ordered crystals. See for example:  Nave, C. (1998). Acta Cryst. D54, 848-853.  Note that many software packages estimate the mosaic rotation distribution differently and may combine several physical properties of the experiment into a single mosaic term. This term will help fit the modeled spots to the observed spots without necessarily being directly related to the physics of the crystal itself.  # noqa: E501

        :param pdbx_mosaicity: The pdbx_mosaicity of this ExptlCrystal.  # noqa: E501
        :type: float
        """

        self._pdbx_mosaicity = pdbx_mosaicity

    @property
    def pdbx_mosaicity_esd(self):
        """Gets the pdbx_mosaicity_esd of this ExptlCrystal.  # noqa: E501

        The uncertainty in the mosaicity estimate for the crystal.  # noqa: E501

        :return: The pdbx_mosaicity_esd of this ExptlCrystal.  # noqa: E501
        :rtype: float
        """
        return self._pdbx_mosaicity_esd

    @pdbx_mosaicity_esd.setter
    def pdbx_mosaicity_esd(self, pdbx_mosaicity_esd):
        """Sets the pdbx_mosaicity_esd of this ExptlCrystal.

        The uncertainty in the mosaicity estimate for the crystal.  # noqa: E501

        :param pdbx_mosaicity_esd: The pdbx_mosaicity_esd of this ExptlCrystal.  # noqa: E501
        :type: float
        """

        self._pdbx_mosaicity_esd = pdbx_mosaicity_esd

    @property
    def preparation(self):
        """Gets the preparation of this ExptlCrystal.  # noqa: E501

        Details of crystal growth and preparation of the crystal (e.g.  mounting) prior to the intensity measurements.  # noqa: E501

        :return: The preparation of this ExptlCrystal.  # noqa: E501
        :rtype: str
        """
        return self._preparation

    @preparation.setter
    def preparation(self, preparation):
        """Sets the preparation of this ExptlCrystal.

        Details of crystal growth and preparation of the crystal (e.g.  mounting) prior to the intensity measurements.  # noqa: E501

        :param preparation: The preparation of this ExptlCrystal.  # noqa: E501
        :type: str
        """

        self._preparation = preparation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExptlCrystal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExptlCrystal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
