# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RcsbEntryInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assembly_count': 'int',
        'branched_entity_count': 'int',
        'branched_molecular_weight_maximum': 'float',
        'branched_molecular_weight_minimum': 'float',
        'cis_peptide_count': 'int',
        'deposited_atom_count': 'int',
        'deposited_hydrogen_atom_count': 'int',
        'deposited_model_count': 'int',
        'deposited_modeled_polymer_monomer_count': 'int',
        'deposited_nonpolymer_entity_instance_count': 'int',
        'deposited_polymer_entity_instance_count': 'int',
        'deposited_polymer_monomer_count': 'int',
        'deposited_solvent_atom_count': 'int',
        'deposited_unmodeled_polymer_monomer_count': 'int',
        'diffrn_radiation_wavelength_maximum': 'float',
        'diffrn_radiation_wavelength_minimum': 'float',
        'disulfide_bond_count': 'int',
        'entity_count': 'int',
        'experimental_method': 'str',
        'experimental_method_count': 'int',
        'inter_mol_covalent_bond_count': 'int',
        'inter_mol_metalic_bond_count': 'int',
        'molecular_weight': 'float',
        'na_polymer_entity_types': 'str',
        'ndb_struct_conf_na_feature_combined': 'list[str]',
        'nonpolymer_bound_components': 'list[str]',
        'nonpolymer_entity_count': 'int',
        'nonpolymer_molecular_weight_maximum': 'float',
        'nonpolymer_molecular_weight_minimum': 'float',
        'polymer_composition': 'str',
        'polymer_entity_count': 'int',
        'polymer_entity_count_dna': 'int',
        'polymer_entity_count_rna': 'int',
        'polymer_entity_count_nucleic_acid': 'int',
        'polymer_entity_count_nucleic_acid_hybrid': 'int',
        'polymer_entity_count_protein': 'int',
        'polymer_entity_taxonomy_count': 'int',
        'polymer_molecular_weight_maximum': 'float',
        'polymer_molecular_weight_minimum': 'float',
        'polymer_monomer_count_maximum': 'int',
        'polymer_monomer_count_minimum': 'int',
        'resolution_combined': 'list[float]',
        'selected_polymer_entity_types': 'str',
        'software_programs_combined': 'list[str]',
        'solvent_entity_count': 'int',
        'structure_determination_methodology': 'str',
        'structure_determination_methodology_priority': 'int',
        'diffrn_resolution_high': 'RcsbEntryInfoDiffrnResolutionHigh'
    }

    attribute_map = {
        'assembly_count': 'assembly_count',
        'branched_entity_count': 'branched_entity_count',
        'branched_molecular_weight_maximum': 'branched_molecular_weight_maximum',
        'branched_molecular_weight_minimum': 'branched_molecular_weight_minimum',
        'cis_peptide_count': 'cis_peptide_count',
        'deposited_atom_count': 'deposited_atom_count',
        'deposited_hydrogen_atom_count': 'deposited_hydrogen_atom_count',
        'deposited_model_count': 'deposited_model_count',
        'deposited_modeled_polymer_monomer_count': 'deposited_modeled_polymer_monomer_count',
        'deposited_nonpolymer_entity_instance_count': 'deposited_nonpolymer_entity_instance_count',
        'deposited_polymer_entity_instance_count': 'deposited_polymer_entity_instance_count',
        'deposited_polymer_monomer_count': 'deposited_polymer_monomer_count',
        'deposited_solvent_atom_count': 'deposited_solvent_atom_count',
        'deposited_unmodeled_polymer_monomer_count': 'deposited_unmodeled_polymer_monomer_count',
        'diffrn_radiation_wavelength_maximum': 'diffrn_radiation_wavelength_maximum',
        'diffrn_radiation_wavelength_minimum': 'diffrn_radiation_wavelength_minimum',
        'disulfide_bond_count': 'disulfide_bond_count',
        'entity_count': 'entity_count',
        'experimental_method': 'experimental_method',
        'experimental_method_count': 'experimental_method_count',
        'inter_mol_covalent_bond_count': 'inter_mol_covalent_bond_count',
        'inter_mol_metalic_bond_count': 'inter_mol_metalic_bond_count',
        'molecular_weight': 'molecular_weight',
        'na_polymer_entity_types': 'na_polymer_entity_types',
        'ndb_struct_conf_na_feature_combined': 'ndb_struct_conf_na_feature_combined',
        'nonpolymer_bound_components': 'nonpolymer_bound_components',
        'nonpolymer_entity_count': 'nonpolymer_entity_count',
        'nonpolymer_molecular_weight_maximum': 'nonpolymer_molecular_weight_maximum',
        'nonpolymer_molecular_weight_minimum': 'nonpolymer_molecular_weight_minimum',
        'polymer_composition': 'polymer_composition',
        'polymer_entity_count': 'polymer_entity_count',
        'polymer_entity_count_dna': 'polymer_entity_count_DNA',
        'polymer_entity_count_rna': 'polymer_entity_count_RNA',
        'polymer_entity_count_nucleic_acid': 'polymer_entity_count_nucleic_acid',
        'polymer_entity_count_nucleic_acid_hybrid': 'polymer_entity_count_nucleic_acid_hybrid',
        'polymer_entity_count_protein': 'polymer_entity_count_protein',
        'polymer_entity_taxonomy_count': 'polymer_entity_taxonomy_count',
        'polymer_molecular_weight_maximum': 'polymer_molecular_weight_maximum',
        'polymer_molecular_weight_minimum': 'polymer_molecular_weight_minimum',
        'polymer_monomer_count_maximum': 'polymer_monomer_count_maximum',
        'polymer_monomer_count_minimum': 'polymer_monomer_count_minimum',
        'resolution_combined': 'resolution_combined',
        'selected_polymer_entity_types': 'selected_polymer_entity_types',
        'software_programs_combined': 'software_programs_combined',
        'solvent_entity_count': 'solvent_entity_count',
        'structure_determination_methodology': 'structure_determination_methodology',
        'structure_determination_methodology_priority': 'structure_determination_methodology_priority',
        'diffrn_resolution_high': 'diffrn_resolution_high'
    }

    def __init__(self, assembly_count=None, branched_entity_count=None, branched_molecular_weight_maximum=None, branched_molecular_weight_minimum=None, cis_peptide_count=None, deposited_atom_count=None, deposited_hydrogen_atom_count=None, deposited_model_count=None, deposited_modeled_polymer_monomer_count=None, deposited_nonpolymer_entity_instance_count=None, deposited_polymer_entity_instance_count=None, deposited_polymer_monomer_count=None, deposited_solvent_atom_count=None, deposited_unmodeled_polymer_monomer_count=None, diffrn_radiation_wavelength_maximum=None, diffrn_radiation_wavelength_minimum=None, disulfide_bond_count=None, entity_count=None, experimental_method=None, experimental_method_count=None, inter_mol_covalent_bond_count=None, inter_mol_metalic_bond_count=None, molecular_weight=None, na_polymer_entity_types=None, ndb_struct_conf_na_feature_combined=None, nonpolymer_bound_components=None, nonpolymer_entity_count=None, nonpolymer_molecular_weight_maximum=None, nonpolymer_molecular_weight_minimum=None, polymer_composition=None, polymer_entity_count=None, polymer_entity_count_dna=None, polymer_entity_count_rna=None, polymer_entity_count_nucleic_acid=None, polymer_entity_count_nucleic_acid_hybrid=None, polymer_entity_count_protein=None, polymer_entity_taxonomy_count=None, polymer_molecular_weight_maximum=None, polymer_molecular_weight_minimum=None, polymer_monomer_count_maximum=None, polymer_monomer_count_minimum=None, resolution_combined=None, selected_polymer_entity_types=None, software_programs_combined=None, solvent_entity_count=None, structure_determination_methodology=None, structure_determination_methodology_priority=None, diffrn_resolution_high=None):  # noqa: E501
        """RcsbEntryInfo - a model defined in Swagger"""  # noqa: E501
        self._assembly_count = None
        self._branched_entity_count = None
        self._branched_molecular_weight_maximum = None
        self._branched_molecular_weight_minimum = None
        self._cis_peptide_count = None
        self._deposited_atom_count = None
        self._deposited_hydrogen_atom_count = None
        self._deposited_model_count = None
        self._deposited_modeled_polymer_monomer_count = None
        self._deposited_nonpolymer_entity_instance_count = None
        self._deposited_polymer_entity_instance_count = None
        self._deposited_polymer_monomer_count = None
        self._deposited_solvent_atom_count = None
        self._deposited_unmodeled_polymer_monomer_count = None
        self._diffrn_radiation_wavelength_maximum = None
        self._diffrn_radiation_wavelength_minimum = None
        self._disulfide_bond_count = None
        self._entity_count = None
        self._experimental_method = None
        self._experimental_method_count = None
        self._inter_mol_covalent_bond_count = None
        self._inter_mol_metalic_bond_count = None
        self._molecular_weight = None
        self._na_polymer_entity_types = None
        self._ndb_struct_conf_na_feature_combined = None
        self._nonpolymer_bound_components = None
        self._nonpolymer_entity_count = None
        self._nonpolymer_molecular_weight_maximum = None
        self._nonpolymer_molecular_weight_minimum = None
        self._polymer_composition = None
        self._polymer_entity_count = None
        self._polymer_entity_count_dna = None
        self._polymer_entity_count_rna = None
        self._polymer_entity_count_nucleic_acid = None
        self._polymer_entity_count_nucleic_acid_hybrid = None
        self._polymer_entity_count_protein = None
        self._polymer_entity_taxonomy_count = None
        self._polymer_molecular_weight_maximum = None
        self._polymer_molecular_weight_minimum = None
        self._polymer_monomer_count_maximum = None
        self._polymer_monomer_count_minimum = None
        self._resolution_combined = None
        self._selected_polymer_entity_types = None
        self._software_programs_combined = None
        self._solvent_entity_count = None
        self._structure_determination_methodology = None
        self._structure_determination_methodology_priority = None
        self._diffrn_resolution_high = None
        self.discriminator = None
        if assembly_count is not None:
            self.assembly_count = assembly_count
        if branched_entity_count is not None:
            self.branched_entity_count = branched_entity_count
        if branched_molecular_weight_maximum is not None:
            self.branched_molecular_weight_maximum = branched_molecular_weight_maximum
        if branched_molecular_weight_minimum is not None:
            self.branched_molecular_weight_minimum = branched_molecular_weight_minimum
        if cis_peptide_count is not None:
            self.cis_peptide_count = cis_peptide_count
        if deposited_atom_count is not None:
            self.deposited_atom_count = deposited_atom_count
        if deposited_hydrogen_atom_count is not None:
            self.deposited_hydrogen_atom_count = deposited_hydrogen_atom_count
        if deposited_model_count is not None:
            self.deposited_model_count = deposited_model_count
        if deposited_modeled_polymer_monomer_count is not None:
            self.deposited_modeled_polymer_monomer_count = deposited_modeled_polymer_monomer_count
        if deposited_nonpolymer_entity_instance_count is not None:
            self.deposited_nonpolymer_entity_instance_count = deposited_nonpolymer_entity_instance_count
        if deposited_polymer_entity_instance_count is not None:
            self.deposited_polymer_entity_instance_count = deposited_polymer_entity_instance_count
        if deposited_polymer_monomer_count is not None:
            self.deposited_polymer_monomer_count = deposited_polymer_monomer_count
        if deposited_solvent_atom_count is not None:
            self.deposited_solvent_atom_count = deposited_solvent_atom_count
        if deposited_unmodeled_polymer_monomer_count is not None:
            self.deposited_unmodeled_polymer_monomer_count = deposited_unmodeled_polymer_monomer_count
        if diffrn_radiation_wavelength_maximum is not None:
            self.diffrn_radiation_wavelength_maximum = diffrn_radiation_wavelength_maximum
        if diffrn_radiation_wavelength_minimum is not None:
            self.diffrn_radiation_wavelength_minimum = diffrn_radiation_wavelength_minimum
        if disulfide_bond_count is not None:
            self.disulfide_bond_count = disulfide_bond_count
        if entity_count is not None:
            self.entity_count = entity_count
        if experimental_method is not None:
            self.experimental_method = experimental_method
        if experimental_method_count is not None:
            self.experimental_method_count = experimental_method_count
        if inter_mol_covalent_bond_count is not None:
            self.inter_mol_covalent_bond_count = inter_mol_covalent_bond_count
        if inter_mol_metalic_bond_count is not None:
            self.inter_mol_metalic_bond_count = inter_mol_metalic_bond_count
        if molecular_weight is not None:
            self.molecular_weight = molecular_weight
        if na_polymer_entity_types is not None:
            self.na_polymer_entity_types = na_polymer_entity_types
        if ndb_struct_conf_na_feature_combined is not None:
            self.ndb_struct_conf_na_feature_combined = ndb_struct_conf_na_feature_combined
        if nonpolymer_bound_components is not None:
            self.nonpolymer_bound_components = nonpolymer_bound_components
        if nonpolymer_entity_count is not None:
            self.nonpolymer_entity_count = nonpolymer_entity_count
        if nonpolymer_molecular_weight_maximum is not None:
            self.nonpolymer_molecular_weight_maximum = nonpolymer_molecular_weight_maximum
        if nonpolymer_molecular_weight_minimum is not None:
            self.nonpolymer_molecular_weight_minimum = nonpolymer_molecular_weight_minimum
        if polymer_composition is not None:
            self.polymer_composition = polymer_composition
        if polymer_entity_count is not None:
            self.polymer_entity_count = polymer_entity_count
        if polymer_entity_count_dna is not None:
            self.polymer_entity_count_dna = polymer_entity_count_dna
        if polymer_entity_count_rna is not None:
            self.polymer_entity_count_rna = polymer_entity_count_rna
        if polymer_entity_count_nucleic_acid is not None:
            self.polymer_entity_count_nucleic_acid = polymer_entity_count_nucleic_acid
        if polymer_entity_count_nucleic_acid_hybrid is not None:
            self.polymer_entity_count_nucleic_acid_hybrid = polymer_entity_count_nucleic_acid_hybrid
        if polymer_entity_count_protein is not None:
            self.polymer_entity_count_protein = polymer_entity_count_protein
        if polymer_entity_taxonomy_count is not None:
            self.polymer_entity_taxonomy_count = polymer_entity_taxonomy_count
        if polymer_molecular_weight_maximum is not None:
            self.polymer_molecular_weight_maximum = polymer_molecular_weight_maximum
        if polymer_molecular_weight_minimum is not None:
            self.polymer_molecular_weight_minimum = polymer_molecular_weight_minimum
        if polymer_monomer_count_maximum is not None:
            self.polymer_monomer_count_maximum = polymer_monomer_count_maximum
        if polymer_monomer_count_minimum is not None:
            self.polymer_monomer_count_minimum = polymer_monomer_count_minimum
        if resolution_combined is not None:
            self.resolution_combined = resolution_combined
        if selected_polymer_entity_types is not None:
            self.selected_polymer_entity_types = selected_polymer_entity_types
        if software_programs_combined is not None:
            self.software_programs_combined = software_programs_combined
        if solvent_entity_count is not None:
            self.solvent_entity_count = solvent_entity_count
        self.structure_determination_methodology = structure_determination_methodology
        if structure_determination_methodology_priority is not None:
            self.structure_determination_methodology_priority = structure_determination_methodology_priority
        if diffrn_resolution_high is not None:
            self.diffrn_resolution_high = diffrn_resolution_high

    @property
    def assembly_count(self):
        """Gets the assembly_count of this RcsbEntryInfo.  # noqa: E501

        The number of assemblies defined for this entry including the deposited assembly.  # noqa: E501

        :return: The assembly_count of this RcsbEntryInfo.  # noqa: E501
        :rtype: int
        """
        return self._assembly_count

    @assembly_count.setter
    def assembly_count(self, assembly_count):
        """Sets the assembly_count of this RcsbEntryInfo.

        The number of assemblies defined for this entry including the deposited assembly.  # noqa: E501

        :param assembly_count: The assembly_count of this RcsbEntryInfo.  # noqa: E501
        :type: int
        """

        self._assembly_count = assembly_count

    @property
    def branched_entity_count(self):
        """Gets the branched_entity_count of this RcsbEntryInfo.  # noqa: E501

        The number of distinct branched entities in the structure entry.  # noqa: E501

        :return: The branched_entity_count of this RcsbEntryInfo.  # noqa: E501
        :rtype: int
        """
        return self._branched_entity_count

    @branched_entity_count.setter
    def branched_entity_count(self, branched_entity_count):
        """Sets the branched_entity_count of this RcsbEntryInfo.

        The number of distinct branched entities in the structure entry.  # noqa: E501

        :param branched_entity_count: The branched_entity_count of this RcsbEntryInfo.  # noqa: E501
        :type: int
        """

        self._branched_entity_count = branched_entity_count

    @property
    def branched_molecular_weight_maximum(self):
        """Gets the branched_molecular_weight_maximum of this RcsbEntryInfo.  # noqa: E501

        The maximum molecular mass (KDa) of a branched entity in the deposited structure entry.  # noqa: E501

        :return: The branched_molecular_weight_maximum of this RcsbEntryInfo.  # noqa: E501
        :rtype: float
        """
        return self._branched_molecular_weight_maximum

    @branched_molecular_weight_maximum.setter
    def branched_molecular_weight_maximum(self, branched_molecular_weight_maximum):
        """Sets the branched_molecular_weight_maximum of this RcsbEntryInfo.

        The maximum molecular mass (KDa) of a branched entity in the deposited structure entry.  # noqa: E501

        :param branched_molecular_weight_maximum: The branched_molecular_weight_maximum of this RcsbEntryInfo.  # noqa: E501
        :type: float
        """

        self._branched_molecular_weight_maximum = branched_molecular_weight_maximum

    @property
    def branched_molecular_weight_minimum(self):
        """Gets the branched_molecular_weight_minimum of this RcsbEntryInfo.  # noqa: E501

        The minimum molecular mass (KDa) of a branched entity in the deposited structure entry.  # noqa: E501

        :return: The branched_molecular_weight_minimum of this RcsbEntryInfo.  # noqa: E501
        :rtype: float
        """
        return self._branched_molecular_weight_minimum

    @branched_molecular_weight_minimum.setter
    def branched_molecular_weight_minimum(self, branched_molecular_weight_minimum):
        """Sets the branched_molecular_weight_minimum of this RcsbEntryInfo.

        The minimum molecular mass (KDa) of a branched entity in the deposited structure entry.  # noqa: E501

        :param branched_molecular_weight_minimum: The branched_molecular_weight_minimum of this RcsbEntryInfo.  # noqa: E501
        :type: float
        """

        self._branched_molecular_weight_minimum = branched_molecular_weight_minimum

    @property
    def cis_peptide_count(self):
        """Gets the cis_peptide_count of this RcsbEntryInfo.  # noqa: E501

        The number of cis-peptide linkages per deposited structure model.  # noqa: E501

        :return: The cis_peptide_count of this RcsbEntryInfo.  # noqa: E501
        :rtype: int
        """
        return self._cis_peptide_count

    @cis_peptide_count.setter
    def cis_peptide_count(self, cis_peptide_count):
        """Sets the cis_peptide_count of this RcsbEntryInfo.

        The number of cis-peptide linkages per deposited structure model.  # noqa: E501

        :param cis_peptide_count: The cis_peptide_count of this RcsbEntryInfo.  # noqa: E501
        :type: int
        """

        self._cis_peptide_count = cis_peptide_count

    @property
    def deposited_atom_count(self):
        """Gets the deposited_atom_count of this RcsbEntryInfo.  # noqa: E501

        The number of heavy atom coordinates records per deposited structure model.  # noqa: E501

        :return: The deposited_atom_count of this RcsbEntryInfo.  # noqa: E501
        :rtype: int
        """
        return self._deposited_atom_count

    @deposited_atom_count.setter
    def deposited_atom_count(self, deposited_atom_count):
        """Sets the deposited_atom_count of this RcsbEntryInfo.

        The number of heavy atom coordinates records per deposited structure model.  # noqa: E501

        :param deposited_atom_count: The deposited_atom_count of this RcsbEntryInfo.  # noqa: E501
        :type: int
        """

        self._deposited_atom_count = deposited_atom_count

    @property
    def deposited_hydrogen_atom_count(self):
        """Gets the deposited_hydrogen_atom_count of this RcsbEntryInfo.  # noqa: E501

        The number of hydrogen atom coordinates records per deposited structure model.  # noqa: E501

        :return: The deposited_hydrogen_atom_count of this RcsbEntryInfo.  # noqa: E501
        :rtype: int
        """
        return self._deposited_hydrogen_atom_count

    @deposited_hydrogen_atom_count.setter
    def deposited_hydrogen_atom_count(self, deposited_hydrogen_atom_count):
        """Sets the deposited_hydrogen_atom_count of this RcsbEntryInfo.

        The number of hydrogen atom coordinates records per deposited structure model.  # noqa: E501

        :param deposited_hydrogen_atom_count: The deposited_hydrogen_atom_count of this RcsbEntryInfo.  # noqa: E501
        :type: int
        """

        self._deposited_hydrogen_atom_count = deposited_hydrogen_atom_count

    @property
    def deposited_model_count(self):
        """Gets the deposited_model_count of this RcsbEntryInfo.  # noqa: E501

        The number of model structures deposited.  # noqa: E501

        :return: The deposited_model_count of this RcsbEntryInfo.  # noqa: E501
        :rtype: int
        """
        return self._deposited_model_count

    @deposited_model_count.setter
    def deposited_model_count(self, deposited_model_count):
        """Sets the deposited_model_count of this RcsbEntryInfo.

        The number of model structures deposited.  # noqa: E501

        :param deposited_model_count: The deposited_model_count of this RcsbEntryInfo.  # noqa: E501
        :type: int
        """

        self._deposited_model_count = deposited_model_count

    @property
    def deposited_modeled_polymer_monomer_count(self):
        """Gets the deposited_modeled_polymer_monomer_count of this RcsbEntryInfo.  # noqa: E501

        The number of modeled polymer monomers in the deposited coordinate data.  This is the total count of monomers with reported coordinate data for all polymer  entity instances in the deposited coordinate data.  # noqa: E501

        :return: The deposited_modeled_polymer_monomer_count of this RcsbEntryInfo.  # noqa: E501
        :rtype: int
        """
        return self._deposited_modeled_polymer_monomer_count

    @deposited_modeled_polymer_monomer_count.setter
    def deposited_modeled_polymer_monomer_count(self, deposited_modeled_polymer_monomer_count):
        """Sets the deposited_modeled_polymer_monomer_count of this RcsbEntryInfo.

        The number of modeled polymer monomers in the deposited coordinate data.  This is the total count of monomers with reported coordinate data for all polymer  entity instances in the deposited coordinate data.  # noqa: E501

        :param deposited_modeled_polymer_monomer_count: The deposited_modeled_polymer_monomer_count of this RcsbEntryInfo.  # noqa: E501
        :type: int
        """

        self._deposited_modeled_polymer_monomer_count = deposited_modeled_polymer_monomer_count

    @property
    def deposited_nonpolymer_entity_instance_count(self):
        """Gets the deposited_nonpolymer_entity_instance_count of this RcsbEntryInfo.  # noqa: E501

        The number of non-polymer instances in the deposited data set.  This is the total count of non-polymer entity instances reported  per deposited structure model.  # noqa: E501

        :return: The deposited_nonpolymer_entity_instance_count of this RcsbEntryInfo.  # noqa: E501
        :rtype: int
        """
        return self._deposited_nonpolymer_entity_instance_count

    @deposited_nonpolymer_entity_instance_count.setter
    def deposited_nonpolymer_entity_instance_count(self, deposited_nonpolymer_entity_instance_count):
        """Sets the deposited_nonpolymer_entity_instance_count of this RcsbEntryInfo.

        The number of non-polymer instances in the deposited data set.  This is the total count of non-polymer entity instances reported  per deposited structure model.  # noqa: E501

        :param deposited_nonpolymer_entity_instance_count: The deposited_nonpolymer_entity_instance_count of this RcsbEntryInfo.  # noqa: E501
        :type: int
        """

        self._deposited_nonpolymer_entity_instance_count = deposited_nonpolymer_entity_instance_count

    @property
    def deposited_polymer_entity_instance_count(self):
        """Gets the deposited_polymer_entity_instance_count of this RcsbEntryInfo.  # noqa: E501

        The number of polymer instances in the deposited data set.  This is the total count of polymer entity instances reported  per deposited structure model.  # noqa: E501

        :return: The deposited_polymer_entity_instance_count of this RcsbEntryInfo.  # noqa: E501
        :rtype: int
        """
        return self._deposited_polymer_entity_instance_count

    @deposited_polymer_entity_instance_count.setter
    def deposited_polymer_entity_instance_count(self, deposited_polymer_entity_instance_count):
        """Sets the deposited_polymer_entity_instance_count of this RcsbEntryInfo.

        The number of polymer instances in the deposited data set.  This is the total count of polymer entity instances reported  per deposited structure model.  # noqa: E501

        :param deposited_polymer_entity_instance_count: The deposited_polymer_entity_instance_count of this RcsbEntryInfo.  # noqa: E501
        :type: int
        """

        self._deposited_polymer_entity_instance_count = deposited_polymer_entity_instance_count

    @property
    def deposited_polymer_monomer_count(self):
        """Gets the deposited_polymer_monomer_count of this RcsbEntryInfo.  # noqa: E501

        The number of polymer monomers in sample entity instances in the deposited data set.  This is the total count of monomers for all polymer entity instances reported  per deposited structure model.  # noqa: E501

        :return: The deposited_polymer_monomer_count of this RcsbEntryInfo.  # noqa: E501
        :rtype: int
        """
        return self._deposited_polymer_monomer_count

    @deposited_polymer_monomer_count.setter
    def deposited_polymer_monomer_count(self, deposited_polymer_monomer_count):
        """Sets the deposited_polymer_monomer_count of this RcsbEntryInfo.

        The number of polymer monomers in sample entity instances in the deposited data set.  This is the total count of monomers for all polymer entity instances reported  per deposited structure model.  # noqa: E501

        :param deposited_polymer_monomer_count: The deposited_polymer_monomer_count of this RcsbEntryInfo.  # noqa: E501
        :type: int
        """

        self._deposited_polymer_monomer_count = deposited_polymer_monomer_count

    @property
    def deposited_solvent_atom_count(self):
        """Gets the deposited_solvent_atom_count of this RcsbEntryInfo.  # noqa: E501

        The number of heavy solvent atom coordinates records per deposited structure model.  # noqa: E501

        :return: The deposited_solvent_atom_count of this RcsbEntryInfo.  # noqa: E501
        :rtype: int
        """
        return self._deposited_solvent_atom_count

    @deposited_solvent_atom_count.setter
    def deposited_solvent_atom_count(self, deposited_solvent_atom_count):
        """Sets the deposited_solvent_atom_count of this RcsbEntryInfo.

        The number of heavy solvent atom coordinates records per deposited structure model.  # noqa: E501

        :param deposited_solvent_atom_count: The deposited_solvent_atom_count of this RcsbEntryInfo.  # noqa: E501
        :type: int
        """

        self._deposited_solvent_atom_count = deposited_solvent_atom_count

    @property
    def deposited_unmodeled_polymer_monomer_count(self):
        """Gets the deposited_unmodeled_polymer_monomer_count of this RcsbEntryInfo.  # noqa: E501

        The number of unmodeled polymer monomers in the deposited coordinate data. This is  the total count of monomers with unreported coordinate data for all polymer  entity instances per deposited structure model.  # noqa: E501

        :return: The deposited_unmodeled_polymer_monomer_count of this RcsbEntryInfo.  # noqa: E501
        :rtype: int
        """
        return self._deposited_unmodeled_polymer_monomer_count

    @deposited_unmodeled_polymer_monomer_count.setter
    def deposited_unmodeled_polymer_monomer_count(self, deposited_unmodeled_polymer_monomer_count):
        """Sets the deposited_unmodeled_polymer_monomer_count of this RcsbEntryInfo.

        The number of unmodeled polymer monomers in the deposited coordinate data. This is  the total count of monomers with unreported coordinate data for all polymer  entity instances per deposited structure model.  # noqa: E501

        :param deposited_unmodeled_polymer_monomer_count: The deposited_unmodeled_polymer_monomer_count of this RcsbEntryInfo.  # noqa: E501
        :type: int
        """

        self._deposited_unmodeled_polymer_monomer_count = deposited_unmodeled_polymer_monomer_count

    @property
    def diffrn_radiation_wavelength_maximum(self):
        """Gets the diffrn_radiation_wavelength_maximum of this RcsbEntryInfo.  # noqa: E501

        The maximum radiation wavelength in angstroms.  # noqa: E501

        :return: The diffrn_radiation_wavelength_maximum of this RcsbEntryInfo.  # noqa: E501
        :rtype: float
        """
        return self._diffrn_radiation_wavelength_maximum

    @diffrn_radiation_wavelength_maximum.setter
    def diffrn_radiation_wavelength_maximum(self, diffrn_radiation_wavelength_maximum):
        """Sets the diffrn_radiation_wavelength_maximum of this RcsbEntryInfo.

        The maximum radiation wavelength in angstroms.  # noqa: E501

        :param diffrn_radiation_wavelength_maximum: The diffrn_radiation_wavelength_maximum of this RcsbEntryInfo.  # noqa: E501
        :type: float
        """

        self._diffrn_radiation_wavelength_maximum = diffrn_radiation_wavelength_maximum

    @property
    def diffrn_radiation_wavelength_minimum(self):
        """Gets the diffrn_radiation_wavelength_minimum of this RcsbEntryInfo.  # noqa: E501

        The minimum radiation wavelength in angstroms.  # noqa: E501

        :return: The diffrn_radiation_wavelength_minimum of this RcsbEntryInfo.  # noqa: E501
        :rtype: float
        """
        return self._diffrn_radiation_wavelength_minimum

    @diffrn_radiation_wavelength_minimum.setter
    def diffrn_radiation_wavelength_minimum(self, diffrn_radiation_wavelength_minimum):
        """Sets the diffrn_radiation_wavelength_minimum of this RcsbEntryInfo.

        The minimum radiation wavelength in angstroms.  # noqa: E501

        :param diffrn_radiation_wavelength_minimum: The diffrn_radiation_wavelength_minimum of this RcsbEntryInfo.  # noqa: E501
        :type: float
        """

        self._diffrn_radiation_wavelength_minimum = diffrn_radiation_wavelength_minimum

    @property
    def disulfide_bond_count(self):
        """Gets the disulfide_bond_count of this RcsbEntryInfo.  # noqa: E501

        The number of disulfide bonds per deposited structure model.  # noqa: E501

        :return: The disulfide_bond_count of this RcsbEntryInfo.  # noqa: E501
        :rtype: int
        """
        return self._disulfide_bond_count

    @disulfide_bond_count.setter
    def disulfide_bond_count(self, disulfide_bond_count):
        """Sets the disulfide_bond_count of this RcsbEntryInfo.

        The number of disulfide bonds per deposited structure model.  # noqa: E501

        :param disulfide_bond_count: The disulfide_bond_count of this RcsbEntryInfo.  # noqa: E501
        :type: int
        """

        self._disulfide_bond_count = disulfide_bond_count

    @property
    def entity_count(self):
        """Gets the entity_count of this RcsbEntryInfo.  # noqa: E501

        The number of distinct polymer, non-polymer, branched molecular, and solvent entities per deposited structure model.  # noqa: E501

        :return: The entity_count of this RcsbEntryInfo.  # noqa: E501
        :rtype: int
        """
        return self._entity_count

    @entity_count.setter
    def entity_count(self, entity_count):
        """Sets the entity_count of this RcsbEntryInfo.

        The number of distinct polymer, non-polymer, branched molecular, and solvent entities per deposited structure model.  # noqa: E501

        :param entity_count: The entity_count of this RcsbEntryInfo.  # noqa: E501
        :type: int
        """

        self._entity_count = entity_count

    @property
    def experimental_method(self):
        """Gets the experimental_method of this RcsbEntryInfo.  # noqa: E501

        The category of experimental method(s) used to determine the structure entry.  # noqa: E501

        :return: The experimental_method of this RcsbEntryInfo.  # noqa: E501
        :rtype: str
        """
        return self._experimental_method

    @experimental_method.setter
    def experimental_method(self, experimental_method):
        """Sets the experimental_method of this RcsbEntryInfo.

        The category of experimental method(s) used to determine the structure entry.  # noqa: E501

        :param experimental_method: The experimental_method of this RcsbEntryInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["EM", "Multiple methods", "NMR", "Neutron", "Other", "X-ray"]  # noqa: E501
        if experimental_method not in allowed_values:
            raise ValueError(
                "Invalid value for `experimental_method` ({0}), must be one of {1}"  # noqa: E501
                .format(experimental_method, allowed_values)
            )

        self._experimental_method = experimental_method

    @property
    def experimental_method_count(self):
        """Gets the experimental_method_count of this RcsbEntryInfo.  # noqa: E501

        The number of experimental methods contributing data to the structure determination.  # noqa: E501

        :return: The experimental_method_count of this RcsbEntryInfo.  # noqa: E501
        :rtype: int
        """
        return self._experimental_method_count

    @experimental_method_count.setter
    def experimental_method_count(self, experimental_method_count):
        """Sets the experimental_method_count of this RcsbEntryInfo.

        The number of experimental methods contributing data to the structure determination.  # noqa: E501

        :param experimental_method_count: The experimental_method_count of this RcsbEntryInfo.  # noqa: E501
        :type: int
        """

        self._experimental_method_count = experimental_method_count

    @property
    def inter_mol_covalent_bond_count(self):
        """Gets the inter_mol_covalent_bond_count of this RcsbEntryInfo.  # noqa: E501

        The number of intermolecular covalent bonds.  # noqa: E501

        :return: The inter_mol_covalent_bond_count of this RcsbEntryInfo.  # noqa: E501
        :rtype: int
        """
        return self._inter_mol_covalent_bond_count

    @inter_mol_covalent_bond_count.setter
    def inter_mol_covalent_bond_count(self, inter_mol_covalent_bond_count):
        """Sets the inter_mol_covalent_bond_count of this RcsbEntryInfo.

        The number of intermolecular covalent bonds.  # noqa: E501

        :param inter_mol_covalent_bond_count: The inter_mol_covalent_bond_count of this RcsbEntryInfo.  # noqa: E501
        :type: int
        """

        self._inter_mol_covalent_bond_count = inter_mol_covalent_bond_count

    @property
    def inter_mol_metalic_bond_count(self):
        """Gets the inter_mol_metalic_bond_count of this RcsbEntryInfo.  # noqa: E501

        The number of intermolecular metalic bonds.  # noqa: E501

        :return: The inter_mol_metalic_bond_count of this RcsbEntryInfo.  # noqa: E501
        :rtype: int
        """
        return self._inter_mol_metalic_bond_count

    @inter_mol_metalic_bond_count.setter
    def inter_mol_metalic_bond_count(self, inter_mol_metalic_bond_count):
        """Sets the inter_mol_metalic_bond_count of this RcsbEntryInfo.

        The number of intermolecular metalic bonds.  # noqa: E501

        :param inter_mol_metalic_bond_count: The inter_mol_metalic_bond_count of this RcsbEntryInfo.  # noqa: E501
        :type: int
        """

        self._inter_mol_metalic_bond_count = inter_mol_metalic_bond_count

    @property
    def molecular_weight(self):
        """Gets the molecular_weight of this RcsbEntryInfo.  # noqa: E501

        The molecular mass (KDa) of polymer and non-polymer entities (exclusive of solvent) in the deposited structure entry.  # noqa: E501

        :return: The molecular_weight of this RcsbEntryInfo.  # noqa: E501
        :rtype: float
        """
        return self._molecular_weight

    @molecular_weight.setter
    def molecular_weight(self, molecular_weight):
        """Sets the molecular_weight of this RcsbEntryInfo.

        The molecular mass (KDa) of polymer and non-polymer entities (exclusive of solvent) in the deposited structure entry.  # noqa: E501

        :param molecular_weight: The molecular_weight of this RcsbEntryInfo.  # noqa: E501
        :type: float
        """

        self._molecular_weight = molecular_weight

    @property
    def na_polymer_entity_types(self):
        """Gets the na_polymer_entity_types of this RcsbEntryInfo.  # noqa: E501

        Nucleic acid polymer entity type categories describing the entry.  # noqa: E501

        :return: The na_polymer_entity_types of this RcsbEntryInfo.  # noqa: E501
        :rtype: str
        """
        return self._na_polymer_entity_types

    @na_polymer_entity_types.setter
    def na_polymer_entity_types(self, na_polymer_entity_types):
        """Sets the na_polymer_entity_types of this RcsbEntryInfo.

        Nucleic acid polymer entity type categories describing the entry.  # noqa: E501

        :param na_polymer_entity_types: The na_polymer_entity_types of this RcsbEntryInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["DNA (only)", "DNA/RNA (only)", "NA-hybrid (only)", "Other", "RNA (only)"]  # noqa: E501
        if na_polymer_entity_types not in allowed_values:
            raise ValueError(
                "Invalid value for `na_polymer_entity_types` ({0}), must be one of {1}"  # noqa: E501
                .format(na_polymer_entity_types, allowed_values)
            )

        self._na_polymer_entity_types = na_polymer_entity_types

    @property
    def ndb_struct_conf_na_feature_combined(self):
        """Gets the ndb_struct_conf_na_feature_combined of this RcsbEntryInfo.  # noqa: E501

        This data item identifies secondary structure  features of nucleic acids in the entry.  # noqa: E501

        :return: The ndb_struct_conf_na_feature_combined of this RcsbEntryInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._ndb_struct_conf_na_feature_combined

    @ndb_struct_conf_na_feature_combined.setter
    def ndb_struct_conf_na_feature_combined(self, ndb_struct_conf_na_feature_combined):
        """Sets the ndb_struct_conf_na_feature_combined of this RcsbEntryInfo.

        This data item identifies secondary structure  features of nucleic acids in the entry.  # noqa: E501

        :param ndb_struct_conf_na_feature_combined: The ndb_struct_conf_na_feature_combined of this RcsbEntryInfo.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["a-form double helix", "b-form double helix", "bulge loop", "double helix", "four-way junction", "hairpin loop", "internal loop", "mismatched base pair", "other right-handed double helix", "parallel strands", "quadruple helix", "tetraloop", "three-way junction", "triple helix", "two-way junction", "z-form double helix"]  # noqa: E501
        if not set(ndb_struct_conf_na_feature_combined).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `ndb_struct_conf_na_feature_combined` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(ndb_struct_conf_na_feature_combined) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._ndb_struct_conf_na_feature_combined = ndb_struct_conf_na_feature_combined

    @property
    def nonpolymer_bound_components(self):
        """Gets the nonpolymer_bound_components of this RcsbEntryInfo.  # noqa: E501

        Bound nonpolymer components in this entry.  # noqa: E501

        :return: The nonpolymer_bound_components of this RcsbEntryInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._nonpolymer_bound_components

    @nonpolymer_bound_components.setter
    def nonpolymer_bound_components(self, nonpolymer_bound_components):
        """Sets the nonpolymer_bound_components of this RcsbEntryInfo.

        Bound nonpolymer components in this entry.  # noqa: E501

        :param nonpolymer_bound_components: The nonpolymer_bound_components of this RcsbEntryInfo.  # noqa: E501
        :type: list[str]
        """

        self._nonpolymer_bound_components = nonpolymer_bound_components

    @property
    def nonpolymer_entity_count(self):
        """Gets the nonpolymer_entity_count of this RcsbEntryInfo.  # noqa: E501

        The number of distinct non-polymer entities in the structure entry exclusive of solvent.  # noqa: E501

        :return: The nonpolymer_entity_count of this RcsbEntryInfo.  # noqa: E501
        :rtype: int
        """
        return self._nonpolymer_entity_count

    @nonpolymer_entity_count.setter
    def nonpolymer_entity_count(self, nonpolymer_entity_count):
        """Sets the nonpolymer_entity_count of this RcsbEntryInfo.

        The number of distinct non-polymer entities in the structure entry exclusive of solvent.  # noqa: E501

        :param nonpolymer_entity_count: The nonpolymer_entity_count of this RcsbEntryInfo.  # noqa: E501
        :type: int
        """

        self._nonpolymer_entity_count = nonpolymer_entity_count

    @property
    def nonpolymer_molecular_weight_maximum(self):
        """Gets the nonpolymer_molecular_weight_maximum of this RcsbEntryInfo.  # noqa: E501

        The maximum molecular mass (KDa) of a non-polymer entity in the deposited structure entry.  # noqa: E501

        :return: The nonpolymer_molecular_weight_maximum of this RcsbEntryInfo.  # noqa: E501
        :rtype: float
        """
        return self._nonpolymer_molecular_weight_maximum

    @nonpolymer_molecular_weight_maximum.setter
    def nonpolymer_molecular_weight_maximum(self, nonpolymer_molecular_weight_maximum):
        """Sets the nonpolymer_molecular_weight_maximum of this RcsbEntryInfo.

        The maximum molecular mass (KDa) of a non-polymer entity in the deposited structure entry.  # noqa: E501

        :param nonpolymer_molecular_weight_maximum: The nonpolymer_molecular_weight_maximum of this RcsbEntryInfo.  # noqa: E501
        :type: float
        """

        self._nonpolymer_molecular_weight_maximum = nonpolymer_molecular_weight_maximum

    @property
    def nonpolymer_molecular_weight_minimum(self):
        """Gets the nonpolymer_molecular_weight_minimum of this RcsbEntryInfo.  # noqa: E501

        The minimum molecular mass (KDa) of a non-polymer entity in the deposited structure entry.  # noqa: E501

        :return: The nonpolymer_molecular_weight_minimum of this RcsbEntryInfo.  # noqa: E501
        :rtype: float
        """
        return self._nonpolymer_molecular_weight_minimum

    @nonpolymer_molecular_weight_minimum.setter
    def nonpolymer_molecular_weight_minimum(self, nonpolymer_molecular_weight_minimum):
        """Sets the nonpolymer_molecular_weight_minimum of this RcsbEntryInfo.

        The minimum molecular mass (KDa) of a non-polymer entity in the deposited structure entry.  # noqa: E501

        :param nonpolymer_molecular_weight_minimum: The nonpolymer_molecular_weight_minimum of this RcsbEntryInfo.  # noqa: E501
        :type: float
        """

        self._nonpolymer_molecular_weight_minimum = nonpolymer_molecular_weight_minimum

    @property
    def polymer_composition(self):
        """Gets the polymer_composition of this RcsbEntryInfo.  # noqa: E501

        Categories describing the polymer entity composition for the entry.  # noqa: E501

        :return: The polymer_composition of this RcsbEntryInfo.  # noqa: E501
        :rtype: str
        """
        return self._polymer_composition

    @polymer_composition.setter
    def polymer_composition(self, polymer_composition):
        """Sets the polymer_composition of this RcsbEntryInfo.

        Categories describing the polymer entity composition for the entry.  # noqa: E501

        :param polymer_composition: The polymer_composition of this RcsbEntryInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["DNA", "DNA/RNA", "NA-hybrid", "NA/oligosaccharide", "RNA", "heteromeric protein", "homomeric protein", "oligosaccharide", "other", "other type composition", "other type pair", "protein/NA", "protein/NA/oligosaccharide", "protein/oligosaccharide"]  # noqa: E501
        if polymer_composition not in allowed_values:
            raise ValueError(
                "Invalid value for `polymer_composition` ({0}), must be one of {1}"  # noqa: E501
                .format(polymer_composition, allowed_values)
            )

        self._polymer_composition = polymer_composition

    @property
    def polymer_entity_count(self):
        """Gets the polymer_entity_count of this RcsbEntryInfo.  # noqa: E501

        The number of distinct polymer entities in the structure entry.  # noqa: E501

        :return: The polymer_entity_count of this RcsbEntryInfo.  # noqa: E501
        :rtype: int
        """
        return self._polymer_entity_count

    @polymer_entity_count.setter
    def polymer_entity_count(self, polymer_entity_count):
        """Sets the polymer_entity_count of this RcsbEntryInfo.

        The number of distinct polymer entities in the structure entry.  # noqa: E501

        :param polymer_entity_count: The polymer_entity_count of this RcsbEntryInfo.  # noqa: E501
        :type: int
        """

        self._polymer_entity_count = polymer_entity_count

    @property
    def polymer_entity_count_dna(self):
        """Gets the polymer_entity_count_dna of this RcsbEntryInfo.  # noqa: E501

        The number of distinct DNA polymer entities.  # noqa: E501

        :return: The polymer_entity_count_dna of this RcsbEntryInfo.  # noqa: E501
        :rtype: int
        """
        return self._polymer_entity_count_dna

    @polymer_entity_count_dna.setter
    def polymer_entity_count_dna(self, polymer_entity_count_dna):
        """Sets the polymer_entity_count_dna of this RcsbEntryInfo.

        The number of distinct DNA polymer entities.  # noqa: E501

        :param polymer_entity_count_dna: The polymer_entity_count_dna of this RcsbEntryInfo.  # noqa: E501
        :type: int
        """

        self._polymer_entity_count_dna = polymer_entity_count_dna

    @property
    def polymer_entity_count_rna(self):
        """Gets the polymer_entity_count_rna of this RcsbEntryInfo.  # noqa: E501

        The number of distinct RNA polymer entities.  # noqa: E501

        :return: The polymer_entity_count_rna of this RcsbEntryInfo.  # noqa: E501
        :rtype: int
        """
        return self._polymer_entity_count_rna

    @polymer_entity_count_rna.setter
    def polymer_entity_count_rna(self, polymer_entity_count_rna):
        """Sets the polymer_entity_count_rna of this RcsbEntryInfo.

        The number of distinct RNA polymer entities.  # noqa: E501

        :param polymer_entity_count_rna: The polymer_entity_count_rna of this RcsbEntryInfo.  # noqa: E501
        :type: int
        """

        self._polymer_entity_count_rna = polymer_entity_count_rna

    @property
    def polymer_entity_count_nucleic_acid(self):
        """Gets the polymer_entity_count_nucleic_acid of this RcsbEntryInfo.  # noqa: E501

        The number of distinct nucleic acid polymer entities (DNA or RNA).  # noqa: E501

        :return: The polymer_entity_count_nucleic_acid of this RcsbEntryInfo.  # noqa: E501
        :rtype: int
        """
        return self._polymer_entity_count_nucleic_acid

    @polymer_entity_count_nucleic_acid.setter
    def polymer_entity_count_nucleic_acid(self, polymer_entity_count_nucleic_acid):
        """Sets the polymer_entity_count_nucleic_acid of this RcsbEntryInfo.

        The number of distinct nucleic acid polymer entities (DNA or RNA).  # noqa: E501

        :param polymer_entity_count_nucleic_acid: The polymer_entity_count_nucleic_acid of this RcsbEntryInfo.  # noqa: E501
        :type: int
        """

        self._polymer_entity_count_nucleic_acid = polymer_entity_count_nucleic_acid

    @property
    def polymer_entity_count_nucleic_acid_hybrid(self):
        """Gets the polymer_entity_count_nucleic_acid_hybrid of this RcsbEntryInfo.  # noqa: E501

        The number of distinct hybrid nucleic acid polymer entities.  # noqa: E501

        :return: The polymer_entity_count_nucleic_acid_hybrid of this RcsbEntryInfo.  # noqa: E501
        :rtype: int
        """
        return self._polymer_entity_count_nucleic_acid_hybrid

    @polymer_entity_count_nucleic_acid_hybrid.setter
    def polymer_entity_count_nucleic_acid_hybrid(self, polymer_entity_count_nucleic_acid_hybrid):
        """Sets the polymer_entity_count_nucleic_acid_hybrid of this RcsbEntryInfo.

        The number of distinct hybrid nucleic acid polymer entities.  # noqa: E501

        :param polymer_entity_count_nucleic_acid_hybrid: The polymer_entity_count_nucleic_acid_hybrid of this RcsbEntryInfo.  # noqa: E501
        :type: int
        """

        self._polymer_entity_count_nucleic_acid_hybrid = polymer_entity_count_nucleic_acid_hybrid

    @property
    def polymer_entity_count_protein(self):
        """Gets the polymer_entity_count_protein of this RcsbEntryInfo.  # noqa: E501

        The number of distinct protein polymer entities.  # noqa: E501

        :return: The polymer_entity_count_protein of this RcsbEntryInfo.  # noqa: E501
        :rtype: int
        """
        return self._polymer_entity_count_protein

    @polymer_entity_count_protein.setter
    def polymer_entity_count_protein(self, polymer_entity_count_protein):
        """Sets the polymer_entity_count_protein of this RcsbEntryInfo.

        The number of distinct protein polymer entities.  # noqa: E501

        :param polymer_entity_count_protein: The polymer_entity_count_protein of this RcsbEntryInfo.  # noqa: E501
        :type: int
        """

        self._polymer_entity_count_protein = polymer_entity_count_protein

    @property
    def polymer_entity_taxonomy_count(self):
        """Gets the polymer_entity_taxonomy_count of this RcsbEntryInfo.  # noqa: E501

        The number of distinct taxonomies represented among the polymer entities in the entry.  # noqa: E501

        :return: The polymer_entity_taxonomy_count of this RcsbEntryInfo.  # noqa: E501
        :rtype: int
        """
        return self._polymer_entity_taxonomy_count

    @polymer_entity_taxonomy_count.setter
    def polymer_entity_taxonomy_count(self, polymer_entity_taxonomy_count):
        """Sets the polymer_entity_taxonomy_count of this RcsbEntryInfo.

        The number of distinct taxonomies represented among the polymer entities in the entry.  # noqa: E501

        :param polymer_entity_taxonomy_count: The polymer_entity_taxonomy_count of this RcsbEntryInfo.  # noqa: E501
        :type: int
        """

        self._polymer_entity_taxonomy_count = polymer_entity_taxonomy_count

    @property
    def polymer_molecular_weight_maximum(self):
        """Gets the polymer_molecular_weight_maximum of this RcsbEntryInfo.  # noqa: E501

        The maximum molecular mass (KDa) of a polymer entity in the deposited structure entry.  # noqa: E501

        :return: The polymer_molecular_weight_maximum of this RcsbEntryInfo.  # noqa: E501
        :rtype: float
        """
        return self._polymer_molecular_weight_maximum

    @polymer_molecular_weight_maximum.setter
    def polymer_molecular_weight_maximum(self, polymer_molecular_weight_maximum):
        """Sets the polymer_molecular_weight_maximum of this RcsbEntryInfo.

        The maximum molecular mass (KDa) of a polymer entity in the deposited structure entry.  # noqa: E501

        :param polymer_molecular_weight_maximum: The polymer_molecular_weight_maximum of this RcsbEntryInfo.  # noqa: E501
        :type: float
        """

        self._polymer_molecular_weight_maximum = polymer_molecular_weight_maximum

    @property
    def polymer_molecular_weight_minimum(self):
        """Gets the polymer_molecular_weight_minimum of this RcsbEntryInfo.  # noqa: E501

        The minimum molecular mass (KDa) of a polymer entity in the deposited structure entry.  # noqa: E501

        :return: The polymer_molecular_weight_minimum of this RcsbEntryInfo.  # noqa: E501
        :rtype: float
        """
        return self._polymer_molecular_weight_minimum

    @polymer_molecular_weight_minimum.setter
    def polymer_molecular_weight_minimum(self, polymer_molecular_weight_minimum):
        """Sets the polymer_molecular_weight_minimum of this RcsbEntryInfo.

        The minimum molecular mass (KDa) of a polymer entity in the deposited structure entry.  # noqa: E501

        :param polymer_molecular_weight_minimum: The polymer_molecular_weight_minimum of this RcsbEntryInfo.  # noqa: E501
        :type: float
        """

        self._polymer_molecular_weight_minimum = polymer_molecular_weight_minimum

    @property
    def polymer_monomer_count_maximum(self):
        """Gets the polymer_monomer_count_maximum of this RcsbEntryInfo.  # noqa: E501

        The maximum monomer count of a polymer entity per deposited structure model.  # noqa: E501

        :return: The polymer_monomer_count_maximum of this RcsbEntryInfo.  # noqa: E501
        :rtype: int
        """
        return self._polymer_monomer_count_maximum

    @polymer_monomer_count_maximum.setter
    def polymer_monomer_count_maximum(self, polymer_monomer_count_maximum):
        """Sets the polymer_monomer_count_maximum of this RcsbEntryInfo.

        The maximum monomer count of a polymer entity per deposited structure model.  # noqa: E501

        :param polymer_monomer_count_maximum: The polymer_monomer_count_maximum of this RcsbEntryInfo.  # noqa: E501
        :type: int
        """

        self._polymer_monomer_count_maximum = polymer_monomer_count_maximum

    @property
    def polymer_monomer_count_minimum(self):
        """Gets the polymer_monomer_count_minimum of this RcsbEntryInfo.  # noqa: E501

        The minimum monomer count of a polymer entity per deposited structure model.  # noqa: E501

        :return: The polymer_monomer_count_minimum of this RcsbEntryInfo.  # noqa: E501
        :rtype: int
        """
        return self._polymer_monomer_count_minimum

    @polymer_monomer_count_minimum.setter
    def polymer_monomer_count_minimum(self, polymer_monomer_count_minimum):
        """Sets the polymer_monomer_count_minimum of this RcsbEntryInfo.

        The minimum monomer count of a polymer entity per deposited structure model.  # noqa: E501

        :param polymer_monomer_count_minimum: The polymer_monomer_count_minimum of this RcsbEntryInfo.  # noqa: E501
        :type: int
        """

        self._polymer_monomer_count_minimum = polymer_monomer_count_minimum

    @property
    def resolution_combined(self):
        """Gets the resolution_combined of this RcsbEntryInfo.  # noqa: E501

        Combined estimates of experimental resolution contributing to the refined structural model.  Resolution reported in \"refine.ls_d_res_high\" is used for X-RAY DIFFRACTION, FIBER DIFFRACTION,   POWDER DIFFRACTION, ELECTRON CRYSTALLOGRAPHY, and NEUTRON DIFFRACTION as identified in  \"refine.pdbx_refine_id\".   Resolution reported in \"em_3d_reconstruction.resolution\" is used for ELECTRON MICROSCOPY.   The best value corresponding to \"em_3d_reconstruction.resolution_method\" == \"FSC 0.143 CUT-OFF\"   is used, if available. If not, the best \"em_3d_reconstruction.resolution\" value is used.   For structures that are not obtained from diffraction-based methods, the resolution values in   \"refine.ls_d_res_high\" are ignored.  Multiple values are reported only if multiple methods are used in the structure determination.  # noqa: E501

        :return: The resolution_combined of this RcsbEntryInfo.  # noqa: E501
        :rtype: list[float]
        """
        return self._resolution_combined

    @resolution_combined.setter
    def resolution_combined(self, resolution_combined):
        """Sets the resolution_combined of this RcsbEntryInfo.

        Combined estimates of experimental resolution contributing to the refined structural model.  Resolution reported in \"refine.ls_d_res_high\" is used for X-RAY DIFFRACTION, FIBER DIFFRACTION,   POWDER DIFFRACTION, ELECTRON CRYSTALLOGRAPHY, and NEUTRON DIFFRACTION as identified in  \"refine.pdbx_refine_id\".   Resolution reported in \"em_3d_reconstruction.resolution\" is used for ELECTRON MICROSCOPY.   The best value corresponding to \"em_3d_reconstruction.resolution_method\" == \"FSC 0.143 CUT-OFF\"   is used, if available. If not, the best \"em_3d_reconstruction.resolution\" value is used.   For structures that are not obtained from diffraction-based methods, the resolution values in   \"refine.ls_d_res_high\" are ignored.  Multiple values are reported only if multiple methods are used in the structure determination.  # noqa: E501

        :param resolution_combined: The resolution_combined of this RcsbEntryInfo.  # noqa: E501
        :type: list[float]
        """

        self._resolution_combined = resolution_combined

    @property
    def selected_polymer_entity_types(self):
        """Gets the selected_polymer_entity_types of this RcsbEntryInfo.  # noqa: E501

        Selected polymer entity type categories describing the entry.  # noqa: E501

        :return: The selected_polymer_entity_types of this RcsbEntryInfo.  # noqa: E501
        :rtype: str
        """
        return self._selected_polymer_entity_types

    @selected_polymer_entity_types.setter
    def selected_polymer_entity_types(self, selected_polymer_entity_types):
        """Sets the selected_polymer_entity_types of this RcsbEntryInfo.

        Selected polymer entity type categories describing the entry.  # noqa: E501

        :param selected_polymer_entity_types: The selected_polymer_entity_types of this RcsbEntryInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["Nucleic acid (only)", "Oligosaccharide (only)", "Other", "Protein (only)", "Protein/NA", "Protein/Oligosaccharide"]  # noqa: E501
        if selected_polymer_entity_types not in allowed_values:
            raise ValueError(
                "Invalid value for `selected_polymer_entity_types` ({0}), must be one of {1}"  # noqa: E501
                .format(selected_polymer_entity_types, allowed_values)
            )

        self._selected_polymer_entity_types = selected_polymer_entity_types

    @property
    def software_programs_combined(self):
        """Gets the software_programs_combined of this RcsbEntryInfo.  # noqa: E501

        Combined list of software programs names reported in connection with the production of this entry.  # noqa: E501

        :return: The software_programs_combined of this RcsbEntryInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._software_programs_combined

    @software_programs_combined.setter
    def software_programs_combined(self, software_programs_combined):
        """Sets the software_programs_combined of this RcsbEntryInfo.

        Combined list of software programs names reported in connection with the production of this entry.  # noqa: E501

        :param software_programs_combined: The software_programs_combined of this RcsbEntryInfo.  # noqa: E501
        :type: list[str]
        """

        self._software_programs_combined = software_programs_combined

    @property
    def solvent_entity_count(self):
        """Gets the solvent_entity_count of this RcsbEntryInfo.  # noqa: E501

        The number of distinct solvent entities per deposited structure model.  # noqa: E501

        :return: The solvent_entity_count of this RcsbEntryInfo.  # noqa: E501
        :rtype: int
        """
        return self._solvent_entity_count

    @solvent_entity_count.setter
    def solvent_entity_count(self, solvent_entity_count):
        """Sets the solvent_entity_count of this RcsbEntryInfo.

        The number of distinct solvent entities per deposited structure model.  # noqa: E501

        :param solvent_entity_count: The solvent_entity_count of this RcsbEntryInfo.  # noqa: E501
        :type: int
        """

        self._solvent_entity_count = solvent_entity_count

    @property
    def structure_determination_methodology(self):
        """Gets the structure_determination_methodology of this RcsbEntryInfo.  # noqa: E501

        Indicates if the structure was determined using experimental or computational methods.  # noqa: E501

        :return: The structure_determination_methodology of this RcsbEntryInfo.  # noqa: E501
        :rtype: str
        """
        return self._structure_determination_methodology

    @structure_determination_methodology.setter
    def structure_determination_methodology(self, structure_determination_methodology):
        """Sets the structure_determination_methodology of this RcsbEntryInfo.

        Indicates if the structure was determined using experimental or computational methods.  # noqa: E501

        :param structure_determination_methodology: The structure_determination_methodology of this RcsbEntryInfo.  # noqa: E501
        :type: str
        """
        if structure_determination_methodology is None:
            raise ValueError("Invalid value for `structure_determination_methodology`, must not be `None`")  # noqa: E501
        allowed_values = ["computational", "experimental"]  # noqa: E501
        if structure_determination_methodology not in allowed_values:
            raise ValueError(
                "Invalid value for `structure_determination_methodology` ({0}), must be one of {1}"  # noqa: E501
                .format(structure_determination_methodology, allowed_values)
            )

        self._structure_determination_methodology = structure_determination_methodology

    @property
    def structure_determination_methodology_priority(self):
        """Gets the structure_determination_methodology_priority of this RcsbEntryInfo.  # noqa: E501

        Indicates the priority of the value in _rcsb_entry_info.structure_determination_methodology.  The lower the number the higher the priority.  Priority values for \"experimental\" structures is currently set to 10 and  the values for \"computational\" structures is set to 100.  # noqa: E501

        :return: The structure_determination_methodology_priority of this RcsbEntryInfo.  # noqa: E501
        :rtype: int
        """
        return self._structure_determination_methodology_priority

    @structure_determination_methodology_priority.setter
    def structure_determination_methodology_priority(self, structure_determination_methodology_priority):
        """Sets the structure_determination_methodology_priority of this RcsbEntryInfo.

        Indicates the priority of the value in _rcsb_entry_info.structure_determination_methodology.  The lower the number the higher the priority.  Priority values for \"experimental\" structures is currently set to 10 and  the values for \"computational\" structures is set to 100.  # noqa: E501

        :param structure_determination_methodology_priority: The structure_determination_methodology_priority of this RcsbEntryInfo.  # noqa: E501
        :type: int
        """

        self._structure_determination_methodology_priority = structure_determination_methodology_priority

    @property
    def diffrn_resolution_high(self):
        """Gets the diffrn_resolution_high of this RcsbEntryInfo.  # noqa: E501


        :return: The diffrn_resolution_high of this RcsbEntryInfo.  # noqa: E501
        :rtype: RcsbEntryInfoDiffrnResolutionHigh
        """
        return self._diffrn_resolution_high

    @diffrn_resolution_high.setter
    def diffrn_resolution_high(self, diffrn_resolution_high):
        """Sets the diffrn_resolution_high of this RcsbEntryInfo.


        :param diffrn_resolution_high: The diffrn_resolution_high of this RcsbEntryInfo.  # noqa: E501
        :type: RcsbEntryInfoDiffrnResolutionHigh
        """

        self._diffrn_resolution_high = diffrn_resolution_high

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RcsbEntryInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RcsbEntryInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
