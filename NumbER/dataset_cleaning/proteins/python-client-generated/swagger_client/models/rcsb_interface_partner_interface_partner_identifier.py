# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RcsbInterfacePartnerInterfacePartnerIdentifier(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_id': 'str',
        'asym_id': 'str'
    }

    attribute_map = {
        'entity_id': 'entity_id',
        'asym_id': 'asym_id'
    }

    def __init__(self, entity_id=None, asym_id=None):  # noqa: E501
        """RcsbInterfacePartnerInterfacePartnerIdentifier - a model defined in Swagger"""  # noqa: E501
        self._entity_id = None
        self._asym_id = None
        self.discriminator = None
        self.entity_id = entity_id
        self.asym_id = asym_id

    @property
    def entity_id(self):
        """Gets the entity_id of this RcsbInterfacePartnerInterfacePartnerIdentifier.  # noqa: E501

        Polymer entity identifier for the container.  # noqa: E501

        :return: The entity_id of this RcsbInterfacePartnerInterfacePartnerIdentifier.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this RcsbInterfacePartnerInterfacePartnerIdentifier.

        Polymer entity identifier for the container.  # noqa: E501

        :param entity_id: The entity_id of this RcsbInterfacePartnerInterfacePartnerIdentifier.  # noqa: E501
        :type: str
        """
        if entity_id is None:
            raise ValueError("Invalid value for `entity_id`, must not be `None`")  # noqa: E501

        self._entity_id = entity_id

    @property
    def asym_id(self):
        """Gets the asym_id of this RcsbInterfacePartnerInterfacePartnerIdentifier.  # noqa: E501

        Instance identifier for this container.  # noqa: E501

        :return: The asym_id of this RcsbInterfacePartnerInterfacePartnerIdentifier.  # noqa: E501
        :rtype: str
        """
        return self._asym_id

    @asym_id.setter
    def asym_id(self, asym_id):
        """Sets the asym_id of this RcsbInterfacePartnerInterfacePartnerIdentifier.

        Instance identifier for this container.  # noqa: E501

        :param asym_id: The asym_id of this RcsbInterfacePartnerInterfacePartnerIdentifier.  # noqa: E501
        :type: str
        """
        if asym_id is None:
            raise ValueError("Invalid value for `asym_id`, must not be `None`")  # noqa: E501

        self._asym_id = asym_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RcsbInterfacePartnerInterfacePartnerIdentifier, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RcsbInterfacePartnerInterfacePartnerIdentifier):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
