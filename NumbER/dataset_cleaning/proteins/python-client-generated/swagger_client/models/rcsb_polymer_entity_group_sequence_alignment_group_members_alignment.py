# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RcsbPolymerEntityGroupSequenceAlignmentGroupMembersAlignment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'member_id': 'str',
        'scores': 'GroupMembersAlignmentScores',
        'aligned_regions': 'list[list[int]]'
    }

    attribute_map = {
        'member_id': 'member_id',
        'scores': 'scores',
        'aligned_regions': 'aligned_regions'
    }

    def __init__(self, member_id=None, scores=None, aligned_regions=None):  # noqa: E501
        """RcsbPolymerEntityGroupSequenceAlignmentGroupMembersAlignment - a model defined in Swagger"""  # noqa: E501
        self._member_id = None
        self._scores = None
        self._aligned_regions = None
        self.discriminator = None
        self.member_id = member_id
        self.scores = scores
        self.aligned_regions = aligned_regions

    @property
    def member_id(self):
        """Gets the member_id of this RcsbPolymerEntityGroupSequenceAlignmentGroupMembersAlignment.  # noqa: E501


        :return: The member_id of this RcsbPolymerEntityGroupSequenceAlignmentGroupMembersAlignment.  # noqa: E501
        :rtype: str
        """
        return self._member_id

    @member_id.setter
    def member_id(self, member_id):
        """Sets the member_id of this RcsbPolymerEntityGroupSequenceAlignmentGroupMembersAlignment.


        :param member_id: The member_id of this RcsbPolymerEntityGroupSequenceAlignmentGroupMembersAlignment.  # noqa: E501
        :type: str
        """
        if member_id is None:
            raise ValueError("Invalid value for `member_id`, must not be `None`")  # noqa: E501

        self._member_id = member_id

    @property
    def scores(self):
        """Gets the scores of this RcsbPolymerEntityGroupSequenceAlignmentGroupMembersAlignment.  # noqa: E501


        :return: The scores of this RcsbPolymerEntityGroupSequenceAlignmentGroupMembersAlignment.  # noqa: E501
        :rtype: GroupMembersAlignmentScores
        """
        return self._scores

    @scores.setter
    def scores(self, scores):
        """Sets the scores of this RcsbPolymerEntityGroupSequenceAlignmentGroupMembersAlignment.


        :param scores: The scores of this RcsbPolymerEntityGroupSequenceAlignmentGroupMembersAlignment.  # noqa: E501
        :type: GroupMembersAlignmentScores
        """
        if scores is None:
            raise ValueError("Invalid value for `scores`, must not be `None`")  # noqa: E501

        self._scores = scores

    @property
    def aligned_regions(self):
        """Gets the aligned_regions of this RcsbPolymerEntityGroupSequenceAlignmentGroupMembersAlignment.  # noqa: E501

        Alignment region encoded as a triplet [query_begin, target_begin, length]  # noqa: E501

        :return: The aligned_regions of this RcsbPolymerEntityGroupSequenceAlignmentGroupMembersAlignment.  # noqa: E501
        :rtype: list[list[int]]
        """
        return self._aligned_regions

    @aligned_regions.setter
    def aligned_regions(self, aligned_regions):
        """Sets the aligned_regions of this RcsbPolymerEntityGroupSequenceAlignmentGroupMembersAlignment.

        Alignment region encoded as a triplet [query_begin, target_begin, length]  # noqa: E501

        :param aligned_regions: The aligned_regions of this RcsbPolymerEntityGroupSequenceAlignmentGroupMembersAlignment.  # noqa: E501
        :type: list[list[int]]
        """
        if aligned_regions is None:
            raise ValueError("Invalid value for `aligned_regions`, must not be `None`")  # noqa: E501

        self._aligned_regions = aligned_regions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RcsbPolymerEntityGroupSequenceAlignmentGroupMembersAlignment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RcsbPolymerEntityGroupSequenceAlignmentGroupMembersAlignment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
