# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PdbxStructAssemblyAuthEvidence(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assembly_id': 'str',
        'details': 'str',
        'experimental_support': 'str',
        'id': 'str'
    }

    attribute_map = {
        'assembly_id': 'assembly_id',
        'details': 'details',
        'experimental_support': 'experimental_support',
        'id': 'id'
    }

    def __init__(self, assembly_id=None, details=None, experimental_support=None, id=None):  # noqa: E501
        """PdbxStructAssemblyAuthEvidence - a model defined in Swagger"""  # noqa: E501
        self._assembly_id = None
        self._details = None
        self._experimental_support = None
        self._id = None
        self.discriminator = None
        self.assembly_id = assembly_id
        if details is not None:
            self.details = details
        if experimental_support is not None:
            self.experimental_support = experimental_support
        self.id = id

    @property
    def assembly_id(self):
        """Gets the assembly_id of this PdbxStructAssemblyAuthEvidence.  # noqa: E501

        This item references an assembly in pdbx_struct_assembly  # noqa: E501

        :return: The assembly_id of this PdbxStructAssemblyAuthEvidence.  # noqa: E501
        :rtype: str
        """
        return self._assembly_id

    @assembly_id.setter
    def assembly_id(self, assembly_id):
        """Sets the assembly_id of this PdbxStructAssemblyAuthEvidence.

        This item references an assembly in pdbx_struct_assembly  # noqa: E501

        :param assembly_id: The assembly_id of this PdbxStructAssemblyAuthEvidence.  # noqa: E501
        :type: str
        """
        if assembly_id is None:
            raise ValueError("Invalid value for `assembly_id`, must not be `None`")  # noqa: E501

        self._assembly_id = assembly_id

    @property
    def details(self):
        """Gets the details of this PdbxStructAssemblyAuthEvidence.  # noqa: E501

        Provides any additional information regarding the evidence of this assembly  # noqa: E501

        :return: The details of this PdbxStructAssemblyAuthEvidence.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this PdbxStructAssemblyAuthEvidence.

        Provides any additional information regarding the evidence of this assembly  # noqa: E501

        :param details: The details of this PdbxStructAssemblyAuthEvidence.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def experimental_support(self):
        """Gets the experimental_support of this PdbxStructAssemblyAuthEvidence.  # noqa: E501

        Provides the experimental method to determine the state of this assembly  # noqa: E501

        :return: The experimental_support of this PdbxStructAssemblyAuthEvidence.  # noqa: E501
        :rtype: str
        """
        return self._experimental_support

    @experimental_support.setter
    def experimental_support(self, experimental_support):
        """Sets the experimental_support of this PdbxStructAssemblyAuthEvidence.

        Provides the experimental method to determine the state of this assembly  # noqa: E501

        :param experimental_support: The experimental_support of this PdbxStructAssemblyAuthEvidence.  # noqa: E501
        :type: str
        """
        allowed_values = ["NMR Distance Restraints", "NMR relaxation study", "SAXS", "assay for oligomerization", "cross-linking", "electron microscopy", "equilibrium centrifugation", "fluorescence resonance energy transfer", "gel filtration", "homology", "immunoprecipitation", "isothermal titration calorimetry", "light scattering", "mass spectrometry", "microscopy", "native gel electrophoresis", "none", "scanning transmission electron microscopy", "surface plasmon resonance"]  # noqa: E501
        if experimental_support not in allowed_values:
            raise ValueError(
                "Invalid value for `experimental_support` ({0}), must be one of {1}"  # noqa: E501
                .format(experimental_support, allowed_values)
            )

        self._experimental_support = experimental_support

    @property
    def id(self):
        """Gets the id of this PdbxStructAssemblyAuthEvidence.  # noqa: E501

        Identifies a unique record in pdbx_struct_assembly_auth_evidence.  # noqa: E501

        :return: The id of this PdbxStructAssemblyAuthEvidence.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PdbxStructAssemblyAuthEvidence.

        Identifies a unique record in pdbx_struct_assembly_auth_evidence.  # noqa: E501

        :param id: The id of this PdbxStructAssemblyAuthEvidence.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PdbxStructAssemblyAuthEvidence, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdbxStructAssemblyAuthEvidence):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
