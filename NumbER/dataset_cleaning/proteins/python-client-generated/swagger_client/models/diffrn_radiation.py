# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DiffrnRadiation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'collimation': 'str',
        'diffrn_id': 'str',
        'monochromator': 'str',
        'pdbx_diffrn_protocol': 'str',
        'pdbx_monochromatic_or_laue_m_l': 'str',
        'pdbx_scattering_type': 'str',
        'pdbx_wavelength': 'str',
        'pdbx_wavelength_list': 'str',
        'type': 'str',
        'wavelength_id': 'str'
    }

    attribute_map = {
        'collimation': 'collimation',
        'diffrn_id': 'diffrn_id',
        'monochromator': 'monochromator',
        'pdbx_diffrn_protocol': 'pdbx_diffrn_protocol',
        'pdbx_monochromatic_or_laue_m_l': 'pdbx_monochromatic_or_laue_m_l',
        'pdbx_scattering_type': 'pdbx_scattering_type',
        'pdbx_wavelength': 'pdbx_wavelength',
        'pdbx_wavelength_list': 'pdbx_wavelength_list',
        'type': 'type',
        'wavelength_id': 'wavelength_id'
    }

    def __init__(self, collimation=None, diffrn_id=None, monochromator=None, pdbx_diffrn_protocol=None, pdbx_monochromatic_or_laue_m_l=None, pdbx_scattering_type=None, pdbx_wavelength=None, pdbx_wavelength_list=None, type=None, wavelength_id=None):  # noqa: E501
        """DiffrnRadiation - a model defined in Swagger"""  # noqa: E501
        self._collimation = None
        self._diffrn_id = None
        self._monochromator = None
        self._pdbx_diffrn_protocol = None
        self._pdbx_monochromatic_or_laue_m_l = None
        self._pdbx_scattering_type = None
        self._pdbx_wavelength = None
        self._pdbx_wavelength_list = None
        self._type = None
        self._wavelength_id = None
        self.discriminator = None
        if collimation is not None:
            self.collimation = collimation
        self.diffrn_id = diffrn_id
        if monochromator is not None:
            self.monochromator = monochromator
        if pdbx_diffrn_protocol is not None:
            self.pdbx_diffrn_protocol = pdbx_diffrn_protocol
        if pdbx_monochromatic_or_laue_m_l is not None:
            self.pdbx_monochromatic_or_laue_m_l = pdbx_monochromatic_or_laue_m_l
        if pdbx_scattering_type is not None:
            self.pdbx_scattering_type = pdbx_scattering_type
        if pdbx_wavelength is not None:
            self.pdbx_wavelength = pdbx_wavelength
        if pdbx_wavelength_list is not None:
            self.pdbx_wavelength_list = pdbx_wavelength_list
        if type is not None:
            self.type = type
        if wavelength_id is not None:
            self.wavelength_id = wavelength_id

    @property
    def collimation(self):
        """Gets the collimation of this DiffrnRadiation.  # noqa: E501

        The collimation or focusing applied to the radiation.  # noqa: E501

        :return: The collimation of this DiffrnRadiation.  # noqa: E501
        :rtype: str
        """
        return self._collimation

    @collimation.setter
    def collimation(self, collimation):
        """Sets the collimation of this DiffrnRadiation.

        The collimation or focusing applied to the radiation.  # noqa: E501

        :param collimation: The collimation of this DiffrnRadiation.  # noqa: E501
        :type: str
        """

        self._collimation = collimation

    @property
    def diffrn_id(self):
        """Gets the diffrn_id of this DiffrnRadiation.  # noqa: E501

        This data item is a pointer to _diffrn.id in the DIFFRN  category.  # noqa: E501

        :return: The diffrn_id of this DiffrnRadiation.  # noqa: E501
        :rtype: str
        """
        return self._diffrn_id

    @diffrn_id.setter
    def diffrn_id(self, diffrn_id):
        """Sets the diffrn_id of this DiffrnRadiation.

        This data item is a pointer to _diffrn.id in the DIFFRN  category.  # noqa: E501

        :param diffrn_id: The diffrn_id of this DiffrnRadiation.  # noqa: E501
        :type: str
        """
        if diffrn_id is None:
            raise ValueError("Invalid value for `diffrn_id`, must not be `None`")  # noqa: E501

        self._diffrn_id = diffrn_id

    @property
    def monochromator(self):
        """Gets the monochromator of this DiffrnRadiation.  # noqa: E501

        The method used to obtain monochromatic radiation. If a mono-  chromator crystal is used, the material and the indices of the  Bragg reflection are specified.  # noqa: E501

        :return: The monochromator of this DiffrnRadiation.  # noqa: E501
        :rtype: str
        """
        return self._monochromator

    @monochromator.setter
    def monochromator(self, monochromator):
        """Sets the monochromator of this DiffrnRadiation.

        The method used to obtain monochromatic radiation. If a mono-  chromator crystal is used, the material and the indices of the  Bragg reflection are specified.  # noqa: E501

        :param monochromator: The monochromator of this DiffrnRadiation.  # noqa: E501
        :type: str
        """

        self._monochromator = monochromator

    @property
    def pdbx_diffrn_protocol(self):
        """Gets the pdbx_diffrn_protocol of this DiffrnRadiation.  # noqa: E501

        SINGLE WAVELENGTH, LAUE, or MAD.  # noqa: E501

        :return: The pdbx_diffrn_protocol of this DiffrnRadiation.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_diffrn_protocol

    @pdbx_diffrn_protocol.setter
    def pdbx_diffrn_protocol(self, pdbx_diffrn_protocol):
        """Sets the pdbx_diffrn_protocol of this DiffrnRadiation.

        SINGLE WAVELENGTH, LAUE, or MAD.  # noqa: E501

        :param pdbx_diffrn_protocol: The pdbx_diffrn_protocol of this DiffrnRadiation.  # noqa: E501
        :type: str
        """

        self._pdbx_diffrn_protocol = pdbx_diffrn_protocol

    @property
    def pdbx_monochromatic_or_laue_m_l(self):
        """Gets the pdbx_monochromatic_or_laue_m_l of this DiffrnRadiation.  # noqa: E501

        Monochromatic or Laue.  # noqa: E501

        :return: The pdbx_monochromatic_or_laue_m_l of this DiffrnRadiation.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_monochromatic_or_laue_m_l

    @pdbx_monochromatic_or_laue_m_l.setter
    def pdbx_monochromatic_or_laue_m_l(self, pdbx_monochromatic_or_laue_m_l):
        """Sets the pdbx_monochromatic_or_laue_m_l of this DiffrnRadiation.

        Monochromatic or Laue.  # noqa: E501

        :param pdbx_monochromatic_or_laue_m_l: The pdbx_monochromatic_or_laue_m_l of this DiffrnRadiation.  # noqa: E501
        :type: str
        """
        allowed_values = ["L", "M"]  # noqa: E501
        if pdbx_monochromatic_or_laue_m_l not in allowed_values:
            raise ValueError(
                "Invalid value for `pdbx_monochromatic_or_laue_m_l` ({0}), must be one of {1}"  # noqa: E501
                .format(pdbx_monochromatic_or_laue_m_l, allowed_values)
            )

        self._pdbx_monochromatic_or_laue_m_l = pdbx_monochromatic_or_laue_m_l

    @property
    def pdbx_scattering_type(self):
        """Gets the pdbx_scattering_type of this DiffrnRadiation.  # noqa: E501

        The radiation scattering type for this diffraction data set.  # noqa: E501

        :return: The pdbx_scattering_type of this DiffrnRadiation.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_scattering_type

    @pdbx_scattering_type.setter
    def pdbx_scattering_type(self, pdbx_scattering_type):
        """Sets the pdbx_scattering_type of this DiffrnRadiation.

        The radiation scattering type for this diffraction data set.  # noqa: E501

        :param pdbx_scattering_type: The pdbx_scattering_type of this DiffrnRadiation.  # noqa: E501
        :type: str
        """
        allowed_values = ["electron", "neutron", "x-ray"]  # noqa: E501
        if pdbx_scattering_type not in allowed_values:
            raise ValueError(
                "Invalid value for `pdbx_scattering_type` ({0}), must be one of {1}"  # noqa: E501
                .format(pdbx_scattering_type, allowed_values)
            )

        self._pdbx_scattering_type = pdbx_scattering_type

    @property
    def pdbx_wavelength(self):
        """Gets the pdbx_wavelength of this DiffrnRadiation.  # noqa: E501

        Wavelength of radiation.  # noqa: E501

        :return: The pdbx_wavelength of this DiffrnRadiation.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_wavelength

    @pdbx_wavelength.setter
    def pdbx_wavelength(self, pdbx_wavelength):
        """Sets the pdbx_wavelength of this DiffrnRadiation.

        Wavelength of radiation.  # noqa: E501

        :param pdbx_wavelength: The pdbx_wavelength of this DiffrnRadiation.  # noqa: E501
        :type: str
        """

        self._pdbx_wavelength = pdbx_wavelength

    @property
    def pdbx_wavelength_list(self):
        """Gets the pdbx_wavelength_list of this DiffrnRadiation.  # noqa: E501

        Comma separated list of wavelengths or wavelength range.  # noqa: E501

        :return: The pdbx_wavelength_list of this DiffrnRadiation.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_wavelength_list

    @pdbx_wavelength_list.setter
    def pdbx_wavelength_list(self, pdbx_wavelength_list):
        """Sets the pdbx_wavelength_list of this DiffrnRadiation.

        Comma separated list of wavelengths or wavelength range.  # noqa: E501

        :param pdbx_wavelength_list: The pdbx_wavelength_list of this DiffrnRadiation.  # noqa: E501
        :type: str
        """

        self._pdbx_wavelength_list = pdbx_wavelength_list

    @property
    def type(self):
        """Gets the type of this DiffrnRadiation.  # noqa: E501

        The nature of the radiation. This is typically a description  of the X-ray wavelength in Siegbahn notation.  # noqa: E501

        :return: The type of this DiffrnRadiation.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DiffrnRadiation.

        The nature of the radiation. This is typically a description  of the X-ray wavelength in Siegbahn notation.  # noqa: E501

        :param type: The type of this DiffrnRadiation.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def wavelength_id(self):
        """Gets the wavelength_id of this DiffrnRadiation.  # noqa: E501

        This data item is a pointer to _diffrn_radiation_wavelength.id  in the DIFFRN_RADIATION_WAVELENGTH category.  # noqa: E501

        :return: The wavelength_id of this DiffrnRadiation.  # noqa: E501
        :rtype: str
        """
        return self._wavelength_id

    @wavelength_id.setter
    def wavelength_id(self, wavelength_id):
        """Sets the wavelength_id of this DiffrnRadiation.

        This data item is a pointer to _diffrn_radiation_wavelength.id  in the DIFFRN_RADIATION_WAVELENGTH category.  # noqa: E501

        :param wavelength_id: The wavelength_id of this DiffrnRadiation.  # noqa: E501
        :type: str
        """

        self._wavelength_id = wavelength_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DiffrnRadiation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiffrnRadiation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
