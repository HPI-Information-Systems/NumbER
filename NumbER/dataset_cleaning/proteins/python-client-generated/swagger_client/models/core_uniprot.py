# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CoreUniprot(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rcsb_id': 'str',
        'rcsb_uniprot_container_identifiers': 'RcsbUniprotContainerIdentifiers',
        'rcsb_uniprot_accession': 'list[str]',
        'rcsb_uniprot_entry_name': 'list[str]',
        'rcsb_uniprot_keyword': 'list[RcsbUniprotKeyword]',
        'rcsb_uniprot_protein': 'RcsbUniprotProtein',
        'rcsb_uniprot_feature': 'list[RcsbUniprotFeature]',
        'rcsb_uniprot_annotation': 'list[RcsbUniprotAnnotation]',
        'rcsb_uniprot_external_reference': 'list[RcsbUniprotExternalReference]',
        'rcsb_uniprot_alignments': 'RcsbUniprotAlignments'
    }

    attribute_map = {
        'rcsb_id': 'rcsb_id',
        'rcsb_uniprot_container_identifiers': 'rcsb_uniprot_container_identifiers',
        'rcsb_uniprot_accession': 'rcsb_uniprot_accession',
        'rcsb_uniprot_entry_name': 'rcsb_uniprot_entry_name',
        'rcsb_uniprot_keyword': 'rcsb_uniprot_keyword',
        'rcsb_uniprot_protein': 'rcsb_uniprot_protein',
        'rcsb_uniprot_feature': 'rcsb_uniprot_feature',
        'rcsb_uniprot_annotation': 'rcsb_uniprot_annotation',
        'rcsb_uniprot_external_reference': 'rcsb_uniprot_external_reference',
        'rcsb_uniprot_alignments': 'rcsb_uniprot_alignments'
    }

    def __init__(self, rcsb_id=None, rcsb_uniprot_container_identifiers=None, rcsb_uniprot_accession=None, rcsb_uniprot_entry_name=None, rcsb_uniprot_keyword=None, rcsb_uniprot_protein=None, rcsb_uniprot_feature=None, rcsb_uniprot_annotation=None, rcsb_uniprot_external_reference=None, rcsb_uniprot_alignments=None):  # noqa: E501
        """CoreUniprot - a model defined in Swagger"""  # noqa: E501
        self._rcsb_id = None
        self._rcsb_uniprot_container_identifiers = None
        self._rcsb_uniprot_accession = None
        self._rcsb_uniprot_entry_name = None
        self._rcsb_uniprot_keyword = None
        self._rcsb_uniprot_protein = None
        self._rcsb_uniprot_feature = None
        self._rcsb_uniprot_annotation = None
        self._rcsb_uniprot_external_reference = None
        self._rcsb_uniprot_alignments = None
        self.discriminator = None
        if rcsb_id is not None:
            self.rcsb_id = rcsb_id
        self.rcsb_uniprot_container_identifiers = rcsb_uniprot_container_identifiers
        if rcsb_uniprot_accession is not None:
            self.rcsb_uniprot_accession = rcsb_uniprot_accession
        if rcsb_uniprot_entry_name is not None:
            self.rcsb_uniprot_entry_name = rcsb_uniprot_entry_name
        if rcsb_uniprot_keyword is not None:
            self.rcsb_uniprot_keyword = rcsb_uniprot_keyword
        if rcsb_uniprot_protein is not None:
            self.rcsb_uniprot_protein = rcsb_uniprot_protein
        if rcsb_uniprot_feature is not None:
            self.rcsb_uniprot_feature = rcsb_uniprot_feature
        if rcsb_uniprot_annotation is not None:
            self.rcsb_uniprot_annotation = rcsb_uniprot_annotation
        if rcsb_uniprot_external_reference is not None:
            self.rcsb_uniprot_external_reference = rcsb_uniprot_external_reference
        if rcsb_uniprot_alignments is not None:
            self.rcsb_uniprot_alignments = rcsb_uniprot_alignments

    @property
    def rcsb_id(self):
        """Gets the rcsb_id of this CoreUniprot.  # noqa: E501

        Primary accession number of a given UniProtKB entry.  # noqa: E501

        :return: The rcsb_id of this CoreUniprot.  # noqa: E501
        :rtype: str
        """
        return self._rcsb_id

    @rcsb_id.setter
    def rcsb_id(self, rcsb_id):
        """Sets the rcsb_id of this CoreUniprot.

        Primary accession number of a given UniProtKB entry.  # noqa: E501

        :param rcsb_id: The rcsb_id of this CoreUniprot.  # noqa: E501
        :type: str
        """

        self._rcsb_id = rcsb_id

    @property
    def rcsb_uniprot_container_identifiers(self):
        """Gets the rcsb_uniprot_container_identifiers of this CoreUniprot.  # noqa: E501


        :return: The rcsb_uniprot_container_identifiers of this CoreUniprot.  # noqa: E501
        :rtype: RcsbUniprotContainerIdentifiers
        """
        return self._rcsb_uniprot_container_identifiers

    @rcsb_uniprot_container_identifiers.setter
    def rcsb_uniprot_container_identifiers(self, rcsb_uniprot_container_identifiers):
        """Sets the rcsb_uniprot_container_identifiers of this CoreUniprot.


        :param rcsb_uniprot_container_identifiers: The rcsb_uniprot_container_identifiers of this CoreUniprot.  # noqa: E501
        :type: RcsbUniprotContainerIdentifiers
        """
        if rcsb_uniprot_container_identifiers is None:
            raise ValueError("Invalid value for `rcsb_uniprot_container_identifiers`, must not be `None`")  # noqa: E501

        self._rcsb_uniprot_container_identifiers = rcsb_uniprot_container_identifiers

    @property
    def rcsb_uniprot_accession(self):
        """Gets the rcsb_uniprot_accession of this CoreUniprot.  # noqa: E501


        :return: The rcsb_uniprot_accession of this CoreUniprot.  # noqa: E501
        :rtype: list[str]
        """
        return self._rcsb_uniprot_accession

    @rcsb_uniprot_accession.setter
    def rcsb_uniprot_accession(self, rcsb_uniprot_accession):
        """Sets the rcsb_uniprot_accession of this CoreUniprot.


        :param rcsb_uniprot_accession: The rcsb_uniprot_accession of this CoreUniprot.  # noqa: E501
        :type: list[str]
        """

        self._rcsb_uniprot_accession = rcsb_uniprot_accession

    @property
    def rcsb_uniprot_entry_name(self):
        """Gets the rcsb_uniprot_entry_name of this CoreUniprot.  # noqa: E501


        :return: The rcsb_uniprot_entry_name of this CoreUniprot.  # noqa: E501
        :rtype: list[str]
        """
        return self._rcsb_uniprot_entry_name

    @rcsb_uniprot_entry_name.setter
    def rcsb_uniprot_entry_name(self, rcsb_uniprot_entry_name):
        """Sets the rcsb_uniprot_entry_name of this CoreUniprot.


        :param rcsb_uniprot_entry_name: The rcsb_uniprot_entry_name of this CoreUniprot.  # noqa: E501
        :type: list[str]
        """

        self._rcsb_uniprot_entry_name = rcsb_uniprot_entry_name

    @property
    def rcsb_uniprot_keyword(self):
        """Gets the rcsb_uniprot_keyword of this CoreUniprot.  # noqa: E501


        :return: The rcsb_uniprot_keyword of this CoreUniprot.  # noqa: E501
        :rtype: list[RcsbUniprotKeyword]
        """
        return self._rcsb_uniprot_keyword

    @rcsb_uniprot_keyword.setter
    def rcsb_uniprot_keyword(self, rcsb_uniprot_keyword):
        """Sets the rcsb_uniprot_keyword of this CoreUniprot.


        :param rcsb_uniprot_keyword: The rcsb_uniprot_keyword of this CoreUniprot.  # noqa: E501
        :type: list[RcsbUniprotKeyword]
        """

        self._rcsb_uniprot_keyword = rcsb_uniprot_keyword

    @property
    def rcsb_uniprot_protein(self):
        """Gets the rcsb_uniprot_protein of this CoreUniprot.  # noqa: E501


        :return: The rcsb_uniprot_protein of this CoreUniprot.  # noqa: E501
        :rtype: RcsbUniprotProtein
        """
        return self._rcsb_uniprot_protein

    @rcsb_uniprot_protein.setter
    def rcsb_uniprot_protein(self, rcsb_uniprot_protein):
        """Sets the rcsb_uniprot_protein of this CoreUniprot.


        :param rcsb_uniprot_protein: The rcsb_uniprot_protein of this CoreUniprot.  # noqa: E501
        :type: RcsbUniprotProtein
        """

        self._rcsb_uniprot_protein = rcsb_uniprot_protein

    @property
    def rcsb_uniprot_feature(self):
        """Gets the rcsb_uniprot_feature of this CoreUniprot.  # noqa: E501


        :return: The rcsb_uniprot_feature of this CoreUniprot.  # noqa: E501
        :rtype: list[RcsbUniprotFeature]
        """
        return self._rcsb_uniprot_feature

    @rcsb_uniprot_feature.setter
    def rcsb_uniprot_feature(self, rcsb_uniprot_feature):
        """Sets the rcsb_uniprot_feature of this CoreUniprot.


        :param rcsb_uniprot_feature: The rcsb_uniprot_feature of this CoreUniprot.  # noqa: E501
        :type: list[RcsbUniprotFeature]
        """

        self._rcsb_uniprot_feature = rcsb_uniprot_feature

    @property
    def rcsb_uniprot_annotation(self):
        """Gets the rcsb_uniprot_annotation of this CoreUniprot.  # noqa: E501


        :return: The rcsb_uniprot_annotation of this CoreUniprot.  # noqa: E501
        :rtype: list[RcsbUniprotAnnotation]
        """
        return self._rcsb_uniprot_annotation

    @rcsb_uniprot_annotation.setter
    def rcsb_uniprot_annotation(self, rcsb_uniprot_annotation):
        """Sets the rcsb_uniprot_annotation of this CoreUniprot.


        :param rcsb_uniprot_annotation: The rcsb_uniprot_annotation of this CoreUniprot.  # noqa: E501
        :type: list[RcsbUniprotAnnotation]
        """

        self._rcsb_uniprot_annotation = rcsb_uniprot_annotation

    @property
    def rcsb_uniprot_external_reference(self):
        """Gets the rcsb_uniprot_external_reference of this CoreUniprot.  # noqa: E501


        :return: The rcsb_uniprot_external_reference of this CoreUniprot.  # noqa: E501
        :rtype: list[RcsbUniprotExternalReference]
        """
        return self._rcsb_uniprot_external_reference

    @rcsb_uniprot_external_reference.setter
    def rcsb_uniprot_external_reference(self, rcsb_uniprot_external_reference):
        """Sets the rcsb_uniprot_external_reference of this CoreUniprot.


        :param rcsb_uniprot_external_reference: The rcsb_uniprot_external_reference of this CoreUniprot.  # noqa: E501
        :type: list[RcsbUniprotExternalReference]
        """

        self._rcsb_uniprot_external_reference = rcsb_uniprot_external_reference

    @property
    def rcsb_uniprot_alignments(self):
        """Gets the rcsb_uniprot_alignments of this CoreUniprot.  # noqa: E501


        :return: The rcsb_uniprot_alignments of this CoreUniprot.  # noqa: E501
        :rtype: RcsbUniprotAlignments
        """
        return self._rcsb_uniprot_alignments

    @rcsb_uniprot_alignments.setter
    def rcsb_uniprot_alignments(self, rcsb_uniprot_alignments):
        """Sets the rcsb_uniprot_alignments of this CoreUniprot.


        :param rcsb_uniprot_alignments: The rcsb_uniprot_alignments of this CoreUniprot.  # noqa: E501
        :type: RcsbUniprotAlignments
        """

        self._rcsb_uniprot_alignments = rcsb_uniprot_alignments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoreUniprot, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoreUniprot):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
