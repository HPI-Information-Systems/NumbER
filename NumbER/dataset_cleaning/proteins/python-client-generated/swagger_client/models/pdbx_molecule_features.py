# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PdbxMoleculeFeatures(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_class': 'str',
        'details': 'str',
        'name': 'str',
        'prd_id': 'str',
        'type': 'str'
    }

    attribute_map = {
        '_class': 'class',
        'details': 'details',
        'name': 'name',
        'prd_id': 'prd_id',
        'type': 'type'
    }

    def __init__(self, _class=None, details=None, name=None, prd_id=None, type=None):  # noqa: E501
        """PdbxMoleculeFeatures - a model defined in Swagger"""  # noqa: E501
        self.__class = None
        self._details = None
        self._name = None
        self._prd_id = None
        self._type = None
        self.discriminator = None
        if _class is not None:
            self._class = _class
        if details is not None:
            self.details = details
        if name is not None:
            self.name = name
        self.prd_id = prd_id
        if type is not None:
            self.type = type

    @property
    def _class(self):
        """Gets the _class of this PdbxMoleculeFeatures.  # noqa: E501

        Broadly defines the function of the molecule.  # noqa: E501

        :return: The _class of this PdbxMoleculeFeatures.  # noqa: E501
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this PdbxMoleculeFeatures.

        Broadly defines the function of the molecule.  # noqa: E501

        :param _class: The _class of this PdbxMoleculeFeatures.  # noqa: E501
        :type: str
        """
        allowed_values = ["Antagonist", "Anthelmintic", "Antibiotic", "Antibiotic, Anthelmintic", "Antibiotic, Antimicrobial", "Antibiotic, Antineoplastic", "Anticancer", "Anticoagulant", "Anticoagulant, Antithrombotic", "Antifungal", "Antigen", "Antiinflammatory", "Antimicrobial", "Antimicrobial, Antiparasitic, Antibiotic", "Antimicrobial, Antiretroviral", "Antimicrobial, Antitumor", "Antineoplastic", "Antiparasitic", "Antiretroviral", "Antithrombotic", "Antitumor", "Antiviral", "CASPASE inhibitor", "Chaperone binding", "Drug delivery", "Enzyme inhibitor", "Glycan component", "Growth factor", "Immunosuppressant", "Inducer", "Inhibitor", "Lantibiotic", "Metabolism", "Metal transport", "Nutrient", "Oxidation-reduction", "Protein binding", "Receptor", "Substrate analog", "Synthetic opioid", "Thrombin inhibitor", "Thrombin inhibitor, Trypsin inhibitor", "Toxin", "Transition state mimetic", "Transport activator", "Trypsin inhibitor", "Unknown", "Water retention"]  # noqa: E501
        if _class not in allowed_values:
            raise ValueError(
                "Invalid value for `_class` ({0}), must be one of {1}"  # noqa: E501
                .format(_class, allowed_values)
            )

        self.__class = _class

    @property
    def details(self):
        """Gets the details of this PdbxMoleculeFeatures.  # noqa: E501

        Additional details describing the molecule.  # noqa: E501

        :return: The details of this PdbxMoleculeFeatures.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this PdbxMoleculeFeatures.

        Additional details describing the molecule.  # noqa: E501

        :param details: The details of this PdbxMoleculeFeatures.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def name(self):
        """Gets the name of this PdbxMoleculeFeatures.  # noqa: E501

        A name of the molecule.  # noqa: E501

        :return: The name of this PdbxMoleculeFeatures.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PdbxMoleculeFeatures.

        A name of the molecule.  # noqa: E501

        :param name: The name of this PdbxMoleculeFeatures.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def prd_id(self):
        """Gets the prd_id of this PdbxMoleculeFeatures.  # noqa: E501

        The value of _pdbx_molecule_features.prd_id is the accession code for this  reference molecule.  # noqa: E501

        :return: The prd_id of this PdbxMoleculeFeatures.  # noqa: E501
        :rtype: str
        """
        return self._prd_id

    @prd_id.setter
    def prd_id(self, prd_id):
        """Sets the prd_id of this PdbxMoleculeFeatures.

        The value of _pdbx_molecule_features.prd_id is the accession code for this  reference molecule.  # noqa: E501

        :param prd_id: The prd_id of this PdbxMoleculeFeatures.  # noqa: E501
        :type: str
        """
        if prd_id is None:
            raise ValueError("Invalid value for `prd_id`, must not be `None`")  # noqa: E501

        self._prd_id = prd_id

    @property
    def type(self):
        """Gets the type of this PdbxMoleculeFeatures.  # noqa: E501

        Defines the structural classification of the molecule.  # noqa: E501

        :return: The type of this PdbxMoleculeFeatures.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PdbxMoleculeFeatures.

        Defines the structural classification of the molecule.  # noqa: E501

        :param type: The type of this PdbxMoleculeFeatures.  # noqa: E501
        :type: str
        """
        allowed_values = ["Amino acid", "Aminoglycoside", "Ansamycin", "Anthracycline", "Anthraquinone", "Chalkophore", "Chalkophore, Polypeptide", "Chromophore", "Cyclic depsipeptide", "Cyclic lipopeptide", "Cyclic peptide", "Glycopeptide", "Heterocyclic", "Imino sugar", "Keto acid", "Lipoglycopeptide", "Lipopeptide", "Macrolide", "Non-polymer", "Nucleoside", "Oligopeptide", "Oligosaccharide", "Peptaibol", "Peptide-like", "Polycyclic", "Polypeptide", "Polysaccharide", "Quinolone", "Siderophore", "Thiolactone", "Thiopeptide", "Unknown"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PdbxMoleculeFeatures, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdbxMoleculeFeatures):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
