# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PdbxDatabasePDBObsSpr(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'datetime',
        'details': 'str',
        'id': 'str',
        'pdb_id': 'str',
        'replace_pdb_id': 'str'
    }

    attribute_map = {
        '_date': 'date',
        'details': 'details',
        'id': 'id',
        'pdb_id': 'pdb_id',
        'replace_pdb_id': 'replace_pdb_id'
    }

    def __init__(self, _date=None, details=None, id=None, pdb_id=None, replace_pdb_id=None):  # noqa: E501
        """PdbxDatabasePDBObsSpr - a model defined in Swagger"""  # noqa: E501
        self.__date = None
        self._details = None
        self._id = None
        self._pdb_id = None
        self._replace_pdb_id = None
        self.discriminator = None
        if _date is not None:
            self._date = _date
        if details is not None:
            self.details = details
        if id is not None:
            self.id = id
        self.pdb_id = pdb_id
        self.replace_pdb_id = replace_pdb_id

    @property
    def _date(self):
        """Gets the _date of this PdbxDatabasePDBObsSpr.  # noqa: E501

        The date of replacement.  # noqa: E501

        :return: The _date of this PdbxDatabasePDBObsSpr.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this PdbxDatabasePDBObsSpr.

        The date of replacement.  # noqa: E501

        :param _date: The _date of this PdbxDatabasePDBObsSpr.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def details(self):
        """Gets the details of this PdbxDatabasePDBObsSpr.  # noqa: E501

        Details related to the replaced or replacing entry.  # noqa: E501

        :return: The details of this PdbxDatabasePDBObsSpr.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this PdbxDatabasePDBObsSpr.

        Details related to the replaced or replacing entry.  # noqa: E501

        :param details: The details of this PdbxDatabasePDBObsSpr.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def id(self):
        """Gets the id of this PdbxDatabasePDBObsSpr.  # noqa: E501

        Identifier for the type of obsolete entry to be added to this entry.  # noqa: E501

        :return: The id of this PdbxDatabasePDBObsSpr.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PdbxDatabasePDBObsSpr.

        Identifier for the type of obsolete entry to be added to this entry.  # noqa: E501

        :param id: The id of this PdbxDatabasePDBObsSpr.  # noqa: E501
        :type: str
        """
        allowed_values = ["OBSLTE", "SPRSDE"]  # noqa: E501
        if id not in allowed_values:
            raise ValueError(
                "Invalid value for `id` ({0}), must be one of {1}"  # noqa: E501
                .format(id, allowed_values)
            )

        self._id = id

    @property
    def pdb_id(self):
        """Gets the pdb_id of this PdbxDatabasePDBObsSpr.  # noqa: E501

        The new PDB identifier for the replaced entry.  # noqa: E501

        :return: The pdb_id of this PdbxDatabasePDBObsSpr.  # noqa: E501
        :rtype: str
        """
        return self._pdb_id

    @pdb_id.setter
    def pdb_id(self, pdb_id):
        """Sets the pdb_id of this PdbxDatabasePDBObsSpr.

        The new PDB identifier for the replaced entry.  # noqa: E501

        :param pdb_id: The pdb_id of this PdbxDatabasePDBObsSpr.  # noqa: E501
        :type: str
        """
        if pdb_id is None:
            raise ValueError("Invalid value for `pdb_id`, must not be `None`")  # noqa: E501

        self._pdb_id = pdb_id

    @property
    def replace_pdb_id(self):
        """Gets the replace_pdb_id of this PdbxDatabasePDBObsSpr.  # noqa: E501

        The PDB identifier for the replaced (OLD) entry/entries.  # noqa: E501

        :return: The replace_pdb_id of this PdbxDatabasePDBObsSpr.  # noqa: E501
        :rtype: str
        """
        return self._replace_pdb_id

    @replace_pdb_id.setter
    def replace_pdb_id(self, replace_pdb_id):
        """Sets the replace_pdb_id of this PdbxDatabasePDBObsSpr.

        The PDB identifier for the replaced (OLD) entry/entries.  # noqa: E501

        :param replace_pdb_id: The replace_pdb_id of this PdbxDatabasePDBObsSpr.  # noqa: E501
        :type: str
        """
        if replace_pdb_id is None:
            raise ValueError("Invalid value for `replace_pdb_id`, must not be `None`")  # noqa: E501

        self._replace_pdb_id = replace_pdb_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PdbxDatabasePDBObsSpr, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdbxDatabasePDBObsSpr):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
