# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Em2dCrystalEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'angle_gamma': 'float',
        'c_sampling_length': 'float',
        'id': 'str',
        'image_processing_id': 'str',
        'length_a': 'float',
        'length_b': 'float',
        'length_c': 'float',
        'space_group_name_h_m': 'str'
    }

    attribute_map = {
        'angle_gamma': 'angle_gamma',
        'c_sampling_length': 'c_sampling_length',
        'id': 'id',
        'image_processing_id': 'image_processing_id',
        'length_a': 'length_a',
        'length_b': 'length_b',
        'length_c': 'length_c',
        'space_group_name_h_m': 'space_group_name_H_M'
    }

    def __init__(self, angle_gamma=None, c_sampling_length=None, id=None, image_processing_id=None, length_a=None, length_b=None, length_c=None, space_group_name_h_m=None):  # noqa: E501
        """Em2dCrystalEntity - a model defined in Swagger"""  # noqa: E501
        self._angle_gamma = None
        self._c_sampling_length = None
        self._id = None
        self._image_processing_id = None
        self._length_a = None
        self._length_b = None
        self._length_c = None
        self._space_group_name_h_m = None
        self.discriminator = None
        if angle_gamma is not None:
            self.angle_gamma = angle_gamma
        if c_sampling_length is not None:
            self.c_sampling_length = c_sampling_length
        self.id = id
        self.image_processing_id = image_processing_id
        if length_a is not None:
            self.length_a = length_a
        if length_b is not None:
            self.length_b = length_b
        if length_c is not None:
            self.length_c = length_c
        if space_group_name_h_m is not None:
            self.space_group_name_h_m = space_group_name_h_m

    @property
    def angle_gamma(self):
        """Gets the angle_gamma of this Em2dCrystalEntity.  # noqa: E501

        Unit-cell angle gamma in degrees.  # noqa: E501

        :return: The angle_gamma of this Em2dCrystalEntity.  # noqa: E501
        :rtype: float
        """
        return self._angle_gamma

    @angle_gamma.setter
    def angle_gamma(self, angle_gamma):
        """Sets the angle_gamma of this Em2dCrystalEntity.

        Unit-cell angle gamma in degrees.  # noqa: E501

        :param angle_gamma: The angle_gamma of this Em2dCrystalEntity.  # noqa: E501
        :type: float
        """

        self._angle_gamma = angle_gamma

    @property
    def c_sampling_length(self):
        """Gets the c_sampling_length of this Em2dCrystalEntity.  # noqa: E501

        Length used to sample the reciprocal lattice lines in the c-direction.  # noqa: E501

        :return: The c_sampling_length of this Em2dCrystalEntity.  # noqa: E501
        :rtype: float
        """
        return self._c_sampling_length

    @c_sampling_length.setter
    def c_sampling_length(self, c_sampling_length):
        """Sets the c_sampling_length of this Em2dCrystalEntity.

        Length used to sample the reciprocal lattice lines in the c-direction.  # noqa: E501

        :param c_sampling_length: The c_sampling_length of this Em2dCrystalEntity.  # noqa: E501
        :type: float
        """

        self._c_sampling_length = c_sampling_length

    @property
    def id(self):
        """Gets the id of this Em2dCrystalEntity.  # noqa: E501

        PRIMARY KEY  # noqa: E501

        :return: The id of this Em2dCrystalEntity.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Em2dCrystalEntity.

        PRIMARY KEY  # noqa: E501

        :param id: The id of this Em2dCrystalEntity.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def image_processing_id(self):
        """Gets the image_processing_id of this Em2dCrystalEntity.  # noqa: E501

        pointer to _em_image_processing.id in the EM_IMAGE_PROCESSING category.  # noqa: E501

        :return: The image_processing_id of this Em2dCrystalEntity.  # noqa: E501
        :rtype: str
        """
        return self._image_processing_id

    @image_processing_id.setter
    def image_processing_id(self, image_processing_id):
        """Sets the image_processing_id of this Em2dCrystalEntity.

        pointer to _em_image_processing.id in the EM_IMAGE_PROCESSING category.  # noqa: E501

        :param image_processing_id: The image_processing_id of this Em2dCrystalEntity.  # noqa: E501
        :type: str
        """
        if image_processing_id is None:
            raise ValueError("Invalid value for `image_processing_id`, must not be `None`")  # noqa: E501

        self._image_processing_id = image_processing_id

    @property
    def length_a(self):
        """Gets the length_a of this Em2dCrystalEntity.  # noqa: E501

        Unit-cell length a in angstroms.  # noqa: E501

        :return: The length_a of this Em2dCrystalEntity.  # noqa: E501
        :rtype: float
        """
        return self._length_a

    @length_a.setter
    def length_a(self, length_a):
        """Sets the length_a of this Em2dCrystalEntity.

        Unit-cell length a in angstroms.  # noqa: E501

        :param length_a: The length_a of this Em2dCrystalEntity.  # noqa: E501
        :type: float
        """

        self._length_a = length_a

    @property
    def length_b(self):
        """Gets the length_b of this Em2dCrystalEntity.  # noqa: E501

        Unit-cell length b in angstroms.  # noqa: E501

        :return: The length_b of this Em2dCrystalEntity.  # noqa: E501
        :rtype: float
        """
        return self._length_b

    @length_b.setter
    def length_b(self, length_b):
        """Sets the length_b of this Em2dCrystalEntity.

        Unit-cell length b in angstroms.  # noqa: E501

        :param length_b: The length_b of this Em2dCrystalEntity.  # noqa: E501
        :type: float
        """

        self._length_b = length_b

    @property
    def length_c(self):
        """Gets the length_c of this Em2dCrystalEntity.  # noqa: E501

        Thickness of 2D crystal  # noqa: E501

        :return: The length_c of this Em2dCrystalEntity.  # noqa: E501
        :rtype: float
        """
        return self._length_c

    @length_c.setter
    def length_c(self, length_c):
        """Sets the length_c of this Em2dCrystalEntity.

        Thickness of 2D crystal  # noqa: E501

        :param length_c: The length_c of this Em2dCrystalEntity.  # noqa: E501
        :type: float
        """

        self._length_c = length_c

    @property
    def space_group_name_h_m(self):
        """Gets the space_group_name_h_m of this Em2dCrystalEntity.  # noqa: E501

        There are 17 plane groups classified as oblique, rectangular, square, and hexagonal.  To describe the symmetry of 2D crystals of biological molecules,  plane groups are expanded to equivalent noncentrosymmetric space groups.  The 2D crystal plane corresponds to the 'ab' plane of the space group.   Enumerated space group descriptions include the plane group number in parentheses,  the H-M plane group symbol, and the plane group class.  # noqa: E501

        :return: The space_group_name_h_m of this Em2dCrystalEntity.  # noqa: E501
        :rtype: str
        """
        return self._space_group_name_h_m

    @space_group_name_h_m.setter
    def space_group_name_h_m(self, space_group_name_h_m):
        """Sets the space_group_name_h_m of this Em2dCrystalEntity.

        There are 17 plane groups classified as oblique, rectangular, square, and hexagonal.  To describe the symmetry of 2D crystals of biological molecules,  plane groups are expanded to equivalent noncentrosymmetric space groups.  The 2D crystal plane corresponds to the 'ab' plane of the space group.   Enumerated space group descriptions include the plane group number in parentheses,  the H-M plane group symbol, and the plane group class.  # noqa: E501

        :param space_group_name_h_m: The space_group_name_h_m of this Em2dCrystalEntity.  # noqa: E501
        :type: str
        """
        allowed_values = ["C 1 2", "C 2 2 2", "P 1", "P 1 2", "P 1 21", "P 2", "P 2 2 2", "P 2 2 21", "P 2 21 21", "P 3", "P 3 1 2", "P 3 2 1", "P 4", "P 4 2 2", "P 4 21 2", "P 6", "P 6 2 2"]  # noqa: E501
        if space_group_name_h_m not in allowed_values:
            raise ValueError(
                "Invalid value for `space_group_name_h_m` ({0}), must be one of {1}"  # noqa: E501
                .format(space_group_name_h_m, allowed_values)
            )

        self._space_group_name_h_m = space_group_name_h_m

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Em2dCrystalEntity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Em2dCrystalEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
