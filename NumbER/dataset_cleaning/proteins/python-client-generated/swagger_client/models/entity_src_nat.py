# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EntitySrcNat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'common_name': 'str',
        'details': 'str',
        'genus': 'str',
        'pdbx_alt_source_flag': 'str',
        'pdbx_atcc': 'str',
        'pdbx_beg_seq_num': 'int',
        'pdbx_cell': 'str',
        'pdbx_cell_line': 'str',
        'pdbx_cellular_location': 'str',
        'pdbx_end_seq_num': 'int',
        'pdbx_fragment': 'str',
        'pdbx_ncbi_taxonomy_id': 'str',
        'pdbx_organ': 'str',
        'pdbx_organelle': 'str',
        'pdbx_organism_scientific': 'str',
        'pdbx_plasmid_details': 'str',
        'pdbx_plasmid_name': 'str',
        'pdbx_secretion': 'str',
        'pdbx_src_id': 'int',
        'pdbx_variant': 'str',
        'species': 'str',
        'strain': 'str',
        'tissue': 'str',
        'tissue_fraction': 'str'
    }

    attribute_map = {
        'common_name': 'common_name',
        'details': 'details',
        'genus': 'genus',
        'pdbx_alt_source_flag': 'pdbx_alt_source_flag',
        'pdbx_atcc': 'pdbx_atcc',
        'pdbx_beg_seq_num': 'pdbx_beg_seq_num',
        'pdbx_cell': 'pdbx_cell',
        'pdbx_cell_line': 'pdbx_cell_line',
        'pdbx_cellular_location': 'pdbx_cellular_location',
        'pdbx_end_seq_num': 'pdbx_end_seq_num',
        'pdbx_fragment': 'pdbx_fragment',
        'pdbx_ncbi_taxonomy_id': 'pdbx_ncbi_taxonomy_id',
        'pdbx_organ': 'pdbx_organ',
        'pdbx_organelle': 'pdbx_organelle',
        'pdbx_organism_scientific': 'pdbx_organism_scientific',
        'pdbx_plasmid_details': 'pdbx_plasmid_details',
        'pdbx_plasmid_name': 'pdbx_plasmid_name',
        'pdbx_secretion': 'pdbx_secretion',
        'pdbx_src_id': 'pdbx_src_id',
        'pdbx_variant': 'pdbx_variant',
        'species': 'species',
        'strain': 'strain',
        'tissue': 'tissue',
        'tissue_fraction': 'tissue_fraction'
    }

    def __init__(self, common_name=None, details=None, genus=None, pdbx_alt_source_flag=None, pdbx_atcc=None, pdbx_beg_seq_num=None, pdbx_cell=None, pdbx_cell_line=None, pdbx_cellular_location=None, pdbx_end_seq_num=None, pdbx_fragment=None, pdbx_ncbi_taxonomy_id=None, pdbx_organ=None, pdbx_organelle=None, pdbx_organism_scientific=None, pdbx_plasmid_details=None, pdbx_plasmid_name=None, pdbx_secretion=None, pdbx_src_id=None, pdbx_variant=None, species=None, strain=None, tissue=None, tissue_fraction=None):  # noqa: E501
        """EntitySrcNat - a model defined in Swagger"""  # noqa: E501
        self._common_name = None
        self._details = None
        self._genus = None
        self._pdbx_alt_source_flag = None
        self._pdbx_atcc = None
        self._pdbx_beg_seq_num = None
        self._pdbx_cell = None
        self._pdbx_cell_line = None
        self._pdbx_cellular_location = None
        self._pdbx_end_seq_num = None
        self._pdbx_fragment = None
        self._pdbx_ncbi_taxonomy_id = None
        self._pdbx_organ = None
        self._pdbx_organelle = None
        self._pdbx_organism_scientific = None
        self._pdbx_plasmid_details = None
        self._pdbx_plasmid_name = None
        self._pdbx_secretion = None
        self._pdbx_src_id = None
        self._pdbx_variant = None
        self._species = None
        self._strain = None
        self._tissue = None
        self._tissue_fraction = None
        self.discriminator = None
        if common_name is not None:
            self.common_name = common_name
        if details is not None:
            self.details = details
        if genus is not None:
            self.genus = genus
        if pdbx_alt_source_flag is not None:
            self.pdbx_alt_source_flag = pdbx_alt_source_flag
        if pdbx_atcc is not None:
            self.pdbx_atcc = pdbx_atcc
        if pdbx_beg_seq_num is not None:
            self.pdbx_beg_seq_num = pdbx_beg_seq_num
        if pdbx_cell is not None:
            self.pdbx_cell = pdbx_cell
        if pdbx_cell_line is not None:
            self.pdbx_cell_line = pdbx_cell_line
        if pdbx_cellular_location is not None:
            self.pdbx_cellular_location = pdbx_cellular_location
        if pdbx_end_seq_num is not None:
            self.pdbx_end_seq_num = pdbx_end_seq_num
        if pdbx_fragment is not None:
            self.pdbx_fragment = pdbx_fragment
        if pdbx_ncbi_taxonomy_id is not None:
            self.pdbx_ncbi_taxonomy_id = pdbx_ncbi_taxonomy_id
        if pdbx_organ is not None:
            self.pdbx_organ = pdbx_organ
        if pdbx_organelle is not None:
            self.pdbx_organelle = pdbx_organelle
        if pdbx_organism_scientific is not None:
            self.pdbx_organism_scientific = pdbx_organism_scientific
        if pdbx_plasmid_details is not None:
            self.pdbx_plasmid_details = pdbx_plasmid_details
        if pdbx_plasmid_name is not None:
            self.pdbx_plasmid_name = pdbx_plasmid_name
        if pdbx_secretion is not None:
            self.pdbx_secretion = pdbx_secretion
        self.pdbx_src_id = pdbx_src_id
        if pdbx_variant is not None:
            self.pdbx_variant = pdbx_variant
        if species is not None:
            self.species = species
        if strain is not None:
            self.strain = strain
        if tissue is not None:
            self.tissue = tissue
        if tissue_fraction is not None:
            self.tissue_fraction = tissue_fraction

    @property
    def common_name(self):
        """Gets the common_name of this EntitySrcNat.  # noqa: E501

        The common name of the organism from which the entity  was isolated.  # noqa: E501

        :return: The common_name of this EntitySrcNat.  # noqa: E501
        :rtype: str
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name):
        """Sets the common_name of this EntitySrcNat.

        The common name of the organism from which the entity  was isolated.  # noqa: E501

        :param common_name: The common_name of this EntitySrcNat.  # noqa: E501
        :type: str
        """

        self._common_name = common_name

    @property
    def details(self):
        """Gets the details of this EntitySrcNat.  # noqa: E501

        A description of special aspects of the organism from which the  entity was isolated.  # noqa: E501

        :return: The details of this EntitySrcNat.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this EntitySrcNat.

        A description of special aspects of the organism from which the  entity was isolated.  # noqa: E501

        :param details: The details of this EntitySrcNat.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def genus(self):
        """Gets the genus of this EntitySrcNat.  # noqa: E501

        The genus of the organism from which the entity was isolated.  # noqa: E501

        :return: The genus of this EntitySrcNat.  # noqa: E501
        :rtype: str
        """
        return self._genus

    @genus.setter
    def genus(self, genus):
        """Sets the genus of this EntitySrcNat.

        The genus of the organism from which the entity was isolated.  # noqa: E501

        :param genus: The genus of this EntitySrcNat.  # noqa: E501
        :type: str
        """

        self._genus = genus

    @property
    def pdbx_alt_source_flag(self):
        """Gets the pdbx_alt_source_flag of this EntitySrcNat.  # noqa: E501

        This data item identifies cases in which an alternative source  modeled.  # noqa: E501

        :return: The pdbx_alt_source_flag of this EntitySrcNat.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_alt_source_flag

    @pdbx_alt_source_flag.setter
    def pdbx_alt_source_flag(self, pdbx_alt_source_flag):
        """Sets the pdbx_alt_source_flag of this EntitySrcNat.

        This data item identifies cases in which an alternative source  modeled.  # noqa: E501

        :param pdbx_alt_source_flag: The pdbx_alt_source_flag of this EntitySrcNat.  # noqa: E501
        :type: str
        """
        allowed_values = ["model", "sample"]  # noqa: E501
        if pdbx_alt_source_flag not in allowed_values:
            raise ValueError(
                "Invalid value for `pdbx_alt_source_flag` ({0}), must be one of {1}"  # noqa: E501
                .format(pdbx_alt_source_flag, allowed_values)
            )

        self._pdbx_alt_source_flag = pdbx_alt_source_flag

    @property
    def pdbx_atcc(self):
        """Gets the pdbx_atcc of this EntitySrcNat.  # noqa: E501

        Americal Tissue Culture Collection number.  # noqa: E501

        :return: The pdbx_atcc of this EntitySrcNat.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_atcc

    @pdbx_atcc.setter
    def pdbx_atcc(self, pdbx_atcc):
        """Sets the pdbx_atcc of this EntitySrcNat.

        Americal Tissue Culture Collection number.  # noqa: E501

        :param pdbx_atcc: The pdbx_atcc of this EntitySrcNat.  # noqa: E501
        :type: str
        """

        self._pdbx_atcc = pdbx_atcc

    @property
    def pdbx_beg_seq_num(self):
        """Gets the pdbx_beg_seq_num of this EntitySrcNat.  # noqa: E501

        The beginning polymer sequence position for the polymer section corresponding  to this source.   A reference to the sequence position in the entity_poly category.  # noqa: E501

        :return: The pdbx_beg_seq_num of this EntitySrcNat.  # noqa: E501
        :rtype: int
        """
        return self._pdbx_beg_seq_num

    @pdbx_beg_seq_num.setter
    def pdbx_beg_seq_num(self, pdbx_beg_seq_num):
        """Sets the pdbx_beg_seq_num of this EntitySrcNat.

        The beginning polymer sequence position for the polymer section corresponding  to this source.   A reference to the sequence position in the entity_poly category.  # noqa: E501

        :param pdbx_beg_seq_num: The pdbx_beg_seq_num of this EntitySrcNat.  # noqa: E501
        :type: int
        """

        self._pdbx_beg_seq_num = pdbx_beg_seq_num

    @property
    def pdbx_cell(self):
        """Gets the pdbx_cell of this EntitySrcNat.  # noqa: E501

        A particular cell type.  # noqa: E501

        :return: The pdbx_cell of this EntitySrcNat.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_cell

    @pdbx_cell.setter
    def pdbx_cell(self, pdbx_cell):
        """Sets the pdbx_cell of this EntitySrcNat.

        A particular cell type.  # noqa: E501

        :param pdbx_cell: The pdbx_cell of this EntitySrcNat.  # noqa: E501
        :type: str
        """

        self._pdbx_cell = pdbx_cell

    @property
    def pdbx_cell_line(self):
        """Gets the pdbx_cell_line of this EntitySrcNat.  # noqa: E501

        The specific line of cells.  # noqa: E501

        :return: The pdbx_cell_line of this EntitySrcNat.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_cell_line

    @pdbx_cell_line.setter
    def pdbx_cell_line(self, pdbx_cell_line):
        """Sets the pdbx_cell_line of this EntitySrcNat.

        The specific line of cells.  # noqa: E501

        :param pdbx_cell_line: The pdbx_cell_line of this EntitySrcNat.  # noqa: E501
        :type: str
        """

        self._pdbx_cell_line = pdbx_cell_line

    @property
    def pdbx_cellular_location(self):
        """Gets the pdbx_cellular_location of this EntitySrcNat.  # noqa: E501

        Identifies the location inside (or outside) the cell.  # noqa: E501

        :return: The pdbx_cellular_location of this EntitySrcNat.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_cellular_location

    @pdbx_cellular_location.setter
    def pdbx_cellular_location(self, pdbx_cellular_location):
        """Sets the pdbx_cellular_location of this EntitySrcNat.

        Identifies the location inside (or outside) the cell.  # noqa: E501

        :param pdbx_cellular_location: The pdbx_cellular_location of this EntitySrcNat.  # noqa: E501
        :type: str
        """

        self._pdbx_cellular_location = pdbx_cellular_location

    @property
    def pdbx_end_seq_num(self):
        """Gets the pdbx_end_seq_num of this EntitySrcNat.  # noqa: E501

        The ending polymer sequence position for the polymer section corresponding  to this source.   A reference to the sequence position in the entity_poly category.  # noqa: E501

        :return: The pdbx_end_seq_num of this EntitySrcNat.  # noqa: E501
        :rtype: int
        """
        return self._pdbx_end_seq_num

    @pdbx_end_seq_num.setter
    def pdbx_end_seq_num(self, pdbx_end_seq_num):
        """Sets the pdbx_end_seq_num of this EntitySrcNat.

        The ending polymer sequence position for the polymer section corresponding  to this source.   A reference to the sequence position in the entity_poly category.  # noqa: E501

        :param pdbx_end_seq_num: The pdbx_end_seq_num of this EntitySrcNat.  # noqa: E501
        :type: int
        """

        self._pdbx_end_seq_num = pdbx_end_seq_num

    @property
    def pdbx_fragment(self):
        """Gets the pdbx_fragment of this EntitySrcNat.  # noqa: E501

        A domain or fragment of the molecule.  # noqa: E501

        :return: The pdbx_fragment of this EntitySrcNat.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_fragment

    @pdbx_fragment.setter
    def pdbx_fragment(self, pdbx_fragment):
        """Sets the pdbx_fragment of this EntitySrcNat.

        A domain or fragment of the molecule.  # noqa: E501

        :param pdbx_fragment: The pdbx_fragment of this EntitySrcNat.  # noqa: E501
        :type: str
        """

        self._pdbx_fragment = pdbx_fragment

    @property
    def pdbx_ncbi_taxonomy_id(self):
        """Gets the pdbx_ncbi_taxonomy_id of this EntitySrcNat.  # noqa: E501

        NCBI Taxonomy identifier for the source organism.   Reference:   Wheeler DL, Chappey C, Lash AE, Leipe DD, Madden TL, Schuler GD,  Tatusova TA, Rapp BA (2000). Database resources of the National  Center for Biotechnology Information. Nucleic Acids Res 2000 Jan  1;28(1):10-4   Benson DA, Karsch-Mizrachi I, Lipman DJ, Ostell J, Rapp BA,  Wheeler DL (2000). GenBank. Nucleic Acids Res 2000 Jan 1;28(1):15-18.  # noqa: E501

        :return: The pdbx_ncbi_taxonomy_id of this EntitySrcNat.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_ncbi_taxonomy_id

    @pdbx_ncbi_taxonomy_id.setter
    def pdbx_ncbi_taxonomy_id(self, pdbx_ncbi_taxonomy_id):
        """Sets the pdbx_ncbi_taxonomy_id of this EntitySrcNat.

        NCBI Taxonomy identifier for the source organism.   Reference:   Wheeler DL, Chappey C, Lash AE, Leipe DD, Madden TL, Schuler GD,  Tatusova TA, Rapp BA (2000). Database resources of the National  Center for Biotechnology Information. Nucleic Acids Res 2000 Jan  1;28(1):10-4   Benson DA, Karsch-Mizrachi I, Lipman DJ, Ostell J, Rapp BA,  Wheeler DL (2000). GenBank. Nucleic Acids Res 2000 Jan 1;28(1):15-18.  # noqa: E501

        :param pdbx_ncbi_taxonomy_id: The pdbx_ncbi_taxonomy_id of this EntitySrcNat.  # noqa: E501
        :type: str
        """

        self._pdbx_ncbi_taxonomy_id = pdbx_ncbi_taxonomy_id

    @property
    def pdbx_organ(self):
        """Gets the pdbx_organ of this EntitySrcNat.  # noqa: E501

        Organized group of tissues that carries on a specialized function.  # noqa: E501

        :return: The pdbx_organ of this EntitySrcNat.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_organ

    @pdbx_organ.setter
    def pdbx_organ(self, pdbx_organ):
        """Sets the pdbx_organ of this EntitySrcNat.

        Organized group of tissues that carries on a specialized function.  # noqa: E501

        :param pdbx_organ: The pdbx_organ of this EntitySrcNat.  # noqa: E501
        :type: str
        """

        self._pdbx_organ = pdbx_organ

    @property
    def pdbx_organelle(self):
        """Gets the pdbx_organelle of this EntitySrcNat.  # noqa: E501

        Organized structure within cell.  # noqa: E501

        :return: The pdbx_organelle of this EntitySrcNat.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_organelle

    @pdbx_organelle.setter
    def pdbx_organelle(self, pdbx_organelle):
        """Sets the pdbx_organelle of this EntitySrcNat.

        Organized structure within cell.  # noqa: E501

        :param pdbx_organelle: The pdbx_organelle of this EntitySrcNat.  # noqa: E501
        :type: str
        """

        self._pdbx_organelle = pdbx_organelle

    @property
    def pdbx_organism_scientific(self):
        """Gets the pdbx_organism_scientific of this EntitySrcNat.  # noqa: E501

        Scientific name of the organism of the natural source.  # noqa: E501

        :return: The pdbx_organism_scientific of this EntitySrcNat.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_organism_scientific

    @pdbx_organism_scientific.setter
    def pdbx_organism_scientific(self, pdbx_organism_scientific):
        """Sets the pdbx_organism_scientific of this EntitySrcNat.

        Scientific name of the organism of the natural source.  # noqa: E501

        :param pdbx_organism_scientific: The pdbx_organism_scientific of this EntitySrcNat.  # noqa: E501
        :type: str
        """

        self._pdbx_organism_scientific = pdbx_organism_scientific

    @property
    def pdbx_plasmid_details(self):
        """Gets the pdbx_plasmid_details of this EntitySrcNat.  # noqa: E501

        Details about the plasmid.  # noqa: E501

        :return: The pdbx_plasmid_details of this EntitySrcNat.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_plasmid_details

    @pdbx_plasmid_details.setter
    def pdbx_plasmid_details(self, pdbx_plasmid_details):
        """Sets the pdbx_plasmid_details of this EntitySrcNat.

        Details about the plasmid.  # noqa: E501

        :param pdbx_plasmid_details: The pdbx_plasmid_details of this EntitySrcNat.  # noqa: E501
        :type: str
        """

        self._pdbx_plasmid_details = pdbx_plasmid_details

    @property
    def pdbx_plasmid_name(self):
        """Gets the pdbx_plasmid_name of this EntitySrcNat.  # noqa: E501

        The plasmid containing the gene.  # noqa: E501

        :return: The pdbx_plasmid_name of this EntitySrcNat.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_plasmid_name

    @pdbx_plasmid_name.setter
    def pdbx_plasmid_name(self, pdbx_plasmid_name):
        """Sets the pdbx_plasmid_name of this EntitySrcNat.

        The plasmid containing the gene.  # noqa: E501

        :param pdbx_plasmid_name: The pdbx_plasmid_name of this EntitySrcNat.  # noqa: E501
        :type: str
        """

        self._pdbx_plasmid_name = pdbx_plasmid_name

    @property
    def pdbx_secretion(self):
        """Gets the pdbx_secretion of this EntitySrcNat.  # noqa: E501

        Identifies the secretion from which the molecule was isolated.  # noqa: E501

        :return: The pdbx_secretion of this EntitySrcNat.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_secretion

    @pdbx_secretion.setter
    def pdbx_secretion(self, pdbx_secretion):
        """Sets the pdbx_secretion of this EntitySrcNat.

        Identifies the secretion from which the molecule was isolated.  # noqa: E501

        :param pdbx_secretion: The pdbx_secretion of this EntitySrcNat.  # noqa: E501
        :type: str
        """

        self._pdbx_secretion = pdbx_secretion

    @property
    def pdbx_src_id(self):
        """Gets the pdbx_src_id of this EntitySrcNat.  # noqa: E501

        This data item is an ordinal identifier for entity_src_nat data records.  # noqa: E501

        :return: The pdbx_src_id of this EntitySrcNat.  # noqa: E501
        :rtype: int
        """
        return self._pdbx_src_id

    @pdbx_src_id.setter
    def pdbx_src_id(self, pdbx_src_id):
        """Sets the pdbx_src_id of this EntitySrcNat.

        This data item is an ordinal identifier for entity_src_nat data records.  # noqa: E501

        :param pdbx_src_id: The pdbx_src_id of this EntitySrcNat.  # noqa: E501
        :type: int
        """
        if pdbx_src_id is None:
            raise ValueError("Invalid value for `pdbx_src_id`, must not be `None`")  # noqa: E501

        self._pdbx_src_id = pdbx_src_id

    @property
    def pdbx_variant(self):
        """Gets the pdbx_variant of this EntitySrcNat.  # noqa: E501

        Identifies the variant.  # noqa: E501

        :return: The pdbx_variant of this EntitySrcNat.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_variant

    @pdbx_variant.setter
    def pdbx_variant(self, pdbx_variant):
        """Sets the pdbx_variant of this EntitySrcNat.

        Identifies the variant.  # noqa: E501

        :param pdbx_variant: The pdbx_variant of this EntitySrcNat.  # noqa: E501
        :type: str
        """

        self._pdbx_variant = pdbx_variant

    @property
    def species(self):
        """Gets the species of this EntitySrcNat.  # noqa: E501

        The species of the organism from which the entity was isolated.  # noqa: E501

        :return: The species of this EntitySrcNat.  # noqa: E501
        :rtype: str
        """
        return self._species

    @species.setter
    def species(self, species):
        """Sets the species of this EntitySrcNat.

        The species of the organism from which the entity was isolated.  # noqa: E501

        :param species: The species of this EntitySrcNat.  # noqa: E501
        :type: str
        """

        self._species = species

    @property
    def strain(self):
        """Gets the strain of this EntitySrcNat.  # noqa: E501

        The strain of the organism from which the entity was isolated.  # noqa: E501

        :return: The strain of this EntitySrcNat.  # noqa: E501
        :rtype: str
        """
        return self._strain

    @strain.setter
    def strain(self, strain):
        """Sets the strain of this EntitySrcNat.

        The strain of the organism from which the entity was isolated.  # noqa: E501

        :param strain: The strain of this EntitySrcNat.  # noqa: E501
        :type: str
        """

        self._strain = strain

    @property
    def tissue(self):
        """Gets the tissue of this EntitySrcNat.  # noqa: E501

        The tissue of the organism from which the entity was isolated.  # noqa: E501

        :return: The tissue of this EntitySrcNat.  # noqa: E501
        :rtype: str
        """
        return self._tissue

    @tissue.setter
    def tissue(self, tissue):
        """Sets the tissue of this EntitySrcNat.

        The tissue of the organism from which the entity was isolated.  # noqa: E501

        :param tissue: The tissue of this EntitySrcNat.  # noqa: E501
        :type: str
        """

        self._tissue = tissue

    @property
    def tissue_fraction(self):
        """Gets the tissue_fraction of this EntitySrcNat.  # noqa: E501

        The subcellular fraction of the tissue of the organism from  which the entity was isolated.  # noqa: E501

        :return: The tissue_fraction of this EntitySrcNat.  # noqa: E501
        :rtype: str
        """
        return self._tissue_fraction

    @tissue_fraction.setter
    def tissue_fraction(self, tissue_fraction):
        """Sets the tissue_fraction of this EntitySrcNat.

        The subcellular fraction of the tissue of the organism from  which the entity was isolated.  # noqa: E501

        :param tissue_fraction: The tissue_fraction of this EntitySrcNat.  # noqa: E501
        :type: str
        """

        self._tissue_fraction = tissue_fraction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EntitySrcNat, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntitySrcNat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
