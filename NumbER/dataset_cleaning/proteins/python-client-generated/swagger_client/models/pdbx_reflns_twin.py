# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PdbxReflnsTwin(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'crystal_id': 'str',
        'diffrn_id': 'str',
        'domain_id': 'str',
        'fraction': 'float',
        'operator': 'str',
        'type': 'str'
    }

    attribute_map = {
        'crystal_id': 'crystal_id',
        'diffrn_id': 'diffrn_id',
        'domain_id': 'domain_id',
        'fraction': 'fraction',
        'operator': 'operator',
        'type': 'type'
    }

    def __init__(self, crystal_id=None, diffrn_id=None, domain_id=None, fraction=None, operator=None, type=None):  # noqa: E501
        """PdbxReflnsTwin - a model defined in Swagger"""  # noqa: E501
        self._crystal_id = None
        self._diffrn_id = None
        self._domain_id = None
        self._fraction = None
        self._operator = None
        self._type = None
        self.discriminator = None
        self.crystal_id = crystal_id
        self.diffrn_id = diffrn_id
        if domain_id is not None:
            self.domain_id = domain_id
        if fraction is not None:
            self.fraction = fraction
        self.operator = operator
        if type is not None:
            self.type = type

    @property
    def crystal_id(self):
        """Gets the crystal_id of this PdbxReflnsTwin.  # noqa: E501

        The crystal identifier.  A reference to  _exptl_crystal.id in category EXPTL_CRYSTAL.  # noqa: E501

        :return: The crystal_id of this PdbxReflnsTwin.  # noqa: E501
        :rtype: str
        """
        return self._crystal_id

    @crystal_id.setter
    def crystal_id(self, crystal_id):
        """Sets the crystal_id of this PdbxReflnsTwin.

        The crystal identifier.  A reference to  _exptl_crystal.id in category EXPTL_CRYSTAL.  # noqa: E501

        :param crystal_id: The crystal_id of this PdbxReflnsTwin.  # noqa: E501
        :type: str
        """
        if crystal_id is None:
            raise ValueError("Invalid value for `crystal_id`, must not be `None`")  # noqa: E501

        self._crystal_id = crystal_id

    @property
    def diffrn_id(self):
        """Gets the diffrn_id of this PdbxReflnsTwin.  # noqa: E501

        The diffraction data set identifier.  A reference to  _diffrn.id in category DIFFRN.  # noqa: E501

        :return: The diffrn_id of this PdbxReflnsTwin.  # noqa: E501
        :rtype: str
        """
        return self._diffrn_id

    @diffrn_id.setter
    def diffrn_id(self, diffrn_id):
        """Sets the diffrn_id of this PdbxReflnsTwin.

        The diffraction data set identifier.  A reference to  _diffrn.id in category DIFFRN.  # noqa: E501

        :param diffrn_id: The diffrn_id of this PdbxReflnsTwin.  # noqa: E501
        :type: str
        """
        if diffrn_id is None:
            raise ValueError("Invalid value for `diffrn_id`, must not be `None`")  # noqa: E501

        self._diffrn_id = diffrn_id

    @property
    def domain_id(self):
        """Gets the domain_id of this PdbxReflnsTwin.  # noqa: E501

        An identifier for the twin domain.  # noqa: E501

        :return: The domain_id of this PdbxReflnsTwin.  # noqa: E501
        :rtype: str
        """
        return self._domain_id

    @domain_id.setter
    def domain_id(self, domain_id):
        """Sets the domain_id of this PdbxReflnsTwin.

        An identifier for the twin domain.  # noqa: E501

        :param domain_id: The domain_id of this PdbxReflnsTwin.  # noqa: E501
        :type: str
        """

        self._domain_id = domain_id

    @property
    def fraction(self):
        """Gets the fraction of this PdbxReflnsTwin.  # noqa: E501

        The twin fraction or twin factor represents a quantitative parameter for the crystal twinning.  The value 0 represents no twinning, < 0.5 partial twinning,  = 0.5 for perfect twinning.  # noqa: E501

        :return: The fraction of this PdbxReflnsTwin.  # noqa: E501
        :rtype: float
        """
        return self._fraction

    @fraction.setter
    def fraction(self, fraction):
        """Sets the fraction of this PdbxReflnsTwin.

        The twin fraction or twin factor represents a quantitative parameter for the crystal twinning.  The value 0 represents no twinning, < 0.5 partial twinning,  = 0.5 for perfect twinning.  # noqa: E501

        :param fraction: The fraction of this PdbxReflnsTwin.  # noqa: E501
        :type: float
        """

        self._fraction = fraction

    @property
    def operator(self):
        """Gets the operator of this PdbxReflnsTwin.  # noqa: E501

        The possible merohedral or hemihedral twinning operators for different point groups are:  True point group   Twin operation   hkl related to 3                       2 along a,b             h,-h-k,-l                         2 along a*,b*           h+k,-k,-l                         2 along c               -h,-k,l 4                       2 along a,b,a*,b*       h,-k,-l 6                       2 along a,b,a*,b*       h,-h-k,-l 321                     2 along a*,b*,c         -h,-k,l 312                     2 along a,b,c           -h,-k,l 23                      4 along a,b,c            k,-h,l  References:  Yeates, T.O. (1997) Methods in Enzymology 276, 344-358. Detecting and  Overcoming Crystal Twinning.   and information from the following on-line sites:     CNS site http://cns.csb.yale.edu/v1.1/    CCP4 site http://www.ccp4.ac.uk/dist/html/detwin.html    SHELX site http://shelx.uni-ac.gwdg.de/~rherbst/twin.html  # noqa: E501

        :return: The operator of this PdbxReflnsTwin.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this PdbxReflnsTwin.

        The possible merohedral or hemihedral twinning operators for different point groups are:  True point group   Twin operation   hkl related to 3                       2 along a,b             h,-h-k,-l                         2 along a*,b*           h+k,-k,-l                         2 along c               -h,-k,l 4                       2 along a,b,a*,b*       h,-k,-l 6                       2 along a,b,a*,b*       h,-h-k,-l 321                     2 along a*,b*,c         -h,-k,l 312                     2 along a,b,c           -h,-k,l 23                      4 along a,b,c            k,-h,l  References:  Yeates, T.O. (1997) Methods in Enzymology 276, 344-358. Detecting and  Overcoming Crystal Twinning.   and information from the following on-line sites:     CNS site http://cns.csb.yale.edu/v1.1/    CCP4 site http://www.ccp4.ac.uk/dist/html/detwin.html    SHELX site http://shelx.uni-ac.gwdg.de/~rherbst/twin.html  # noqa: E501

        :param operator: The operator of this PdbxReflnsTwin.  # noqa: E501
        :type: str
        """
        if operator is None:
            raise ValueError("Invalid value for `operator`, must not be `None`")  # noqa: E501

        self._operator = operator

    @property
    def type(self):
        """Gets the type of this PdbxReflnsTwin.  # noqa: E501

        There are two types of twinning: merohedral or hemihedral                                  non-merohedral or epitaxial  For merohedral twinning the diffraction patterns from the different domains are completely superimposable.   Hemihedral twinning is a special case of merohedral twinning. It only involves two distinct domains.  Pseudo-merohedral twinning is a subclass merohedral twinning in which lattice is coincidentally superimposable.  In the case of non-merohedral or epitaxial twinning  the reciprocal lattices do not superimpose exactly. In this case the  diffraction pattern consists of two (or more) interpenetrating lattices, which can in principle be separated.  # noqa: E501

        :return: The type of this PdbxReflnsTwin.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PdbxReflnsTwin.

        There are two types of twinning: merohedral or hemihedral                                  non-merohedral or epitaxial  For merohedral twinning the diffraction patterns from the different domains are completely superimposable.   Hemihedral twinning is a special case of merohedral twinning. It only involves two distinct domains.  Pseudo-merohedral twinning is a subclass merohedral twinning in which lattice is coincidentally superimposable.  In the case of non-merohedral or epitaxial twinning  the reciprocal lattices do not superimpose exactly. In this case the  diffraction pattern consists of two (or more) interpenetrating lattices, which can in principle be separated.  # noqa: E501

        :param type: The type of this PdbxReflnsTwin.  # noqa: E501
        :type: str
        """
        allowed_values = ["epitaxial", "hemihedral", "merohedral", "non-merohedral", "pseudo-merohedral", "tetartohedral"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PdbxReflnsTwin, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdbxReflnsTwin):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
