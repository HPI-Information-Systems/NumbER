# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EmImageRecording(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'average_exposure_time': 'float',
        'avg_electron_dose_per_image': 'float',
        'details': 'str',
        'detector_mode': 'str',
        'film_or_detector_model': 'str',
        'id': 'str',
        'imaging_id': 'str',
        'num_diffraction_images': 'int',
        'num_grids_imaged': 'int',
        'num_real_images': 'int'
    }

    attribute_map = {
        'average_exposure_time': 'average_exposure_time',
        'avg_electron_dose_per_image': 'avg_electron_dose_per_image',
        'details': 'details',
        'detector_mode': 'detector_mode',
        'film_or_detector_model': 'film_or_detector_model',
        'id': 'id',
        'imaging_id': 'imaging_id',
        'num_diffraction_images': 'num_diffraction_images',
        'num_grids_imaged': 'num_grids_imaged',
        'num_real_images': 'num_real_images'
    }

    def __init__(self, average_exposure_time=None, avg_electron_dose_per_image=None, details=None, detector_mode=None, film_or_detector_model=None, id=None, imaging_id=None, num_diffraction_images=None, num_grids_imaged=None, num_real_images=None):  # noqa: E501
        """EmImageRecording - a model defined in Swagger"""  # noqa: E501
        self._average_exposure_time = None
        self._avg_electron_dose_per_image = None
        self._details = None
        self._detector_mode = None
        self._film_or_detector_model = None
        self._id = None
        self._imaging_id = None
        self._num_diffraction_images = None
        self._num_grids_imaged = None
        self._num_real_images = None
        self.discriminator = None
        if average_exposure_time is not None:
            self.average_exposure_time = average_exposure_time
        if avg_electron_dose_per_image is not None:
            self.avg_electron_dose_per_image = avg_electron_dose_per_image
        if details is not None:
            self.details = details
        if detector_mode is not None:
            self.detector_mode = detector_mode
        if film_or_detector_model is not None:
            self.film_or_detector_model = film_or_detector_model
        self.id = id
        self.imaging_id = imaging_id
        if num_diffraction_images is not None:
            self.num_diffraction_images = num_diffraction_images
        if num_grids_imaged is not None:
            self.num_grids_imaged = num_grids_imaged
        if num_real_images is not None:
            self.num_real_images = num_real_images

    @property
    def average_exposure_time(self):
        """Gets the average_exposure_time of this EmImageRecording.  # noqa: E501

        The average exposure time for each image.  # noqa: E501

        :return: The average_exposure_time of this EmImageRecording.  # noqa: E501
        :rtype: float
        """
        return self._average_exposure_time

    @average_exposure_time.setter
    def average_exposure_time(self, average_exposure_time):
        """Sets the average_exposure_time of this EmImageRecording.

        The average exposure time for each image.  # noqa: E501

        :param average_exposure_time: The average_exposure_time of this EmImageRecording.  # noqa: E501
        :type: float
        """

        self._average_exposure_time = average_exposure_time

    @property
    def avg_electron_dose_per_image(self):
        """Gets the avg_electron_dose_per_image of this EmImageRecording.  # noqa: E501

        The electron dose received by the specimen per image (electrons per square angstrom).  # noqa: E501

        :return: The avg_electron_dose_per_image of this EmImageRecording.  # noqa: E501
        :rtype: float
        """
        return self._avg_electron_dose_per_image

    @avg_electron_dose_per_image.setter
    def avg_electron_dose_per_image(self, avg_electron_dose_per_image):
        """Sets the avg_electron_dose_per_image of this EmImageRecording.

        The electron dose received by the specimen per image (electrons per square angstrom).  # noqa: E501

        :param avg_electron_dose_per_image: The avg_electron_dose_per_image of this EmImageRecording.  # noqa: E501
        :type: float
        """

        self._avg_electron_dose_per_image = avg_electron_dose_per_image

    @property
    def details(self):
        """Gets the details of this EmImageRecording.  # noqa: E501

        Any additional details about image recording.  # noqa: E501

        :return: The details of this EmImageRecording.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this EmImageRecording.

        Any additional details about image recording.  # noqa: E501

        :param details: The details of this EmImageRecording.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def detector_mode(self):
        """Gets the detector_mode of this EmImageRecording.  # noqa: E501

        The detector mode used during image recording.  # noqa: E501

        :return: The detector_mode of this EmImageRecording.  # noqa: E501
        :rtype: str
        """
        return self._detector_mode

    @detector_mode.setter
    def detector_mode(self, detector_mode):
        """Sets the detector_mode of this EmImageRecording.

        The detector mode used during image recording.  # noqa: E501

        :param detector_mode: The detector_mode of this EmImageRecording.  # noqa: E501
        :type: str
        """
        allowed_values = ["COUNTING", "INTEGRATING", "OTHER", "SUPER-RESOLUTION"]  # noqa: E501
        if detector_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `detector_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(detector_mode, allowed_values)
            )

        self._detector_mode = detector_mode

    @property
    def film_or_detector_model(self):
        """Gets the film_or_detector_model of this EmImageRecording.  # noqa: E501

        The detector type used for recording images.  Usually film , CCD camera or direct electron detector.  # noqa: E501

        :return: The film_or_detector_model of this EmImageRecording.  # noqa: E501
        :rtype: str
        """
        return self._film_or_detector_model

    @film_or_detector_model.setter
    def film_or_detector_model(self, film_or_detector_model):
        """Sets the film_or_detector_model of this EmImageRecording.

        The detector type used for recording images.  Usually film , CCD camera or direct electron detector.  # noqa: E501

        :param film_or_detector_model: The film_or_detector_model of this EmImageRecording.  # noqa: E501
        :type: str
        """

        self._film_or_detector_model = film_or_detector_model

    @property
    def id(self):
        """Gets the id of this EmImageRecording.  # noqa: E501

        PRIMARY KEY  # noqa: E501

        :return: The id of this EmImageRecording.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EmImageRecording.

        PRIMARY KEY  # noqa: E501

        :param id: The id of this EmImageRecording.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def imaging_id(self):
        """Gets the imaging_id of this EmImageRecording.  # noqa: E501

        This data item the id of the microscopy settings used in the imaging.  # noqa: E501

        :return: The imaging_id of this EmImageRecording.  # noqa: E501
        :rtype: str
        """
        return self._imaging_id

    @imaging_id.setter
    def imaging_id(self, imaging_id):
        """Sets the imaging_id of this EmImageRecording.

        This data item the id of the microscopy settings used in the imaging.  # noqa: E501

        :param imaging_id: The imaging_id of this EmImageRecording.  # noqa: E501
        :type: str
        """
        if imaging_id is None:
            raise ValueError("Invalid value for `imaging_id`, must not be `None`")  # noqa: E501

        self._imaging_id = imaging_id

    @property
    def num_diffraction_images(self):
        """Gets the num_diffraction_images of this EmImageRecording.  # noqa: E501

        The number of diffraction images collected.  # noqa: E501

        :return: The num_diffraction_images of this EmImageRecording.  # noqa: E501
        :rtype: int
        """
        return self._num_diffraction_images

    @num_diffraction_images.setter
    def num_diffraction_images(self, num_diffraction_images):
        """Sets the num_diffraction_images of this EmImageRecording.

        The number of diffraction images collected.  # noqa: E501

        :param num_diffraction_images: The num_diffraction_images of this EmImageRecording.  # noqa: E501
        :type: int
        """

        self._num_diffraction_images = num_diffraction_images

    @property
    def num_grids_imaged(self):
        """Gets the num_grids_imaged of this EmImageRecording.  # noqa: E501

        Number of grids in the microscopy session  # noqa: E501

        :return: The num_grids_imaged of this EmImageRecording.  # noqa: E501
        :rtype: int
        """
        return self._num_grids_imaged

    @num_grids_imaged.setter
    def num_grids_imaged(self, num_grids_imaged):
        """Sets the num_grids_imaged of this EmImageRecording.

        Number of grids in the microscopy session  # noqa: E501

        :param num_grids_imaged: The num_grids_imaged of this EmImageRecording.  # noqa: E501
        :type: int
        """

        self._num_grids_imaged = num_grids_imaged

    @property
    def num_real_images(self):
        """Gets the num_real_images of this EmImageRecording.  # noqa: E501

        The number of micrograph images collected.  # noqa: E501

        :return: The num_real_images of this EmImageRecording.  # noqa: E501
        :rtype: int
        """
        return self._num_real_images

    @num_real_images.setter
    def num_real_images(self, num_real_images):
        """Sets the num_real_images of this EmImageRecording.

        The number of micrograph images collected.  # noqa: E501

        :param num_real_images: The num_real_images of this EmImageRecording.  # noqa: E501
        :type: int
        """

        self._num_real_images = num_real_images

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmImageRecording, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmImageRecording):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
