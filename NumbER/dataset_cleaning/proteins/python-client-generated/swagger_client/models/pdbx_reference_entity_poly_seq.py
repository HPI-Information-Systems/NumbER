# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PdbxReferenceEntityPolySeq(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hetero': 'str',
        'mon_id': 'str',
        'num': 'int',
        'observed': 'str',
        'parent_mon_id': 'str',
        'prd_id': 'str',
        'ref_entity_id': 'str'
    }

    attribute_map = {
        'hetero': 'hetero',
        'mon_id': 'mon_id',
        'num': 'num',
        'observed': 'observed',
        'parent_mon_id': 'parent_mon_id',
        'prd_id': 'prd_id',
        'ref_entity_id': 'ref_entity_id'
    }

    def __init__(self, hetero=None, mon_id=None, num=None, observed=None, parent_mon_id=None, prd_id=None, ref_entity_id=None):  # noqa: E501
        """PdbxReferenceEntityPolySeq - a model defined in Swagger"""  # noqa: E501
        self._hetero = None
        self._mon_id = None
        self._num = None
        self._observed = None
        self._parent_mon_id = None
        self._prd_id = None
        self._ref_entity_id = None
        self.discriminator = None
        self.hetero = hetero
        self.mon_id = mon_id
        self.num = num
        if observed is not None:
            self.observed = observed
        if parent_mon_id is not None:
            self.parent_mon_id = parent_mon_id
        self.prd_id = prd_id
        self.ref_entity_id = ref_entity_id

    @property
    def hetero(self):
        """Gets the hetero of this PdbxReferenceEntityPolySeq.  # noqa: E501

        A flag to indicate that sequence heterogeneity at this monomer position.  # noqa: E501

        :return: The hetero of this PdbxReferenceEntityPolySeq.  # noqa: E501
        :rtype: str
        """
        return self._hetero

    @hetero.setter
    def hetero(self, hetero):
        """Sets the hetero of this PdbxReferenceEntityPolySeq.

        A flag to indicate that sequence heterogeneity at this monomer position.  # noqa: E501

        :param hetero: The hetero of this PdbxReferenceEntityPolySeq.  # noqa: E501
        :type: str
        """
        if hetero is None:
            raise ValueError("Invalid value for `hetero`, must not be `None`")  # noqa: E501
        allowed_values = ["N", "Y"]  # noqa: E501
        if hetero not in allowed_values:
            raise ValueError(
                "Invalid value for `hetero` ({0}), must be one of {1}"  # noqa: E501
                .format(hetero, allowed_values)
            )

        self._hetero = hetero

    @property
    def mon_id(self):
        """Gets the mon_id of this PdbxReferenceEntityPolySeq.  # noqa: E501

        This data item is the chemical component identifier of monomer.  # noqa: E501

        :return: The mon_id of this PdbxReferenceEntityPolySeq.  # noqa: E501
        :rtype: str
        """
        return self._mon_id

    @mon_id.setter
    def mon_id(self, mon_id):
        """Sets the mon_id of this PdbxReferenceEntityPolySeq.

        This data item is the chemical component identifier of monomer.  # noqa: E501

        :param mon_id: The mon_id of this PdbxReferenceEntityPolySeq.  # noqa: E501
        :type: str
        """
        if mon_id is None:
            raise ValueError("Invalid value for `mon_id`, must not be `None`")  # noqa: E501

        self._mon_id = mon_id

    @property
    def num(self):
        """Gets the num of this PdbxReferenceEntityPolySeq.  # noqa: E501

        The value of _pdbx_reference_entity_poly_seq.num must uniquely and sequentially  identify a record in the PDBX_REFERENCE_ENTITY_POLY_SEQ list.   This value is conforms to author numbering conventions and does not map directly  to the numbering conventions used for _entity_poly_seq.num.  # noqa: E501

        :return: The num of this PdbxReferenceEntityPolySeq.  # noqa: E501
        :rtype: int
        """
        return self._num

    @num.setter
    def num(self, num):
        """Sets the num of this PdbxReferenceEntityPolySeq.

        The value of _pdbx_reference_entity_poly_seq.num must uniquely and sequentially  identify a record in the PDBX_REFERENCE_ENTITY_POLY_SEQ list.   This value is conforms to author numbering conventions and does not map directly  to the numbering conventions used for _entity_poly_seq.num.  # noqa: E501

        :param num: The num of this PdbxReferenceEntityPolySeq.  # noqa: E501
        :type: int
        """
        if num is None:
            raise ValueError("Invalid value for `num`, must not be `None`")  # noqa: E501

        self._num = num

    @property
    def observed(self):
        """Gets the observed of this PdbxReferenceEntityPolySeq.  # noqa: E501

        A flag to indicate that this monomer is observed in the instance example.  # noqa: E501

        :return: The observed of this PdbxReferenceEntityPolySeq.  # noqa: E501
        :rtype: str
        """
        return self._observed

    @observed.setter
    def observed(self, observed):
        """Sets the observed of this PdbxReferenceEntityPolySeq.

        A flag to indicate that this monomer is observed in the instance example.  # noqa: E501

        :param observed: The observed of this PdbxReferenceEntityPolySeq.  # noqa: E501
        :type: str
        """
        allowed_values = ["N", "Y"]  # noqa: E501
        if observed not in allowed_values:
            raise ValueError(
                "Invalid value for `observed` ({0}), must be one of {1}"  # noqa: E501
                .format(observed, allowed_values)
            )

        self._observed = observed

    @property
    def parent_mon_id(self):
        """Gets the parent_mon_id of this PdbxReferenceEntityPolySeq.  # noqa: E501

        This data item is the chemical component identifier for the parent component corresponding to this monomer.  # noqa: E501

        :return: The parent_mon_id of this PdbxReferenceEntityPolySeq.  # noqa: E501
        :rtype: str
        """
        return self._parent_mon_id

    @parent_mon_id.setter
    def parent_mon_id(self, parent_mon_id):
        """Sets the parent_mon_id of this PdbxReferenceEntityPolySeq.

        This data item is the chemical component identifier for the parent component corresponding to this monomer.  # noqa: E501

        :param parent_mon_id: The parent_mon_id of this PdbxReferenceEntityPolySeq.  # noqa: E501
        :type: str
        """

        self._parent_mon_id = parent_mon_id

    @property
    def prd_id(self):
        """Gets the prd_id of this PdbxReferenceEntityPolySeq.  # noqa: E501

        The value of _pdbx_reference_entity_poly_seq.prd_id is a reference         _pdbx_reference_entity_poly.prd_id in the  PDBX_REFERENCE_ENTITY_POLY category.  # noqa: E501

        :return: The prd_id of this PdbxReferenceEntityPolySeq.  # noqa: E501
        :rtype: str
        """
        return self._prd_id

    @prd_id.setter
    def prd_id(self, prd_id):
        """Sets the prd_id of this PdbxReferenceEntityPolySeq.

        The value of _pdbx_reference_entity_poly_seq.prd_id is a reference         _pdbx_reference_entity_poly.prd_id in the  PDBX_REFERENCE_ENTITY_POLY category.  # noqa: E501

        :param prd_id: The prd_id of this PdbxReferenceEntityPolySeq.  # noqa: E501
        :type: str
        """
        if prd_id is None:
            raise ValueError("Invalid value for `prd_id`, must not be `None`")  # noqa: E501

        self._prd_id = prd_id

    @property
    def ref_entity_id(self):
        """Gets the ref_entity_id of this PdbxReferenceEntityPolySeq.  # noqa: E501

        The value of _pdbx_reference_entity_poly_seq.ref_entity_id is a reference  to _pdbx_reference_entity_poly.ref_entity_id in PDBX_REFERENCE_ENTITY_POLY category.  # noqa: E501

        :return: The ref_entity_id of this PdbxReferenceEntityPolySeq.  # noqa: E501
        :rtype: str
        """
        return self._ref_entity_id

    @ref_entity_id.setter
    def ref_entity_id(self, ref_entity_id):
        """Sets the ref_entity_id of this PdbxReferenceEntityPolySeq.

        The value of _pdbx_reference_entity_poly_seq.ref_entity_id is a reference  to _pdbx_reference_entity_poly.ref_entity_id in PDBX_REFERENCE_ENTITY_POLY category.  # noqa: E501

        :param ref_entity_id: The ref_entity_id of this PdbxReferenceEntityPolySeq.  # noqa: E501
        :type: str
        """
        if ref_entity_id is None:
            raise ValueError("Invalid value for `ref_entity_id`, must not be `None`")  # noqa: E501

        self._ref_entity_id = ref_entity_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PdbxReferenceEntityPolySeq, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdbxReferenceEntityPolySeq):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
