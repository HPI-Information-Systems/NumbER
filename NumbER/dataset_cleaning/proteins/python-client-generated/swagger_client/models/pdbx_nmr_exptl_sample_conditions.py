# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PdbxNmrExptlSampleConditions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conditions_id': 'str',
        'details': 'str',
        'ionic_strength': 'str',
        'ionic_strength_err': 'float',
        'ionic_strength_units': 'str',
        'label': 'str',
        'p_h': 'str',
        'p_h_err': 'float',
        'p_h_units': 'str',
        'pressure': 'str',
        'pressure_err': 'float',
        'pressure_units': 'str',
        'temperature': 'str',
        'temperature_err': 'float',
        'temperature_units': 'str'
    }

    attribute_map = {
        'conditions_id': 'conditions_id',
        'details': 'details',
        'ionic_strength': 'ionic_strength',
        'ionic_strength_err': 'ionic_strength_err',
        'ionic_strength_units': 'ionic_strength_units',
        'label': 'label',
        'p_h': 'pH',
        'p_h_err': 'pH_err',
        'p_h_units': 'pH_units',
        'pressure': 'pressure',
        'pressure_err': 'pressure_err',
        'pressure_units': 'pressure_units',
        'temperature': 'temperature',
        'temperature_err': 'temperature_err',
        'temperature_units': 'temperature_units'
    }

    def __init__(self, conditions_id=None, details=None, ionic_strength=None, ionic_strength_err=None, ionic_strength_units=None, label=None, p_h=None, p_h_err=None, p_h_units=None, pressure=None, pressure_err=None, pressure_units=None, temperature=None, temperature_err=None, temperature_units=None):  # noqa: E501
        """PdbxNmrExptlSampleConditions - a model defined in Swagger"""  # noqa: E501
        self._conditions_id = None
        self._details = None
        self._ionic_strength = None
        self._ionic_strength_err = None
        self._ionic_strength_units = None
        self._label = None
        self._p_h = None
        self._p_h_err = None
        self._p_h_units = None
        self._pressure = None
        self._pressure_err = None
        self._pressure_units = None
        self._temperature = None
        self._temperature_err = None
        self._temperature_units = None
        self.discriminator = None
        self.conditions_id = conditions_id
        if details is not None:
            self.details = details
        if ionic_strength is not None:
            self.ionic_strength = ionic_strength
        if ionic_strength_err is not None:
            self.ionic_strength_err = ionic_strength_err
        if ionic_strength_units is not None:
            self.ionic_strength_units = ionic_strength_units
        if label is not None:
            self.label = label
        if p_h is not None:
            self.p_h = p_h
        if p_h_err is not None:
            self.p_h_err = p_h_err
        if p_h_units is not None:
            self.p_h_units = p_h_units
        if pressure is not None:
            self.pressure = pressure
        if pressure_err is not None:
            self.pressure_err = pressure_err
        if pressure_units is not None:
            self.pressure_units = pressure_units
        if temperature is not None:
            self.temperature = temperature
        if temperature_err is not None:
            self.temperature_err = temperature_err
        if temperature_units is not None:
            self.temperature_units = temperature_units

    @property
    def conditions_id(self):
        """Gets the conditions_id of this PdbxNmrExptlSampleConditions.  # noqa: E501

        The condition number as defined above.  # noqa: E501

        :return: The conditions_id of this PdbxNmrExptlSampleConditions.  # noqa: E501
        :rtype: str
        """
        return self._conditions_id

    @conditions_id.setter
    def conditions_id(self, conditions_id):
        """Sets the conditions_id of this PdbxNmrExptlSampleConditions.

        The condition number as defined above.  # noqa: E501

        :param conditions_id: The conditions_id of this PdbxNmrExptlSampleConditions.  # noqa: E501
        :type: str
        """
        if conditions_id is None:
            raise ValueError("Invalid value for `conditions_id`, must not be `None`")  # noqa: E501

        self._conditions_id = conditions_id

    @property
    def details(self):
        """Gets the details of this PdbxNmrExptlSampleConditions.  # noqa: E501

        General details describing conditions of both the sample and the environment during measurements.  # noqa: E501

        :return: The details of this PdbxNmrExptlSampleConditions.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this PdbxNmrExptlSampleConditions.

        General details describing conditions of both the sample and the environment during measurements.  # noqa: E501

        :param details: The details of this PdbxNmrExptlSampleConditions.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def ionic_strength(self):
        """Gets the ionic_strength of this PdbxNmrExptlSampleConditions.  # noqa: E501

        The ionic strength at which the NMR data were collected -in lieu of  this enter the concentration and identity of the salt in the sample.  # noqa: E501

        :return: The ionic_strength of this PdbxNmrExptlSampleConditions.  # noqa: E501
        :rtype: str
        """
        return self._ionic_strength

    @ionic_strength.setter
    def ionic_strength(self, ionic_strength):
        """Sets the ionic_strength of this PdbxNmrExptlSampleConditions.

        The ionic strength at which the NMR data were collected -in lieu of  this enter the concentration and identity of the salt in the sample.  # noqa: E501

        :param ionic_strength: The ionic_strength of this PdbxNmrExptlSampleConditions.  # noqa: E501
        :type: str
        """

        self._ionic_strength = ionic_strength

    @property
    def ionic_strength_err(self):
        """Gets the ionic_strength_err of this PdbxNmrExptlSampleConditions.  # noqa: E501

        Estimate of the standard error for the value for the sample ionic strength.  # noqa: E501

        :return: The ionic_strength_err of this PdbxNmrExptlSampleConditions.  # noqa: E501
        :rtype: float
        """
        return self._ionic_strength_err

    @ionic_strength_err.setter
    def ionic_strength_err(self, ionic_strength_err):
        """Sets the ionic_strength_err of this PdbxNmrExptlSampleConditions.

        Estimate of the standard error for the value for the sample ionic strength.  # noqa: E501

        :param ionic_strength_err: The ionic_strength_err of this PdbxNmrExptlSampleConditions.  # noqa: E501
        :type: float
        """

        self._ionic_strength_err = ionic_strength_err

    @property
    def ionic_strength_units(self):
        """Gets the ionic_strength_units of this PdbxNmrExptlSampleConditions.  # noqa: E501

        Units for the value of the sample condition ionic strength..  # noqa: E501

        :return: The ionic_strength_units of this PdbxNmrExptlSampleConditions.  # noqa: E501
        :rtype: str
        """
        return self._ionic_strength_units

    @ionic_strength_units.setter
    def ionic_strength_units(self, ionic_strength_units):
        """Sets the ionic_strength_units of this PdbxNmrExptlSampleConditions.

        Units for the value of the sample condition ionic strength..  # noqa: E501

        :param ionic_strength_units: The ionic_strength_units of this PdbxNmrExptlSampleConditions.  # noqa: E501
        :type: str
        """
        allowed_values = ["M", "Not defined", "mM"]  # noqa: E501
        if ionic_strength_units not in allowed_values:
            raise ValueError(
                "Invalid value for `ionic_strength_units` ({0}), must be one of {1}"  # noqa: E501
                .format(ionic_strength_units, allowed_values)
            )

        self._ionic_strength_units = ionic_strength_units

    @property
    def label(self):
        """Gets the label of this PdbxNmrExptlSampleConditions.  # noqa: E501

        A descriptive label that uniquely identifies this set of sample conditions.  # noqa: E501

        :return: The label of this PdbxNmrExptlSampleConditions.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this PdbxNmrExptlSampleConditions.

        A descriptive label that uniquely identifies this set of sample conditions.  # noqa: E501

        :param label: The label of this PdbxNmrExptlSampleConditions.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def p_h(self):
        """Gets the p_h of this PdbxNmrExptlSampleConditions.  # noqa: E501

        The pH at which the NMR data were collected.  # noqa: E501

        :return: The p_h of this PdbxNmrExptlSampleConditions.  # noqa: E501
        :rtype: str
        """
        return self._p_h

    @p_h.setter
    def p_h(self, p_h):
        """Sets the p_h of this PdbxNmrExptlSampleConditions.

        The pH at which the NMR data were collected.  # noqa: E501

        :param p_h: The p_h of this PdbxNmrExptlSampleConditions.  # noqa: E501
        :type: str
        """

        self._p_h = p_h

    @property
    def p_h_err(self):
        """Gets the p_h_err of this PdbxNmrExptlSampleConditions.  # noqa: E501

        Estimate of the standard error for the value for the sample pH.  # noqa: E501

        :return: The p_h_err of this PdbxNmrExptlSampleConditions.  # noqa: E501
        :rtype: float
        """
        return self._p_h_err

    @p_h_err.setter
    def p_h_err(self, p_h_err):
        """Sets the p_h_err of this PdbxNmrExptlSampleConditions.

        Estimate of the standard error for the value for the sample pH.  # noqa: E501

        :param p_h_err: The p_h_err of this PdbxNmrExptlSampleConditions.  # noqa: E501
        :type: float
        """

        self._p_h_err = p_h_err

    @property
    def p_h_units(self):
        """Gets the p_h_units of this PdbxNmrExptlSampleConditions.  # noqa: E501

        Units for the value of the sample condition pH.  # noqa: E501

        :return: The p_h_units of this PdbxNmrExptlSampleConditions.  # noqa: E501
        :rtype: str
        """
        return self._p_h_units

    @p_h_units.setter
    def p_h_units(self, p_h_units):
        """Sets the p_h_units of this PdbxNmrExptlSampleConditions.

        Units for the value of the sample condition pH.  # noqa: E501

        :param p_h_units: The p_h_units of this PdbxNmrExptlSampleConditions.  # noqa: E501
        :type: str
        """
        allowed_values = ["Not defined", "pD", "pH", "pH*"]  # noqa: E501
        if p_h_units not in allowed_values:
            raise ValueError(
                "Invalid value for `p_h_units` ({0}), must be one of {1}"  # noqa: E501
                .format(p_h_units, allowed_values)
            )

        self._p_h_units = p_h_units

    @property
    def pressure(self):
        """Gets the pressure of this PdbxNmrExptlSampleConditions.  # noqa: E501

        The pressure at which NMR data were collected.  # noqa: E501

        :return: The pressure of this PdbxNmrExptlSampleConditions.  # noqa: E501
        :rtype: str
        """
        return self._pressure

    @pressure.setter
    def pressure(self, pressure):
        """Sets the pressure of this PdbxNmrExptlSampleConditions.

        The pressure at which NMR data were collected.  # noqa: E501

        :param pressure: The pressure of this PdbxNmrExptlSampleConditions.  # noqa: E501
        :type: str
        """

        self._pressure = pressure

    @property
    def pressure_err(self):
        """Gets the pressure_err of this PdbxNmrExptlSampleConditions.  # noqa: E501

        Estimate of the standard error for the value for the sample pressure.  # noqa: E501

        :return: The pressure_err of this PdbxNmrExptlSampleConditions.  # noqa: E501
        :rtype: float
        """
        return self._pressure_err

    @pressure_err.setter
    def pressure_err(self, pressure_err):
        """Sets the pressure_err of this PdbxNmrExptlSampleConditions.

        Estimate of the standard error for the value for the sample pressure.  # noqa: E501

        :param pressure_err: The pressure_err of this PdbxNmrExptlSampleConditions.  # noqa: E501
        :type: float
        """

        self._pressure_err = pressure_err

    @property
    def pressure_units(self):
        """Gets the pressure_units of this PdbxNmrExptlSampleConditions.  # noqa: E501

        The units of pressure at which NMR data were collected.  # noqa: E501

        :return: The pressure_units of this PdbxNmrExptlSampleConditions.  # noqa: E501
        :rtype: str
        """
        return self._pressure_units

    @pressure_units.setter
    def pressure_units(self, pressure_units):
        """Sets the pressure_units of this PdbxNmrExptlSampleConditions.

        The units of pressure at which NMR data were collected.  # noqa: E501

        :param pressure_units: The pressure_units of this PdbxNmrExptlSampleConditions.  # noqa: E501
        :type: str
        """

        self._pressure_units = pressure_units

    @property
    def temperature(self):
        """Gets the temperature of this PdbxNmrExptlSampleConditions.  # noqa: E501

        The temperature (in kelvin) at which NMR data were  collected.  # noqa: E501

        :return: The temperature of this PdbxNmrExptlSampleConditions.  # noqa: E501
        :rtype: str
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this PdbxNmrExptlSampleConditions.

        The temperature (in kelvin) at which NMR data were  collected.  # noqa: E501

        :param temperature: The temperature of this PdbxNmrExptlSampleConditions.  # noqa: E501
        :type: str
        """

        self._temperature = temperature

    @property
    def temperature_err(self):
        """Gets the temperature_err of this PdbxNmrExptlSampleConditions.  # noqa: E501

        Estimate of the standard error for the value for the sample temperature.  # noqa: E501

        :return: The temperature_err of this PdbxNmrExptlSampleConditions.  # noqa: E501
        :rtype: float
        """
        return self._temperature_err

    @temperature_err.setter
    def temperature_err(self, temperature_err):
        """Sets the temperature_err of this PdbxNmrExptlSampleConditions.

        Estimate of the standard error for the value for the sample temperature.  # noqa: E501

        :param temperature_err: The temperature_err of this PdbxNmrExptlSampleConditions.  # noqa: E501
        :type: float
        """

        self._temperature_err = temperature_err

    @property
    def temperature_units(self):
        """Gets the temperature_units of this PdbxNmrExptlSampleConditions.  # noqa: E501

        Units for the value of the sample condition temperature.  # noqa: E501

        :return: The temperature_units of this PdbxNmrExptlSampleConditions.  # noqa: E501
        :rtype: str
        """
        return self._temperature_units

    @temperature_units.setter
    def temperature_units(self, temperature_units):
        """Sets the temperature_units of this PdbxNmrExptlSampleConditions.

        Units for the value of the sample condition temperature.  # noqa: E501

        :param temperature_units: The temperature_units of this PdbxNmrExptlSampleConditions.  # noqa: E501
        :type: str
        """
        allowed_values = ["C", "K", "Not defined"]  # noqa: E501
        if temperature_units not in allowed_values:
            raise ValueError(
                "Invalid value for `temperature_units` ({0}), must be one of {1}"  # noqa: E501
                .format(temperature_units, allowed_values)
            )

        self._temperature_units = temperature_units

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PdbxNmrExptlSampleConditions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdbxNmrExptlSampleConditions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
