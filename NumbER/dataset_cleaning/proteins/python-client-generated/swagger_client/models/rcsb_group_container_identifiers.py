# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RcsbGroupContainerIdentifiers(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'group_id': 'str',
        'group_provenance_id': 'str',
        'parent_member_ids': 'list[str]',
        'group_member_ids': 'list[str]'
    }

    attribute_map = {
        'group_id': 'group_id',
        'group_provenance_id': 'group_provenance_id',
        'parent_member_ids': 'parent_member_ids',
        'group_member_ids': 'group_member_ids'
    }

    def __init__(self, group_id=None, group_provenance_id=None, parent_member_ids=None, group_member_ids=None):  # noqa: E501
        """RcsbGroupContainerIdentifiers - a model defined in Swagger"""  # noqa: E501
        self._group_id = None
        self._group_provenance_id = None
        self._parent_member_ids = None
        self._group_member_ids = None
        self.discriminator = None
        self.group_id = group_id
        self.group_provenance_id = group_provenance_id
        if parent_member_ids is not None:
            self.parent_member_ids = parent_member_ids
        self.group_member_ids = group_member_ids

    @property
    def group_id(self):
        """Gets the group_id of this RcsbGroupContainerIdentifiers.  # noqa: E501

        A unique textual identifier for a group  # noqa: E501

        :return: The group_id of this RcsbGroupContainerIdentifiers.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this RcsbGroupContainerIdentifiers.

        A unique textual identifier for a group  # noqa: E501

        :param group_id: The group_id of this RcsbGroupContainerIdentifiers.  # noqa: E501
        :type: str
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")  # noqa: E501

        self._group_id = group_id

    @property
    def group_provenance_id(self):
        """Gets the group_provenance_id of this RcsbGroupContainerIdentifiers.  # noqa: E501

        A unique group provenance identifier  # noqa: E501

        :return: The group_provenance_id of this RcsbGroupContainerIdentifiers.  # noqa: E501
        :rtype: str
        """
        return self._group_provenance_id

    @group_provenance_id.setter
    def group_provenance_id(self, group_provenance_id):
        """Sets the group_provenance_id of this RcsbGroupContainerIdentifiers.

        A unique group provenance identifier  # noqa: E501

        :param group_provenance_id: The group_provenance_id of this RcsbGroupContainerIdentifiers.  # noqa: E501
        :type: str
        """
        if group_provenance_id is None:
            raise ValueError("Invalid value for `group_provenance_id`, must not be `None`")  # noqa: E501
        allowed_values = ["provenance_sequence_identity", "provenance_matching_uniprot_accession", "provenance_matching_deposit_group_id"]  # noqa: E501
        if group_provenance_id not in allowed_values:
            raise ValueError(
                "Invalid value for `group_provenance_id` ({0}), must be one of {1}"  # noqa: E501
                .format(group_provenance_id, allowed_values)
            )

        self._group_provenance_id = group_provenance_id

    @property
    def parent_member_ids(self):
        """Gets the parent_member_ids of this RcsbGroupContainerIdentifiers.  # noqa: E501


        :return: The parent_member_ids of this RcsbGroupContainerIdentifiers.  # noqa: E501
        :rtype: list[str]
        """
        return self._parent_member_ids

    @parent_member_ids.setter
    def parent_member_ids(self, parent_member_ids):
        """Sets the parent_member_ids of this RcsbGroupContainerIdentifiers.


        :param parent_member_ids: The parent_member_ids of this RcsbGroupContainerIdentifiers.  # noqa: E501
        :type: list[str]
        """

        self._parent_member_ids = parent_member_ids

    @property
    def group_member_ids(self):
        """Gets the group_member_ids of this RcsbGroupContainerIdentifiers.  # noqa: E501


        :return: The group_member_ids of this RcsbGroupContainerIdentifiers.  # noqa: E501
        :rtype: list[str]
        """
        return self._group_member_ids

    @group_member_ids.setter
    def group_member_ids(self, group_member_ids):
        """Sets the group_member_ids of this RcsbGroupContainerIdentifiers.


        :param group_member_ids: The group_member_ids of this RcsbGroupContainerIdentifiers.  # noqa: E501
        :type: list[str]
        """
        if group_member_ids is None:
            raise ValueError("Invalid value for `group_member_ids`, must not be `None`")  # noqa: E501

        self._group_member_ids = group_member_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RcsbGroupContainerIdentifiers, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RcsbGroupContainerIdentifiers):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
