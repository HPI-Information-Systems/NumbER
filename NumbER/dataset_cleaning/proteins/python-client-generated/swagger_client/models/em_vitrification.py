# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EmVitrification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'chamber_temperature': 'float',
        'cryogen_name': 'str',
        'details': 'str',
        'humidity': 'float',
        'id': 'str',
        'instrument': 'str',
        'method': 'str',
        'specimen_id': 'str',
        'temp': 'float',
        'time_resolved_state': 'str'
    }

    attribute_map = {
        'chamber_temperature': 'chamber_temperature',
        'cryogen_name': 'cryogen_name',
        'details': 'details',
        'humidity': 'humidity',
        'id': 'id',
        'instrument': 'instrument',
        'method': 'method',
        'specimen_id': 'specimen_id',
        'temp': 'temp',
        'time_resolved_state': 'time_resolved_state'
    }

    def __init__(self, chamber_temperature=None, cryogen_name=None, details=None, humidity=None, id=None, instrument=None, method=None, specimen_id=None, temp=None, time_resolved_state=None):  # noqa: E501
        """EmVitrification - a model defined in Swagger"""  # noqa: E501
        self._chamber_temperature = None
        self._cryogen_name = None
        self._details = None
        self._humidity = None
        self._id = None
        self._instrument = None
        self._method = None
        self._specimen_id = None
        self._temp = None
        self._time_resolved_state = None
        self.discriminator = None
        if chamber_temperature is not None:
            self.chamber_temperature = chamber_temperature
        if cryogen_name is not None:
            self.cryogen_name = cryogen_name
        if details is not None:
            self.details = details
        if humidity is not None:
            self.humidity = humidity
        self.id = id
        if instrument is not None:
            self.instrument = instrument
        if method is not None:
            self.method = method
        self.specimen_id = specimen_id
        if temp is not None:
            self.temp = temp
        if time_resolved_state is not None:
            self.time_resolved_state = time_resolved_state

    @property
    def chamber_temperature(self):
        """Gets the chamber_temperature of this EmVitrification.  # noqa: E501

        The temperature (in kelvin) of the sample just prior to vitrification.  # noqa: E501

        :return: The chamber_temperature of this EmVitrification.  # noqa: E501
        :rtype: float
        """
        return self._chamber_temperature

    @chamber_temperature.setter
    def chamber_temperature(self, chamber_temperature):
        """Sets the chamber_temperature of this EmVitrification.

        The temperature (in kelvin) of the sample just prior to vitrification.  # noqa: E501

        :param chamber_temperature: The chamber_temperature of this EmVitrification.  # noqa: E501
        :type: float
        """

        self._chamber_temperature = chamber_temperature

    @property
    def cryogen_name(self):
        """Gets the cryogen_name of this EmVitrification.  # noqa: E501

        This is the name of the cryogen.  # noqa: E501

        :return: The cryogen_name of this EmVitrification.  # noqa: E501
        :rtype: str
        """
        return self._cryogen_name

    @cryogen_name.setter
    def cryogen_name(self, cryogen_name):
        """Sets the cryogen_name of this EmVitrification.

        This is the name of the cryogen.  # noqa: E501

        :param cryogen_name: The cryogen_name of this EmVitrification.  # noqa: E501
        :type: str
        """
        allowed_values = ["ETHANE", "ETHANE-PROPANE", "FREON 12", "FREON 22", "HELIUM", "METHANE", "NITROGEN", "OTHER", "PROPANE"]  # noqa: E501
        if cryogen_name not in allowed_values:
            raise ValueError(
                "Invalid value for `cryogen_name` ({0}), must be one of {1}"  # noqa: E501
                .format(cryogen_name, allowed_values)
            )

        self._cryogen_name = cryogen_name

    @property
    def details(self):
        """Gets the details of this EmVitrification.  # noqa: E501

        Any additional details relating to vitrification.  # noqa: E501

        :return: The details of this EmVitrification.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this EmVitrification.

        Any additional details relating to vitrification.  # noqa: E501

        :param details: The details of this EmVitrification.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def humidity(self):
        """Gets the humidity of this EmVitrification.  # noqa: E501

        Relative humidity (%) of air surrounding the specimen just prior to vitrification.  # noqa: E501

        :return: The humidity of this EmVitrification.  # noqa: E501
        :rtype: float
        """
        return self._humidity

    @humidity.setter
    def humidity(self, humidity):
        """Sets the humidity of this EmVitrification.

        Relative humidity (%) of air surrounding the specimen just prior to vitrification.  # noqa: E501

        :param humidity: The humidity of this EmVitrification.  # noqa: E501
        :type: float
        """

        self._humidity = humidity

    @property
    def id(self):
        """Gets the id of this EmVitrification.  # noqa: E501

        PRIMARY KEY  # noqa: E501

        :return: The id of this EmVitrification.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EmVitrification.

        PRIMARY KEY  # noqa: E501

        :param id: The id of this EmVitrification.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def instrument(self):
        """Gets the instrument of this EmVitrification.  # noqa: E501

        The type of instrument used in the vitrification process.  # noqa: E501

        :return: The instrument of this EmVitrification.  # noqa: E501
        :rtype: str
        """
        return self._instrument

    @instrument.setter
    def instrument(self, instrument):
        """Sets the instrument of this EmVitrification.

        The type of instrument used in the vitrification process.  # noqa: E501

        :param instrument: The instrument of this EmVitrification.  # noqa: E501
        :type: str
        """
        allowed_values = ["EMS-002 RAPID IMMERSION FREEZER", "FEI VITROBOT MARK I", "FEI VITROBOT MARK II", "FEI VITROBOT MARK III", "FEI VITROBOT MARK IV", "GATAN CRYOPLUNGE 3", "HOMEMADE PLUNGER", "LEICA EM CPC", "LEICA EM GP", "LEICA KF80", "LEICA PLUNGER", "REICHERT-JUNG PLUNGER", "SPOTITON", "ZEISS PLUNGE FREEZER CRYOBOX"]  # noqa: E501
        if instrument not in allowed_values:
            raise ValueError(
                "Invalid value for `instrument` ({0}), must be one of {1}"  # noqa: E501
                .format(instrument, allowed_values)
            )

        self._instrument = instrument

    @property
    def method(self):
        """Gets the method of this EmVitrification.  # noqa: E501

        The procedure for vitrification.  # noqa: E501

        :return: The method of this EmVitrification.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this EmVitrification.

        The procedure for vitrification.  # noqa: E501

        :param method: The method of this EmVitrification.  # noqa: E501
        :type: str
        """

        self._method = method

    @property
    def specimen_id(self):
        """Gets the specimen_id of this EmVitrification.  # noqa: E501

        This data item is a pointer to _em_specimen.id  # noqa: E501

        :return: The specimen_id of this EmVitrification.  # noqa: E501
        :rtype: str
        """
        return self._specimen_id

    @specimen_id.setter
    def specimen_id(self, specimen_id):
        """Sets the specimen_id of this EmVitrification.

        This data item is a pointer to _em_specimen.id  # noqa: E501

        :param specimen_id: The specimen_id of this EmVitrification.  # noqa: E501
        :type: str
        """
        if specimen_id is None:
            raise ValueError("Invalid value for `specimen_id`, must not be `None`")  # noqa: E501

        self._specimen_id = specimen_id

    @property
    def temp(self):
        """Gets the temp of this EmVitrification.  # noqa: E501

        The vitrification temperature (in kelvin), e.g.,   temperature of the plunge instrument cryogen bath.  # noqa: E501

        :return: The temp of this EmVitrification.  # noqa: E501
        :rtype: float
        """
        return self._temp

    @temp.setter
    def temp(self, temp):
        """Sets the temp of this EmVitrification.

        The vitrification temperature (in kelvin), e.g.,   temperature of the plunge instrument cryogen bath.  # noqa: E501

        :param temp: The temp of this EmVitrification.  # noqa: E501
        :type: float
        """

        self._temp = temp

    @property
    def time_resolved_state(self):
        """Gets the time_resolved_state of this EmVitrification.  # noqa: E501

        The length of time after an event effecting the sample that  vitrification was induced and a description of the event.  # noqa: E501

        :return: The time_resolved_state of this EmVitrification.  # noqa: E501
        :rtype: str
        """
        return self._time_resolved_state

    @time_resolved_state.setter
    def time_resolved_state(self, time_resolved_state):
        """Sets the time_resolved_state of this EmVitrification.

        The length of time after an event effecting the sample that  vitrification was induced and a description of the event.  # noqa: E501

        :param time_resolved_state: The time_resolved_state of this EmVitrification.  # noqa: E501
        :type: str
        """

        self._time_resolved_state = time_resolved_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmVitrification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmVitrification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
