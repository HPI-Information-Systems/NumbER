# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RcsbInterfaceInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'polymer_composition': 'str',
        'interface_character': 'str',
        'interface_area': 'float',
        'self_jaccard_contact_score': 'float',
        'num_interface_residues': 'int',
        'num_core_interface_residues': 'int'
    }

    attribute_map = {
        'polymer_composition': 'polymer_composition',
        'interface_character': 'interface_character',
        'interface_area': 'interface_area',
        'self_jaccard_contact_score': 'self_jaccard_contact_score',
        'num_interface_residues': 'num_interface_residues',
        'num_core_interface_residues': 'num_core_interface_residues'
    }

    def __init__(self, polymer_composition=None, interface_character=None, interface_area=None, self_jaccard_contact_score=None, num_interface_residues=None, num_core_interface_residues=None):  # noqa: E501
        """RcsbInterfaceInfo - a model defined in Swagger"""  # noqa: E501
        self._polymer_composition = None
        self._interface_character = None
        self._interface_area = None
        self._self_jaccard_contact_score = None
        self._num_interface_residues = None
        self._num_core_interface_residues = None
        self.discriminator = None
        if polymer_composition is not None:
            self.polymer_composition = polymer_composition
        if interface_character is not None:
            self.interface_character = interface_character
        if interface_area is not None:
            self.interface_area = interface_area
        if self_jaccard_contact_score is not None:
            self.self_jaccard_contact_score = self_jaccard_contact_score
        if num_interface_residues is not None:
            self.num_interface_residues = num_interface_residues
        if num_core_interface_residues is not None:
            self.num_core_interface_residues = num_core_interface_residues

    @property
    def polymer_composition(self):
        """Gets the polymer_composition of this RcsbInterfaceInfo.  # noqa: E501


        :return: The polymer_composition of this RcsbInterfaceInfo.  # noqa: E501
        :rtype: str
        """
        return self._polymer_composition

    @polymer_composition.setter
    def polymer_composition(self, polymer_composition):
        """Sets the polymer_composition of this RcsbInterfaceInfo.


        :param polymer_composition: The polymer_composition of this RcsbInterfaceInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["Nucleic acid (only)", "Protein (only)", "Protein/NA"]  # noqa: E501
        if polymer_composition not in allowed_values:
            raise ValueError(
                "Invalid value for `polymer_composition` ({0}), must be one of {1}"  # noqa: E501
                .format(polymer_composition, allowed_values)
            )

        self._polymer_composition = polymer_composition

    @property
    def interface_character(self):
        """Gets the interface_character of this RcsbInterfaceInfo.  # noqa: E501


        :return: The interface_character of this RcsbInterfaceInfo.  # noqa: E501
        :rtype: str
        """
        return self._interface_character

    @interface_character.setter
    def interface_character(self, interface_character):
        """Sets the interface_character of this RcsbInterfaceInfo.


        :param interface_character: The interface_character of this RcsbInterfaceInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["homo", "hetero"]  # noqa: E501
        if interface_character not in allowed_values:
            raise ValueError(
                "Invalid value for `interface_character` ({0}), must be one of {1}"  # noqa: E501
                .format(interface_character, allowed_values)
            )

        self._interface_character = interface_character

    @property
    def interface_area(self):
        """Gets the interface_area of this RcsbInterfaceInfo.  # noqa: E501

        Total interface buried surface area  # noqa: E501

        :return: The interface_area of this RcsbInterfaceInfo.  # noqa: E501
        :rtype: float
        """
        return self._interface_area

    @interface_area.setter
    def interface_area(self, interface_area):
        """Sets the interface_area of this RcsbInterfaceInfo.

        Total interface buried surface area  # noqa: E501

        :param interface_area: The interface_area of this RcsbInterfaceInfo.  # noqa: E501
        :type: float
        """

        self._interface_area = interface_area

    @property
    def self_jaccard_contact_score(self):
        """Gets the self_jaccard_contact_score of this RcsbInterfaceInfo.  # noqa: E501

        The Jaccard score (intersection over union) of interface contacts in homomeric interfaces, comparing contact sets left-right vs right-left. High values indicate isologous (symmetric) interfaces, with value=1 if perfectly symmetric (e.g. crystallographic symmetry)  # noqa: E501

        :return: The self_jaccard_contact_score of this RcsbInterfaceInfo.  # noqa: E501
        :rtype: float
        """
        return self._self_jaccard_contact_score

    @self_jaccard_contact_score.setter
    def self_jaccard_contact_score(self, self_jaccard_contact_score):
        """Sets the self_jaccard_contact_score of this RcsbInterfaceInfo.

        The Jaccard score (intersection over union) of interface contacts in homomeric interfaces, comparing contact sets left-right vs right-left. High values indicate isologous (symmetric) interfaces, with value=1 if perfectly symmetric (e.g. crystallographic symmetry)  # noqa: E501

        :param self_jaccard_contact_score: The self_jaccard_contact_score of this RcsbInterfaceInfo.  # noqa: E501
        :type: float
        """

        self._self_jaccard_contact_score = self_jaccard_contact_score

    @property
    def num_interface_residues(self):
        """Gets the num_interface_residues of this RcsbInterfaceInfo.  # noqa: E501

        Number of interface residues, defined as those with burial fraction > 0  # noqa: E501

        :return: The num_interface_residues of this RcsbInterfaceInfo.  # noqa: E501
        :rtype: int
        """
        return self._num_interface_residues

    @num_interface_residues.setter
    def num_interface_residues(self, num_interface_residues):
        """Sets the num_interface_residues of this RcsbInterfaceInfo.

        Number of interface residues, defined as those with burial fraction > 0  # noqa: E501

        :param num_interface_residues: The num_interface_residues of this RcsbInterfaceInfo.  # noqa: E501
        :type: int
        """

        self._num_interface_residues = num_interface_residues

    @property
    def num_core_interface_residues(self):
        """Gets the num_core_interface_residues of this RcsbInterfaceInfo.  # noqa: E501

        Number of core interface residues, defined as those that bury >90% accessible surface area with respect to the unbound state  # noqa: E501

        :return: The num_core_interface_residues of this RcsbInterfaceInfo.  # noqa: E501
        :rtype: int
        """
        return self._num_core_interface_residues

    @num_core_interface_residues.setter
    def num_core_interface_residues(self, num_core_interface_residues):
        """Sets the num_core_interface_residues of this RcsbInterfaceInfo.

        Number of core interface residues, defined as those that bury >90% accessible surface area with respect to the unbound state  # noqa: E501

        :param num_core_interface_residues: The num_core_interface_residues of this RcsbInterfaceInfo.  # noqa: E501
        :type: int
        """

        self._num_core_interface_residues = num_core_interface_residues

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RcsbInterfaceInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RcsbInterfaceInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
