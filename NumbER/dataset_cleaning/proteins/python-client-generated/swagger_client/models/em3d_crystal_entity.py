# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Em3dCrystalEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'angle_alpha': 'float',
        'angle_beta': 'float',
        'angle_gamma': 'float',
        'id': 'str',
        'image_processing_id': 'str',
        'length_a': 'float',
        'length_b': 'float',
        'length_c': 'float',
        'space_group_name': 'str',
        'space_group_num': 'int'
    }

    attribute_map = {
        'angle_alpha': 'angle_alpha',
        'angle_beta': 'angle_beta',
        'angle_gamma': 'angle_gamma',
        'id': 'id',
        'image_processing_id': 'image_processing_id',
        'length_a': 'length_a',
        'length_b': 'length_b',
        'length_c': 'length_c',
        'space_group_name': 'space_group_name',
        'space_group_num': 'space_group_num'
    }

    def __init__(self, angle_alpha=None, angle_beta=None, angle_gamma=None, id=None, image_processing_id=None, length_a=None, length_b=None, length_c=None, space_group_name=None, space_group_num=None):  # noqa: E501
        """Em3dCrystalEntity - a model defined in Swagger"""  # noqa: E501
        self._angle_alpha = None
        self._angle_beta = None
        self._angle_gamma = None
        self._id = None
        self._image_processing_id = None
        self._length_a = None
        self._length_b = None
        self._length_c = None
        self._space_group_name = None
        self._space_group_num = None
        self.discriminator = None
        if angle_alpha is not None:
            self.angle_alpha = angle_alpha
        if angle_beta is not None:
            self.angle_beta = angle_beta
        if angle_gamma is not None:
            self.angle_gamma = angle_gamma
        self.id = id
        self.image_processing_id = image_processing_id
        if length_a is not None:
            self.length_a = length_a
        if length_b is not None:
            self.length_b = length_b
        if length_c is not None:
            self.length_c = length_c
        if space_group_name is not None:
            self.space_group_name = space_group_name
        if space_group_num is not None:
            self.space_group_num = space_group_num

    @property
    def angle_alpha(self):
        """Gets the angle_alpha of this Em3dCrystalEntity.  # noqa: E501

        Unit-cell angle alpha in degrees.  # noqa: E501

        :return: The angle_alpha of this Em3dCrystalEntity.  # noqa: E501
        :rtype: float
        """
        return self._angle_alpha

    @angle_alpha.setter
    def angle_alpha(self, angle_alpha):
        """Sets the angle_alpha of this Em3dCrystalEntity.

        Unit-cell angle alpha in degrees.  # noqa: E501

        :param angle_alpha: The angle_alpha of this Em3dCrystalEntity.  # noqa: E501
        :type: float
        """

        self._angle_alpha = angle_alpha

    @property
    def angle_beta(self):
        """Gets the angle_beta of this Em3dCrystalEntity.  # noqa: E501

        Unit-cell angle beta in degrees.  # noqa: E501

        :return: The angle_beta of this Em3dCrystalEntity.  # noqa: E501
        :rtype: float
        """
        return self._angle_beta

    @angle_beta.setter
    def angle_beta(self, angle_beta):
        """Sets the angle_beta of this Em3dCrystalEntity.

        Unit-cell angle beta in degrees.  # noqa: E501

        :param angle_beta: The angle_beta of this Em3dCrystalEntity.  # noqa: E501
        :type: float
        """

        self._angle_beta = angle_beta

    @property
    def angle_gamma(self):
        """Gets the angle_gamma of this Em3dCrystalEntity.  # noqa: E501

        Unit-cell angle gamma in degrees.  # noqa: E501

        :return: The angle_gamma of this Em3dCrystalEntity.  # noqa: E501
        :rtype: float
        """
        return self._angle_gamma

    @angle_gamma.setter
    def angle_gamma(self, angle_gamma):
        """Sets the angle_gamma of this Em3dCrystalEntity.

        Unit-cell angle gamma in degrees.  # noqa: E501

        :param angle_gamma: The angle_gamma of this Em3dCrystalEntity.  # noqa: E501
        :type: float
        """

        self._angle_gamma = angle_gamma

    @property
    def id(self):
        """Gets the id of this Em3dCrystalEntity.  # noqa: E501

        PRIMARY KEY  # noqa: E501

        :return: The id of this Em3dCrystalEntity.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Em3dCrystalEntity.

        PRIMARY KEY  # noqa: E501

        :param id: The id of this Em3dCrystalEntity.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def image_processing_id(self):
        """Gets the image_processing_id of this Em3dCrystalEntity.  # noqa: E501

        pointer to _em_image_processing.id in the EM_IMAGE_PROCESSING category.  # noqa: E501

        :return: The image_processing_id of this Em3dCrystalEntity.  # noqa: E501
        :rtype: str
        """
        return self._image_processing_id

    @image_processing_id.setter
    def image_processing_id(self, image_processing_id):
        """Sets the image_processing_id of this Em3dCrystalEntity.

        pointer to _em_image_processing.id in the EM_IMAGE_PROCESSING category.  # noqa: E501

        :param image_processing_id: The image_processing_id of this Em3dCrystalEntity.  # noqa: E501
        :type: str
        """
        if image_processing_id is None:
            raise ValueError("Invalid value for `image_processing_id`, must not be `None`")  # noqa: E501

        self._image_processing_id = image_processing_id

    @property
    def length_a(self):
        """Gets the length_a of this Em3dCrystalEntity.  # noqa: E501

        Unit-cell length a in angstroms.  # noqa: E501

        :return: The length_a of this Em3dCrystalEntity.  # noqa: E501
        :rtype: float
        """
        return self._length_a

    @length_a.setter
    def length_a(self, length_a):
        """Sets the length_a of this Em3dCrystalEntity.

        Unit-cell length a in angstroms.  # noqa: E501

        :param length_a: The length_a of this Em3dCrystalEntity.  # noqa: E501
        :type: float
        """

        self._length_a = length_a

    @property
    def length_b(self):
        """Gets the length_b of this Em3dCrystalEntity.  # noqa: E501

        Unit-cell length b in angstroms.  # noqa: E501

        :return: The length_b of this Em3dCrystalEntity.  # noqa: E501
        :rtype: float
        """
        return self._length_b

    @length_b.setter
    def length_b(self, length_b):
        """Sets the length_b of this Em3dCrystalEntity.

        Unit-cell length b in angstroms.  # noqa: E501

        :param length_b: The length_b of this Em3dCrystalEntity.  # noqa: E501
        :type: float
        """

        self._length_b = length_b

    @property
    def length_c(self):
        """Gets the length_c of this Em3dCrystalEntity.  # noqa: E501

        Unit-cell length c in angstroms.  # noqa: E501

        :return: The length_c of this Em3dCrystalEntity.  # noqa: E501
        :rtype: float
        """
        return self._length_c

    @length_c.setter
    def length_c(self, length_c):
        """Sets the length_c of this Em3dCrystalEntity.

        Unit-cell length c in angstroms.  # noqa: E501

        :param length_c: The length_c of this Em3dCrystalEntity.  # noqa: E501
        :type: float
        """

        self._length_c = length_c

    @property
    def space_group_name(self):
        """Gets the space_group_name of this Em3dCrystalEntity.  # noqa: E501

        Space group name.  # noqa: E501

        :return: The space_group_name of this Em3dCrystalEntity.  # noqa: E501
        :rtype: str
        """
        return self._space_group_name

    @space_group_name.setter
    def space_group_name(self, space_group_name):
        """Sets the space_group_name of this Em3dCrystalEntity.

        Space group name.  # noqa: E501

        :param space_group_name: The space_group_name of this Em3dCrystalEntity.  # noqa: E501
        :type: str
        """

        self._space_group_name = space_group_name

    @property
    def space_group_num(self):
        """Gets the space_group_num of this Em3dCrystalEntity.  # noqa: E501

        Space group number.  # noqa: E501

        :return: The space_group_num of this Em3dCrystalEntity.  # noqa: E501
        :rtype: int
        """
        return self._space_group_num

    @space_group_num.setter
    def space_group_num(self, space_group_num):
        """Sets the space_group_num of this Em3dCrystalEntity.

        Space group number.  # noqa: E501

        :param space_group_num: The space_group_num of this Em3dCrystalEntity.  # noqa: E501
        :type: int
        """

        self._space_group_num = space_group_num

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Em3dCrystalEntity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Em3dCrystalEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
