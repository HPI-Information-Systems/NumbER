# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PdbxStructAssemblyProp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assembly_id': 'str',
        'biol_id': 'str',
        'type': 'str',
        'value': 'str'
    }

    attribute_map = {
        'assembly_id': 'assembly_id',
        'biol_id': 'biol_id',
        'type': 'type',
        'value': 'value'
    }

    def __init__(self, assembly_id=None, biol_id=None, type=None, value=None):  # noqa: E501
        """PdbxStructAssemblyProp - a model defined in Swagger"""  # noqa: E501
        self._assembly_id = None
        self._biol_id = None
        self._type = None
        self._value = None
        self.discriminator = None
        if assembly_id is not None:
            self.assembly_id = assembly_id
        self.biol_id = biol_id
        self.type = type
        if value is not None:
            self.value = value

    @property
    def assembly_id(self):
        """Gets the assembly_id of this PdbxStructAssemblyProp.  # noqa: E501

        The identifier for the assembly used in category PDBX_STRUCT_ASSEMBLY.  # noqa: E501

        :return: The assembly_id of this PdbxStructAssemblyProp.  # noqa: E501
        :rtype: str
        """
        return self._assembly_id

    @assembly_id.setter
    def assembly_id(self, assembly_id):
        """Sets the assembly_id of this PdbxStructAssemblyProp.

        The identifier for the assembly used in category PDBX_STRUCT_ASSEMBLY.  # noqa: E501

        :param assembly_id: The assembly_id of this PdbxStructAssemblyProp.  # noqa: E501
        :type: str
        """

        self._assembly_id = assembly_id

    @property
    def biol_id(self):
        """Gets the biol_id of this PdbxStructAssemblyProp.  # noqa: E501

        The identifier for the assembly used in category PDBX_STRUCT_ASSEMBLY.  # noqa: E501

        :return: The biol_id of this PdbxStructAssemblyProp.  # noqa: E501
        :rtype: str
        """
        return self._biol_id

    @biol_id.setter
    def biol_id(self, biol_id):
        """Sets the biol_id of this PdbxStructAssemblyProp.

        The identifier for the assembly used in category PDBX_STRUCT_ASSEMBLY.  # noqa: E501

        :param biol_id: The biol_id of this PdbxStructAssemblyProp.  # noqa: E501
        :type: str
        """
        if biol_id is None:
            raise ValueError("Invalid value for `biol_id`, must not be `None`")  # noqa: E501

        self._biol_id = biol_id

    @property
    def type(self):
        """Gets the type of this PdbxStructAssemblyProp.  # noqa: E501

        The property type for the assembly.  # noqa: E501

        :return: The type of this PdbxStructAssemblyProp.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PdbxStructAssemblyProp.

        The property type for the assembly.  # noqa: E501

        :param type: The type of this PdbxStructAssemblyProp.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["ABSA (A^2)", "MORE", "SSA (A^2)"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value(self):
        """Gets the value of this PdbxStructAssemblyProp.  # noqa: E501

        The value of the assembly property.  # noqa: E501

        :return: The value of this PdbxStructAssemblyProp.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this PdbxStructAssemblyProp.

        The value of the assembly property.  # noqa: E501

        :param value: The value of this PdbxStructAssemblyProp.  # noqa: E501
        :type: str
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PdbxStructAssemblyProp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdbxStructAssemblyProp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
