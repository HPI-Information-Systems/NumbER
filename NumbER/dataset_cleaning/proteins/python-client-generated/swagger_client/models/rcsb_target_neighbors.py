# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RcsbTargetNeighbors(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alt_id': 'str',
        'atom_id': 'str',
        'comp_id': 'str',
        'distance': 'float',
        'target_asym_id': 'str',
        'target_atom_id': 'str',
        'target_auth_seq_id': 'int',
        'target_comp_id': 'str',
        'target_entity_id': 'str',
        'target_is_bound': 'str',
        'target_model_id': 'int',
        'target_seq_id': 'int'
    }

    attribute_map = {
        'alt_id': 'alt_id',
        'atom_id': 'atom_id',
        'comp_id': 'comp_id',
        'distance': 'distance',
        'target_asym_id': 'target_asym_id',
        'target_atom_id': 'target_atom_id',
        'target_auth_seq_id': 'target_auth_seq_id',
        'target_comp_id': 'target_comp_id',
        'target_entity_id': 'target_entity_id',
        'target_is_bound': 'target_is_bound',
        'target_model_id': 'target_model_id',
        'target_seq_id': 'target_seq_id'
    }

    def __init__(self, alt_id=None, atom_id=None, comp_id=None, distance=None, target_asym_id=None, target_atom_id=None, target_auth_seq_id=None, target_comp_id=None, target_entity_id=None, target_is_bound=None, target_model_id=None, target_seq_id=None):  # noqa: E501
        """RcsbTargetNeighbors - a model defined in Swagger"""  # noqa: E501
        self._alt_id = None
        self._atom_id = None
        self._comp_id = None
        self._distance = None
        self._target_asym_id = None
        self._target_atom_id = None
        self._target_auth_seq_id = None
        self._target_comp_id = None
        self._target_entity_id = None
        self._target_is_bound = None
        self._target_model_id = None
        self._target_seq_id = None
        self.discriminator = None
        if alt_id is not None:
            self.alt_id = alt_id
        if atom_id is not None:
            self.atom_id = atom_id
        if comp_id is not None:
            self.comp_id = comp_id
        if distance is not None:
            self.distance = distance
        if target_asym_id is not None:
            self.target_asym_id = target_asym_id
        if target_atom_id is not None:
            self.target_atom_id = target_atom_id
        if target_auth_seq_id is not None:
            self.target_auth_seq_id = target_auth_seq_id
        if target_comp_id is not None:
            self.target_comp_id = target_comp_id
        if target_entity_id is not None:
            self.target_entity_id = target_entity_id
        if target_is_bound is not None:
            self.target_is_bound = target_is_bound
        if target_model_id is not None:
            self.target_model_id = target_model_id
        if target_seq_id is not None:
            self.target_seq_id = target_seq_id

    @property
    def alt_id(self):
        """Gets the alt_id of this RcsbTargetNeighbors.  # noqa: E501

        Alternate conformer identifier for the non-polymer entity instance.  # noqa: E501

        :return: The alt_id of this RcsbTargetNeighbors.  # noqa: E501
        :rtype: str
        """
        return self._alt_id

    @alt_id.setter
    def alt_id(self, alt_id):
        """Sets the alt_id of this RcsbTargetNeighbors.

        Alternate conformer identifier for the non-polymer entity instance.  # noqa: E501

        :param alt_id: The alt_id of this RcsbTargetNeighbors.  # noqa: E501
        :type: str
        """

        self._alt_id = alt_id

    @property
    def atom_id(self):
        """Gets the atom_id of this RcsbTargetNeighbors.  # noqa: E501

        The atom identifier for the non-polymer entity instance.  # noqa: E501

        :return: The atom_id of this RcsbTargetNeighbors.  # noqa: E501
        :rtype: str
        """
        return self._atom_id

    @atom_id.setter
    def atom_id(self, atom_id):
        """Sets the atom_id of this RcsbTargetNeighbors.

        The atom identifier for the non-polymer entity instance.  # noqa: E501

        :param atom_id: The atom_id of this RcsbTargetNeighbors.  # noqa: E501
        :type: str
        """

        self._atom_id = atom_id

    @property
    def comp_id(self):
        """Gets the comp_id of this RcsbTargetNeighbors.  # noqa: E501

        Component identifier for the non-polymer entity instance.  # noqa: E501

        :return: The comp_id of this RcsbTargetNeighbors.  # noqa: E501
        :rtype: str
        """
        return self._comp_id

    @comp_id.setter
    def comp_id(self, comp_id):
        """Sets the comp_id of this RcsbTargetNeighbors.

        Component identifier for the non-polymer entity instance.  # noqa: E501

        :param comp_id: The comp_id of this RcsbTargetNeighbors.  # noqa: E501
        :type: str
        """

        self._comp_id = comp_id

    @property
    def distance(self):
        """Gets the distance of this RcsbTargetNeighbors.  # noqa: E501

        Distance value for this target interaction.  # noqa: E501

        :return: The distance of this RcsbTargetNeighbors.  # noqa: E501
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this RcsbTargetNeighbors.

        Distance value for this target interaction.  # noqa: E501

        :param distance: The distance of this RcsbTargetNeighbors.  # noqa: E501
        :type: float
        """

        self._distance = distance

    @property
    def target_asym_id(self):
        """Gets the target_asym_id of this RcsbTargetNeighbors.  # noqa: E501

        The entity instance identifier for the target of interaction.  # noqa: E501

        :return: The target_asym_id of this RcsbTargetNeighbors.  # noqa: E501
        :rtype: str
        """
        return self._target_asym_id

    @target_asym_id.setter
    def target_asym_id(self, target_asym_id):
        """Sets the target_asym_id of this RcsbTargetNeighbors.

        The entity instance identifier for the target of interaction.  # noqa: E501

        :param target_asym_id: The target_asym_id of this RcsbTargetNeighbors.  # noqa: E501
        :type: str
        """

        self._target_asym_id = target_asym_id

    @property
    def target_atom_id(self):
        """Gets the target_atom_id of this RcsbTargetNeighbors.  # noqa: E501

        The atom identifier for the target of interaction.  # noqa: E501

        :return: The target_atom_id of this RcsbTargetNeighbors.  # noqa: E501
        :rtype: str
        """
        return self._target_atom_id

    @target_atom_id.setter
    def target_atom_id(self, target_atom_id):
        """Sets the target_atom_id of this RcsbTargetNeighbors.

        The atom identifier for the target of interaction.  # noqa: E501

        :param target_atom_id: The target_atom_id of this RcsbTargetNeighbors.  # noqa: E501
        :type: str
        """

        self._target_atom_id = target_atom_id

    @property
    def target_auth_seq_id(self):
        """Gets the target_auth_seq_id of this RcsbTargetNeighbors.  # noqa: E501

        The author residue index for the target of interaction.  # noqa: E501

        :return: The target_auth_seq_id of this RcsbTargetNeighbors.  # noqa: E501
        :rtype: int
        """
        return self._target_auth_seq_id

    @target_auth_seq_id.setter
    def target_auth_seq_id(self, target_auth_seq_id):
        """Sets the target_auth_seq_id of this RcsbTargetNeighbors.

        The author residue index for the target of interaction.  # noqa: E501

        :param target_auth_seq_id: The target_auth_seq_id of this RcsbTargetNeighbors.  # noqa: E501
        :type: int
        """

        self._target_auth_seq_id = target_auth_seq_id

    @property
    def target_comp_id(self):
        """Gets the target_comp_id of this RcsbTargetNeighbors.  # noqa: E501

        The chemical component identifier for the target of interaction.  # noqa: E501

        :return: The target_comp_id of this RcsbTargetNeighbors.  # noqa: E501
        :rtype: str
        """
        return self._target_comp_id

    @target_comp_id.setter
    def target_comp_id(self, target_comp_id):
        """Sets the target_comp_id of this RcsbTargetNeighbors.

        The chemical component identifier for the target of interaction.  # noqa: E501

        :param target_comp_id: The target_comp_id of this RcsbTargetNeighbors.  # noqa: E501
        :type: str
        """

        self._target_comp_id = target_comp_id

    @property
    def target_entity_id(self):
        """Gets the target_entity_id of this RcsbTargetNeighbors.  # noqa: E501

        The entity identifier for the target of interaction.  # noqa: E501

        :return: The target_entity_id of this RcsbTargetNeighbors.  # noqa: E501
        :rtype: str
        """
        return self._target_entity_id

    @target_entity_id.setter
    def target_entity_id(self, target_entity_id):
        """Sets the target_entity_id of this RcsbTargetNeighbors.

        The entity identifier for the target of interaction.  # noqa: E501

        :param target_entity_id: The target_entity_id of this RcsbTargetNeighbors.  # noqa: E501
        :type: str
        """

        self._target_entity_id = target_entity_id

    @property
    def target_is_bound(self):
        """Gets the target_is_bound of this RcsbTargetNeighbors.  # noqa: E501

        A flag to indicate the nature of the target interaction is covalent or metal-coordination.  # noqa: E501

        :return: The target_is_bound of this RcsbTargetNeighbors.  # noqa: E501
        :rtype: str
        """
        return self._target_is_bound

    @target_is_bound.setter
    def target_is_bound(self, target_is_bound):
        """Sets the target_is_bound of this RcsbTargetNeighbors.

        A flag to indicate the nature of the target interaction is covalent or metal-coordination.  # noqa: E501

        :param target_is_bound: The target_is_bound of this RcsbTargetNeighbors.  # noqa: E501
        :type: str
        """
        allowed_values = ["N", "Y"]  # noqa: E501
        if target_is_bound not in allowed_values:
            raise ValueError(
                "Invalid value for `target_is_bound` ({0}), must be one of {1}"  # noqa: E501
                .format(target_is_bound, allowed_values)
            )

        self._target_is_bound = target_is_bound

    @property
    def target_model_id(self):
        """Gets the target_model_id of this RcsbTargetNeighbors.  # noqa: E501

        Model identifier for the target of interaction.  # noqa: E501

        :return: The target_model_id of this RcsbTargetNeighbors.  # noqa: E501
        :rtype: int
        """
        return self._target_model_id

    @target_model_id.setter
    def target_model_id(self, target_model_id):
        """Sets the target_model_id of this RcsbTargetNeighbors.

        Model identifier for the target of interaction.  # noqa: E501

        :param target_model_id: The target_model_id of this RcsbTargetNeighbors.  # noqa: E501
        :type: int
        """

        self._target_model_id = target_model_id

    @property
    def target_seq_id(self):
        """Gets the target_seq_id of this RcsbTargetNeighbors.  # noqa: E501

        The sequence position for the target of interaction.  # noqa: E501

        :return: The target_seq_id of this RcsbTargetNeighbors.  # noqa: E501
        :rtype: int
        """
        return self._target_seq_id

    @target_seq_id.setter
    def target_seq_id(self, target_seq_id):
        """Sets the target_seq_id of this RcsbTargetNeighbors.

        The sequence position for the target of interaction.  # noqa: E501

        :param target_seq_id: The target_seq_id of this RcsbTargetNeighbors.  # noqa: E501
        :type: int
        """

        self._target_seq_id = target_seq_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RcsbTargetNeighbors, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RcsbTargetNeighbors):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
