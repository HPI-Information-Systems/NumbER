# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DiffrnSource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'details': 'str',
        'diffrn_id': 'str',
        'pdbx_synchrotron_beamline': 'str',
        'pdbx_synchrotron_site': 'str',
        'pdbx_wavelength': 'str',
        'pdbx_wavelength_list': 'str',
        'source': 'str',
        'type': 'str'
    }

    attribute_map = {
        'details': 'details',
        'diffrn_id': 'diffrn_id',
        'pdbx_synchrotron_beamline': 'pdbx_synchrotron_beamline',
        'pdbx_synchrotron_site': 'pdbx_synchrotron_site',
        'pdbx_wavelength': 'pdbx_wavelength',
        'pdbx_wavelength_list': 'pdbx_wavelength_list',
        'source': 'source',
        'type': 'type'
    }

    def __init__(self, details=None, diffrn_id=None, pdbx_synchrotron_beamline=None, pdbx_synchrotron_site=None, pdbx_wavelength=None, pdbx_wavelength_list=None, source=None, type=None):  # noqa: E501
        """DiffrnSource - a model defined in Swagger"""  # noqa: E501
        self._details = None
        self._diffrn_id = None
        self._pdbx_synchrotron_beamline = None
        self._pdbx_synchrotron_site = None
        self._pdbx_wavelength = None
        self._pdbx_wavelength_list = None
        self._source = None
        self._type = None
        self.discriminator = None
        if details is not None:
            self.details = details
        self.diffrn_id = diffrn_id
        if pdbx_synchrotron_beamline is not None:
            self.pdbx_synchrotron_beamline = pdbx_synchrotron_beamline
        if pdbx_synchrotron_site is not None:
            self.pdbx_synchrotron_site = pdbx_synchrotron_site
        if pdbx_wavelength is not None:
            self.pdbx_wavelength = pdbx_wavelength
        if pdbx_wavelength_list is not None:
            self.pdbx_wavelength_list = pdbx_wavelength_list
        if source is not None:
            self.source = source
        if type is not None:
            self.type = type

    @property
    def details(self):
        """Gets the details of this DiffrnSource.  # noqa: E501

        A description of special aspects of the radiation source used.  # noqa: E501

        :return: The details of this DiffrnSource.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this DiffrnSource.

        A description of special aspects of the radiation source used.  # noqa: E501

        :param details: The details of this DiffrnSource.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def diffrn_id(self):
        """Gets the diffrn_id of this DiffrnSource.  # noqa: E501

        This data item is a pointer to _diffrn.id in the DIFFRN  category.  # noqa: E501

        :return: The diffrn_id of this DiffrnSource.  # noqa: E501
        :rtype: str
        """
        return self._diffrn_id

    @diffrn_id.setter
    def diffrn_id(self, diffrn_id):
        """Sets the diffrn_id of this DiffrnSource.

        This data item is a pointer to _diffrn.id in the DIFFRN  category.  # noqa: E501

        :param diffrn_id: The diffrn_id of this DiffrnSource.  # noqa: E501
        :type: str
        """
        if diffrn_id is None:
            raise ValueError("Invalid value for `diffrn_id`, must not be `None`")  # noqa: E501

        self._diffrn_id = diffrn_id

    @property
    def pdbx_synchrotron_beamline(self):
        """Gets the pdbx_synchrotron_beamline of this DiffrnSource.  # noqa: E501

        Synchrotron beamline.  # noqa: E501

        :return: The pdbx_synchrotron_beamline of this DiffrnSource.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_synchrotron_beamline

    @pdbx_synchrotron_beamline.setter
    def pdbx_synchrotron_beamline(self, pdbx_synchrotron_beamline):
        """Sets the pdbx_synchrotron_beamline of this DiffrnSource.

        Synchrotron beamline.  # noqa: E501

        :param pdbx_synchrotron_beamline: The pdbx_synchrotron_beamline of this DiffrnSource.  # noqa: E501
        :type: str
        """

        self._pdbx_synchrotron_beamline = pdbx_synchrotron_beamline

    @property
    def pdbx_synchrotron_site(self):
        """Gets the pdbx_synchrotron_site of this DiffrnSource.  # noqa: E501

        Synchrotron site.  # noqa: E501

        :return: The pdbx_synchrotron_site of this DiffrnSource.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_synchrotron_site

    @pdbx_synchrotron_site.setter
    def pdbx_synchrotron_site(self, pdbx_synchrotron_site):
        """Sets the pdbx_synchrotron_site of this DiffrnSource.

        Synchrotron site.  # noqa: E501

        :param pdbx_synchrotron_site: The pdbx_synchrotron_site of this DiffrnSource.  # noqa: E501
        :type: str
        """

        self._pdbx_synchrotron_site = pdbx_synchrotron_site

    @property
    def pdbx_wavelength(self):
        """Gets the pdbx_wavelength of this DiffrnSource.  # noqa: E501

        Wavelength of radiation.  # noqa: E501

        :return: The pdbx_wavelength of this DiffrnSource.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_wavelength

    @pdbx_wavelength.setter
    def pdbx_wavelength(self, pdbx_wavelength):
        """Sets the pdbx_wavelength of this DiffrnSource.

        Wavelength of radiation.  # noqa: E501

        :param pdbx_wavelength: The pdbx_wavelength of this DiffrnSource.  # noqa: E501
        :type: str
        """

        self._pdbx_wavelength = pdbx_wavelength

    @property
    def pdbx_wavelength_list(self):
        """Gets the pdbx_wavelength_list of this DiffrnSource.  # noqa: E501

        Comma separated list of wavelengths or wavelength range.  # noqa: E501

        :return: The pdbx_wavelength_list of this DiffrnSource.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_wavelength_list

    @pdbx_wavelength_list.setter
    def pdbx_wavelength_list(self, pdbx_wavelength_list):
        """Sets the pdbx_wavelength_list of this DiffrnSource.

        Comma separated list of wavelengths or wavelength range.  # noqa: E501

        :param pdbx_wavelength_list: The pdbx_wavelength_list of this DiffrnSource.  # noqa: E501
        :type: str
        """

        self._pdbx_wavelength_list = pdbx_wavelength_list

    @property
    def source(self):
        """Gets the source of this DiffrnSource.  # noqa: E501

        The general class of the radiation source.  # noqa: E501

        :return: The source of this DiffrnSource.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this DiffrnSource.

        The general class of the radiation source.  # noqa: E501

        :param source: The source of this DiffrnSource.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def type(self):
        """Gets the type of this DiffrnSource.  # noqa: E501

        The make, model or name of the source of radiation.  # noqa: E501

        :return: The type of this DiffrnSource.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DiffrnSource.

        The make, model or name of the source of radiation.  # noqa: E501

        :param type: The type of this DiffrnSource.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DiffrnSource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiffrnSource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
