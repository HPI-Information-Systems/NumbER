# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RcsbBirdCitation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'journal_abbrev': 'str',
        'journal_volume': 'str',
        'page_first': 'str',
        'page_last': 'str',
        'pdbx_database_id_doi': 'str',
        'pdbx_database_id_pub_med': 'int',
        'rcsb_authors': 'list[str]',
        'title': 'str',
        'year': 'int'
    }

    attribute_map = {
        'id': 'id',
        'journal_abbrev': 'journal_abbrev',
        'journal_volume': 'journal_volume',
        'page_first': 'page_first',
        'page_last': 'page_last',
        'pdbx_database_id_doi': 'pdbx_database_id_DOI',
        'pdbx_database_id_pub_med': 'pdbx_database_id_PubMed',
        'rcsb_authors': 'rcsb_authors',
        'title': 'title',
        'year': 'year'
    }

    def __init__(self, id=None, journal_abbrev=None, journal_volume=None, page_first=None, page_last=None, pdbx_database_id_doi=None, pdbx_database_id_pub_med=None, rcsb_authors=None, title=None, year=None):  # noqa: E501
        """RcsbBirdCitation - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._journal_abbrev = None
        self._journal_volume = None
        self._page_first = None
        self._page_last = None
        self._pdbx_database_id_doi = None
        self._pdbx_database_id_pub_med = None
        self._rcsb_authors = None
        self._title = None
        self._year = None
        self.discriminator = None
        self.id = id
        if journal_abbrev is not None:
            self.journal_abbrev = journal_abbrev
        if journal_volume is not None:
            self.journal_volume = journal_volume
        if page_first is not None:
            self.page_first = page_first
        if page_last is not None:
            self.page_last = page_last
        if pdbx_database_id_doi is not None:
            self.pdbx_database_id_doi = pdbx_database_id_doi
        if pdbx_database_id_pub_med is not None:
            self.pdbx_database_id_pub_med = pdbx_database_id_pub_med
        if rcsb_authors is not None:
            self.rcsb_authors = rcsb_authors
        if title is not None:
            self.title = title
        if year is not None:
            self.year = year

    @property
    def id(self):
        """Gets the id of this RcsbBirdCitation.  # noqa: E501

        The value of _rcsb_bird_citation.id must uniquely identify a record in the  rcsb_bird_citation list.  # noqa: E501

        :return: The id of this RcsbBirdCitation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RcsbBirdCitation.

        The value of _rcsb_bird_citation.id must uniquely identify a record in the  rcsb_bird_citation list.  # noqa: E501

        :param id: The id of this RcsbBirdCitation.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def journal_abbrev(self):
        """Gets the journal_abbrev of this RcsbBirdCitation.  # noqa: E501

        Abbreviated name of the cited journal as given in the  Chemical Abstracts Service Source Index.  # noqa: E501

        :return: The journal_abbrev of this RcsbBirdCitation.  # noqa: E501
        :rtype: str
        """
        return self._journal_abbrev

    @journal_abbrev.setter
    def journal_abbrev(self, journal_abbrev):
        """Sets the journal_abbrev of this RcsbBirdCitation.

        Abbreviated name of the cited journal as given in the  Chemical Abstracts Service Source Index.  # noqa: E501

        :param journal_abbrev: The journal_abbrev of this RcsbBirdCitation.  # noqa: E501
        :type: str
        """

        self._journal_abbrev = journal_abbrev

    @property
    def journal_volume(self):
        """Gets the journal_volume of this RcsbBirdCitation.  # noqa: E501

        Volume number of the journal cited; relevant for journal  articles.  # noqa: E501

        :return: The journal_volume of this RcsbBirdCitation.  # noqa: E501
        :rtype: str
        """
        return self._journal_volume

    @journal_volume.setter
    def journal_volume(self, journal_volume):
        """Sets the journal_volume of this RcsbBirdCitation.

        Volume number of the journal cited; relevant for journal  articles.  # noqa: E501

        :param journal_volume: The journal_volume of this RcsbBirdCitation.  # noqa: E501
        :type: str
        """

        self._journal_volume = journal_volume

    @property
    def page_first(self):
        """Gets the page_first of this RcsbBirdCitation.  # noqa: E501

        The first page of the rcsb_bird_citation; relevant for journal  articles, books and book chapters.  # noqa: E501

        :return: The page_first of this RcsbBirdCitation.  # noqa: E501
        :rtype: str
        """
        return self._page_first

    @page_first.setter
    def page_first(self, page_first):
        """Sets the page_first of this RcsbBirdCitation.

        The first page of the rcsb_bird_citation; relevant for journal  articles, books and book chapters.  # noqa: E501

        :param page_first: The page_first of this RcsbBirdCitation.  # noqa: E501
        :type: str
        """

        self._page_first = page_first

    @property
    def page_last(self):
        """Gets the page_last of this RcsbBirdCitation.  # noqa: E501

        The last page of the rcsb_bird_citation; relevant for journal  articles, books and book chapters.  # noqa: E501

        :return: The page_last of this RcsbBirdCitation.  # noqa: E501
        :rtype: str
        """
        return self._page_last

    @page_last.setter
    def page_last(self, page_last):
        """Sets the page_last of this RcsbBirdCitation.

        The last page of the rcsb_bird_citation; relevant for journal  articles, books and book chapters.  # noqa: E501

        :param page_last: The page_last of this RcsbBirdCitation.  # noqa: E501
        :type: str
        """

        self._page_last = page_last

    @property
    def pdbx_database_id_doi(self):
        """Gets the pdbx_database_id_doi of this RcsbBirdCitation.  # noqa: E501

        Document Object Identifier used by doi.org to uniquely  specify bibliographic entry.  # noqa: E501

        :return: The pdbx_database_id_doi of this RcsbBirdCitation.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_database_id_doi

    @pdbx_database_id_doi.setter
    def pdbx_database_id_doi(self, pdbx_database_id_doi):
        """Sets the pdbx_database_id_doi of this RcsbBirdCitation.

        Document Object Identifier used by doi.org to uniquely  specify bibliographic entry.  # noqa: E501

        :param pdbx_database_id_doi: The pdbx_database_id_doi of this RcsbBirdCitation.  # noqa: E501
        :type: str
        """

        self._pdbx_database_id_doi = pdbx_database_id_doi

    @property
    def pdbx_database_id_pub_med(self):
        """Gets the pdbx_database_id_pub_med of this RcsbBirdCitation.  # noqa: E501

        Ascession number used by PubMed to categorize a specific  bibliographic entry.  # noqa: E501

        :return: The pdbx_database_id_pub_med of this RcsbBirdCitation.  # noqa: E501
        :rtype: int
        """
        return self._pdbx_database_id_pub_med

    @pdbx_database_id_pub_med.setter
    def pdbx_database_id_pub_med(self, pdbx_database_id_pub_med):
        """Sets the pdbx_database_id_pub_med of this RcsbBirdCitation.

        Ascession number used by PubMed to categorize a specific  bibliographic entry.  # noqa: E501

        :param pdbx_database_id_pub_med: The pdbx_database_id_pub_med of this RcsbBirdCitation.  # noqa: E501
        :type: int
        """

        self._pdbx_database_id_pub_med = pdbx_database_id_pub_med

    @property
    def rcsb_authors(self):
        """Gets the rcsb_authors of this RcsbBirdCitation.  # noqa: E501

        Names of the authors of the citation; relevant for journal  articles, books and book chapters.  Names are separated by vertical bars.   The family name(s), followed by a comma and including any  dynastic components, precedes the first name(s) or initial(s).  # noqa: E501

        :return: The rcsb_authors of this RcsbBirdCitation.  # noqa: E501
        :rtype: list[str]
        """
        return self._rcsb_authors

    @rcsb_authors.setter
    def rcsb_authors(self, rcsb_authors):
        """Sets the rcsb_authors of this RcsbBirdCitation.

        Names of the authors of the citation; relevant for journal  articles, books and book chapters.  Names are separated by vertical bars.   The family name(s), followed by a comma and including any  dynastic components, precedes the first name(s) or initial(s).  # noqa: E501

        :param rcsb_authors: The rcsb_authors of this RcsbBirdCitation.  # noqa: E501
        :type: list[str]
        """

        self._rcsb_authors = rcsb_authors

    @property
    def title(self):
        """Gets the title of this RcsbBirdCitation.  # noqa: E501

        The title of the rcsb_bird_citation; relevant for journal articles, books  and book chapters.  # noqa: E501

        :return: The title of this RcsbBirdCitation.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this RcsbBirdCitation.

        The title of the rcsb_bird_citation; relevant for journal articles, books  and book chapters.  # noqa: E501

        :param title: The title of this RcsbBirdCitation.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def year(self):
        """Gets the year of this RcsbBirdCitation.  # noqa: E501

        The year of the rcsb_bird_citation; relevant for journal articles, books  and book chapters.  # noqa: E501

        :return: The year of this RcsbBirdCitation.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this RcsbBirdCitation.

        The year of the rcsb_bird_citation; relevant for journal articles, books  and book chapters.  # noqa: E501

        :param year: The year of this RcsbBirdCitation.  # noqa: E501
        :type: int
        """

        self._year = year

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RcsbBirdCitation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RcsbBirdCitation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
