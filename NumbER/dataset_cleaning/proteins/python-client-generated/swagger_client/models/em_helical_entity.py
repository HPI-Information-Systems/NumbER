# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EmHelicalEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'angular_rotation_per_subunit': 'float',
        'axial_rise_per_subunit': 'float',
        'axial_symmetry': 'str',
        'details': 'str',
        'id': 'str',
        'image_processing_id': 'str'
    }

    attribute_map = {
        'angular_rotation_per_subunit': 'angular_rotation_per_subunit',
        'axial_rise_per_subunit': 'axial_rise_per_subunit',
        'axial_symmetry': 'axial_symmetry',
        'details': 'details',
        'id': 'id',
        'image_processing_id': 'image_processing_id'
    }

    def __init__(self, angular_rotation_per_subunit=None, axial_rise_per_subunit=None, axial_symmetry=None, details=None, id=None, image_processing_id=None):  # noqa: E501
        """EmHelicalEntity - a model defined in Swagger"""  # noqa: E501
        self._angular_rotation_per_subunit = None
        self._axial_rise_per_subunit = None
        self._axial_symmetry = None
        self._details = None
        self._id = None
        self._image_processing_id = None
        self.discriminator = None
        if angular_rotation_per_subunit is not None:
            self.angular_rotation_per_subunit = angular_rotation_per_subunit
        if axial_rise_per_subunit is not None:
            self.axial_rise_per_subunit = axial_rise_per_subunit
        if axial_symmetry is not None:
            self.axial_symmetry = axial_symmetry
        if details is not None:
            self.details = details
        self.id = id
        self.image_processing_id = image_processing_id

    @property
    def angular_rotation_per_subunit(self):
        """Gets the angular_rotation_per_subunit of this EmHelicalEntity.  # noqa: E501

        The angular rotation per helical subunit in degrees. Negative values indicate left-handed helices; positive values indicate right handed helices.  # noqa: E501

        :return: The angular_rotation_per_subunit of this EmHelicalEntity.  # noqa: E501
        :rtype: float
        """
        return self._angular_rotation_per_subunit

    @angular_rotation_per_subunit.setter
    def angular_rotation_per_subunit(self, angular_rotation_per_subunit):
        """Sets the angular_rotation_per_subunit of this EmHelicalEntity.

        The angular rotation per helical subunit in degrees. Negative values indicate left-handed helices; positive values indicate right handed helices.  # noqa: E501

        :param angular_rotation_per_subunit: The angular_rotation_per_subunit of this EmHelicalEntity.  # noqa: E501
        :type: float
        """

        self._angular_rotation_per_subunit = angular_rotation_per_subunit

    @property
    def axial_rise_per_subunit(self):
        """Gets the axial_rise_per_subunit of this EmHelicalEntity.  # noqa: E501

        The axial rise per subunit in the helical assembly.  # noqa: E501

        :return: The axial_rise_per_subunit of this EmHelicalEntity.  # noqa: E501
        :rtype: float
        """
        return self._axial_rise_per_subunit

    @axial_rise_per_subunit.setter
    def axial_rise_per_subunit(self, axial_rise_per_subunit):
        """Sets the axial_rise_per_subunit of this EmHelicalEntity.

        The axial rise per subunit in the helical assembly.  # noqa: E501

        :param axial_rise_per_subunit: The axial_rise_per_subunit of this EmHelicalEntity.  # noqa: E501
        :type: float
        """

        self._axial_rise_per_subunit = axial_rise_per_subunit

    @property
    def axial_symmetry(self):
        """Gets the axial_symmetry of this EmHelicalEntity.  # noqa: E501

        Symmetry of the helical axis, either cyclic (Cn) or dihedral (Dn), where n>=1.  # noqa: E501

        :return: The axial_symmetry of this EmHelicalEntity.  # noqa: E501
        :rtype: str
        """
        return self._axial_symmetry

    @axial_symmetry.setter
    def axial_symmetry(self, axial_symmetry):
        """Sets the axial_symmetry of this EmHelicalEntity.

        Symmetry of the helical axis, either cyclic (Cn) or dihedral (Dn), where n>=1.  # noqa: E501

        :param axial_symmetry: The axial_symmetry of this EmHelicalEntity.  # noqa: E501
        :type: str
        """

        self._axial_symmetry = axial_symmetry

    @property
    def details(self):
        """Gets the details of this EmHelicalEntity.  # noqa: E501

        Any other details regarding the helical assembly  # noqa: E501

        :return: The details of this EmHelicalEntity.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this EmHelicalEntity.

        Any other details regarding the helical assembly  # noqa: E501

        :param details: The details of this EmHelicalEntity.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def id(self):
        """Gets the id of this EmHelicalEntity.  # noqa: E501

        PRIMARY KEY  # noqa: E501

        :return: The id of this EmHelicalEntity.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EmHelicalEntity.

        PRIMARY KEY  # noqa: E501

        :param id: The id of this EmHelicalEntity.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def image_processing_id(self):
        """Gets the image_processing_id of this EmHelicalEntity.  # noqa: E501

        This data item is a pointer to _em_image_processing.id.  # noqa: E501

        :return: The image_processing_id of this EmHelicalEntity.  # noqa: E501
        :rtype: str
        """
        return self._image_processing_id

    @image_processing_id.setter
    def image_processing_id(self, image_processing_id):
        """Sets the image_processing_id of this EmHelicalEntity.

        This data item is a pointer to _em_image_processing.id.  # noqa: E501

        :param image_processing_id: The image_processing_id of this EmHelicalEntity.  # noqa: E501
        :type: str
        """
        if image_processing_id is None:
            raise ValueError("Invalid value for `image_processing_id`, must not be `None`")  # noqa: E501

        self._image_processing_id = image_processing_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmHelicalEntity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmHelicalEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
