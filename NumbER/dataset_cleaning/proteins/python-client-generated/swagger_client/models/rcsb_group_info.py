# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RcsbGroupInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'group_name': 'str',
        'group_description': 'str',
        'group_members_granularity': 'str',
        'group_members_count': 'int'
    }

    attribute_map = {
        'group_name': 'group_name',
        'group_description': 'group_description',
        'group_members_granularity': 'group_members_granularity',
        'group_members_count': 'group_members_count'
    }

    def __init__(self, group_name=None, group_description=None, group_members_granularity=None, group_members_count=None):  # noqa: E501
        """RcsbGroupInfo - a model defined in Swagger"""  # noqa: E501
        self._group_name = None
        self._group_description = None
        self._group_members_granularity = None
        self._group_members_count = None
        self.discriminator = None
        if group_name is not None:
            self.group_name = group_name
        if group_description is not None:
            self.group_description = group_description
        self.group_members_granularity = group_members_granularity
        self.group_members_count = group_members_count

    @property
    def group_name(self):
        """Gets the group_name of this RcsbGroupInfo.  # noqa: E501


        :return: The group_name of this RcsbGroupInfo.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this RcsbGroupInfo.


        :param group_name: The group_name of this RcsbGroupInfo.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def group_description(self):
        """Gets the group_description of this RcsbGroupInfo.  # noqa: E501


        :return: The group_description of this RcsbGroupInfo.  # noqa: E501
        :rtype: str
        """
        return self._group_description

    @group_description.setter
    def group_description(self, group_description):
        """Sets the group_description of this RcsbGroupInfo.


        :param group_description: The group_description of this RcsbGroupInfo.  # noqa: E501
        :type: str
        """

        self._group_description = group_description

    @property
    def group_members_granularity(self):
        """Gets the group_members_granularity of this RcsbGroupInfo.  # noqa: E501

        Granularity of group members identifiers  # noqa: E501

        :return: The group_members_granularity of this RcsbGroupInfo.  # noqa: E501
        :rtype: str
        """
        return self._group_members_granularity

    @group_members_granularity.setter
    def group_members_granularity(self, group_members_granularity):
        """Sets the group_members_granularity of this RcsbGroupInfo.

        Granularity of group members identifiers  # noqa: E501

        :param group_members_granularity: The group_members_granularity of this RcsbGroupInfo.  # noqa: E501
        :type: str
        """
        if group_members_granularity is None:
            raise ValueError("Invalid value for `group_members_granularity`, must not be `None`")  # noqa: E501
        allowed_values = ["assembly", "entry", "polymer_entity", "polymer_entity_instance"]  # noqa: E501
        if group_members_granularity not in allowed_values:
            raise ValueError(
                "Invalid value for `group_members_granularity` ({0}), must be one of {1}"  # noqa: E501
                .format(group_members_granularity, allowed_values)
            )

        self._group_members_granularity = group_members_granularity

    @property
    def group_members_count(self):
        """Gets the group_members_count of this RcsbGroupInfo.  # noqa: E501


        :return: The group_members_count of this RcsbGroupInfo.  # noqa: E501
        :rtype: int
        """
        return self._group_members_count

    @group_members_count.setter
    def group_members_count(self, group_members_count):
        """Sets the group_members_count of this RcsbGroupInfo.


        :param group_members_count: The group_members_count of this RcsbGroupInfo.  # noqa: E501
        :type: int
        """
        if group_members_count is None:
            raise ValueError("Invalid value for `group_members_count`, must not be `None`")  # noqa: E501

        self._group_members_count = group_members_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RcsbGroupInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RcsbGroupInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
