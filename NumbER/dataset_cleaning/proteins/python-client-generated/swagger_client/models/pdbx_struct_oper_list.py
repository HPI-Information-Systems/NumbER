# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PdbxStructOperList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'matrix_1_1': 'float',
        'matrix_1_2': 'float',
        'matrix_1_3': 'float',
        'matrix_2_1': 'float',
        'matrix_2_2': 'float',
        'matrix_2_3': 'float',
        'matrix_3_1': 'float',
        'matrix_3_2': 'float',
        'matrix_3_3': 'float',
        'name': 'str',
        'symmetry_operation': 'str',
        'type': 'str',
        'vector_1': 'float',
        'vector_2': 'float',
        'vector_3': 'float'
    }

    attribute_map = {
        'id': 'id',
        'matrix_1_1': 'matrix_1_1',
        'matrix_1_2': 'matrix_1_2',
        'matrix_1_3': 'matrix_1_3',
        'matrix_2_1': 'matrix_2_1',
        'matrix_2_2': 'matrix_2_2',
        'matrix_2_3': 'matrix_2_3',
        'matrix_3_1': 'matrix_3_1',
        'matrix_3_2': 'matrix_3_2',
        'matrix_3_3': 'matrix_3_3',
        'name': 'name',
        'symmetry_operation': 'symmetry_operation',
        'type': 'type',
        'vector_1': 'vector_1',
        'vector_2': 'vector_2',
        'vector_3': 'vector_3'
    }

    def __init__(self, id=None, matrix_1_1=None, matrix_1_2=None, matrix_1_3=None, matrix_2_1=None, matrix_2_2=None, matrix_2_3=None, matrix_3_1=None, matrix_3_2=None, matrix_3_3=None, name=None, symmetry_operation=None, type=None, vector_1=None, vector_2=None, vector_3=None):  # noqa: E501
        """PdbxStructOperList - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._matrix_1_1 = None
        self._matrix_1_2 = None
        self._matrix_1_3 = None
        self._matrix_2_1 = None
        self._matrix_2_2 = None
        self._matrix_2_3 = None
        self._matrix_3_1 = None
        self._matrix_3_2 = None
        self._matrix_3_3 = None
        self._name = None
        self._symmetry_operation = None
        self._type = None
        self._vector_1 = None
        self._vector_2 = None
        self._vector_3 = None
        self.discriminator = None
        self.id = id
        if matrix_1_1 is not None:
            self.matrix_1_1 = matrix_1_1
        if matrix_1_2 is not None:
            self.matrix_1_2 = matrix_1_2
        if matrix_1_3 is not None:
            self.matrix_1_3 = matrix_1_3
        if matrix_2_1 is not None:
            self.matrix_2_1 = matrix_2_1
        if matrix_2_2 is not None:
            self.matrix_2_2 = matrix_2_2
        if matrix_2_3 is not None:
            self.matrix_2_3 = matrix_2_3
        if matrix_3_1 is not None:
            self.matrix_3_1 = matrix_3_1
        if matrix_3_2 is not None:
            self.matrix_3_2 = matrix_3_2
        if matrix_3_3 is not None:
            self.matrix_3_3 = matrix_3_3
        if name is not None:
            self.name = name
        if symmetry_operation is not None:
            self.symmetry_operation = symmetry_operation
        if type is not None:
            self.type = type
        if vector_1 is not None:
            self.vector_1 = vector_1
        if vector_2 is not None:
            self.vector_2 = vector_2
        if vector_3 is not None:
            self.vector_3 = vector_3

    @property
    def id(self):
        """Gets the id of this PdbxStructOperList.  # noqa: E501

        This identifier code must uniquely identify a  record in the PDBX_STRUCT_OPER_LIST list.  # noqa: E501

        :return: The id of this PdbxStructOperList.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PdbxStructOperList.

        This identifier code must uniquely identify a  record in the PDBX_STRUCT_OPER_LIST list.  # noqa: E501

        :param id: The id of this PdbxStructOperList.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def matrix_1_1(self):
        """Gets the matrix_1_1 of this PdbxStructOperList.  # noqa: E501

        The [1][1] element of the 3x3 matrix component of the  transformation operation.  # noqa: E501

        :return: The matrix_1_1 of this PdbxStructOperList.  # noqa: E501
        :rtype: float
        """
        return self._matrix_1_1

    @matrix_1_1.setter
    def matrix_1_1(self, matrix_1_1):
        """Sets the matrix_1_1 of this PdbxStructOperList.

        The [1][1] element of the 3x3 matrix component of the  transformation operation.  # noqa: E501

        :param matrix_1_1: The matrix_1_1 of this PdbxStructOperList.  # noqa: E501
        :type: float
        """

        self._matrix_1_1 = matrix_1_1

    @property
    def matrix_1_2(self):
        """Gets the matrix_1_2 of this PdbxStructOperList.  # noqa: E501

        The [1][2] element of the 3x3 matrix component of the  transformation operation.  # noqa: E501

        :return: The matrix_1_2 of this PdbxStructOperList.  # noqa: E501
        :rtype: float
        """
        return self._matrix_1_2

    @matrix_1_2.setter
    def matrix_1_2(self, matrix_1_2):
        """Sets the matrix_1_2 of this PdbxStructOperList.

        The [1][2] element of the 3x3 matrix component of the  transformation operation.  # noqa: E501

        :param matrix_1_2: The matrix_1_2 of this PdbxStructOperList.  # noqa: E501
        :type: float
        """

        self._matrix_1_2 = matrix_1_2

    @property
    def matrix_1_3(self):
        """Gets the matrix_1_3 of this PdbxStructOperList.  # noqa: E501

        The [1][3] element of the 3x3 matrix component of the  transformation operation.  # noqa: E501

        :return: The matrix_1_3 of this PdbxStructOperList.  # noqa: E501
        :rtype: float
        """
        return self._matrix_1_3

    @matrix_1_3.setter
    def matrix_1_3(self, matrix_1_3):
        """Sets the matrix_1_3 of this PdbxStructOperList.

        The [1][3] element of the 3x3 matrix component of the  transformation operation.  # noqa: E501

        :param matrix_1_3: The matrix_1_3 of this PdbxStructOperList.  # noqa: E501
        :type: float
        """

        self._matrix_1_3 = matrix_1_3

    @property
    def matrix_2_1(self):
        """Gets the matrix_2_1 of this PdbxStructOperList.  # noqa: E501

        The [2][1] element of the 3x3 matrix component of the  transformation operation.  # noqa: E501

        :return: The matrix_2_1 of this PdbxStructOperList.  # noqa: E501
        :rtype: float
        """
        return self._matrix_2_1

    @matrix_2_1.setter
    def matrix_2_1(self, matrix_2_1):
        """Sets the matrix_2_1 of this PdbxStructOperList.

        The [2][1] element of the 3x3 matrix component of the  transformation operation.  # noqa: E501

        :param matrix_2_1: The matrix_2_1 of this PdbxStructOperList.  # noqa: E501
        :type: float
        """

        self._matrix_2_1 = matrix_2_1

    @property
    def matrix_2_2(self):
        """Gets the matrix_2_2 of this PdbxStructOperList.  # noqa: E501

        The [2][2] element of the 3x3 matrix component of the  transformation operation.  # noqa: E501

        :return: The matrix_2_2 of this PdbxStructOperList.  # noqa: E501
        :rtype: float
        """
        return self._matrix_2_2

    @matrix_2_2.setter
    def matrix_2_2(self, matrix_2_2):
        """Sets the matrix_2_2 of this PdbxStructOperList.

        The [2][2] element of the 3x3 matrix component of the  transformation operation.  # noqa: E501

        :param matrix_2_2: The matrix_2_2 of this PdbxStructOperList.  # noqa: E501
        :type: float
        """

        self._matrix_2_2 = matrix_2_2

    @property
    def matrix_2_3(self):
        """Gets the matrix_2_3 of this PdbxStructOperList.  # noqa: E501

        The [2][3] element of the 3x3 matrix component of the  transformation operation.  # noqa: E501

        :return: The matrix_2_3 of this PdbxStructOperList.  # noqa: E501
        :rtype: float
        """
        return self._matrix_2_3

    @matrix_2_3.setter
    def matrix_2_3(self, matrix_2_3):
        """Sets the matrix_2_3 of this PdbxStructOperList.

        The [2][3] element of the 3x3 matrix component of the  transformation operation.  # noqa: E501

        :param matrix_2_3: The matrix_2_3 of this PdbxStructOperList.  # noqa: E501
        :type: float
        """

        self._matrix_2_3 = matrix_2_3

    @property
    def matrix_3_1(self):
        """Gets the matrix_3_1 of this PdbxStructOperList.  # noqa: E501

        The [3][1] element of the 3x3 matrix component of the  transformation operation.  # noqa: E501

        :return: The matrix_3_1 of this PdbxStructOperList.  # noqa: E501
        :rtype: float
        """
        return self._matrix_3_1

    @matrix_3_1.setter
    def matrix_3_1(self, matrix_3_1):
        """Sets the matrix_3_1 of this PdbxStructOperList.

        The [3][1] element of the 3x3 matrix component of the  transformation operation.  # noqa: E501

        :param matrix_3_1: The matrix_3_1 of this PdbxStructOperList.  # noqa: E501
        :type: float
        """

        self._matrix_3_1 = matrix_3_1

    @property
    def matrix_3_2(self):
        """Gets the matrix_3_2 of this PdbxStructOperList.  # noqa: E501

        The [3][2] element of the 3x3 matrix component of the  transformation operation.  # noqa: E501

        :return: The matrix_3_2 of this PdbxStructOperList.  # noqa: E501
        :rtype: float
        """
        return self._matrix_3_2

    @matrix_3_2.setter
    def matrix_3_2(self, matrix_3_2):
        """Sets the matrix_3_2 of this PdbxStructOperList.

        The [3][2] element of the 3x3 matrix component of the  transformation operation.  # noqa: E501

        :param matrix_3_2: The matrix_3_2 of this PdbxStructOperList.  # noqa: E501
        :type: float
        """

        self._matrix_3_2 = matrix_3_2

    @property
    def matrix_3_3(self):
        """Gets the matrix_3_3 of this PdbxStructOperList.  # noqa: E501

        The [3][3] element of the 3x3 matrix component of the  transformation operation.  # noqa: E501

        :return: The matrix_3_3 of this PdbxStructOperList.  # noqa: E501
        :rtype: float
        """
        return self._matrix_3_3

    @matrix_3_3.setter
    def matrix_3_3(self, matrix_3_3):
        """Sets the matrix_3_3 of this PdbxStructOperList.

        The [3][3] element of the 3x3 matrix component of the  transformation operation.  # noqa: E501

        :param matrix_3_3: The matrix_3_3 of this PdbxStructOperList.  # noqa: E501
        :type: float
        """

        self._matrix_3_3 = matrix_3_3

    @property
    def name(self):
        """Gets the name of this PdbxStructOperList.  # noqa: E501

        A descriptive name for the transformation operation.  # noqa: E501

        :return: The name of this PdbxStructOperList.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PdbxStructOperList.

        A descriptive name for the transformation operation.  # noqa: E501

        :param name: The name of this PdbxStructOperList.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def symmetry_operation(self):
        """Gets the symmetry_operation of this PdbxStructOperList.  # noqa: E501

        The symmetry operation corresponding to the transformation operation.  # noqa: E501

        :return: The symmetry_operation of this PdbxStructOperList.  # noqa: E501
        :rtype: str
        """
        return self._symmetry_operation

    @symmetry_operation.setter
    def symmetry_operation(self, symmetry_operation):
        """Sets the symmetry_operation of this PdbxStructOperList.

        The symmetry operation corresponding to the transformation operation.  # noqa: E501

        :param symmetry_operation: The symmetry_operation of this PdbxStructOperList.  # noqa: E501
        :type: str
        """

        self._symmetry_operation = symmetry_operation

    @property
    def type(self):
        """Gets the type of this PdbxStructOperList.  # noqa: E501

        A code to indicate the type of operator.  # noqa: E501

        :return: The type of this PdbxStructOperList.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PdbxStructOperList.

        A code to indicate the type of operator.  # noqa: E501

        :param type: The type of this PdbxStructOperList.  # noqa: E501
        :type: str
        """
        allowed_values = ["2D crystal symmetry operation", "3D crystal symmetry operation", "build 2D crystal asymmetric unit", "build 3D crystal asymmetric unit", "build helical asymmetric unit", "build point asymmetric unit", "crystal symmetry operation", "helical symmetry operation", "identity operation", "point symmetry operation", "transform to 2D crystal frame", "transform to 3D crystal frame", "transform to crystal frame", "transform to helical frame", "transform to point frame"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def vector_1(self):
        """Gets the vector_1 of this PdbxStructOperList.  # noqa: E501

        The [1] element of the three-element vector component of the  transformation operation.  # noqa: E501

        :return: The vector_1 of this PdbxStructOperList.  # noqa: E501
        :rtype: float
        """
        return self._vector_1

    @vector_1.setter
    def vector_1(self, vector_1):
        """Sets the vector_1 of this PdbxStructOperList.

        The [1] element of the three-element vector component of the  transformation operation.  # noqa: E501

        :param vector_1: The vector_1 of this PdbxStructOperList.  # noqa: E501
        :type: float
        """

        self._vector_1 = vector_1

    @property
    def vector_2(self):
        """Gets the vector_2 of this PdbxStructOperList.  # noqa: E501

        The [2] element of the three-element vector component of the  transformation operation.  # noqa: E501

        :return: The vector_2 of this PdbxStructOperList.  # noqa: E501
        :rtype: float
        """
        return self._vector_2

    @vector_2.setter
    def vector_2(self, vector_2):
        """Sets the vector_2 of this PdbxStructOperList.

        The [2] element of the three-element vector component of the  transformation operation.  # noqa: E501

        :param vector_2: The vector_2 of this PdbxStructOperList.  # noqa: E501
        :type: float
        """

        self._vector_2 = vector_2

    @property
    def vector_3(self):
        """Gets the vector_3 of this PdbxStructOperList.  # noqa: E501

        The [3] element of the three-element vector component of the  transformation operation.  # noqa: E501

        :return: The vector_3 of this PdbxStructOperList.  # noqa: E501
        :rtype: float
        """
        return self._vector_3

    @vector_3.setter
    def vector_3(self, vector_3):
        """Sets the vector_3 of this PdbxStructOperList.

        The [3] element of the three-element vector component of the  transformation operation.  # noqa: E501

        :param vector_3: The vector_3 of this PdbxStructOperList.  # noqa: E501
        :type: float
        """

        self._vector_3 = vector_3

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PdbxStructOperList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdbxStructOperList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
