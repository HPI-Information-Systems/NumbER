# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Cell(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'z_pdb': 'int',
        'angle_alpha': 'float',
        'angle_beta': 'float',
        'angle_gamma': 'float',
        'formula_units_z': 'int',
        'length_a': 'float',
        'length_b': 'float',
        'length_c': 'float',
        'pdbx_unique_axis': 'str',
        'volume': 'float'
    }

    attribute_map = {
        'z_pdb': 'Z_PDB',
        'angle_alpha': 'angle_alpha',
        'angle_beta': 'angle_beta',
        'angle_gamma': 'angle_gamma',
        'formula_units_z': 'formula_units_Z',
        'length_a': 'length_a',
        'length_b': 'length_b',
        'length_c': 'length_c',
        'pdbx_unique_axis': 'pdbx_unique_axis',
        'volume': 'volume'
    }

    def __init__(self, z_pdb=None, angle_alpha=None, angle_beta=None, angle_gamma=None, formula_units_z=None, length_a=None, length_b=None, length_c=None, pdbx_unique_axis=None, volume=None):  # noqa: E501
        """Cell - a model defined in Swagger"""  # noqa: E501
        self._z_pdb = None
        self._angle_alpha = None
        self._angle_beta = None
        self._angle_gamma = None
        self._formula_units_z = None
        self._length_a = None
        self._length_b = None
        self._length_c = None
        self._pdbx_unique_axis = None
        self._volume = None
        self.discriminator = None
        if z_pdb is not None:
            self.z_pdb = z_pdb
        if angle_alpha is not None:
            self.angle_alpha = angle_alpha
        if angle_beta is not None:
            self.angle_beta = angle_beta
        if angle_gamma is not None:
            self.angle_gamma = angle_gamma
        if formula_units_z is not None:
            self.formula_units_z = formula_units_z
        if length_a is not None:
            self.length_a = length_a
        if length_b is not None:
            self.length_b = length_b
        if length_c is not None:
            self.length_c = length_c
        if pdbx_unique_axis is not None:
            self.pdbx_unique_axis = pdbx_unique_axis
        if volume is not None:
            self.volume = volume

    @property
    def z_pdb(self):
        """Gets the z_pdb of this Cell.  # noqa: E501

        The number of the polymeric chains in a unit cell. In the case  of heteropolymers, Z is the number of occurrences of the most  populous chain.   This data item is provided for compatibility with the original  Protein Data Bank format, and only for that purpose.  # noqa: E501

        :return: The z_pdb of this Cell.  # noqa: E501
        :rtype: int
        """
        return self._z_pdb

    @z_pdb.setter
    def z_pdb(self, z_pdb):
        """Sets the z_pdb of this Cell.

        The number of the polymeric chains in a unit cell. In the case  of heteropolymers, Z is the number of occurrences of the most  populous chain.   This data item is provided for compatibility with the original  Protein Data Bank format, and only for that purpose.  # noqa: E501

        :param z_pdb: The z_pdb of this Cell.  # noqa: E501
        :type: int
        """

        self._z_pdb = z_pdb

    @property
    def angle_alpha(self):
        """Gets the angle_alpha of this Cell.  # noqa: E501

        Unit-cell angle alpha of the reported structure in degrees.  # noqa: E501

        :return: The angle_alpha of this Cell.  # noqa: E501
        :rtype: float
        """
        return self._angle_alpha

    @angle_alpha.setter
    def angle_alpha(self, angle_alpha):
        """Sets the angle_alpha of this Cell.

        Unit-cell angle alpha of the reported structure in degrees.  # noqa: E501

        :param angle_alpha: The angle_alpha of this Cell.  # noqa: E501
        :type: float
        """

        self._angle_alpha = angle_alpha

    @property
    def angle_beta(self):
        """Gets the angle_beta of this Cell.  # noqa: E501

        Unit-cell angle beta of the reported structure in degrees.  # noqa: E501

        :return: The angle_beta of this Cell.  # noqa: E501
        :rtype: float
        """
        return self._angle_beta

    @angle_beta.setter
    def angle_beta(self, angle_beta):
        """Sets the angle_beta of this Cell.

        Unit-cell angle beta of the reported structure in degrees.  # noqa: E501

        :param angle_beta: The angle_beta of this Cell.  # noqa: E501
        :type: float
        """

        self._angle_beta = angle_beta

    @property
    def angle_gamma(self):
        """Gets the angle_gamma of this Cell.  # noqa: E501

        Unit-cell angle gamma of the reported structure in degrees.  # noqa: E501

        :return: The angle_gamma of this Cell.  # noqa: E501
        :rtype: float
        """
        return self._angle_gamma

    @angle_gamma.setter
    def angle_gamma(self, angle_gamma):
        """Sets the angle_gamma of this Cell.

        Unit-cell angle gamma of the reported structure in degrees.  # noqa: E501

        :param angle_gamma: The angle_gamma of this Cell.  # noqa: E501
        :type: float
        """

        self._angle_gamma = angle_gamma

    @property
    def formula_units_z(self):
        """Gets the formula_units_z of this Cell.  # noqa: E501

        The number of the formula units in the unit cell as specified  by _chemical_formula.structural, _chemical_formula.moiety or  _chemical_formula.sum.  # noqa: E501

        :return: The formula_units_z of this Cell.  # noqa: E501
        :rtype: int
        """
        return self._formula_units_z

    @formula_units_z.setter
    def formula_units_z(self, formula_units_z):
        """Sets the formula_units_z of this Cell.

        The number of the formula units in the unit cell as specified  by _chemical_formula.structural, _chemical_formula.moiety or  _chemical_formula.sum.  # noqa: E501

        :param formula_units_z: The formula_units_z of this Cell.  # noqa: E501
        :type: int
        """

        self._formula_units_z = formula_units_z

    @property
    def length_a(self):
        """Gets the length_a of this Cell.  # noqa: E501

        Unit-cell length a corresponding to the structure reported in angstroms.  # noqa: E501

        :return: The length_a of this Cell.  # noqa: E501
        :rtype: float
        """
        return self._length_a

    @length_a.setter
    def length_a(self, length_a):
        """Sets the length_a of this Cell.

        Unit-cell length a corresponding to the structure reported in angstroms.  # noqa: E501

        :param length_a: The length_a of this Cell.  # noqa: E501
        :type: float
        """

        self._length_a = length_a

    @property
    def length_b(self):
        """Gets the length_b of this Cell.  # noqa: E501

        Unit-cell length b corresponding to the structure reported in  angstroms.  # noqa: E501

        :return: The length_b of this Cell.  # noqa: E501
        :rtype: float
        """
        return self._length_b

    @length_b.setter
    def length_b(self, length_b):
        """Sets the length_b of this Cell.

        Unit-cell length b corresponding to the structure reported in  angstroms.  # noqa: E501

        :param length_b: The length_b of this Cell.  # noqa: E501
        :type: float
        """

        self._length_b = length_b

    @property
    def length_c(self):
        """Gets the length_c of this Cell.  # noqa: E501

        Unit-cell length c corresponding to the structure reported in angstroms.  # noqa: E501

        :return: The length_c of this Cell.  # noqa: E501
        :rtype: float
        """
        return self._length_c

    @length_c.setter
    def length_c(self, length_c):
        """Sets the length_c of this Cell.

        Unit-cell length c corresponding to the structure reported in angstroms.  # noqa: E501

        :param length_c: The length_c of this Cell.  # noqa: E501
        :type: float
        """

        self._length_c = length_c

    @property
    def pdbx_unique_axis(self):
        """Gets the pdbx_unique_axis of this Cell.  # noqa: E501

        To further identify unique axis if necessary.  E.g., P 21 with  an unique C axis will have 'C' in this field.  # noqa: E501

        :return: The pdbx_unique_axis of this Cell.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_unique_axis

    @pdbx_unique_axis.setter
    def pdbx_unique_axis(self, pdbx_unique_axis):
        """Sets the pdbx_unique_axis of this Cell.

        To further identify unique axis if necessary.  E.g., P 21 with  an unique C axis will have 'C' in this field.  # noqa: E501

        :param pdbx_unique_axis: The pdbx_unique_axis of this Cell.  # noqa: E501
        :type: str
        """

        self._pdbx_unique_axis = pdbx_unique_axis

    @property
    def volume(self):
        """Gets the volume of this Cell.  # noqa: E501

        Cell volume V in angstroms cubed.   V = a b c (1 - cos^2^~alpha~ - cos^2^~beta~ - cos^2^~gamma~             + 2 cos~alpha~ cos~beta~ cos~gamma~)^1/2^   a     = _cell.length_a  b     = _cell.length_b  c     = _cell.length_c  alpha = _cell.angle_alpha  beta  = _cell.angle_beta  gamma = _cell.angle_gamma  # noqa: E501

        :return: The volume of this Cell.  # noqa: E501
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this Cell.

        Cell volume V in angstroms cubed.   V = a b c (1 - cos^2^~alpha~ - cos^2^~beta~ - cos^2^~gamma~             + 2 cos~alpha~ cos~beta~ cos~gamma~)^1/2^   a     = _cell.length_a  b     = _cell.length_b  c     = _cell.length_c  alpha = _cell.angle_alpha  beta  = _cell.angle_beta  gamma = _cell.angle_gamma  # noqa: E501

        :param volume: The volume of this Cell.  # noqa: E501
        :type: float
        """

        self._volume = volume

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Cell, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Cell):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
