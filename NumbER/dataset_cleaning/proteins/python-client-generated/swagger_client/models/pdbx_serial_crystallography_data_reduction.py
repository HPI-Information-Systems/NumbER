# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PdbxSerialCrystallographyDataReduction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'crystal_hits': 'int',
        'diffrn_id': 'str',
        'droplet_hits': 'int',
        'frame_hits': 'int',
        'frames_failed_index': 'int',
        'frames_indexed': 'int',
        'frames_total': 'int',
        'lattices_indexed': 'int',
        'lattices_merged': 'int',
        'xfel_pulse_events': 'int',
        'xfel_run_numbers': 'str'
    }

    attribute_map = {
        'crystal_hits': 'crystal_hits',
        'diffrn_id': 'diffrn_id',
        'droplet_hits': 'droplet_hits',
        'frame_hits': 'frame_hits',
        'frames_failed_index': 'frames_failed_index',
        'frames_indexed': 'frames_indexed',
        'frames_total': 'frames_total',
        'lattices_indexed': 'lattices_indexed',
        'lattices_merged': 'lattices_merged',
        'xfel_pulse_events': 'xfel_pulse_events',
        'xfel_run_numbers': 'xfel_run_numbers'
    }

    def __init__(self, crystal_hits=None, diffrn_id=None, droplet_hits=None, frame_hits=None, frames_failed_index=None, frames_indexed=None, frames_total=None, lattices_indexed=None, lattices_merged=None, xfel_pulse_events=None, xfel_run_numbers=None):  # noqa: E501
        """PdbxSerialCrystallographyDataReduction - a model defined in Swagger"""  # noqa: E501
        self._crystal_hits = None
        self._diffrn_id = None
        self._droplet_hits = None
        self._frame_hits = None
        self._frames_failed_index = None
        self._frames_indexed = None
        self._frames_total = None
        self._lattices_indexed = None
        self._lattices_merged = None
        self._xfel_pulse_events = None
        self._xfel_run_numbers = None
        self.discriminator = None
        if crystal_hits is not None:
            self.crystal_hits = crystal_hits
        self.diffrn_id = diffrn_id
        if droplet_hits is not None:
            self.droplet_hits = droplet_hits
        if frame_hits is not None:
            self.frame_hits = frame_hits
        if frames_failed_index is not None:
            self.frames_failed_index = frames_failed_index
        if frames_indexed is not None:
            self.frames_indexed = frames_indexed
        if frames_total is not None:
            self.frames_total = frames_total
        if lattices_indexed is not None:
            self.lattices_indexed = lattices_indexed
        if lattices_merged is not None:
            self.lattices_merged = lattices_merged
        if xfel_pulse_events is not None:
            self.xfel_pulse_events = xfel_pulse_events
        if xfel_run_numbers is not None:
            self.xfel_run_numbers = xfel_run_numbers

    @property
    def crystal_hits(self):
        """Gets the crystal_hits of this PdbxSerialCrystallographyDataReduction.  # noqa: E501

        For experiments in which samples are provided in a  continuous stream, the total number of frames collected  in which the crystal was hit.  # noqa: E501

        :return: The crystal_hits of this PdbxSerialCrystallographyDataReduction.  # noqa: E501
        :rtype: int
        """
        return self._crystal_hits

    @crystal_hits.setter
    def crystal_hits(self, crystal_hits):
        """Sets the crystal_hits of this PdbxSerialCrystallographyDataReduction.

        For experiments in which samples are provided in a  continuous stream, the total number of frames collected  in which the crystal was hit.  # noqa: E501

        :param crystal_hits: The crystal_hits of this PdbxSerialCrystallographyDataReduction.  # noqa: E501
        :type: int
        """

        self._crystal_hits = crystal_hits

    @property
    def diffrn_id(self):
        """Gets the diffrn_id of this PdbxSerialCrystallographyDataReduction.  # noqa: E501

        The data item is a pointer to _diffrn.id in the DIFFRN  category.  # noqa: E501

        :return: The diffrn_id of this PdbxSerialCrystallographyDataReduction.  # noqa: E501
        :rtype: str
        """
        return self._diffrn_id

    @diffrn_id.setter
    def diffrn_id(self, diffrn_id):
        """Sets the diffrn_id of this PdbxSerialCrystallographyDataReduction.

        The data item is a pointer to _diffrn.id in the DIFFRN  category.  # noqa: E501

        :param diffrn_id: The diffrn_id of this PdbxSerialCrystallographyDataReduction.  # noqa: E501
        :type: str
        """
        if diffrn_id is None:
            raise ValueError("Invalid value for `diffrn_id`, must not be `None`")  # noqa: E501

        self._diffrn_id = diffrn_id

    @property
    def droplet_hits(self):
        """Gets the droplet_hits of this PdbxSerialCrystallographyDataReduction.  # noqa: E501

        For experiments in which samples are provided in a  continuous stream, the total number of frames collected  in which a droplet was hit.  # noqa: E501

        :return: The droplet_hits of this PdbxSerialCrystallographyDataReduction.  # noqa: E501
        :rtype: int
        """
        return self._droplet_hits

    @droplet_hits.setter
    def droplet_hits(self, droplet_hits):
        """Sets the droplet_hits of this PdbxSerialCrystallographyDataReduction.

        For experiments in which samples are provided in a  continuous stream, the total number of frames collected  in which a droplet was hit.  # noqa: E501

        :param droplet_hits: The droplet_hits of this PdbxSerialCrystallographyDataReduction.  # noqa: E501
        :type: int
        """

        self._droplet_hits = droplet_hits

    @property
    def frame_hits(self):
        """Gets the frame_hits of this PdbxSerialCrystallographyDataReduction.  # noqa: E501

        For experiments in which samples are provided in a  continuous stream, the total number of data frames collected  in which the sample was hit.  # noqa: E501

        :return: The frame_hits of this PdbxSerialCrystallographyDataReduction.  # noqa: E501
        :rtype: int
        """
        return self._frame_hits

    @frame_hits.setter
    def frame_hits(self, frame_hits):
        """Sets the frame_hits of this PdbxSerialCrystallographyDataReduction.

        For experiments in which samples are provided in a  continuous stream, the total number of data frames collected  in which the sample was hit.  # noqa: E501

        :param frame_hits: The frame_hits of this PdbxSerialCrystallographyDataReduction.  # noqa: E501
        :type: int
        """

        self._frame_hits = frame_hits

    @property
    def frames_failed_index(self):
        """Gets the frames_failed_index of this PdbxSerialCrystallographyDataReduction.  # noqa: E501

        For experiments in which samples are provided in a  continuous stream, the total number of data frames collected  that contained a \"hit\" but failed to index.  # noqa: E501

        :return: The frames_failed_index of this PdbxSerialCrystallographyDataReduction.  # noqa: E501
        :rtype: int
        """
        return self._frames_failed_index

    @frames_failed_index.setter
    def frames_failed_index(self, frames_failed_index):
        """Sets the frames_failed_index of this PdbxSerialCrystallographyDataReduction.

        For experiments in which samples are provided in a  continuous stream, the total number of data frames collected  that contained a \"hit\" but failed to index.  # noqa: E501

        :param frames_failed_index: The frames_failed_index of this PdbxSerialCrystallographyDataReduction.  # noqa: E501
        :type: int
        """

        self._frames_failed_index = frames_failed_index

    @property
    def frames_indexed(self):
        """Gets the frames_indexed of this PdbxSerialCrystallographyDataReduction.  # noqa: E501

        For experiments in which samples are provided in a  continuous stream, the total number of data frames collected  that were indexed.  # noqa: E501

        :return: The frames_indexed of this PdbxSerialCrystallographyDataReduction.  # noqa: E501
        :rtype: int
        """
        return self._frames_indexed

    @frames_indexed.setter
    def frames_indexed(self, frames_indexed):
        """Sets the frames_indexed of this PdbxSerialCrystallographyDataReduction.

        For experiments in which samples are provided in a  continuous stream, the total number of data frames collected  that were indexed.  # noqa: E501

        :param frames_indexed: The frames_indexed of this PdbxSerialCrystallographyDataReduction.  # noqa: E501
        :type: int
        """

        self._frames_indexed = frames_indexed

    @property
    def frames_total(self):
        """Gets the frames_total of this PdbxSerialCrystallographyDataReduction.  # noqa: E501

        The total number of data frames collected for this  data set.  # noqa: E501

        :return: The frames_total of this PdbxSerialCrystallographyDataReduction.  # noqa: E501
        :rtype: int
        """
        return self._frames_total

    @frames_total.setter
    def frames_total(self, frames_total):
        """Sets the frames_total of this PdbxSerialCrystallographyDataReduction.

        The total number of data frames collected for this  data set.  # noqa: E501

        :param frames_total: The frames_total of this PdbxSerialCrystallographyDataReduction.  # noqa: E501
        :type: int
        """

        self._frames_total = frames_total

    @property
    def lattices_indexed(self):
        """Gets the lattices_indexed of this PdbxSerialCrystallographyDataReduction.  # noqa: E501

        For experiments in which samples are provided in a  continuous stream, the total number of lattices indexed.  # noqa: E501

        :return: The lattices_indexed of this PdbxSerialCrystallographyDataReduction.  # noqa: E501
        :rtype: int
        """
        return self._lattices_indexed

    @lattices_indexed.setter
    def lattices_indexed(self, lattices_indexed):
        """Sets the lattices_indexed of this PdbxSerialCrystallographyDataReduction.

        For experiments in which samples are provided in a  continuous stream, the total number of lattices indexed.  # noqa: E501

        :param lattices_indexed: The lattices_indexed of this PdbxSerialCrystallographyDataReduction.  # noqa: E501
        :type: int
        """

        self._lattices_indexed = lattices_indexed

    @property
    def lattices_merged(self):
        """Gets the lattices_merged of this PdbxSerialCrystallographyDataReduction.  # noqa: E501

        For experiments in which samples are provided in a             continuous stream, the total number of crystal lattices             that were merged in the final dataset.  Can be             less than frames_indexed depending on filtering during merging or      can be more than frames_indexed if there are multiple lattices.      per frame.  # noqa: E501

        :return: The lattices_merged of this PdbxSerialCrystallographyDataReduction.  # noqa: E501
        :rtype: int
        """
        return self._lattices_merged

    @lattices_merged.setter
    def lattices_merged(self, lattices_merged):
        """Sets the lattices_merged of this PdbxSerialCrystallographyDataReduction.

        For experiments in which samples are provided in a             continuous stream, the total number of crystal lattices             that were merged in the final dataset.  Can be             less than frames_indexed depending on filtering during merging or      can be more than frames_indexed if there are multiple lattices.      per frame.  # noqa: E501

        :param lattices_merged: The lattices_merged of this PdbxSerialCrystallographyDataReduction.  # noqa: E501
        :type: int
        """

        self._lattices_merged = lattices_merged

    @property
    def xfel_pulse_events(self):
        """Gets the xfel_pulse_events of this PdbxSerialCrystallographyDataReduction.  # noqa: E501

        For FEL experiments, the number of pulse events in the dataset.  # noqa: E501

        :return: The xfel_pulse_events of this PdbxSerialCrystallographyDataReduction.  # noqa: E501
        :rtype: int
        """
        return self._xfel_pulse_events

    @xfel_pulse_events.setter
    def xfel_pulse_events(self, xfel_pulse_events):
        """Sets the xfel_pulse_events of this PdbxSerialCrystallographyDataReduction.

        For FEL experiments, the number of pulse events in the dataset.  # noqa: E501

        :param xfel_pulse_events: The xfel_pulse_events of this PdbxSerialCrystallographyDataReduction.  # noqa: E501
        :type: int
        """

        self._xfel_pulse_events = xfel_pulse_events

    @property
    def xfel_run_numbers(self):
        """Gets the xfel_run_numbers of this PdbxSerialCrystallographyDataReduction.  # noqa: E501

        For FEL experiments, in which data collection was performed         in batches, indicates which subset of the data collected                were used in producing this dataset.  # noqa: E501

        :return: The xfel_run_numbers of this PdbxSerialCrystallographyDataReduction.  # noqa: E501
        :rtype: str
        """
        return self._xfel_run_numbers

    @xfel_run_numbers.setter
    def xfel_run_numbers(self, xfel_run_numbers):
        """Sets the xfel_run_numbers of this PdbxSerialCrystallographyDataReduction.

        For FEL experiments, in which data collection was performed         in batches, indicates which subset of the data collected                were used in producing this dataset.  # noqa: E501

        :param xfel_run_numbers: The xfel_run_numbers of this PdbxSerialCrystallographyDataReduction.  # noqa: E501
        :type: str
        """

        self._xfel_run_numbers = xfel_run_numbers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PdbxSerialCrystallographyDataReduction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdbxSerialCrystallographyDataReduction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
