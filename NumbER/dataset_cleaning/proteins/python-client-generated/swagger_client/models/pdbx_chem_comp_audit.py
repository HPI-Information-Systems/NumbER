# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PdbxChemCompAudit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_type': 'str',
        'comp_id': 'str',
        '_date': 'datetime',
        'details': 'str',
        'ordinal': 'int'
    }

    attribute_map = {
        'action_type': 'action_type',
        'comp_id': 'comp_id',
        '_date': 'date',
        'details': 'details',
        'ordinal': 'ordinal'
    }

    def __init__(self, action_type=None, comp_id=None, _date=None, details=None, ordinal=None):  # noqa: E501
        """PdbxChemCompAudit - a model defined in Swagger"""  # noqa: E501
        self._action_type = None
        self._comp_id = None
        self.__date = None
        self._details = None
        self._ordinal = None
        self.discriminator = None
        if action_type is not None:
            self.action_type = action_type
        if comp_id is not None:
            self.comp_id = comp_id
        if _date is not None:
            self._date = _date
        if details is not None:
            self.details = details
        self.ordinal = ordinal

    @property
    def action_type(self):
        """Gets the action_type of this PdbxChemCompAudit.  # noqa: E501

        The action associated with this audit record.  # noqa: E501

        :return: The action_type of this PdbxChemCompAudit.  # noqa: E501
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this PdbxChemCompAudit.

        The action associated with this audit record.  # noqa: E501

        :param action_type: The action_type of this PdbxChemCompAudit.  # noqa: E501
        :type: str
        """
        allowed_values = ["Create component", "Initial release", "Modify aromatic_flag", "Modify atom id", "Modify charge", "Modify component atom id", "Modify component comp_id", "Modify coordinates", "Modify descriptor", "Modify formal charge", "Modify formula", "Modify identifier", "Modify internal type", "Modify leaving atom flag", "Modify linking type", "Modify model coordinates code", "Modify name", "Modify one letter code", "Modify parent residue", "Modify processing site", "Modify subcomponent list", "Modify synonyms", "Modify value order", "Obsolete component", "Other modification"]  # noqa: E501
        if action_type not in allowed_values:
            raise ValueError(
                "Invalid value for `action_type` ({0}), must be one of {1}"  # noqa: E501
                .format(action_type, allowed_values)
            )

        self._action_type = action_type

    @property
    def comp_id(self):
        """Gets the comp_id of this PdbxChemCompAudit.  # noqa: E501

        This data item is a pointer to _chem_comp.id in the CHEM_COMP  category.  # noqa: E501

        :return: The comp_id of this PdbxChemCompAudit.  # noqa: E501
        :rtype: str
        """
        return self._comp_id

    @comp_id.setter
    def comp_id(self, comp_id):
        """Sets the comp_id of this PdbxChemCompAudit.

        This data item is a pointer to _chem_comp.id in the CHEM_COMP  category.  # noqa: E501

        :param comp_id: The comp_id of this PdbxChemCompAudit.  # noqa: E501
        :type: str
        """

        self._comp_id = comp_id

    @property
    def _date(self):
        """Gets the _date of this PdbxChemCompAudit.  # noqa: E501

        The date associated with this audit record.  # noqa: E501

        :return: The _date of this PdbxChemCompAudit.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this PdbxChemCompAudit.

        The date associated with this audit record.  # noqa: E501

        :param _date: The _date of this PdbxChemCompAudit.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def details(self):
        """Gets the details of this PdbxChemCompAudit.  # noqa: E501

        Additional details decribing this change.  # noqa: E501

        :return: The details of this PdbxChemCompAudit.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this PdbxChemCompAudit.

        Additional details decribing this change.  # noqa: E501

        :param details: The details of this PdbxChemCompAudit.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def ordinal(self):
        """Gets the ordinal of this PdbxChemCompAudit.  # noqa: E501

        This data item is an ordinal index for the  PDBX_CHEM_COMP_AUDIT category.  # noqa: E501

        :return: The ordinal of this PdbxChemCompAudit.  # noqa: E501
        :rtype: int
        """
        return self._ordinal

    @ordinal.setter
    def ordinal(self, ordinal):
        """Sets the ordinal of this PdbxChemCompAudit.

        This data item is an ordinal index for the  PDBX_CHEM_COMP_AUDIT category.  # noqa: E501

        :param ordinal: The ordinal of this PdbxChemCompAudit.  # noqa: E501
        :type: int
        """
        if ordinal is None:
            raise ValueError("Invalid value for `ordinal`, must not be `None`")  # noqa: E501

        self._ordinal = ordinal

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PdbxChemCompAudit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdbxChemCompAudit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
