# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Em3dReconstruction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actual_pixel_size': 'float',
        'algorithm': 'str',
        'details': 'str',
        'id': 'str',
        'image_processing_id': 'str',
        'magnification_calibration': 'str',
        'method': 'str',
        'nominal_pixel_size': 'float',
        'num_class_averages': 'int',
        'num_particles': 'int',
        'refinement_type': 'str',
        'resolution': 'float',
        'resolution_method': 'str',
        'symmetry_type': 'str'
    }

    attribute_map = {
        'actual_pixel_size': 'actual_pixel_size',
        'algorithm': 'algorithm',
        'details': 'details',
        'id': 'id',
        'image_processing_id': 'image_processing_id',
        'magnification_calibration': 'magnification_calibration',
        'method': 'method',
        'nominal_pixel_size': 'nominal_pixel_size',
        'num_class_averages': 'num_class_averages',
        'num_particles': 'num_particles',
        'refinement_type': 'refinement_type',
        'resolution': 'resolution',
        'resolution_method': 'resolution_method',
        'symmetry_type': 'symmetry_type'
    }

    def __init__(self, actual_pixel_size=None, algorithm=None, details=None, id=None, image_processing_id=None, magnification_calibration=None, method=None, nominal_pixel_size=None, num_class_averages=None, num_particles=None, refinement_type=None, resolution=None, resolution_method=None, symmetry_type=None):  # noqa: E501
        """Em3dReconstruction - a model defined in Swagger"""  # noqa: E501
        self._actual_pixel_size = None
        self._algorithm = None
        self._details = None
        self._id = None
        self._image_processing_id = None
        self._magnification_calibration = None
        self._method = None
        self._nominal_pixel_size = None
        self._num_class_averages = None
        self._num_particles = None
        self._refinement_type = None
        self._resolution = None
        self._resolution_method = None
        self._symmetry_type = None
        self.discriminator = None
        if actual_pixel_size is not None:
            self.actual_pixel_size = actual_pixel_size
        if algorithm is not None:
            self.algorithm = algorithm
        if details is not None:
            self.details = details
        self.id = id
        self.image_processing_id = image_processing_id
        if magnification_calibration is not None:
            self.magnification_calibration = magnification_calibration
        if method is not None:
            self.method = method
        if nominal_pixel_size is not None:
            self.nominal_pixel_size = nominal_pixel_size
        if num_class_averages is not None:
            self.num_class_averages = num_class_averages
        if num_particles is not None:
            self.num_particles = num_particles
        if refinement_type is not None:
            self.refinement_type = refinement_type
        if resolution is not None:
            self.resolution = resolution
        if resolution_method is not None:
            self.resolution_method = resolution_method
        if symmetry_type is not None:
            self.symmetry_type = symmetry_type

    @property
    def actual_pixel_size(self):
        """Gets the actual_pixel_size of this Em3dReconstruction.  # noqa: E501

        The actual pixel size of the projection set of images in Angstroms.  # noqa: E501

        :return: The actual_pixel_size of this Em3dReconstruction.  # noqa: E501
        :rtype: float
        """
        return self._actual_pixel_size

    @actual_pixel_size.setter
    def actual_pixel_size(self, actual_pixel_size):
        """Sets the actual_pixel_size of this Em3dReconstruction.

        The actual pixel size of the projection set of images in Angstroms.  # noqa: E501

        :param actual_pixel_size: The actual_pixel_size of this Em3dReconstruction.  # noqa: E501
        :type: float
        """

        self._actual_pixel_size = actual_pixel_size

    @property
    def algorithm(self):
        """Gets the algorithm of this Em3dReconstruction.  # noqa: E501

        The reconstruction algorithm/technique used to generate the map.  # noqa: E501

        :return: The algorithm of this Em3dReconstruction.  # noqa: E501
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this Em3dReconstruction.

        The reconstruction algorithm/technique used to generate the map.  # noqa: E501

        :param algorithm: The algorithm of this Em3dReconstruction.  # noqa: E501
        :type: str
        """

        self._algorithm = algorithm

    @property
    def details(self):
        """Gets the details of this Em3dReconstruction.  # noqa: E501

        Any additional details used in the 3d reconstruction.  # noqa: E501

        :return: The details of this Em3dReconstruction.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Em3dReconstruction.

        Any additional details used in the 3d reconstruction.  # noqa: E501

        :param details: The details of this Em3dReconstruction.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def id(self):
        """Gets the id of this Em3dReconstruction.  # noqa: E501

        PRIMARY KEY  # noqa: E501

        :return: The id of this Em3dReconstruction.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Em3dReconstruction.

        PRIMARY KEY  # noqa: E501

        :param id: The id of this Em3dReconstruction.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def image_processing_id(self):
        """Gets the image_processing_id of this Em3dReconstruction.  # noqa: E501

        Foreign key to the EM_IMAGE_PROCESSING category  # noqa: E501

        :return: The image_processing_id of this Em3dReconstruction.  # noqa: E501
        :rtype: str
        """
        return self._image_processing_id

    @image_processing_id.setter
    def image_processing_id(self, image_processing_id):
        """Sets the image_processing_id of this Em3dReconstruction.

        Foreign key to the EM_IMAGE_PROCESSING category  # noqa: E501

        :param image_processing_id: The image_processing_id of this Em3dReconstruction.  # noqa: E501
        :type: str
        """
        if image_processing_id is None:
            raise ValueError("Invalid value for `image_processing_id`, must not be `None`")  # noqa: E501

        self._image_processing_id = image_processing_id

    @property
    def magnification_calibration(self):
        """Gets the magnification_calibration of this Em3dReconstruction.  # noqa: E501

        The magnification calibration method for the 3d reconstruction.  # noqa: E501

        :return: The magnification_calibration of this Em3dReconstruction.  # noqa: E501
        :rtype: str
        """
        return self._magnification_calibration

    @magnification_calibration.setter
    def magnification_calibration(self, magnification_calibration):
        """Sets the magnification_calibration of this Em3dReconstruction.

        The magnification calibration method for the 3d reconstruction.  # noqa: E501

        :param magnification_calibration: The magnification_calibration of this Em3dReconstruction.  # noqa: E501
        :type: str
        """

        self._magnification_calibration = magnification_calibration

    @property
    def method(self):
        """Gets the method of this Em3dReconstruction.  # noqa: E501

        The algorithm method used for the 3d-reconstruction.  # noqa: E501

        :return: The method of this Em3dReconstruction.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this Em3dReconstruction.

        The algorithm method used for the 3d-reconstruction.  # noqa: E501

        :param method: The method of this Em3dReconstruction.  # noqa: E501
        :type: str
        """

        self._method = method

    @property
    def nominal_pixel_size(self):
        """Gets the nominal_pixel_size of this Em3dReconstruction.  # noqa: E501

        The nominal pixel size of the projection set of images in Angstroms.  # noqa: E501

        :return: The nominal_pixel_size of this Em3dReconstruction.  # noqa: E501
        :rtype: float
        """
        return self._nominal_pixel_size

    @nominal_pixel_size.setter
    def nominal_pixel_size(self, nominal_pixel_size):
        """Sets the nominal_pixel_size of this Em3dReconstruction.

        The nominal pixel size of the projection set of images in Angstroms.  # noqa: E501

        :param nominal_pixel_size: The nominal_pixel_size of this Em3dReconstruction.  # noqa: E501
        :type: float
        """

        self._nominal_pixel_size = nominal_pixel_size

    @property
    def num_class_averages(self):
        """Gets the num_class_averages of this Em3dReconstruction.  # noqa: E501

        The number of classes used in the final 3d reconstruction  # noqa: E501

        :return: The num_class_averages of this Em3dReconstruction.  # noqa: E501
        :rtype: int
        """
        return self._num_class_averages

    @num_class_averages.setter
    def num_class_averages(self, num_class_averages):
        """Sets the num_class_averages of this Em3dReconstruction.

        The number of classes used in the final 3d reconstruction  # noqa: E501

        :param num_class_averages: The num_class_averages of this Em3dReconstruction.  # noqa: E501
        :type: int
        """

        self._num_class_averages = num_class_averages

    @property
    def num_particles(self):
        """Gets the num_particles of this Em3dReconstruction.  # noqa: E501

        The number of 2D projections or 3D subtomograms used in the 3d reconstruction  # noqa: E501

        :return: The num_particles of this Em3dReconstruction.  # noqa: E501
        :rtype: int
        """
        return self._num_particles

    @num_particles.setter
    def num_particles(self, num_particles):
        """Sets the num_particles of this Em3dReconstruction.

        The number of 2D projections or 3D subtomograms used in the 3d reconstruction  # noqa: E501

        :param num_particles: The num_particles of this Em3dReconstruction.  # noqa: E501
        :type: int
        """

        self._num_particles = num_particles

    @property
    def refinement_type(self):
        """Gets the refinement_type of this Em3dReconstruction.  # noqa: E501

        Indicates details on how the half-map used for resolution determination (usually by FSC) have been generated.  # noqa: E501

        :return: The refinement_type of this Em3dReconstruction.  # noqa: E501
        :rtype: str
        """
        return self._refinement_type

    @refinement_type.setter
    def refinement_type(self, refinement_type):
        """Sets the refinement_type of this Em3dReconstruction.

        Indicates details on how the half-map used for resolution determination (usually by FSC) have been generated.  # noqa: E501

        :param refinement_type: The refinement_type of this Em3dReconstruction.  # noqa: E501
        :type: str
        """
        allowed_values = ["HALF-MAPS REFINED AGAINST SAME DATA", "HALF-MAPS REFINED INDEPENDENTLY", "HALF-MAPS REFINED INDEPENDENTLY WITH FREQUENCY RANGE OMITTED", "HALF-MAPS REFINED WITH FREQUENCY RANGE OMITTED", "OTHER"]  # noqa: E501
        if refinement_type not in allowed_values:
            raise ValueError(
                "Invalid value for `refinement_type` ({0}), must be one of {1}"  # noqa: E501
                .format(refinement_type, allowed_values)
            )

        self._refinement_type = refinement_type

    @property
    def resolution(self):
        """Gets the resolution of this Em3dReconstruction.  # noqa: E501

        The final resolution (in angstroms) of the 3D reconstruction.  # noqa: E501

        :return: The resolution of this Em3dReconstruction.  # noqa: E501
        :rtype: float
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this Em3dReconstruction.

        The final resolution (in angstroms) of the 3D reconstruction.  # noqa: E501

        :param resolution: The resolution of this Em3dReconstruction.  # noqa: E501
        :type: float
        """

        self._resolution = resolution

    @property
    def resolution_method(self):
        """Gets the resolution_method of this Em3dReconstruction.  # noqa: E501

        The  method used to determine the final resolution  of the 3d reconstruction.  The Fourier Shell Correlation criterion as a measure of  resolution is based on the concept of splitting the (2D)  data set into two halves; averaging each and comparing them  using the Fourier Ring Correlation (FRC) technique.  # noqa: E501

        :return: The resolution_method of this Em3dReconstruction.  # noqa: E501
        :rtype: str
        """
        return self._resolution_method

    @resolution_method.setter
    def resolution_method(self, resolution_method):
        """Sets the resolution_method of this Em3dReconstruction.

        The  method used to determine the final resolution  of the 3d reconstruction.  The Fourier Shell Correlation criterion as a measure of  resolution is based on the concept of splitting the (2D)  data set into two halves; averaging each and comparing them  using the Fourier Ring Correlation (FRC) technique.  # noqa: E501

        :param resolution_method: The resolution_method of this Em3dReconstruction.  # noqa: E501
        :type: str
        """

        self._resolution_method = resolution_method

    @property
    def symmetry_type(self):
        """Gets the symmetry_type of this Em3dReconstruction.  # noqa: E501

        The type of symmetry applied to the reconstruction  # noqa: E501

        :return: The symmetry_type of this Em3dReconstruction.  # noqa: E501
        :rtype: str
        """
        return self._symmetry_type

    @symmetry_type.setter
    def symmetry_type(self, symmetry_type):
        """Sets the symmetry_type of this Em3dReconstruction.

        The type of symmetry applied to the reconstruction  # noqa: E501

        :param symmetry_type: The symmetry_type of this Em3dReconstruction.  # noqa: E501
        :type: str
        """
        allowed_values = ["2D CRYSTAL", "3D CRYSTAL", "HELICAL", "POINT"]  # noqa: E501
        if symmetry_type not in allowed_values:
            raise ValueError(
                "Invalid value for `symmetry_type` ({0}), must be one of {1}"  # noqa: E501
                .format(symmetry_type, allowed_values)
            )

        self._symmetry_type = symmetry_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Em3dReconstruction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Em3dReconstruction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
