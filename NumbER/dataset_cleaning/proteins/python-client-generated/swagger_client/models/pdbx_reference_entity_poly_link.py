# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PdbxReferenceEntityPolyLink(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'atom_id_1': 'str',
        'atom_id_2': 'str',
        'comp_id_1': 'str',
        'comp_id_2': 'str',
        'component_id': 'int',
        'entity_seq_num_1': 'int',
        'entity_seq_num_2': 'int',
        'link_id': 'int',
        'prd_id': 'str',
        'ref_entity_id': 'str',
        'value_order': 'str'
    }

    attribute_map = {
        'atom_id_1': 'atom_id_1',
        'atom_id_2': 'atom_id_2',
        'comp_id_1': 'comp_id_1',
        'comp_id_2': 'comp_id_2',
        'component_id': 'component_id',
        'entity_seq_num_1': 'entity_seq_num_1',
        'entity_seq_num_2': 'entity_seq_num_2',
        'link_id': 'link_id',
        'prd_id': 'prd_id',
        'ref_entity_id': 'ref_entity_id',
        'value_order': 'value_order'
    }

    def __init__(self, atom_id_1=None, atom_id_2=None, comp_id_1=None, comp_id_2=None, component_id=None, entity_seq_num_1=None, entity_seq_num_2=None, link_id=None, prd_id=None, ref_entity_id=None, value_order=None):  # noqa: E501
        """PdbxReferenceEntityPolyLink - a model defined in Swagger"""  # noqa: E501
        self._atom_id_1 = None
        self._atom_id_2 = None
        self._comp_id_1 = None
        self._comp_id_2 = None
        self._component_id = None
        self._entity_seq_num_1 = None
        self._entity_seq_num_2 = None
        self._link_id = None
        self._prd_id = None
        self._ref_entity_id = None
        self._value_order = None
        self.discriminator = None
        if atom_id_1 is not None:
            self.atom_id_1 = atom_id_1
        if atom_id_2 is not None:
            self.atom_id_2 = atom_id_2
        if comp_id_1 is not None:
            self.comp_id_1 = comp_id_1
        if comp_id_2 is not None:
            self.comp_id_2 = comp_id_2
        self.component_id = component_id
        if entity_seq_num_1 is not None:
            self.entity_seq_num_1 = entity_seq_num_1
        if entity_seq_num_2 is not None:
            self.entity_seq_num_2 = entity_seq_num_2
        self.link_id = link_id
        self.prd_id = prd_id
        self.ref_entity_id = ref_entity_id
        if value_order is not None:
            self.value_order = value_order

    @property
    def atom_id_1(self):
        """Gets the atom_id_1 of this PdbxReferenceEntityPolyLink.  # noqa: E501

        The atom identifier/name in the first of the two components making  the linkage.  # noqa: E501

        :return: The atom_id_1 of this PdbxReferenceEntityPolyLink.  # noqa: E501
        :rtype: str
        """
        return self._atom_id_1

    @atom_id_1.setter
    def atom_id_1(self, atom_id_1):
        """Sets the atom_id_1 of this PdbxReferenceEntityPolyLink.

        The atom identifier/name in the first of the two components making  the linkage.  # noqa: E501

        :param atom_id_1: The atom_id_1 of this PdbxReferenceEntityPolyLink.  # noqa: E501
        :type: str
        """

        self._atom_id_1 = atom_id_1

    @property
    def atom_id_2(self):
        """Gets the atom_id_2 of this PdbxReferenceEntityPolyLink.  # noqa: E501

        The atom identifier/name in the second of the two components making  the linkage.  # noqa: E501

        :return: The atom_id_2 of this PdbxReferenceEntityPolyLink.  # noqa: E501
        :rtype: str
        """
        return self._atom_id_2

    @atom_id_2.setter
    def atom_id_2(self, atom_id_2):
        """Sets the atom_id_2 of this PdbxReferenceEntityPolyLink.

        The atom identifier/name in the second of the two components making  the linkage.  # noqa: E501

        :param atom_id_2: The atom_id_2 of this PdbxReferenceEntityPolyLink.  # noqa: E501
        :type: str
        """

        self._atom_id_2 = atom_id_2

    @property
    def comp_id_1(self):
        """Gets the comp_id_1 of this PdbxReferenceEntityPolyLink.  # noqa: E501

        The component identifier in the first of the two components making the  linkage.   This data item is a pointer to _pdbx_reference_entity_poly_seq.mon_id  in the PDBX_REFERENCE_ENTITY_POLY_SEQ category.  # noqa: E501

        :return: The comp_id_1 of this PdbxReferenceEntityPolyLink.  # noqa: E501
        :rtype: str
        """
        return self._comp_id_1

    @comp_id_1.setter
    def comp_id_1(self, comp_id_1):
        """Sets the comp_id_1 of this PdbxReferenceEntityPolyLink.

        The component identifier in the first of the two components making the  linkage.   This data item is a pointer to _pdbx_reference_entity_poly_seq.mon_id  in the PDBX_REFERENCE_ENTITY_POLY_SEQ category.  # noqa: E501

        :param comp_id_1: The comp_id_1 of this PdbxReferenceEntityPolyLink.  # noqa: E501
        :type: str
        """

        self._comp_id_1 = comp_id_1

    @property
    def comp_id_2(self):
        """Gets the comp_id_2 of this PdbxReferenceEntityPolyLink.  # noqa: E501

        The component identifier in the second of the two components making the  linkage.   This data item is a pointer to _pdbx_reference_entity_poly_seq.mon_id  in the PDBX_REFERENCE_ENTITY_POLY_SEQ category.  # noqa: E501

        :return: The comp_id_2 of this PdbxReferenceEntityPolyLink.  # noqa: E501
        :rtype: str
        """
        return self._comp_id_2

    @comp_id_2.setter
    def comp_id_2(self, comp_id_2):
        """Sets the comp_id_2 of this PdbxReferenceEntityPolyLink.

        The component identifier in the second of the two components making the  linkage.   This data item is a pointer to _pdbx_reference_entity_poly_seq.mon_id  in the PDBX_REFERENCE_ENTITY_POLY_SEQ category.  # noqa: E501

        :param comp_id_2: The comp_id_2 of this PdbxReferenceEntityPolyLink.  # noqa: E501
        :type: str
        """

        self._comp_id_2 = comp_id_2

    @property
    def component_id(self):
        """Gets the component_id of this PdbxReferenceEntityPolyLink.  # noqa: E501

        The entity component identifier entity containing the linkage.  # noqa: E501

        :return: The component_id of this PdbxReferenceEntityPolyLink.  # noqa: E501
        :rtype: int
        """
        return self._component_id

    @component_id.setter
    def component_id(self, component_id):
        """Sets the component_id of this PdbxReferenceEntityPolyLink.

        The entity component identifier entity containing the linkage.  # noqa: E501

        :param component_id: The component_id of this PdbxReferenceEntityPolyLink.  # noqa: E501
        :type: int
        """
        if component_id is None:
            raise ValueError("Invalid value for `component_id`, must not be `None`")  # noqa: E501

        self._component_id = component_id

    @property
    def entity_seq_num_1(self):
        """Gets the entity_seq_num_1 of this PdbxReferenceEntityPolyLink.  # noqa: E501

        For a polymer entity, the sequence number in the first of  the two components making the linkage.   This data item is a pointer to _pdbx_reference_entity_poly_seq.num  in the PDBX_REFERENCE_ENTITY_POLY_SEQ category.  # noqa: E501

        :return: The entity_seq_num_1 of this PdbxReferenceEntityPolyLink.  # noqa: E501
        :rtype: int
        """
        return self._entity_seq_num_1

    @entity_seq_num_1.setter
    def entity_seq_num_1(self, entity_seq_num_1):
        """Sets the entity_seq_num_1 of this PdbxReferenceEntityPolyLink.

        For a polymer entity, the sequence number in the first of  the two components making the linkage.   This data item is a pointer to _pdbx_reference_entity_poly_seq.num  in the PDBX_REFERENCE_ENTITY_POLY_SEQ category.  # noqa: E501

        :param entity_seq_num_1: The entity_seq_num_1 of this PdbxReferenceEntityPolyLink.  # noqa: E501
        :type: int
        """

        self._entity_seq_num_1 = entity_seq_num_1

    @property
    def entity_seq_num_2(self):
        """Gets the entity_seq_num_2 of this PdbxReferenceEntityPolyLink.  # noqa: E501

        For a polymer entity, the sequence number in the second of  the two components making the linkage.   This data item is a pointer to _pdbx_reference_entity_poly_seq.num  in the PDBX_REFERENCE_ENTITY_POLY_SEQ category.  # noqa: E501

        :return: The entity_seq_num_2 of this PdbxReferenceEntityPolyLink.  # noqa: E501
        :rtype: int
        """
        return self._entity_seq_num_2

    @entity_seq_num_2.setter
    def entity_seq_num_2(self, entity_seq_num_2):
        """Sets the entity_seq_num_2 of this PdbxReferenceEntityPolyLink.

        For a polymer entity, the sequence number in the second of  the two components making the linkage.   This data item is a pointer to _pdbx_reference_entity_poly_seq.num  in the PDBX_REFERENCE_ENTITY_POLY_SEQ category.  # noqa: E501

        :param entity_seq_num_2: The entity_seq_num_2 of this PdbxReferenceEntityPolyLink.  # noqa: E501
        :type: int
        """

        self._entity_seq_num_2 = entity_seq_num_2

    @property
    def link_id(self):
        """Gets the link_id of this PdbxReferenceEntityPolyLink.  # noqa: E501

        The value of _pdbx_reference_entity_poly_link.link_id uniquely identifies  a linkage within a polymer entity.  # noqa: E501

        :return: The link_id of this PdbxReferenceEntityPolyLink.  # noqa: E501
        :rtype: int
        """
        return self._link_id

    @link_id.setter
    def link_id(self, link_id):
        """Sets the link_id of this PdbxReferenceEntityPolyLink.

        The value of _pdbx_reference_entity_poly_link.link_id uniquely identifies  a linkage within a polymer entity.  # noqa: E501

        :param link_id: The link_id of this PdbxReferenceEntityPolyLink.  # noqa: E501
        :type: int
        """
        if link_id is None:
            raise ValueError("Invalid value for `link_id`, must not be `None`")  # noqa: E501

        self._link_id = link_id

    @property
    def prd_id(self):
        """Gets the prd_id of this PdbxReferenceEntityPolyLink.  # noqa: E501

        The value of _pdbx_reference_entity_poly_link.prd_id is a reference  _pdbx_reference_entity_list.prd_id in the PDBX_REFERENCE_ENTITY_POLY category.  # noqa: E501

        :return: The prd_id of this PdbxReferenceEntityPolyLink.  # noqa: E501
        :rtype: str
        """
        return self._prd_id

    @prd_id.setter
    def prd_id(self, prd_id):
        """Sets the prd_id of this PdbxReferenceEntityPolyLink.

        The value of _pdbx_reference_entity_poly_link.prd_id is a reference  _pdbx_reference_entity_list.prd_id in the PDBX_REFERENCE_ENTITY_POLY category.  # noqa: E501

        :param prd_id: The prd_id of this PdbxReferenceEntityPolyLink.  # noqa: E501
        :type: str
        """
        if prd_id is None:
            raise ValueError("Invalid value for `prd_id`, must not be `None`")  # noqa: E501

        self._prd_id = prd_id

    @property
    def ref_entity_id(self):
        """Gets the ref_entity_id of this PdbxReferenceEntityPolyLink.  # noqa: E501

        The reference entity id of the polymer entity containing the linkage.   This data item is a pointer to _pdbx_reference_entity_poly.ref_entity_id  in the PDBX_REFERENCE_ENTITY_POLY category.  # noqa: E501

        :return: The ref_entity_id of this PdbxReferenceEntityPolyLink.  # noqa: E501
        :rtype: str
        """
        return self._ref_entity_id

    @ref_entity_id.setter
    def ref_entity_id(self, ref_entity_id):
        """Sets the ref_entity_id of this PdbxReferenceEntityPolyLink.

        The reference entity id of the polymer entity containing the linkage.   This data item is a pointer to _pdbx_reference_entity_poly.ref_entity_id  in the PDBX_REFERENCE_ENTITY_POLY category.  # noqa: E501

        :param ref_entity_id: The ref_entity_id of this PdbxReferenceEntityPolyLink.  # noqa: E501
        :type: str
        """
        if ref_entity_id is None:
            raise ValueError("Invalid value for `ref_entity_id`, must not be `None`")  # noqa: E501

        self._ref_entity_id = ref_entity_id

    @property
    def value_order(self):
        """Gets the value_order of this PdbxReferenceEntityPolyLink.  # noqa: E501

        The bond order target for the non-standard linkage.  # noqa: E501

        :return: The value_order of this PdbxReferenceEntityPolyLink.  # noqa: E501
        :rtype: str
        """
        return self._value_order

    @value_order.setter
    def value_order(self, value_order):
        """Sets the value_order of this PdbxReferenceEntityPolyLink.

        The bond order target for the non-standard linkage.  # noqa: E501

        :param value_order: The value_order of this PdbxReferenceEntityPolyLink.  # noqa: E501
        :type: str
        """
        allowed_values = ["arom", "delo", "doub", "pi", "poly", "quad", "sing", "trip"]  # noqa: E501
        if value_order not in allowed_values:
            raise ValueError(
                "Invalid value for `value_order` ({0}), must be one of {1}"  # noqa: E501
                .format(value_order, allowed_values)
            )

        self._value_order = value_order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PdbxReferenceEntityPolyLink, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdbxReferenceEntityPolyLink):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
