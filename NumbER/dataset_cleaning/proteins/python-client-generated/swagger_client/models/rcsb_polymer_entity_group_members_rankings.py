# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RcsbPolymerEntityGroupMembersRankings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ranking_criteria_type': 'str',
        'group_members': 'list[RcsbPolymerEntityGroupMembersRankingsGroupMembers]'
    }

    attribute_map = {
        'ranking_criteria_type': 'ranking_criteria_type',
        'group_members': 'group_members'
    }

    def __init__(self, ranking_criteria_type=None, group_members=None):  # noqa: E501
        """RcsbPolymerEntityGroupMembersRankings - a model defined in Swagger"""  # noqa: E501
        self._ranking_criteria_type = None
        self._group_members = None
        self.discriminator = None
        self.ranking_criteria_type = ranking_criteria_type
        self.group_members = group_members

    @property
    def ranking_criteria_type(self):
        """Gets the ranking_criteria_type of this RcsbPolymerEntityGroupMembersRankings.  # noqa: E501

        Defines ranking option applicable to group members  # noqa: E501

        :return: The ranking_criteria_type of this RcsbPolymerEntityGroupMembersRankings.  # noqa: E501
        :rtype: str
        """
        return self._ranking_criteria_type

    @ranking_criteria_type.setter
    def ranking_criteria_type(self, ranking_criteria_type):
        """Sets the ranking_criteria_type of this RcsbPolymerEntityGroupMembersRankings.

        Defines ranking option applicable to group members  # noqa: E501

        :param ranking_criteria_type: The ranking_criteria_type of this RcsbPolymerEntityGroupMembersRankings.  # noqa: E501
        :type: str
        """
        if ranking_criteria_type is None:
            raise ValueError("Invalid value for `ranking_criteria_type`, must not be `None`")  # noqa: E501
        allowed_values = ["coverage"]  # noqa: E501
        if ranking_criteria_type not in allowed_values:
            raise ValueError(
                "Invalid value for `ranking_criteria_type` ({0}), must be one of {1}"  # noqa: E501
                .format(ranking_criteria_type, allowed_values)
            )

        self._ranking_criteria_type = ranking_criteria_type

    @property
    def group_members(self):
        """Gets the group_members of this RcsbPolymerEntityGroupMembersRankings.  # noqa: E501


        :return: The group_members of this RcsbPolymerEntityGroupMembersRankings.  # noqa: E501
        :rtype: list[RcsbPolymerEntityGroupMembersRankingsGroupMembers]
        """
        return self._group_members

    @group_members.setter
    def group_members(self, group_members):
        """Sets the group_members of this RcsbPolymerEntityGroupMembersRankings.


        :param group_members: The group_members of this RcsbPolymerEntityGroupMembersRankings.  # noqa: E501
        :type: list[RcsbPolymerEntityGroupMembersRankingsGroupMembers]
        """
        if group_members is None:
            raise ValueError("Invalid value for `group_members`, must not be `None`")  # noqa: E501

        self._group_members = group_members

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RcsbPolymerEntityGroupMembersRankings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RcsbPolymerEntityGroupMembersRankings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
