# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PdbxStructAssemblyGen(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assembly_id': 'str',
        'asym_id_list': 'list[str]',
        'oper_expression': 'str',
        'ordinal': 'int'
    }

    attribute_map = {
        'assembly_id': 'assembly_id',
        'asym_id_list': 'asym_id_list',
        'oper_expression': 'oper_expression',
        'ordinal': 'ordinal'
    }

    def __init__(self, assembly_id=None, asym_id_list=None, oper_expression=None, ordinal=None):  # noqa: E501
        """PdbxStructAssemblyGen - a model defined in Swagger"""  # noqa: E501
        self._assembly_id = None
        self._asym_id_list = None
        self._oper_expression = None
        self._ordinal = None
        self.discriminator = None
        if assembly_id is not None:
            self.assembly_id = assembly_id
        if asym_id_list is not None:
            self.asym_id_list = asym_id_list
        if oper_expression is not None:
            self.oper_expression = oper_expression
        self.ordinal = ordinal

    @property
    def assembly_id(self):
        """Gets the assembly_id of this PdbxStructAssemblyGen.  # noqa: E501

        This data item is a pointer to _pdbx_struct_assembly.id in the  PDBX_STRUCT_ASSEMBLY category.  # noqa: E501

        :return: The assembly_id of this PdbxStructAssemblyGen.  # noqa: E501
        :rtype: str
        """
        return self._assembly_id

    @assembly_id.setter
    def assembly_id(self, assembly_id):
        """Sets the assembly_id of this PdbxStructAssemblyGen.

        This data item is a pointer to _pdbx_struct_assembly.id in the  PDBX_STRUCT_ASSEMBLY category.  # noqa: E501

        :param assembly_id: The assembly_id of this PdbxStructAssemblyGen.  # noqa: E501
        :type: str
        """

        self._assembly_id = assembly_id

    @property
    def asym_id_list(self):
        """Gets the asym_id_list of this PdbxStructAssemblyGen.  # noqa: E501

        This data item is a pointer to _struct_asym.id in  the STRUCT_ASYM category.   This item may be expressed as a comma separated list of identifiers.  # noqa: E501

        :return: The asym_id_list of this PdbxStructAssemblyGen.  # noqa: E501
        :rtype: list[str]
        """
        return self._asym_id_list

    @asym_id_list.setter
    def asym_id_list(self, asym_id_list):
        """Sets the asym_id_list of this PdbxStructAssemblyGen.

        This data item is a pointer to _struct_asym.id in  the STRUCT_ASYM category.   This item may be expressed as a comma separated list of identifiers.  # noqa: E501

        :param asym_id_list: The asym_id_list of this PdbxStructAssemblyGen.  # noqa: E501
        :type: list[str]
        """

        self._asym_id_list = asym_id_list

    @property
    def oper_expression(self):
        """Gets the oper_expression of this PdbxStructAssemblyGen.  # noqa: E501

        Identifies the operation of collection of operations  from category PDBX_STRUCT_OPER_LIST.   Operation expressions may have the forms:    (1)        the single operation 1   (1,2,5)    the operations 1, 2, 5   (1-4)      the operations 1,2,3 and 4   (1,2)(3,4) the combinations of operations              3 and 4 followed by 1 and 2 (i.e.              the cartesian product of parenthetical              groups applied from right to left)  # noqa: E501

        :return: The oper_expression of this PdbxStructAssemblyGen.  # noqa: E501
        :rtype: str
        """
        return self._oper_expression

    @oper_expression.setter
    def oper_expression(self, oper_expression):
        """Sets the oper_expression of this PdbxStructAssemblyGen.

        Identifies the operation of collection of operations  from category PDBX_STRUCT_OPER_LIST.   Operation expressions may have the forms:    (1)        the single operation 1   (1,2,5)    the operations 1, 2, 5   (1-4)      the operations 1,2,3 and 4   (1,2)(3,4) the combinations of operations              3 and 4 followed by 1 and 2 (i.e.              the cartesian product of parenthetical              groups applied from right to left)  # noqa: E501

        :param oper_expression: The oper_expression of this PdbxStructAssemblyGen.  # noqa: E501
        :type: str
        """

        self._oper_expression = oper_expression

    @property
    def ordinal(self):
        """Gets the ordinal of this PdbxStructAssemblyGen.  # noqa: E501

        This data item is an ordinal index for the  PDBX_STRUCT_ASSEMBLY category.  # noqa: E501

        :return: The ordinal of this PdbxStructAssemblyGen.  # noqa: E501
        :rtype: int
        """
        return self._ordinal

    @ordinal.setter
    def ordinal(self, ordinal):
        """Sets the ordinal of this PdbxStructAssemblyGen.

        This data item is an ordinal index for the  PDBX_STRUCT_ASSEMBLY category.  # noqa: E501

        :param ordinal: The ordinal of this PdbxStructAssemblyGen.  # noqa: E501
        :type: int
        """
        if ordinal is None:
            raise ValueError("Invalid value for `ordinal`, must not be `None`")  # noqa: E501

        self._ordinal = ordinal

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PdbxStructAssemblyGen, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdbxStructAssemblyGen):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
