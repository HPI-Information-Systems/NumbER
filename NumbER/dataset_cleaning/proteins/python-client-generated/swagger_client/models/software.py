# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Software(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'citation_id': 'str',
        'classification': 'str',
        'contact_author': 'str',
        'contact_author_email': 'str',
        '_date': 'str',
        'description': 'str',
        'language': 'str',
        'location': 'str',
        'name': 'str',
        'os': 'str',
        'pdbx_ordinal': 'int',
        'type': 'str',
        'version': 'str'
    }

    attribute_map = {
        'citation_id': 'citation_id',
        'classification': 'classification',
        'contact_author': 'contact_author',
        'contact_author_email': 'contact_author_email',
        '_date': 'date',
        'description': 'description',
        'language': 'language',
        'location': 'location',
        'name': 'name',
        'os': 'os',
        'pdbx_ordinal': 'pdbx_ordinal',
        'type': 'type',
        'version': 'version'
    }

    def __init__(self, citation_id=None, classification=None, contact_author=None, contact_author_email=None, _date=None, description=None, language=None, location=None, name=None, os=None, pdbx_ordinal=None, type=None, version=None):  # noqa: E501
        """Software - a model defined in Swagger"""  # noqa: E501
        self._citation_id = None
        self._classification = None
        self._contact_author = None
        self._contact_author_email = None
        self.__date = None
        self._description = None
        self._language = None
        self._location = None
        self._name = None
        self._os = None
        self._pdbx_ordinal = None
        self._type = None
        self._version = None
        self.discriminator = None
        if citation_id is not None:
            self.citation_id = citation_id
        if classification is not None:
            self.classification = classification
        if contact_author is not None:
            self.contact_author = contact_author
        if contact_author_email is not None:
            self.contact_author_email = contact_author_email
        if _date is not None:
            self._date = _date
        if description is not None:
            self.description = description
        if language is not None:
            self.language = language
        if location is not None:
            self.location = location
        if name is not None:
            self.name = name
        if os is not None:
            self.os = os
        self.pdbx_ordinal = pdbx_ordinal
        if type is not None:
            self.type = type
        if version is not None:
            self.version = version

    @property
    def citation_id(self):
        """Gets the citation_id of this Software.  # noqa: E501

        This data item is a pointer to _citation.id in the CITATION  category.  # noqa: E501

        :return: The citation_id of this Software.  # noqa: E501
        :rtype: str
        """
        return self._citation_id

    @citation_id.setter
    def citation_id(self, citation_id):
        """Sets the citation_id of this Software.

        This data item is a pointer to _citation.id in the CITATION  category.  # noqa: E501

        :param citation_id: The citation_id of this Software.  # noqa: E501
        :type: str
        """

        self._citation_id = citation_id

    @property
    def classification(self):
        """Gets the classification of this Software.  # noqa: E501

        The classification of the program according to its  major function.  # noqa: E501

        :return: The classification of this Software.  # noqa: E501
        :rtype: str
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this Software.

        The classification of the program according to its  major function.  # noqa: E501

        :param classification: The classification of this Software.  # noqa: E501
        :type: str
        """

        self._classification = classification

    @property
    def contact_author(self):
        """Gets the contact_author of this Software.  # noqa: E501

        The recognized contact author of the software. This could be  the original author, someone who has modified the code or  someone who maintains the code.  It should be the person  most commonly associated with the code.  # noqa: E501

        :return: The contact_author of this Software.  # noqa: E501
        :rtype: str
        """
        return self._contact_author

    @contact_author.setter
    def contact_author(self, contact_author):
        """Sets the contact_author of this Software.

        The recognized contact author of the software. This could be  the original author, someone who has modified the code or  someone who maintains the code.  It should be the person  most commonly associated with the code.  # noqa: E501

        :param contact_author: The contact_author of this Software.  # noqa: E501
        :type: str
        """

        self._contact_author = contact_author

    @property
    def contact_author_email(self):
        """Gets the contact_author_email of this Software.  # noqa: E501

        The e-mail address of the person specified in  _software.contact_author.  # noqa: E501

        :return: The contact_author_email of this Software.  # noqa: E501
        :rtype: str
        """
        return self._contact_author_email

    @contact_author_email.setter
    def contact_author_email(self, contact_author_email):
        """Sets the contact_author_email of this Software.

        The e-mail address of the person specified in  _software.contact_author.  # noqa: E501

        :param contact_author_email: The contact_author_email of this Software.  # noqa: E501
        :type: str
        """

        self._contact_author_email = contact_author_email

    @property
    def _date(self):
        """Gets the _date of this Software.  # noqa: E501

        The date the software was released.  # noqa: E501

        :return: The _date of this Software.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Software.

        The date the software was released.  # noqa: E501

        :param _date: The _date of this Software.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def description(self):
        """Gets the description of this Software.  # noqa: E501

        Description of the software.  # noqa: E501

        :return: The description of this Software.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Software.

        Description of the software.  # noqa: E501

        :param description: The description of this Software.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def language(self):
        """Gets the language of this Software.  # noqa: E501

        The major computing language in which the software is  coded.  # noqa: E501

        :return: The language of this Software.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Software.

        The major computing language in which the software is  coded.  # noqa: E501

        :param language: The language of this Software.  # noqa: E501
        :type: str
        """
        allowed_values = ["Ada", "Awk", "Basic", "C", "C++", "C/C++", "Fortran", "Fortran 77", "Fortran 90", "Fortran_77", "Java", "Java & Fortran", "Other", "Pascal", "Perl", "Python", "Python/C++", "Tcl", "assembler", "csh", "ksh", "sh"]  # noqa: E501
        if language not in allowed_values:
            raise ValueError(
                "Invalid value for `language` ({0}), must be one of {1}"  # noqa: E501
                .format(language, allowed_values)
            )

        self._language = language

    @property
    def location(self):
        """Gets the location of this Software.  # noqa: E501

        The URL for an Internet address at which  details of the software can be found.  # noqa: E501

        :return: The location of this Software.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Software.

        The URL for an Internet address at which  details of the software can be found.  # noqa: E501

        :param location: The location of this Software.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this Software.  # noqa: E501

        The name of the software.  # noqa: E501

        :return: The name of this Software.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Software.

        The name of the software.  # noqa: E501

        :param name: The name of this Software.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def os(self):
        """Gets the os of this Software.  # noqa: E501

        The name of the operating system under which the software  runs.  # noqa: E501

        :return: The os of this Software.  # noqa: E501
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this Software.

        The name of the operating system under which the software  runs.  # noqa: E501

        :param os: The os of this Software.  # noqa: E501
        :type: str
        """

        self._os = os

    @property
    def pdbx_ordinal(self):
        """Gets the pdbx_ordinal of this Software.  # noqa: E501

        An ordinal index for this category  # noqa: E501

        :return: The pdbx_ordinal of this Software.  # noqa: E501
        :rtype: int
        """
        return self._pdbx_ordinal

    @pdbx_ordinal.setter
    def pdbx_ordinal(self, pdbx_ordinal):
        """Sets the pdbx_ordinal of this Software.

        An ordinal index for this category  # noqa: E501

        :param pdbx_ordinal: The pdbx_ordinal of this Software.  # noqa: E501
        :type: int
        """
        if pdbx_ordinal is None:
            raise ValueError("Invalid value for `pdbx_ordinal`, must not be `None`")  # noqa: E501

        self._pdbx_ordinal = pdbx_ordinal

    @property
    def type(self):
        """Gets the type of this Software.  # noqa: E501

        The classification of the software according to the most  common types.  # noqa: E501

        :return: The type of this Software.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Software.

        The classification of the software according to the most  common types.  # noqa: E501

        :param type: The type of this Software.  # noqa: E501
        :type: str
        """
        allowed_values = ["filter", "jiffy", "library", "other", "package", "program"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def version(self):
        """Gets the version of this Software.  # noqa: E501

        The version of the software.  # noqa: E501

        :return: The version of this Software.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Software.

        The version of the software.  # noqa: E501

        :param version: The version of this Software.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Software, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Software):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
