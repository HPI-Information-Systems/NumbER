# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RcsbRepositoryHoldingsCombined(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_code_replaced_by_latest': 'str',
        'status': 'str',
        'status_code': 'str'
    }

    attribute_map = {
        'id_code_replaced_by_latest': 'id_code_replaced_by_latest',
        'status': 'status',
        'status_code': 'status_code'
    }

    def __init__(self, id_code_replaced_by_latest=None, status=None, status_code=None):  # noqa: E501
        """RcsbRepositoryHoldingsCombined - a model defined in Swagger"""  # noqa: E501
        self._id_code_replaced_by_latest = None
        self._status = None
        self._status_code = None
        self.discriminator = None
        if id_code_replaced_by_latest is not None:
            self.id_code_replaced_by_latest = id_code_replaced_by_latest
        if status is not None:
            self.status = status
        if status_code is not None:
            self.status_code = status_code

    @property
    def id_code_replaced_by_latest(self):
        """Gets the id_code_replaced_by_latest of this RcsbRepositoryHoldingsCombined.  # noqa: E501

        The latest superseding PDB accession code for the removed entry.  # noqa: E501

        :return: The id_code_replaced_by_latest of this RcsbRepositoryHoldingsCombined.  # noqa: E501
        :rtype: str
        """
        return self._id_code_replaced_by_latest

    @id_code_replaced_by_latest.setter
    def id_code_replaced_by_latest(self, id_code_replaced_by_latest):
        """Sets the id_code_replaced_by_latest of this RcsbRepositoryHoldingsCombined.

        The latest superseding PDB accession code for the removed entry.  # noqa: E501

        :param id_code_replaced_by_latest: The id_code_replaced_by_latest of this RcsbRepositoryHoldingsCombined.  # noqa: E501
        :type: str
        """

        self._id_code_replaced_by_latest = id_code_replaced_by_latest

    @property
    def status(self):
        """Gets the status of this RcsbRepositoryHoldingsCombined.  # noqa: E501

        The status category for the entry.  # noqa: E501

        :return: The status of this RcsbRepositoryHoldingsCombined.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RcsbRepositoryHoldingsCombined.

        The status category for the entry.  # noqa: E501

        :param status: The status of this RcsbRepositoryHoldingsCombined.  # noqa: E501
        :type: str
        """
        allowed_values = ["CURRENT", "REMOVED", "UNRELEASED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_code(self):
        """Gets the status_code of this RcsbRepositoryHoldingsCombined.  # noqa: E501

        The status code for the entry.  # noqa: E501

        :return: The status_code of this RcsbRepositoryHoldingsCombined.  # noqa: E501
        :rtype: str
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this RcsbRepositoryHoldingsCombined.

        The status code for the entry.  # noqa: E501

        :param status_code: The status_code of this RcsbRepositoryHoldingsCombined.  # noqa: E501
        :type: str
        """
        allowed_values = ["AUCO", "AUTH", "HOLD", "HPUB", "OBS", "POLC", "PROC", "REFI", "REL", "REPL", "RMVD", "TRSF", "WAIT", "WDRN"]  # noqa: E501
        if status_code not in allowed_values:
            raise ValueError(
                "Invalid value for `status_code` ({0}), must be one of {1}"  # noqa: E501
                .format(status_code, allowed_values)
            )

        self._status_code = status_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RcsbRepositoryHoldingsCombined, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RcsbRepositoryHoldingsCombined):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
