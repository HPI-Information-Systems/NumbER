# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EmParticleSelection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'details': 'str',
        'id': 'str',
        'image_processing_id': 'str',
        'num_particles_selected': 'int'
    }

    attribute_map = {
        'details': 'details',
        'id': 'id',
        'image_processing_id': 'image_processing_id',
        'num_particles_selected': 'num_particles_selected'
    }

    def __init__(self, details=None, id=None, image_processing_id=None, num_particles_selected=None):  # noqa: E501
        """EmParticleSelection - a model defined in Swagger"""  # noqa: E501
        self._details = None
        self._id = None
        self._image_processing_id = None
        self._num_particles_selected = None
        self.discriminator = None
        if details is not None:
            self.details = details
        self.id = id
        self.image_processing_id = image_processing_id
        if num_particles_selected is not None:
            self.num_particles_selected = num_particles_selected

    @property
    def details(self):
        """Gets the details of this EmParticleSelection.  # noqa: E501

        Additional detail such as description of filters used, if selection was manual or automated, and/or template details.  # noqa: E501

        :return: The details of this EmParticleSelection.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this EmParticleSelection.

        Additional detail such as description of filters used, if selection was manual or automated, and/or template details.  # noqa: E501

        :param details: The details of this EmParticleSelection.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def id(self):
        """Gets the id of this EmParticleSelection.  # noqa: E501

        PRIMARY KEY  # noqa: E501

        :return: The id of this EmParticleSelection.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EmParticleSelection.

        PRIMARY KEY  # noqa: E501

        :param id: The id of this EmParticleSelection.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def image_processing_id(self):
        """Gets the image_processing_id of this EmParticleSelection.  # noqa: E501

        The value of _em_particle_selection.image_processing_id points to  the EM_IMAGE_PROCESSING category.  # noqa: E501

        :return: The image_processing_id of this EmParticleSelection.  # noqa: E501
        :rtype: str
        """
        return self._image_processing_id

    @image_processing_id.setter
    def image_processing_id(self, image_processing_id):
        """Sets the image_processing_id of this EmParticleSelection.

        The value of _em_particle_selection.image_processing_id points to  the EM_IMAGE_PROCESSING category.  # noqa: E501

        :param image_processing_id: The image_processing_id of this EmParticleSelection.  # noqa: E501
        :type: str
        """
        if image_processing_id is None:
            raise ValueError("Invalid value for `image_processing_id`, must not be `None`")  # noqa: E501

        self._image_processing_id = image_processing_id

    @property
    def num_particles_selected(self):
        """Gets the num_particles_selected of this EmParticleSelection.  # noqa: E501

        The number of particles selected from the projection set of images.  # noqa: E501

        :return: The num_particles_selected of this EmParticleSelection.  # noqa: E501
        :rtype: int
        """
        return self._num_particles_selected

    @num_particles_selected.setter
    def num_particles_selected(self, num_particles_selected):
        """Sets the num_particles_selected of this EmParticleSelection.

        The number of particles selected from the projection set of images.  # noqa: E501

        :param num_particles_selected: The num_particles_selected of this EmParticleSelection.  # noqa: E501
        :type: int
        """

        self._num_particles_selected = num_particles_selected

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmParticleSelection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmParticleSelection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
