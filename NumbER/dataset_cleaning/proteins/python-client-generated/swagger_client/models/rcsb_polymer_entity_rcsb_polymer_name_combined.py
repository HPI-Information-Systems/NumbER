# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RcsbPolymerEntityRcsbPolymerNameCombined(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'names': 'list[str]',
        'provenance_source': 'str'
    }

    attribute_map = {
        'names': 'names',
        'provenance_source': 'provenance_source'
    }

    def __init__(self, names=None, provenance_source=None):  # noqa: E501
        """RcsbPolymerEntityRcsbPolymerNameCombined - a model defined in Swagger"""  # noqa: E501
        self._names = None
        self._provenance_source = None
        self.discriminator = None
        if names is not None:
            self.names = names
        if provenance_source is not None:
            self.provenance_source = provenance_source

    @property
    def names(self):
        """Gets the names of this RcsbPolymerEntityRcsbPolymerNameCombined.  # noqa: E501

        Protein name annotated by the UniProtKB or macromolecular name assigned by the PDB  # noqa: E501

        :return: The names of this RcsbPolymerEntityRcsbPolymerNameCombined.  # noqa: E501
        :rtype: list[str]
        """
        return self._names

    @names.setter
    def names(self, names):
        """Sets the names of this RcsbPolymerEntityRcsbPolymerNameCombined.

        Protein name annotated by the UniProtKB or macromolecular name assigned by the PDB  # noqa: E501

        :param names: The names of this RcsbPolymerEntityRcsbPolymerNameCombined.  # noqa: E501
        :type: list[str]
        """

        self._names = names

    @property
    def provenance_source(self):
        """Gets the provenance_source of this RcsbPolymerEntityRcsbPolymerNameCombined.  # noqa: E501


        :return: The provenance_source of this RcsbPolymerEntityRcsbPolymerNameCombined.  # noqa: E501
        :rtype: str
        """
        return self._provenance_source

    @provenance_source.setter
    def provenance_source(self, provenance_source):
        """Sets the provenance_source of this RcsbPolymerEntityRcsbPolymerNameCombined.


        :param provenance_source: The provenance_source of this RcsbPolymerEntityRcsbPolymerNameCombined.  # noqa: E501
        :type: str
        """
        allowed_values = ["PDB Preferred Name", "PDB Description", "UniProt Name"]  # noqa: E501
        if provenance_source not in allowed_values:
            raise ValueError(
                "Invalid value for `provenance_source` ({0}), must be one of {1}"  # noqa: E501
                .format(provenance_source, allowed_values)
            )

        self._provenance_source = provenance_source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RcsbPolymerEntityRcsbPolymerNameCombined, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RcsbPolymerEntityRcsbPolymerNameCombined):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
