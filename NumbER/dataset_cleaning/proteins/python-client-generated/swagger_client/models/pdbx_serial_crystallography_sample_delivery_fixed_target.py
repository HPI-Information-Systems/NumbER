# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PdbxSerialCrystallographySampleDeliveryFixedTarget(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'crystals_per_unit': 'int',
        'description': 'str',
        'details': 'str',
        'diffrn_id': 'str',
        'motion_control': 'str',
        'sample_dehydration_prevention': 'str',
        'sample_holding': 'str',
        'sample_solvent': 'str',
        'sample_unit_size': 'float',
        'support_base': 'str',
        'velocity_horizontal': 'float',
        'velocity_vertical': 'float'
    }

    attribute_map = {
        'crystals_per_unit': 'crystals_per_unit',
        'description': 'description',
        'details': 'details',
        'diffrn_id': 'diffrn_id',
        'motion_control': 'motion_control',
        'sample_dehydration_prevention': 'sample_dehydration_prevention',
        'sample_holding': 'sample_holding',
        'sample_solvent': 'sample_solvent',
        'sample_unit_size': 'sample_unit_size',
        'support_base': 'support_base',
        'velocity_horizontal': 'velocity_horizontal',
        'velocity_vertical': 'velocity_vertical'
    }

    def __init__(self, crystals_per_unit=None, description=None, details=None, diffrn_id=None, motion_control=None, sample_dehydration_prevention=None, sample_holding=None, sample_solvent=None, sample_unit_size=None, support_base=None, velocity_horizontal=None, velocity_vertical=None):  # noqa: E501
        """PdbxSerialCrystallographySampleDeliveryFixedTarget - a model defined in Swagger"""  # noqa: E501
        self._crystals_per_unit = None
        self._description = None
        self._details = None
        self._diffrn_id = None
        self._motion_control = None
        self._sample_dehydration_prevention = None
        self._sample_holding = None
        self._sample_solvent = None
        self._sample_unit_size = None
        self._support_base = None
        self._velocity_horizontal = None
        self._velocity_vertical = None
        self.discriminator = None
        if crystals_per_unit is not None:
            self.crystals_per_unit = crystals_per_unit
        if description is not None:
            self.description = description
        if details is not None:
            self.details = details
        self.diffrn_id = diffrn_id
        if motion_control is not None:
            self.motion_control = motion_control
        if sample_dehydration_prevention is not None:
            self.sample_dehydration_prevention = sample_dehydration_prevention
        if sample_holding is not None:
            self.sample_holding = sample_holding
        if sample_solvent is not None:
            self.sample_solvent = sample_solvent
        if sample_unit_size is not None:
            self.sample_unit_size = sample_unit_size
        if support_base is not None:
            self.support_base = support_base
        if velocity_horizontal is not None:
            self.velocity_horizontal = velocity_horizontal
        if velocity_vertical is not None:
            self.velocity_vertical = velocity_vertical

    @property
    def crystals_per_unit(self):
        """Gets the crystals_per_unit of this PdbxSerialCrystallographySampleDeliveryFixedTarget.  # noqa: E501

        The number of crystals per dropplet or pore in fixed target  # noqa: E501

        :return: The crystals_per_unit of this PdbxSerialCrystallographySampleDeliveryFixedTarget.  # noqa: E501
        :rtype: int
        """
        return self._crystals_per_unit

    @crystals_per_unit.setter
    def crystals_per_unit(self, crystals_per_unit):
        """Sets the crystals_per_unit of this PdbxSerialCrystallographySampleDeliveryFixedTarget.

        The number of crystals per dropplet or pore in fixed target  # noqa: E501

        :param crystals_per_unit: The crystals_per_unit of this PdbxSerialCrystallographySampleDeliveryFixedTarget.  # noqa: E501
        :type: int
        """

        self._crystals_per_unit = crystals_per_unit

    @property
    def description(self):
        """Gets the description of this PdbxSerialCrystallographySampleDeliveryFixedTarget.  # noqa: E501

        For a fixed target sample, a description of sample preparation  # noqa: E501

        :return: The description of this PdbxSerialCrystallographySampleDeliveryFixedTarget.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PdbxSerialCrystallographySampleDeliveryFixedTarget.

        For a fixed target sample, a description of sample preparation  # noqa: E501

        :param description: The description of this PdbxSerialCrystallographySampleDeliveryFixedTarget.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def details(self):
        """Gets the details of this PdbxSerialCrystallographySampleDeliveryFixedTarget.  # noqa: E501

        Any details pertinent to the fixed sample target  # noqa: E501

        :return: The details of this PdbxSerialCrystallographySampleDeliveryFixedTarget.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this PdbxSerialCrystallographySampleDeliveryFixedTarget.

        Any details pertinent to the fixed sample target  # noqa: E501

        :param details: The details of this PdbxSerialCrystallographySampleDeliveryFixedTarget.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def diffrn_id(self):
        """Gets the diffrn_id of this PdbxSerialCrystallographySampleDeliveryFixedTarget.  # noqa: E501

        The data item is a pointer to _diffrn.id in the DIFFRN  category.  # noqa: E501

        :return: The diffrn_id of this PdbxSerialCrystallographySampleDeliveryFixedTarget.  # noqa: E501
        :rtype: str
        """
        return self._diffrn_id

    @diffrn_id.setter
    def diffrn_id(self, diffrn_id):
        """Sets the diffrn_id of this PdbxSerialCrystallographySampleDeliveryFixedTarget.

        The data item is a pointer to _diffrn.id in the DIFFRN  category.  # noqa: E501

        :param diffrn_id: The diffrn_id of this PdbxSerialCrystallographySampleDeliveryFixedTarget.  # noqa: E501
        :type: str
        """
        if diffrn_id is None:
            raise ValueError("Invalid value for `diffrn_id`, must not be `None`")  # noqa: E501

        self._diffrn_id = diffrn_id

    @property
    def motion_control(self):
        """Gets the motion_control of this PdbxSerialCrystallographySampleDeliveryFixedTarget.  # noqa: E501

        Device used to control movement of the fixed sample  # noqa: E501

        :return: The motion_control of this PdbxSerialCrystallographySampleDeliveryFixedTarget.  # noqa: E501
        :rtype: str
        """
        return self._motion_control

    @motion_control.setter
    def motion_control(self, motion_control):
        """Sets the motion_control of this PdbxSerialCrystallographySampleDeliveryFixedTarget.

        Device used to control movement of the fixed sample  # noqa: E501

        :param motion_control: The motion_control of this PdbxSerialCrystallographySampleDeliveryFixedTarget.  # noqa: E501
        :type: str
        """

        self._motion_control = motion_control

    @property
    def sample_dehydration_prevention(self):
        """Gets the sample_dehydration_prevention of this PdbxSerialCrystallographySampleDeliveryFixedTarget.  # noqa: E501

        Method to prevent dehydration of sample  # noqa: E501

        :return: The sample_dehydration_prevention of this PdbxSerialCrystallographySampleDeliveryFixedTarget.  # noqa: E501
        :rtype: str
        """
        return self._sample_dehydration_prevention

    @sample_dehydration_prevention.setter
    def sample_dehydration_prevention(self, sample_dehydration_prevention):
        """Sets the sample_dehydration_prevention of this PdbxSerialCrystallographySampleDeliveryFixedTarget.

        Method to prevent dehydration of sample  # noqa: E501

        :param sample_dehydration_prevention: The sample_dehydration_prevention of this PdbxSerialCrystallographySampleDeliveryFixedTarget.  # noqa: E501
        :type: str
        """

        self._sample_dehydration_prevention = sample_dehydration_prevention

    @property
    def sample_holding(self):
        """Gets the sample_holding of this PdbxSerialCrystallographySampleDeliveryFixedTarget.  # noqa: E501

        For a fixed target sample, mechanism to hold sample in the beam  # noqa: E501

        :return: The sample_holding of this PdbxSerialCrystallographySampleDeliveryFixedTarget.  # noqa: E501
        :rtype: str
        """
        return self._sample_holding

    @sample_holding.setter
    def sample_holding(self, sample_holding):
        """Sets the sample_holding of this PdbxSerialCrystallographySampleDeliveryFixedTarget.

        For a fixed target sample, mechanism to hold sample in the beam  # noqa: E501

        :param sample_holding: The sample_holding of this PdbxSerialCrystallographySampleDeliveryFixedTarget.  # noqa: E501
        :type: str
        """

        self._sample_holding = sample_holding

    @property
    def sample_solvent(self):
        """Gets the sample_solvent of this PdbxSerialCrystallographySampleDeliveryFixedTarget.  # noqa: E501

        The sample solution content and concentration  # noqa: E501

        :return: The sample_solvent of this PdbxSerialCrystallographySampleDeliveryFixedTarget.  # noqa: E501
        :rtype: str
        """
        return self._sample_solvent

    @sample_solvent.setter
    def sample_solvent(self, sample_solvent):
        """Sets the sample_solvent of this PdbxSerialCrystallographySampleDeliveryFixedTarget.

        The sample solution content and concentration  # noqa: E501

        :param sample_solvent: The sample_solvent of this PdbxSerialCrystallographySampleDeliveryFixedTarget.  # noqa: E501
        :type: str
        """

        self._sample_solvent = sample_solvent

    @property
    def sample_unit_size(self):
        """Gets the sample_unit_size of this PdbxSerialCrystallographySampleDeliveryFixedTarget.  # noqa: E501

        Size of pore in grid supporting sample. Diameter or length in micrometres,  e.g. pore diameter  # noqa: E501

        :return: The sample_unit_size of this PdbxSerialCrystallographySampleDeliveryFixedTarget.  # noqa: E501
        :rtype: float
        """
        return self._sample_unit_size

    @sample_unit_size.setter
    def sample_unit_size(self, sample_unit_size):
        """Sets the sample_unit_size of this PdbxSerialCrystallographySampleDeliveryFixedTarget.

        Size of pore in grid supporting sample. Diameter or length in micrometres,  e.g. pore diameter  # noqa: E501

        :param sample_unit_size: The sample_unit_size of this PdbxSerialCrystallographySampleDeliveryFixedTarget.  # noqa: E501
        :type: float
        """

        self._sample_unit_size = sample_unit_size

    @property
    def support_base(self):
        """Gets the support_base of this PdbxSerialCrystallographySampleDeliveryFixedTarget.  # noqa: E501

        Type of base holding the support  # noqa: E501

        :return: The support_base of this PdbxSerialCrystallographySampleDeliveryFixedTarget.  # noqa: E501
        :rtype: str
        """
        return self._support_base

    @support_base.setter
    def support_base(self, support_base):
        """Sets the support_base of this PdbxSerialCrystallographySampleDeliveryFixedTarget.

        Type of base holding the support  # noqa: E501

        :param support_base: The support_base of this PdbxSerialCrystallographySampleDeliveryFixedTarget.  # noqa: E501
        :type: str
        """

        self._support_base = support_base

    @property
    def velocity_horizontal(self):
        """Gets the velocity_horizontal of this PdbxSerialCrystallographySampleDeliveryFixedTarget.  # noqa: E501

        Velocity of sample horizontally relative to a perpendicular beam in millimetres/second  # noqa: E501

        :return: The velocity_horizontal of this PdbxSerialCrystallographySampleDeliveryFixedTarget.  # noqa: E501
        :rtype: float
        """
        return self._velocity_horizontal

    @velocity_horizontal.setter
    def velocity_horizontal(self, velocity_horizontal):
        """Sets the velocity_horizontal of this PdbxSerialCrystallographySampleDeliveryFixedTarget.

        Velocity of sample horizontally relative to a perpendicular beam in millimetres/second  # noqa: E501

        :param velocity_horizontal: The velocity_horizontal of this PdbxSerialCrystallographySampleDeliveryFixedTarget.  # noqa: E501
        :type: float
        """

        self._velocity_horizontal = velocity_horizontal

    @property
    def velocity_vertical(self):
        """Gets the velocity_vertical of this PdbxSerialCrystallographySampleDeliveryFixedTarget.  # noqa: E501

        Velocity of sample vertically relative to a perpendicular beam in millimetres/second  # noqa: E501

        :return: The velocity_vertical of this PdbxSerialCrystallographySampleDeliveryFixedTarget.  # noqa: E501
        :rtype: float
        """
        return self._velocity_vertical

    @velocity_vertical.setter
    def velocity_vertical(self, velocity_vertical):
        """Sets the velocity_vertical of this PdbxSerialCrystallographySampleDeliveryFixedTarget.

        Velocity of sample vertically relative to a perpendicular beam in millimetres/second  # noqa: E501

        :param velocity_vertical: The velocity_vertical of this PdbxSerialCrystallographySampleDeliveryFixedTarget.  # noqa: E501
        :type: float
        """

        self._velocity_vertical = velocity_vertical

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PdbxSerialCrystallographySampleDeliveryFixedTarget, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdbxSerialCrystallographySampleDeliveryFixedTarget):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
