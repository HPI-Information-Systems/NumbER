# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PdbxSolnScatterModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conformer_selection_criteria': 'str',
        'details': 'str',
        'entry_fitting_list': 'str',
        'id': 'str',
        'method': 'str',
        'num_conformers_calculated': 'int',
        'num_conformers_submitted': 'int',
        'representative_conformer': 'int',
        'scatter_id': 'str',
        'software_author_list': 'str',
        'software_list': 'str'
    }

    attribute_map = {
        'conformer_selection_criteria': 'conformer_selection_criteria',
        'details': 'details',
        'entry_fitting_list': 'entry_fitting_list',
        'id': 'id',
        'method': 'method',
        'num_conformers_calculated': 'num_conformers_calculated',
        'num_conformers_submitted': 'num_conformers_submitted',
        'representative_conformer': 'representative_conformer',
        'scatter_id': 'scatter_id',
        'software_author_list': 'software_author_list',
        'software_list': 'software_list'
    }

    def __init__(self, conformer_selection_criteria=None, details=None, entry_fitting_list=None, id=None, method=None, num_conformers_calculated=None, num_conformers_submitted=None, representative_conformer=None, scatter_id=None, software_author_list=None, software_list=None):  # noqa: E501
        """PdbxSolnScatterModel - a model defined in Swagger"""  # noqa: E501
        self._conformer_selection_criteria = None
        self._details = None
        self._entry_fitting_list = None
        self._id = None
        self._method = None
        self._num_conformers_calculated = None
        self._num_conformers_submitted = None
        self._representative_conformer = None
        self._scatter_id = None
        self._software_author_list = None
        self._software_list = None
        self.discriminator = None
        if conformer_selection_criteria is not None:
            self.conformer_selection_criteria = conformer_selection_criteria
        if details is not None:
            self.details = details
        if entry_fitting_list is not None:
            self.entry_fitting_list = entry_fitting_list
        self.id = id
        if method is not None:
            self.method = method
        if num_conformers_calculated is not None:
            self.num_conformers_calculated = num_conformers_calculated
        if num_conformers_submitted is not None:
            self.num_conformers_submitted = num_conformers_submitted
        if representative_conformer is not None:
            self.representative_conformer = representative_conformer
        self.scatter_id = scatter_id
        if software_author_list is not None:
            self.software_author_list = software_author_list
        if software_list is not None:
            self.software_list = software_list

    @property
    def conformer_selection_criteria(self):
        """Gets the conformer_selection_criteria of this PdbxSolnScatterModel.  # noqa: E501

        A description of the conformer selection criteria  used.  # noqa: E501

        :return: The conformer_selection_criteria of this PdbxSolnScatterModel.  # noqa: E501
        :rtype: str
        """
        return self._conformer_selection_criteria

    @conformer_selection_criteria.setter
    def conformer_selection_criteria(self, conformer_selection_criteria):
        """Sets the conformer_selection_criteria of this PdbxSolnScatterModel.

        A description of the conformer selection criteria  used.  # noqa: E501

        :param conformer_selection_criteria: The conformer_selection_criteria of this PdbxSolnScatterModel.  # noqa: E501
        :type: str
        """

        self._conformer_selection_criteria = conformer_selection_criteria

    @property
    def details(self):
        """Gets the details of this PdbxSolnScatterModel.  # noqa: E501

        A description of any additional details concerning the experiment.  # noqa: E501

        :return: The details of this PdbxSolnScatterModel.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this PdbxSolnScatterModel.

        A description of any additional details concerning the experiment.  # noqa: E501

        :param details: The details of this PdbxSolnScatterModel.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def entry_fitting_list(self):
        """Gets the entry_fitting_list of this PdbxSolnScatterModel.  # noqa: E501

        A list of the entries used to fit the model  to the scattering data  # noqa: E501

        :return: The entry_fitting_list of this PdbxSolnScatterModel.  # noqa: E501
        :rtype: str
        """
        return self._entry_fitting_list

    @entry_fitting_list.setter
    def entry_fitting_list(self, entry_fitting_list):
        """Sets the entry_fitting_list of this PdbxSolnScatterModel.

        A list of the entries used to fit the model  to the scattering data  # noqa: E501

        :param entry_fitting_list: The entry_fitting_list of this PdbxSolnScatterModel.  # noqa: E501
        :type: str
        """

        self._entry_fitting_list = entry_fitting_list

    @property
    def id(self):
        """Gets the id of this PdbxSolnScatterModel.  # noqa: E501

        The value of _pdbx_soln_scatter_model.id must  uniquely identify the sample in the category PDBX_SOLN_SCATTER_MODEL  # noqa: E501

        :return: The id of this PdbxSolnScatterModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PdbxSolnScatterModel.

        The value of _pdbx_soln_scatter_model.id must  uniquely identify the sample in the category PDBX_SOLN_SCATTER_MODEL  # noqa: E501

        :param id: The id of this PdbxSolnScatterModel.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def method(self):
        """Gets the method of this PdbxSolnScatterModel.  # noqa: E501

        A description of the methods used in the modelling  # noqa: E501

        :return: The method of this PdbxSolnScatterModel.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this PdbxSolnScatterModel.

        A description of the methods used in the modelling  # noqa: E501

        :param method: The method of this PdbxSolnScatterModel.  # noqa: E501
        :type: str
        """

        self._method = method

    @property
    def num_conformers_calculated(self):
        """Gets the num_conformers_calculated of this PdbxSolnScatterModel.  # noqa: E501

        The number of model conformers calculated.  # noqa: E501

        :return: The num_conformers_calculated of this PdbxSolnScatterModel.  # noqa: E501
        :rtype: int
        """
        return self._num_conformers_calculated

    @num_conformers_calculated.setter
    def num_conformers_calculated(self, num_conformers_calculated):
        """Sets the num_conformers_calculated of this PdbxSolnScatterModel.

        The number of model conformers calculated.  # noqa: E501

        :param num_conformers_calculated: The num_conformers_calculated of this PdbxSolnScatterModel.  # noqa: E501
        :type: int
        """

        self._num_conformers_calculated = num_conformers_calculated

    @property
    def num_conformers_submitted(self):
        """Gets the num_conformers_submitted of this PdbxSolnScatterModel.  # noqa: E501

        The number of model conformers submitted in the entry  # noqa: E501

        :return: The num_conformers_submitted of this PdbxSolnScatterModel.  # noqa: E501
        :rtype: int
        """
        return self._num_conformers_submitted

    @num_conformers_submitted.setter
    def num_conformers_submitted(self, num_conformers_submitted):
        """Sets the num_conformers_submitted of this PdbxSolnScatterModel.

        The number of model conformers submitted in the entry  # noqa: E501

        :param num_conformers_submitted: The num_conformers_submitted of this PdbxSolnScatterModel.  # noqa: E501
        :type: int
        """

        self._num_conformers_submitted = num_conformers_submitted

    @property
    def representative_conformer(self):
        """Gets the representative_conformer of this PdbxSolnScatterModel.  # noqa: E501

        The index of the representative conformer among the submitted conformers for the entry  # noqa: E501

        :return: The representative_conformer of this PdbxSolnScatterModel.  # noqa: E501
        :rtype: int
        """
        return self._representative_conformer

    @representative_conformer.setter
    def representative_conformer(self, representative_conformer):
        """Sets the representative_conformer of this PdbxSolnScatterModel.

        The index of the representative conformer among the submitted conformers for the entry  # noqa: E501

        :param representative_conformer: The representative_conformer of this PdbxSolnScatterModel.  # noqa: E501
        :type: int
        """

        self._representative_conformer = representative_conformer

    @property
    def scatter_id(self):
        """Gets the scatter_id of this PdbxSolnScatterModel.  # noqa: E501

        This data item is a pointer to  _pdbx_soln_scatter.id in the  PDBX_SOLN_SCATTER category.  # noqa: E501

        :return: The scatter_id of this PdbxSolnScatterModel.  # noqa: E501
        :rtype: str
        """
        return self._scatter_id

    @scatter_id.setter
    def scatter_id(self, scatter_id):
        """Sets the scatter_id of this PdbxSolnScatterModel.

        This data item is a pointer to  _pdbx_soln_scatter.id in the  PDBX_SOLN_SCATTER category.  # noqa: E501

        :param scatter_id: The scatter_id of this PdbxSolnScatterModel.  # noqa: E501
        :type: str
        """
        if scatter_id is None:
            raise ValueError("Invalid value for `scatter_id`, must not be `None`")  # noqa: E501

        self._scatter_id = scatter_id

    @property
    def software_author_list(self):
        """Gets the software_author_list of this PdbxSolnScatterModel.  # noqa: E501

        A list of the software authors  # noqa: E501

        :return: The software_author_list of this PdbxSolnScatterModel.  # noqa: E501
        :rtype: str
        """
        return self._software_author_list

    @software_author_list.setter
    def software_author_list(self, software_author_list):
        """Sets the software_author_list of this PdbxSolnScatterModel.

        A list of the software authors  # noqa: E501

        :param software_author_list: The software_author_list of this PdbxSolnScatterModel.  # noqa: E501
        :type: str
        """

        self._software_author_list = software_author_list

    @property
    def software_list(self):
        """Gets the software_list of this PdbxSolnScatterModel.  # noqa: E501

        A list of the software used in the modeeling  # noqa: E501

        :return: The software_list of this PdbxSolnScatterModel.  # noqa: E501
        :rtype: str
        """
        return self._software_list

    @software_list.setter
    def software_list(self, software_list):
        """Sets the software_list of this PdbxSolnScatterModel.

        A list of the software used in the modeeling  # noqa: E501

        :param software_list: The software_list of this PdbxSolnScatterModel.  # noqa: E501
        :type: str
        """

        self._software_list = software_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PdbxSolnScatterModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdbxSolnScatterModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
