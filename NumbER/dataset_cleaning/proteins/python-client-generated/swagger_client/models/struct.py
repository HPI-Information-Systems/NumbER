# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Struct(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pdbx_casp_flag': 'str',
        'pdbx_descriptor': 'str',
        'pdbx_model_details': 'str',
        'pdbx_model_type_details': 'str',
        'title': 'str'
    }

    attribute_map = {
        'pdbx_casp_flag': 'pdbx_CASP_flag',
        'pdbx_descriptor': 'pdbx_descriptor',
        'pdbx_model_details': 'pdbx_model_details',
        'pdbx_model_type_details': 'pdbx_model_type_details',
        'title': 'title'
    }

    def __init__(self, pdbx_casp_flag=None, pdbx_descriptor=None, pdbx_model_details=None, pdbx_model_type_details=None, title=None):  # noqa: E501
        """Struct - a model defined in Swagger"""  # noqa: E501
        self._pdbx_casp_flag = None
        self._pdbx_descriptor = None
        self._pdbx_model_details = None
        self._pdbx_model_type_details = None
        self._title = None
        self.discriminator = None
        if pdbx_casp_flag is not None:
            self.pdbx_casp_flag = pdbx_casp_flag
        if pdbx_descriptor is not None:
            self.pdbx_descriptor = pdbx_descriptor
        if pdbx_model_details is not None:
            self.pdbx_model_details = pdbx_model_details
        if pdbx_model_type_details is not None:
            self.pdbx_model_type_details = pdbx_model_type_details
        if title is not None:
            self.title = title

    @property
    def pdbx_casp_flag(self):
        """Gets the pdbx_casp_flag of this Struct.  # noqa: E501

        The item indicates whether the entry is a CASP target, a CASD-NMR target,  or similar target participating in methods development experiments.  # noqa: E501

        :return: The pdbx_casp_flag of this Struct.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_casp_flag

    @pdbx_casp_flag.setter
    def pdbx_casp_flag(self, pdbx_casp_flag):
        """Sets the pdbx_casp_flag of this Struct.

        The item indicates whether the entry is a CASP target, a CASD-NMR target,  or similar target participating in methods development experiments.  # noqa: E501

        :param pdbx_casp_flag: The pdbx_casp_flag of this Struct.  # noqa: E501
        :type: str
        """
        allowed_values = ["N", "Y"]  # noqa: E501
        if pdbx_casp_flag not in allowed_values:
            raise ValueError(
                "Invalid value for `pdbx_casp_flag` ({0}), must be one of {1}"  # noqa: E501
                .format(pdbx_casp_flag, allowed_values)
            )

        self._pdbx_casp_flag = pdbx_casp_flag

    @property
    def pdbx_descriptor(self):
        """Gets the pdbx_descriptor of this Struct.  # noqa: E501

        An automatically generated descriptor for an NDB structure or  the unstructured content of the PDB COMPND record.  # noqa: E501

        :return: The pdbx_descriptor of this Struct.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_descriptor

    @pdbx_descriptor.setter
    def pdbx_descriptor(self, pdbx_descriptor):
        """Sets the pdbx_descriptor of this Struct.

        An automatically generated descriptor for an NDB structure or  the unstructured content of the PDB COMPND record.  # noqa: E501

        :param pdbx_descriptor: The pdbx_descriptor of this Struct.  # noqa: E501
        :type: str
        """

        self._pdbx_descriptor = pdbx_descriptor

    @property
    def pdbx_model_details(self):
        """Gets the pdbx_model_details of this Struct.  # noqa: E501

        Text description of the methodology which produced this  model structure.  # noqa: E501

        :return: The pdbx_model_details of this Struct.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_model_details

    @pdbx_model_details.setter
    def pdbx_model_details(self, pdbx_model_details):
        """Sets the pdbx_model_details of this Struct.

        Text description of the methodology which produced this  model structure.  # noqa: E501

        :param pdbx_model_details: The pdbx_model_details of this Struct.  # noqa: E501
        :type: str
        """

        self._pdbx_model_details = pdbx_model_details

    @property
    def pdbx_model_type_details(self):
        """Gets the pdbx_model_type_details of this Struct.  # noqa: E501

        A description of the type of structure model.  # noqa: E501

        :return: The pdbx_model_type_details of this Struct.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_model_type_details

    @pdbx_model_type_details.setter
    def pdbx_model_type_details(self, pdbx_model_type_details):
        """Sets the pdbx_model_type_details of this Struct.

        A description of the type of structure model.  # noqa: E501

        :param pdbx_model_type_details: The pdbx_model_type_details of this Struct.  # noqa: E501
        :type: str
        """

        self._pdbx_model_type_details = pdbx_model_type_details

    @property
    def title(self):
        """Gets the title of this Struct.  # noqa: E501

        A title for the data block. The author should attempt to convey  the essence of the structure archived in the CIF in the title,  and to distinguish this structural result from others.  # noqa: E501

        :return: The title of this Struct.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Struct.

        A title for the data block. The author should attempt to convey  the essence of the structure archived in the CIF in the title,  and to distinguish this structural result from others.  # noqa: E501

        :param title: The title of this Struct.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Struct, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Struct):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
