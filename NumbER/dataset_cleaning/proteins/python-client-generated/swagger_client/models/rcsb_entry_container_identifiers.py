# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RcsbEntryContainerIdentifiers(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assembly_ids': 'list[str]',
        'branched_entity_ids': 'list[str]',
        'emdb_ids': 'list[str]',
        'entity_ids': 'list[str]',
        'entry_id': 'str',
        'model_ids': 'list[int]',
        'non_polymer_entity_ids': 'list[str]',
        'polymer_entity_ids': 'list[str]',
        'rcsb_id': 'str',
        'related_emdb_ids': 'list[str]',
        'water_entity_ids': 'list[str]',
        'pubmed_id': 'int'
    }

    attribute_map = {
        'assembly_ids': 'assembly_ids',
        'branched_entity_ids': 'branched_entity_ids',
        'emdb_ids': 'emdb_ids',
        'entity_ids': 'entity_ids',
        'entry_id': 'entry_id',
        'model_ids': 'model_ids',
        'non_polymer_entity_ids': 'non_polymer_entity_ids',
        'polymer_entity_ids': 'polymer_entity_ids',
        'rcsb_id': 'rcsb_id',
        'related_emdb_ids': 'related_emdb_ids',
        'water_entity_ids': 'water_entity_ids',
        'pubmed_id': 'pubmed_id'
    }

    def __init__(self, assembly_ids=None, branched_entity_ids=None, emdb_ids=None, entity_ids=None, entry_id=None, model_ids=None, non_polymer_entity_ids=None, polymer_entity_ids=None, rcsb_id=None, related_emdb_ids=None, water_entity_ids=None, pubmed_id=None):  # noqa: E501
        """RcsbEntryContainerIdentifiers - a model defined in Swagger"""  # noqa: E501
        self._assembly_ids = None
        self._branched_entity_ids = None
        self._emdb_ids = None
        self._entity_ids = None
        self._entry_id = None
        self._model_ids = None
        self._non_polymer_entity_ids = None
        self._polymer_entity_ids = None
        self._rcsb_id = None
        self._related_emdb_ids = None
        self._water_entity_ids = None
        self._pubmed_id = None
        self.discriminator = None
        if assembly_ids is not None:
            self.assembly_ids = assembly_ids
        if branched_entity_ids is not None:
            self.branched_entity_ids = branched_entity_ids
        if emdb_ids is not None:
            self.emdb_ids = emdb_ids
        if entity_ids is not None:
            self.entity_ids = entity_ids
        self.entry_id = entry_id
        if model_ids is not None:
            self.model_ids = model_ids
        if non_polymer_entity_ids is not None:
            self.non_polymer_entity_ids = non_polymer_entity_ids
        if polymer_entity_ids is not None:
            self.polymer_entity_ids = polymer_entity_ids
        if rcsb_id is not None:
            self.rcsb_id = rcsb_id
        if related_emdb_ids is not None:
            self.related_emdb_ids = related_emdb_ids
        if water_entity_ids is not None:
            self.water_entity_ids = water_entity_ids
        if pubmed_id is not None:
            self.pubmed_id = pubmed_id

    @property
    def assembly_ids(self):
        """Gets the assembly_ids of this RcsbEntryContainerIdentifiers.  # noqa: E501

        List of identifiers for assemblies generated from the entry.  # noqa: E501

        :return: The assembly_ids of this RcsbEntryContainerIdentifiers.  # noqa: E501
        :rtype: list[str]
        """
        return self._assembly_ids

    @assembly_ids.setter
    def assembly_ids(self, assembly_ids):
        """Sets the assembly_ids of this RcsbEntryContainerIdentifiers.

        List of identifiers for assemblies generated from the entry.  # noqa: E501

        :param assembly_ids: The assembly_ids of this RcsbEntryContainerIdentifiers.  # noqa: E501
        :type: list[str]
        """

        self._assembly_ids = assembly_ids

    @property
    def branched_entity_ids(self):
        """Gets the branched_entity_ids of this RcsbEntryContainerIdentifiers.  # noqa: E501

        List of identifiers for the branched entity constituents for the entry.  # noqa: E501

        :return: The branched_entity_ids of this RcsbEntryContainerIdentifiers.  # noqa: E501
        :rtype: list[str]
        """
        return self._branched_entity_ids

    @branched_entity_ids.setter
    def branched_entity_ids(self, branched_entity_ids):
        """Sets the branched_entity_ids of this RcsbEntryContainerIdentifiers.

        List of identifiers for the branched entity constituents for the entry.  # noqa: E501

        :param branched_entity_ids: The branched_entity_ids of this RcsbEntryContainerIdentifiers.  # noqa: E501
        :type: list[str]
        """

        self._branched_entity_ids = branched_entity_ids

    @property
    def emdb_ids(self):
        """Gets the emdb_ids of this RcsbEntryContainerIdentifiers.  # noqa: E501

        List of EMDB identifiers for the 3D electron microscopy density maps  used in the production of the structure model.  # noqa: E501

        :return: The emdb_ids of this RcsbEntryContainerIdentifiers.  # noqa: E501
        :rtype: list[str]
        """
        return self._emdb_ids

    @emdb_ids.setter
    def emdb_ids(self, emdb_ids):
        """Sets the emdb_ids of this RcsbEntryContainerIdentifiers.

        List of EMDB identifiers for the 3D electron microscopy density maps  used in the production of the structure model.  # noqa: E501

        :param emdb_ids: The emdb_ids of this RcsbEntryContainerIdentifiers.  # noqa: E501
        :type: list[str]
        """

        self._emdb_ids = emdb_ids

    @property
    def entity_ids(self):
        """Gets the entity_ids of this RcsbEntryContainerIdentifiers.  # noqa: E501

        List of identifiers or the entity constituents for the entry.  # noqa: E501

        :return: The entity_ids of this RcsbEntryContainerIdentifiers.  # noqa: E501
        :rtype: list[str]
        """
        return self._entity_ids

    @entity_ids.setter
    def entity_ids(self, entity_ids):
        """Sets the entity_ids of this RcsbEntryContainerIdentifiers.

        List of identifiers or the entity constituents for the entry.  # noqa: E501

        :param entity_ids: The entity_ids of this RcsbEntryContainerIdentifiers.  # noqa: E501
        :type: list[str]
        """

        self._entity_ids = entity_ids

    @property
    def entry_id(self):
        """Gets the entry_id of this RcsbEntryContainerIdentifiers.  # noqa: E501

        Entry identifier for the container.  # noqa: E501

        :return: The entry_id of this RcsbEntryContainerIdentifiers.  # noqa: E501
        :rtype: str
        """
        return self._entry_id

    @entry_id.setter
    def entry_id(self, entry_id):
        """Sets the entry_id of this RcsbEntryContainerIdentifiers.

        Entry identifier for the container.  # noqa: E501

        :param entry_id: The entry_id of this RcsbEntryContainerIdentifiers.  # noqa: E501
        :type: str
        """
        if entry_id is None:
            raise ValueError("Invalid value for `entry_id`, must not be `None`")  # noqa: E501

        self._entry_id = entry_id

    @property
    def model_ids(self):
        """Gets the model_ids of this RcsbEntryContainerIdentifiers.  # noqa: E501

        List of PDB model identifiers for the entry.  # noqa: E501

        :return: The model_ids of this RcsbEntryContainerIdentifiers.  # noqa: E501
        :rtype: list[int]
        """
        return self._model_ids

    @model_ids.setter
    def model_ids(self, model_ids):
        """Sets the model_ids of this RcsbEntryContainerIdentifiers.

        List of PDB model identifiers for the entry.  # noqa: E501

        :param model_ids: The model_ids of this RcsbEntryContainerIdentifiers.  # noqa: E501
        :type: list[int]
        """

        self._model_ids = model_ids

    @property
    def non_polymer_entity_ids(self):
        """Gets the non_polymer_entity_ids of this RcsbEntryContainerIdentifiers.  # noqa: E501

        List of identifiers for the non-polymer entity constituents for the entry.  # noqa: E501

        :return: The non_polymer_entity_ids of this RcsbEntryContainerIdentifiers.  # noqa: E501
        :rtype: list[str]
        """
        return self._non_polymer_entity_ids

    @non_polymer_entity_ids.setter
    def non_polymer_entity_ids(self, non_polymer_entity_ids):
        """Sets the non_polymer_entity_ids of this RcsbEntryContainerIdentifiers.

        List of identifiers for the non-polymer entity constituents for the entry.  # noqa: E501

        :param non_polymer_entity_ids: The non_polymer_entity_ids of this RcsbEntryContainerIdentifiers.  # noqa: E501
        :type: list[str]
        """

        self._non_polymer_entity_ids = non_polymer_entity_ids

    @property
    def polymer_entity_ids(self):
        """Gets the polymer_entity_ids of this RcsbEntryContainerIdentifiers.  # noqa: E501

        List of identifiers for the polymer entity constituents for the entry.  # noqa: E501

        :return: The polymer_entity_ids of this RcsbEntryContainerIdentifiers.  # noqa: E501
        :rtype: list[str]
        """
        return self._polymer_entity_ids

    @polymer_entity_ids.setter
    def polymer_entity_ids(self, polymer_entity_ids):
        """Sets the polymer_entity_ids of this RcsbEntryContainerIdentifiers.

        List of identifiers for the polymer entity constituents for the entry.  # noqa: E501

        :param polymer_entity_ids: The polymer_entity_ids of this RcsbEntryContainerIdentifiers.  # noqa: E501
        :type: list[str]
        """

        self._polymer_entity_ids = polymer_entity_ids

    @property
    def rcsb_id(self):
        """Gets the rcsb_id of this RcsbEntryContainerIdentifiers.  # noqa: E501

        A unique identifier for each object in this entry container.  # noqa: E501

        :return: The rcsb_id of this RcsbEntryContainerIdentifiers.  # noqa: E501
        :rtype: str
        """
        return self._rcsb_id

    @rcsb_id.setter
    def rcsb_id(self, rcsb_id):
        """Sets the rcsb_id of this RcsbEntryContainerIdentifiers.

        A unique identifier for each object in this entry container.  # noqa: E501

        :param rcsb_id: The rcsb_id of this RcsbEntryContainerIdentifiers.  # noqa: E501
        :type: str
        """

        self._rcsb_id = rcsb_id

    @property
    def related_emdb_ids(self):
        """Gets the related_emdb_ids of this RcsbEntryContainerIdentifiers.  # noqa: E501

        List of EMDB identifiers for the 3D electron microscopy density maps  related to the structure model.  # noqa: E501

        :return: The related_emdb_ids of this RcsbEntryContainerIdentifiers.  # noqa: E501
        :rtype: list[str]
        """
        return self._related_emdb_ids

    @related_emdb_ids.setter
    def related_emdb_ids(self, related_emdb_ids):
        """Sets the related_emdb_ids of this RcsbEntryContainerIdentifiers.

        List of EMDB identifiers for the 3D electron microscopy density maps  related to the structure model.  # noqa: E501

        :param related_emdb_ids: The related_emdb_ids of this RcsbEntryContainerIdentifiers.  # noqa: E501
        :type: list[str]
        """

        self._related_emdb_ids = related_emdb_ids

    @property
    def water_entity_ids(self):
        """Gets the water_entity_ids of this RcsbEntryContainerIdentifiers.  # noqa: E501

        List of identifiers for the solvent/water entity constituents for the entry.  # noqa: E501

        :return: The water_entity_ids of this RcsbEntryContainerIdentifiers.  # noqa: E501
        :rtype: list[str]
        """
        return self._water_entity_ids

    @water_entity_ids.setter
    def water_entity_ids(self, water_entity_ids):
        """Sets the water_entity_ids of this RcsbEntryContainerIdentifiers.

        List of identifiers for the solvent/water entity constituents for the entry.  # noqa: E501

        :param water_entity_ids: The water_entity_ids of this RcsbEntryContainerIdentifiers.  # noqa: E501
        :type: list[str]
        """

        self._water_entity_ids = water_entity_ids

    @property
    def pubmed_id(self):
        """Gets the pubmed_id of this RcsbEntryContainerIdentifiers.  # noqa: E501

        Unique integer value assigned to each PubMed record.  # noqa: E501

        :return: The pubmed_id of this RcsbEntryContainerIdentifiers.  # noqa: E501
        :rtype: int
        """
        return self._pubmed_id

    @pubmed_id.setter
    def pubmed_id(self, pubmed_id):
        """Sets the pubmed_id of this RcsbEntryContainerIdentifiers.

        Unique integer value assigned to each PubMed record.  # noqa: E501

        :param pubmed_id: The pubmed_id of this RcsbEntryContainerIdentifiers.  # noqa: E501
        :type: int
        """

        self._pubmed_id = pubmed_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RcsbEntryContainerIdentifiers, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RcsbEntryContainerIdentifiers):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
