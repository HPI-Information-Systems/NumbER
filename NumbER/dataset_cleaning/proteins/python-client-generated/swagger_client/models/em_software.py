# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EmSoftware(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category': 'str',
        'details': 'str',
        'fitting_id': 'str',
        'id': 'str',
        'image_processing_id': 'str',
        'imaging_id': 'str',
        'name': 'str',
        'version': 'str'
    }

    attribute_map = {
        'category': 'category',
        'details': 'details',
        'fitting_id': 'fitting_id',
        'id': 'id',
        'image_processing_id': 'image_processing_id',
        'imaging_id': 'imaging_id',
        'name': 'name',
        'version': 'version'
    }

    def __init__(self, category=None, details=None, fitting_id=None, id=None, image_processing_id=None, imaging_id=None, name=None, version=None):  # noqa: E501
        """EmSoftware - a model defined in Swagger"""  # noqa: E501
        self._category = None
        self._details = None
        self._fitting_id = None
        self._id = None
        self._image_processing_id = None
        self._imaging_id = None
        self._name = None
        self._version = None
        self.discriminator = None
        if category is not None:
            self.category = category
        if details is not None:
            self.details = details
        if fitting_id is not None:
            self.fitting_id = fitting_id
        self.id = id
        if image_processing_id is not None:
            self.image_processing_id = image_processing_id
        if imaging_id is not None:
            self.imaging_id = imaging_id
        if name is not None:
            self.name = name
        if version is not None:
            self.version = version

    @property
    def category(self):
        """Gets the category of this EmSoftware.  # noqa: E501

        The purpose of the software.  # noqa: E501

        :return: The category of this EmSoftware.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this EmSoftware.

        The purpose of the software.  # noqa: E501

        :param category: The category of this EmSoftware.  # noqa: E501
        :type: str
        """
        allowed_values = ["CLASSIFICATION", "CRYSTALLOGRAPHY MERGING", "CTF CORRECTION", "DIFFRACTION INDEXING", "FINAL EULER ASSIGNMENT", "IMAGE ACQUISITION", "INITIAL EULER ASSIGNMENT", "LATTICE DISTORTION CORRECTION", "LAYERLINE INDEXING", "MASKING", "MODEL FITTING", "MODEL REFINEMENT", "MOLECULAR REPLACEMENT", "OTHER", "PARTICLE SELECTION", "RECONSTRUCTION", "SERIES ALIGNMENT", "SYMMETRY DETERMINATION", "VOLUME SELECTION"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"  # noqa: E501
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def details(self):
        """Gets the details of this EmSoftware.  # noqa: E501

        Details about the software used.  # noqa: E501

        :return: The details of this EmSoftware.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this EmSoftware.

        Details about the software used.  # noqa: E501

        :param details: The details of this EmSoftware.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def fitting_id(self):
        """Gets the fitting_id of this EmSoftware.  # noqa: E501

        pointer to _em_3d_fitting.id in the EM_3D_FITTING category.  # noqa: E501

        :return: The fitting_id of this EmSoftware.  # noqa: E501
        :rtype: str
        """
        return self._fitting_id

    @fitting_id.setter
    def fitting_id(self, fitting_id):
        """Sets the fitting_id of this EmSoftware.

        pointer to _em_3d_fitting.id in the EM_3D_FITTING category.  # noqa: E501

        :param fitting_id: The fitting_id of this EmSoftware.  # noqa: E501
        :type: str
        """

        self._fitting_id = fitting_id

    @property
    def id(self):
        """Gets the id of this EmSoftware.  # noqa: E501

        PRIMARY KEY  # noqa: E501

        :return: The id of this EmSoftware.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EmSoftware.

        PRIMARY KEY  # noqa: E501

        :param id: The id of this EmSoftware.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def image_processing_id(self):
        """Gets the image_processing_id of this EmSoftware.  # noqa: E501

        pointer to _em_image_processing.id in the EM_IMAGE_PROCESSING category.  # noqa: E501

        :return: The image_processing_id of this EmSoftware.  # noqa: E501
        :rtype: str
        """
        return self._image_processing_id

    @image_processing_id.setter
    def image_processing_id(self, image_processing_id):
        """Sets the image_processing_id of this EmSoftware.

        pointer to _em_image_processing.id in the EM_IMAGE_PROCESSING category.  # noqa: E501

        :param image_processing_id: The image_processing_id of this EmSoftware.  # noqa: E501
        :type: str
        """

        self._image_processing_id = image_processing_id

    @property
    def imaging_id(self):
        """Gets the imaging_id of this EmSoftware.  # noqa: E501

        pointer to _em_imaging.id in the EM_IMAGING category.  # noqa: E501

        :return: The imaging_id of this EmSoftware.  # noqa: E501
        :rtype: str
        """
        return self._imaging_id

    @imaging_id.setter
    def imaging_id(self, imaging_id):
        """Sets the imaging_id of this EmSoftware.

        pointer to _em_imaging.id in the EM_IMAGING category.  # noqa: E501

        :param imaging_id: The imaging_id of this EmSoftware.  # noqa: E501
        :type: str
        """

        self._imaging_id = imaging_id

    @property
    def name(self):
        """Gets the name of this EmSoftware.  # noqa: E501

        The name of the software package used, e.g., RELION.  Depositors are strongly   encouraged to provide a value in this field.  # noqa: E501

        :return: The name of this EmSoftware.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EmSoftware.

        The name of the software package used, e.g., RELION.  Depositors are strongly   encouraged to provide a value in this field.  # noqa: E501

        :param name: The name of this EmSoftware.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def version(self):
        """Gets the version of this EmSoftware.  # noqa: E501

        The version of the software.  # noqa: E501

        :return: The version of this EmSoftware.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this EmSoftware.

        The version of the software.  # noqa: E501

        :param version: The version of this EmSoftware.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmSoftware, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmSoftware):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
