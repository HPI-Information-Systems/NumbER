# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PdbxSerialCrystallographyMeasurement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'collection_time_total': 'float',
        'collimation': 'str',
        'diffrn_id': 'str',
        'focal_spot_size': 'float',
        'photons_per_pulse': 'float',
        'pulse_duration': 'float',
        'pulse_energy': 'float',
        'pulse_photon_energy': 'float',
        'source_distance': 'float',
        'source_size': 'float',
        'xfel_pulse_repetition_rate': 'float'
    }

    attribute_map = {
        'collection_time_total': 'collection_time_total',
        'collimation': 'collimation',
        'diffrn_id': 'diffrn_id',
        'focal_spot_size': 'focal_spot_size',
        'photons_per_pulse': 'photons_per_pulse',
        'pulse_duration': 'pulse_duration',
        'pulse_energy': 'pulse_energy',
        'pulse_photon_energy': 'pulse_photon_energy',
        'source_distance': 'source_distance',
        'source_size': 'source_size',
        'xfel_pulse_repetition_rate': 'xfel_pulse_repetition_rate'
    }

    def __init__(self, collection_time_total=None, collimation=None, diffrn_id=None, focal_spot_size=None, photons_per_pulse=None, pulse_duration=None, pulse_energy=None, pulse_photon_energy=None, source_distance=None, source_size=None, xfel_pulse_repetition_rate=None):  # noqa: E501
        """PdbxSerialCrystallographyMeasurement - a model defined in Swagger"""  # noqa: E501
        self._collection_time_total = None
        self._collimation = None
        self._diffrn_id = None
        self._focal_spot_size = None
        self._photons_per_pulse = None
        self._pulse_duration = None
        self._pulse_energy = None
        self._pulse_photon_energy = None
        self._source_distance = None
        self._source_size = None
        self._xfel_pulse_repetition_rate = None
        self.discriminator = None
        if collection_time_total is not None:
            self.collection_time_total = collection_time_total
        if collimation is not None:
            self.collimation = collimation
        self.diffrn_id = diffrn_id
        if focal_spot_size is not None:
            self.focal_spot_size = focal_spot_size
        if photons_per_pulse is not None:
            self.photons_per_pulse = photons_per_pulse
        if pulse_duration is not None:
            self.pulse_duration = pulse_duration
        if pulse_energy is not None:
            self.pulse_energy = pulse_energy
        if pulse_photon_energy is not None:
            self.pulse_photon_energy = pulse_photon_energy
        if source_distance is not None:
            self.source_distance = source_distance
        if source_size is not None:
            self.source_size = source_size
        if xfel_pulse_repetition_rate is not None:
            self.xfel_pulse_repetition_rate = xfel_pulse_repetition_rate

    @property
    def collection_time_total(self):
        """Gets the collection_time_total of this PdbxSerialCrystallographyMeasurement.  # noqa: E501

        The total number of hours required to measure this data set.  # noqa: E501

        :return: The collection_time_total of this PdbxSerialCrystallographyMeasurement.  # noqa: E501
        :rtype: float
        """
        return self._collection_time_total

    @collection_time_total.setter
    def collection_time_total(self, collection_time_total):
        """Sets the collection_time_total of this PdbxSerialCrystallographyMeasurement.

        The total number of hours required to measure this data set.  # noqa: E501

        :param collection_time_total: The collection_time_total of this PdbxSerialCrystallographyMeasurement.  # noqa: E501
        :type: float
        """

        self._collection_time_total = collection_time_total

    @property
    def collimation(self):
        """Gets the collimation of this PdbxSerialCrystallographyMeasurement.  # noqa: E501

        The collimation or type of focusing optics applied to the radiation.  # noqa: E501

        :return: The collimation of this PdbxSerialCrystallographyMeasurement.  # noqa: E501
        :rtype: str
        """
        return self._collimation

    @collimation.setter
    def collimation(self, collimation):
        """Sets the collimation of this PdbxSerialCrystallographyMeasurement.

        The collimation or type of focusing optics applied to the radiation.  # noqa: E501

        :param collimation: The collimation of this PdbxSerialCrystallographyMeasurement.  # noqa: E501
        :type: str
        """

        self._collimation = collimation

    @property
    def diffrn_id(self):
        """Gets the diffrn_id of this PdbxSerialCrystallographyMeasurement.  # noqa: E501

        The data item is a pointer to _diffrn.id in the DIFFRN  category.  # noqa: E501

        :return: The diffrn_id of this PdbxSerialCrystallographyMeasurement.  # noqa: E501
        :rtype: str
        """
        return self._diffrn_id

    @diffrn_id.setter
    def diffrn_id(self, diffrn_id):
        """Sets the diffrn_id of this PdbxSerialCrystallographyMeasurement.

        The data item is a pointer to _diffrn.id in the DIFFRN  category.  # noqa: E501

        :param diffrn_id: The diffrn_id of this PdbxSerialCrystallographyMeasurement.  # noqa: E501
        :type: str
        """
        if diffrn_id is None:
            raise ValueError("Invalid value for `diffrn_id`, must not be `None`")  # noqa: E501

        self._diffrn_id = diffrn_id

    @property
    def focal_spot_size(self):
        """Gets the focal_spot_size of this PdbxSerialCrystallographyMeasurement.  # noqa: E501

        The focal spot size of the beam  impinging on the sample (micrometres squared).  # noqa: E501

        :return: The focal_spot_size of this PdbxSerialCrystallographyMeasurement.  # noqa: E501
        :rtype: float
        """
        return self._focal_spot_size

    @focal_spot_size.setter
    def focal_spot_size(self, focal_spot_size):
        """Sets the focal_spot_size of this PdbxSerialCrystallographyMeasurement.

        The focal spot size of the beam  impinging on the sample (micrometres squared).  # noqa: E501

        :param focal_spot_size: The focal_spot_size of this PdbxSerialCrystallographyMeasurement.  # noqa: E501
        :type: float
        """

        self._focal_spot_size = focal_spot_size

    @property
    def photons_per_pulse(self):
        """Gets the photons_per_pulse of this PdbxSerialCrystallographyMeasurement.  # noqa: E501

        The photons per pulse measured in  (tera photons (10^(12)^)/pulse units).  # noqa: E501

        :return: The photons_per_pulse of this PdbxSerialCrystallographyMeasurement.  # noqa: E501
        :rtype: float
        """
        return self._photons_per_pulse

    @photons_per_pulse.setter
    def photons_per_pulse(self, photons_per_pulse):
        """Sets the photons_per_pulse of this PdbxSerialCrystallographyMeasurement.

        The photons per pulse measured in  (tera photons (10^(12)^)/pulse units).  # noqa: E501

        :param photons_per_pulse: The photons_per_pulse of this PdbxSerialCrystallographyMeasurement.  # noqa: E501
        :type: float
        """

        self._photons_per_pulse = photons_per_pulse

    @property
    def pulse_duration(self):
        """Gets the pulse_duration of this PdbxSerialCrystallographyMeasurement.  # noqa: E501

        The average duration (femtoseconds)         of the pulse energy measured at the sample.  # noqa: E501

        :return: The pulse_duration of this PdbxSerialCrystallographyMeasurement.  # noqa: E501
        :rtype: float
        """
        return self._pulse_duration

    @pulse_duration.setter
    def pulse_duration(self, pulse_duration):
        """Sets the pulse_duration of this PdbxSerialCrystallographyMeasurement.

        The average duration (femtoseconds)         of the pulse energy measured at the sample.  # noqa: E501

        :param pulse_duration: The pulse_duration of this PdbxSerialCrystallographyMeasurement.  # noqa: E501
        :type: float
        """

        self._pulse_duration = pulse_duration

    @property
    def pulse_energy(self):
        """Gets the pulse_energy of this PdbxSerialCrystallographyMeasurement.  # noqa: E501

        The energy/pulse of the X-ray pulse impacting the sample measured in microjoules.  # noqa: E501

        :return: The pulse_energy of this PdbxSerialCrystallographyMeasurement.  # noqa: E501
        :rtype: float
        """
        return self._pulse_energy

    @pulse_energy.setter
    def pulse_energy(self, pulse_energy):
        """Sets the pulse_energy of this PdbxSerialCrystallographyMeasurement.

        The energy/pulse of the X-ray pulse impacting the sample measured in microjoules.  # noqa: E501

        :param pulse_energy: The pulse_energy of this PdbxSerialCrystallographyMeasurement.  # noqa: E501
        :type: float
        """

        self._pulse_energy = pulse_energy

    @property
    def pulse_photon_energy(self):
        """Gets the pulse_photon_energy of this PdbxSerialCrystallographyMeasurement.  # noqa: E501

        The photon energy of the X-ray pulse measured in KeV.  # noqa: E501

        :return: The pulse_photon_energy of this PdbxSerialCrystallographyMeasurement.  # noqa: E501
        :rtype: float
        """
        return self._pulse_photon_energy

    @pulse_photon_energy.setter
    def pulse_photon_energy(self, pulse_photon_energy):
        """Sets the pulse_photon_energy of this PdbxSerialCrystallographyMeasurement.

        The photon energy of the X-ray pulse measured in KeV.  # noqa: E501

        :param pulse_photon_energy: The pulse_photon_energy of this PdbxSerialCrystallographyMeasurement.  # noqa: E501
        :type: float
        """

        self._pulse_photon_energy = pulse_photon_energy

    @property
    def source_distance(self):
        """Gets the source_distance of this PdbxSerialCrystallographyMeasurement.  # noqa: E501

        The distance from source to the sample along the optical axis (metres).  # noqa: E501

        :return: The source_distance of this PdbxSerialCrystallographyMeasurement.  # noqa: E501
        :rtype: float
        """
        return self._source_distance

    @source_distance.setter
    def source_distance(self, source_distance):
        """Sets the source_distance of this PdbxSerialCrystallographyMeasurement.

        The distance from source to the sample along the optical axis (metres).  # noqa: E501

        :param source_distance: The source_distance of this PdbxSerialCrystallographyMeasurement.  # noqa: E501
        :type: float
        """

        self._source_distance = source_distance

    @property
    def source_size(self):
        """Gets the source_size of this PdbxSerialCrystallographyMeasurement.  # noqa: E501

        The dimension of the source beam measured at the source (micrometres squared).  # noqa: E501

        :return: The source_size of this PdbxSerialCrystallographyMeasurement.  # noqa: E501
        :rtype: float
        """
        return self._source_size

    @source_size.setter
    def source_size(self, source_size):
        """Sets the source_size of this PdbxSerialCrystallographyMeasurement.

        The dimension of the source beam measured at the source (micrometres squared).  # noqa: E501

        :param source_size: The source_size of this PdbxSerialCrystallographyMeasurement.  # noqa: E501
        :type: float
        """

        self._source_size = source_size

    @property
    def xfel_pulse_repetition_rate(self):
        """Gets the xfel_pulse_repetition_rate of this PdbxSerialCrystallographyMeasurement.  # noqa: E501

        For FEL experiments, the pulse repetition rate measured in cycles per seconds.  # noqa: E501

        :return: The xfel_pulse_repetition_rate of this PdbxSerialCrystallographyMeasurement.  # noqa: E501
        :rtype: float
        """
        return self._xfel_pulse_repetition_rate

    @xfel_pulse_repetition_rate.setter
    def xfel_pulse_repetition_rate(self, xfel_pulse_repetition_rate):
        """Sets the xfel_pulse_repetition_rate of this PdbxSerialCrystallographyMeasurement.

        For FEL experiments, the pulse repetition rate measured in cycles per seconds.  # noqa: E501

        :param xfel_pulse_repetition_rate: The xfel_pulse_repetition_rate of this PdbxSerialCrystallographyMeasurement.  # noqa: E501
        :type: float
        """

        self._xfel_pulse_repetition_rate = xfel_pulse_repetition_rate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PdbxSerialCrystallographyMeasurement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdbxSerialCrystallographyMeasurement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
