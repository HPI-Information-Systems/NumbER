# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PdbxNmrExptl(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conditions_id': 'str',
        'experiment_id': 'str',
        'sample_state': 'str',
        'solution_id': 'str',
        'spectrometer_id': 'int',
        'type': 'str'
    }

    attribute_map = {
        'conditions_id': 'conditions_id',
        'experiment_id': 'experiment_id',
        'sample_state': 'sample_state',
        'solution_id': 'solution_id',
        'spectrometer_id': 'spectrometer_id',
        'type': 'type'
    }

    def __init__(self, conditions_id=None, experiment_id=None, sample_state=None, solution_id=None, spectrometer_id=None, type=None):  # noqa: E501
        """PdbxNmrExptl - a model defined in Swagger"""  # noqa: E501
        self._conditions_id = None
        self._experiment_id = None
        self._sample_state = None
        self._solution_id = None
        self._spectrometer_id = None
        self._type = None
        self.discriminator = None
        self.conditions_id = conditions_id
        self.experiment_id = experiment_id
        if sample_state is not None:
            self.sample_state = sample_state
        self.solution_id = solution_id
        if spectrometer_id is not None:
            self.spectrometer_id = spectrometer_id
        if type is not None:
            self.type = type

    @property
    def conditions_id(self):
        """Gets the conditions_id of this PdbxNmrExptl.  # noqa: E501

        The number to identify the set of sample conditions.  # noqa: E501

        :return: The conditions_id of this PdbxNmrExptl.  # noqa: E501
        :rtype: str
        """
        return self._conditions_id

    @conditions_id.setter
    def conditions_id(self, conditions_id):
        """Sets the conditions_id of this PdbxNmrExptl.

        The number to identify the set of sample conditions.  # noqa: E501

        :param conditions_id: The conditions_id of this PdbxNmrExptl.  # noqa: E501
        :type: str
        """
        if conditions_id is None:
            raise ValueError("Invalid value for `conditions_id`, must not be `None`")  # noqa: E501

        self._conditions_id = conditions_id

    @property
    def experiment_id(self):
        """Gets the experiment_id of this PdbxNmrExptl.  # noqa: E501

        A numerical ID for each experiment.  # noqa: E501

        :return: The experiment_id of this PdbxNmrExptl.  # noqa: E501
        :rtype: str
        """
        return self._experiment_id

    @experiment_id.setter
    def experiment_id(self, experiment_id):
        """Sets the experiment_id of this PdbxNmrExptl.

        A numerical ID for each experiment.  # noqa: E501

        :param experiment_id: The experiment_id of this PdbxNmrExptl.  # noqa: E501
        :type: str
        """
        if experiment_id is None:
            raise ValueError("Invalid value for `experiment_id`, must not be `None`")  # noqa: E501

        self._experiment_id = experiment_id

    @property
    def sample_state(self):
        """Gets the sample_state of this PdbxNmrExptl.  # noqa: E501

        Physical state of the sample either anisotropic or isotropic.  # noqa: E501

        :return: The sample_state of this PdbxNmrExptl.  # noqa: E501
        :rtype: str
        """
        return self._sample_state

    @sample_state.setter
    def sample_state(self, sample_state):
        """Sets the sample_state of this PdbxNmrExptl.

        Physical state of the sample either anisotropic or isotropic.  # noqa: E501

        :param sample_state: The sample_state of this PdbxNmrExptl.  # noqa: E501
        :type: str
        """
        allowed_values = ["anisotropic", "isotropic"]  # noqa: E501
        if sample_state not in allowed_values:
            raise ValueError(
                "Invalid value for `sample_state` ({0}), must be one of {1}"  # noqa: E501
                .format(sample_state, allowed_values)
            )

        self._sample_state = sample_state

    @property
    def solution_id(self):
        """Gets the solution_id of this PdbxNmrExptl.  # noqa: E501

        The solution_id from the Experimental Sample to identify the sample  that these conditions refer to.   [Remember to save the entries here before returning to the   Experimental Sample form]  # noqa: E501

        :return: The solution_id of this PdbxNmrExptl.  # noqa: E501
        :rtype: str
        """
        return self._solution_id

    @solution_id.setter
    def solution_id(self, solution_id):
        """Sets the solution_id of this PdbxNmrExptl.

        The solution_id from the Experimental Sample to identify the sample  that these conditions refer to.   [Remember to save the entries here before returning to the   Experimental Sample form]  # noqa: E501

        :param solution_id: The solution_id of this PdbxNmrExptl.  # noqa: E501
        :type: str
        """
        if solution_id is None:
            raise ValueError("Invalid value for `solution_id`, must not be `None`")  # noqa: E501

        self._solution_id = solution_id

    @property
    def spectrometer_id(self):
        """Gets the spectrometer_id of this PdbxNmrExptl.  # noqa: E501

        Pointer to '_pdbx_nmr_spectrometer.spectrometer_id'  # noqa: E501

        :return: The spectrometer_id of this PdbxNmrExptl.  # noqa: E501
        :rtype: int
        """
        return self._spectrometer_id

    @spectrometer_id.setter
    def spectrometer_id(self, spectrometer_id):
        """Sets the spectrometer_id of this PdbxNmrExptl.

        Pointer to '_pdbx_nmr_spectrometer.spectrometer_id'  # noqa: E501

        :param spectrometer_id: The spectrometer_id of this PdbxNmrExptl.  # noqa: E501
        :type: int
        """

        self._spectrometer_id = spectrometer_id

    @property
    def type(self):
        """Gets the type of this PdbxNmrExptl.  # noqa: E501

        The type of NMR experiment.  # noqa: E501

        :return: The type of this PdbxNmrExptl.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PdbxNmrExptl.

        The type of NMR experiment.  # noqa: E501

        :param type: The type of this PdbxNmrExptl.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PdbxNmrExptl, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdbxNmrExptl):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
