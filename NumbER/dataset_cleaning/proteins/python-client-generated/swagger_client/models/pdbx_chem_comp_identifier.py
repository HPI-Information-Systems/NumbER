# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PdbxChemCompIdentifier(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comp_id': 'str',
        'identifier': 'str',
        'program': 'str',
        'program_version': 'str',
        'type': 'str'
    }

    attribute_map = {
        'comp_id': 'comp_id',
        'identifier': 'identifier',
        'program': 'program',
        'program_version': 'program_version',
        'type': 'type'
    }

    def __init__(self, comp_id=None, identifier=None, program=None, program_version=None, type=None):  # noqa: E501
        """PdbxChemCompIdentifier - a model defined in Swagger"""  # noqa: E501
        self._comp_id = None
        self._identifier = None
        self._program = None
        self._program_version = None
        self._type = None
        self.discriminator = None
        self.comp_id = comp_id
        if identifier is not None:
            self.identifier = identifier
        self.program = program
        self.program_version = program_version
        self.type = type

    @property
    def comp_id(self):
        """Gets the comp_id of this PdbxChemCompIdentifier.  # noqa: E501

        This data item is a pointer to _chem_comp.id in the CHEM_COMP  category.  # noqa: E501

        :return: The comp_id of this PdbxChemCompIdentifier.  # noqa: E501
        :rtype: str
        """
        return self._comp_id

    @comp_id.setter
    def comp_id(self, comp_id):
        """Sets the comp_id of this PdbxChemCompIdentifier.

        This data item is a pointer to _chem_comp.id in the CHEM_COMP  category.  # noqa: E501

        :param comp_id: The comp_id of this PdbxChemCompIdentifier.  # noqa: E501
        :type: str
        """
        if comp_id is None:
            raise ValueError("Invalid value for `comp_id`, must not be `None`")  # noqa: E501

        self._comp_id = comp_id

    @property
    def identifier(self):
        """Gets the identifier of this PdbxChemCompIdentifier.  # noqa: E501

        This data item contains the identifier value for this  component.  # noqa: E501

        :return: The identifier of this PdbxChemCompIdentifier.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this PdbxChemCompIdentifier.

        This data item contains the identifier value for this  component.  # noqa: E501

        :param identifier: The identifier of this PdbxChemCompIdentifier.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def program(self):
        """Gets the program of this PdbxChemCompIdentifier.  # noqa: E501

        This data item contains the name of the program  or library used to compute the identifier.  # noqa: E501

        :return: The program of this PdbxChemCompIdentifier.  # noqa: E501
        :rtype: str
        """
        return self._program

    @program.setter
    def program(self, program):
        """Sets the program of this PdbxChemCompIdentifier.

        This data item contains the name of the program  or library used to compute the identifier.  # noqa: E501

        :param program: The program of this PdbxChemCompIdentifier.  # noqa: E501
        :type: str
        """
        if program is None:
            raise ValueError("Invalid value for `program`, must not be `None`")  # noqa: E501

        self._program = program

    @property
    def program_version(self):
        """Gets the program_version of this PdbxChemCompIdentifier.  # noqa: E501

        This data item contains the version of the program  or library used to compute the identifier.  # noqa: E501

        :return: The program_version of this PdbxChemCompIdentifier.  # noqa: E501
        :rtype: str
        """
        return self._program_version

    @program_version.setter
    def program_version(self, program_version):
        """Sets the program_version of this PdbxChemCompIdentifier.

        This data item contains the version of the program  or library used to compute the identifier.  # noqa: E501

        :param program_version: The program_version of this PdbxChemCompIdentifier.  # noqa: E501
        :type: str
        """
        if program_version is None:
            raise ValueError("Invalid value for `program_version`, must not be `None`")  # noqa: E501

        self._program_version = program_version

    @property
    def type(self):
        """Gets the type of this PdbxChemCompIdentifier.  # noqa: E501

        This data item contains the identifier type.  # noqa: E501

        :return: The type of this PdbxChemCompIdentifier.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PdbxChemCompIdentifier.

        This data item contains the identifier type.  # noqa: E501

        :param type: The type of this PdbxChemCompIdentifier.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["CAS REGISTRY NUMBER", "COMMON NAME", "CONDENSED IUPAC CARB SYMBOL", "CONDENSED IUPAC CARBOHYDRATE SYMBOL", "IUPAC CARB SYMBOL", "IUPAC CARBOHYDRATE SYMBOL", "MDL Identifier", "PUBCHEM Identifier", "SNFG CARB SYMBOL", "SNFG CARBOHYDRATE SYMBOL", "SYNONYM", "SYSTEMATIC NAME"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PdbxChemCompIdentifier, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdbxChemCompIdentifier):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
