# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CorePolymerEntityInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pdbx_struct_special_symmetry': 'list[PdbxStructSpecialSymmetry]',
        'rcsb_ligand_neighbors': 'list[RcsbLigandNeighbors]',
        'rcsb_polymer_entity_instance_container_identifiers': 'RcsbPolymerEntityInstanceContainerIdentifiers',
        'rcsb_polymer_instance_annotation': 'list[RcsbPolymerInstanceAnnotation]',
        'rcsb_polymer_instance_feature': 'list[RcsbPolymerInstanceFeature]',
        'rcsb_polymer_instance_feature_summary': 'list[RcsbPolymerInstanceFeatureSummary]',
        'rcsb_polymer_struct_conn': 'list[RcsbPolymerStructConn]',
        'struct_asym': 'StructAsym',
        'rcsb_id': 'str',
        'rcsb_latest_revision': 'RcsbLatestRevision'
    }

    attribute_map = {
        'pdbx_struct_special_symmetry': 'pdbx_struct_special_symmetry',
        'rcsb_ligand_neighbors': 'rcsb_ligand_neighbors',
        'rcsb_polymer_entity_instance_container_identifiers': 'rcsb_polymer_entity_instance_container_identifiers',
        'rcsb_polymer_instance_annotation': 'rcsb_polymer_instance_annotation',
        'rcsb_polymer_instance_feature': 'rcsb_polymer_instance_feature',
        'rcsb_polymer_instance_feature_summary': 'rcsb_polymer_instance_feature_summary',
        'rcsb_polymer_struct_conn': 'rcsb_polymer_struct_conn',
        'struct_asym': 'struct_asym',
        'rcsb_id': 'rcsb_id',
        'rcsb_latest_revision': 'rcsb_latest_revision'
    }

    def __init__(self, pdbx_struct_special_symmetry=None, rcsb_ligand_neighbors=None, rcsb_polymer_entity_instance_container_identifiers=None, rcsb_polymer_instance_annotation=None, rcsb_polymer_instance_feature=None, rcsb_polymer_instance_feature_summary=None, rcsb_polymer_struct_conn=None, struct_asym=None, rcsb_id=None, rcsb_latest_revision=None):  # noqa: E501
        """CorePolymerEntityInstance - a model defined in Swagger"""  # noqa: E501
        self._pdbx_struct_special_symmetry = None
        self._rcsb_ligand_neighbors = None
        self._rcsb_polymer_entity_instance_container_identifiers = None
        self._rcsb_polymer_instance_annotation = None
        self._rcsb_polymer_instance_feature = None
        self._rcsb_polymer_instance_feature_summary = None
        self._rcsb_polymer_struct_conn = None
        self._struct_asym = None
        self._rcsb_id = None
        self._rcsb_latest_revision = None
        self.discriminator = None
        if pdbx_struct_special_symmetry is not None:
            self.pdbx_struct_special_symmetry = pdbx_struct_special_symmetry
        if rcsb_ligand_neighbors is not None:
            self.rcsb_ligand_neighbors = rcsb_ligand_neighbors
        if rcsb_polymer_entity_instance_container_identifiers is not None:
            self.rcsb_polymer_entity_instance_container_identifiers = rcsb_polymer_entity_instance_container_identifiers
        if rcsb_polymer_instance_annotation is not None:
            self.rcsb_polymer_instance_annotation = rcsb_polymer_instance_annotation
        if rcsb_polymer_instance_feature is not None:
            self.rcsb_polymer_instance_feature = rcsb_polymer_instance_feature
        if rcsb_polymer_instance_feature_summary is not None:
            self.rcsb_polymer_instance_feature_summary = rcsb_polymer_instance_feature_summary
        if rcsb_polymer_struct_conn is not None:
            self.rcsb_polymer_struct_conn = rcsb_polymer_struct_conn
        if struct_asym is not None:
            self.struct_asym = struct_asym
        self.rcsb_id = rcsb_id
        if rcsb_latest_revision is not None:
            self.rcsb_latest_revision = rcsb_latest_revision

    @property
    def pdbx_struct_special_symmetry(self):
        """Gets the pdbx_struct_special_symmetry of this CorePolymerEntityInstance.  # noqa: E501


        :return: The pdbx_struct_special_symmetry of this CorePolymerEntityInstance.  # noqa: E501
        :rtype: list[PdbxStructSpecialSymmetry]
        """
        return self._pdbx_struct_special_symmetry

    @pdbx_struct_special_symmetry.setter
    def pdbx_struct_special_symmetry(self, pdbx_struct_special_symmetry):
        """Sets the pdbx_struct_special_symmetry of this CorePolymerEntityInstance.


        :param pdbx_struct_special_symmetry: The pdbx_struct_special_symmetry of this CorePolymerEntityInstance.  # noqa: E501
        :type: list[PdbxStructSpecialSymmetry]
        """

        self._pdbx_struct_special_symmetry = pdbx_struct_special_symmetry

    @property
    def rcsb_ligand_neighbors(self):
        """Gets the rcsb_ligand_neighbors of this CorePolymerEntityInstance.  # noqa: E501


        :return: The rcsb_ligand_neighbors of this CorePolymerEntityInstance.  # noqa: E501
        :rtype: list[RcsbLigandNeighbors]
        """
        return self._rcsb_ligand_neighbors

    @rcsb_ligand_neighbors.setter
    def rcsb_ligand_neighbors(self, rcsb_ligand_neighbors):
        """Sets the rcsb_ligand_neighbors of this CorePolymerEntityInstance.


        :param rcsb_ligand_neighbors: The rcsb_ligand_neighbors of this CorePolymerEntityInstance.  # noqa: E501
        :type: list[RcsbLigandNeighbors]
        """

        self._rcsb_ligand_neighbors = rcsb_ligand_neighbors

    @property
    def rcsb_polymer_entity_instance_container_identifiers(self):
        """Gets the rcsb_polymer_entity_instance_container_identifiers of this CorePolymerEntityInstance.  # noqa: E501


        :return: The rcsb_polymer_entity_instance_container_identifiers of this CorePolymerEntityInstance.  # noqa: E501
        :rtype: RcsbPolymerEntityInstanceContainerIdentifiers
        """
        return self._rcsb_polymer_entity_instance_container_identifiers

    @rcsb_polymer_entity_instance_container_identifiers.setter
    def rcsb_polymer_entity_instance_container_identifiers(self, rcsb_polymer_entity_instance_container_identifiers):
        """Sets the rcsb_polymer_entity_instance_container_identifiers of this CorePolymerEntityInstance.


        :param rcsb_polymer_entity_instance_container_identifiers: The rcsb_polymer_entity_instance_container_identifiers of this CorePolymerEntityInstance.  # noqa: E501
        :type: RcsbPolymerEntityInstanceContainerIdentifiers
        """

        self._rcsb_polymer_entity_instance_container_identifiers = rcsb_polymer_entity_instance_container_identifiers

    @property
    def rcsb_polymer_instance_annotation(self):
        """Gets the rcsb_polymer_instance_annotation of this CorePolymerEntityInstance.  # noqa: E501


        :return: The rcsb_polymer_instance_annotation of this CorePolymerEntityInstance.  # noqa: E501
        :rtype: list[RcsbPolymerInstanceAnnotation]
        """
        return self._rcsb_polymer_instance_annotation

    @rcsb_polymer_instance_annotation.setter
    def rcsb_polymer_instance_annotation(self, rcsb_polymer_instance_annotation):
        """Sets the rcsb_polymer_instance_annotation of this CorePolymerEntityInstance.


        :param rcsb_polymer_instance_annotation: The rcsb_polymer_instance_annotation of this CorePolymerEntityInstance.  # noqa: E501
        :type: list[RcsbPolymerInstanceAnnotation]
        """

        self._rcsb_polymer_instance_annotation = rcsb_polymer_instance_annotation

    @property
    def rcsb_polymer_instance_feature(self):
        """Gets the rcsb_polymer_instance_feature of this CorePolymerEntityInstance.  # noqa: E501


        :return: The rcsb_polymer_instance_feature of this CorePolymerEntityInstance.  # noqa: E501
        :rtype: list[RcsbPolymerInstanceFeature]
        """
        return self._rcsb_polymer_instance_feature

    @rcsb_polymer_instance_feature.setter
    def rcsb_polymer_instance_feature(self, rcsb_polymer_instance_feature):
        """Sets the rcsb_polymer_instance_feature of this CorePolymerEntityInstance.


        :param rcsb_polymer_instance_feature: The rcsb_polymer_instance_feature of this CorePolymerEntityInstance.  # noqa: E501
        :type: list[RcsbPolymerInstanceFeature]
        """

        self._rcsb_polymer_instance_feature = rcsb_polymer_instance_feature

    @property
    def rcsb_polymer_instance_feature_summary(self):
        """Gets the rcsb_polymer_instance_feature_summary of this CorePolymerEntityInstance.  # noqa: E501


        :return: The rcsb_polymer_instance_feature_summary of this CorePolymerEntityInstance.  # noqa: E501
        :rtype: list[RcsbPolymerInstanceFeatureSummary]
        """
        return self._rcsb_polymer_instance_feature_summary

    @rcsb_polymer_instance_feature_summary.setter
    def rcsb_polymer_instance_feature_summary(self, rcsb_polymer_instance_feature_summary):
        """Sets the rcsb_polymer_instance_feature_summary of this CorePolymerEntityInstance.


        :param rcsb_polymer_instance_feature_summary: The rcsb_polymer_instance_feature_summary of this CorePolymerEntityInstance.  # noqa: E501
        :type: list[RcsbPolymerInstanceFeatureSummary]
        """

        self._rcsb_polymer_instance_feature_summary = rcsb_polymer_instance_feature_summary

    @property
    def rcsb_polymer_struct_conn(self):
        """Gets the rcsb_polymer_struct_conn of this CorePolymerEntityInstance.  # noqa: E501


        :return: The rcsb_polymer_struct_conn of this CorePolymerEntityInstance.  # noqa: E501
        :rtype: list[RcsbPolymerStructConn]
        """
        return self._rcsb_polymer_struct_conn

    @rcsb_polymer_struct_conn.setter
    def rcsb_polymer_struct_conn(self, rcsb_polymer_struct_conn):
        """Sets the rcsb_polymer_struct_conn of this CorePolymerEntityInstance.


        :param rcsb_polymer_struct_conn: The rcsb_polymer_struct_conn of this CorePolymerEntityInstance.  # noqa: E501
        :type: list[RcsbPolymerStructConn]
        """

        self._rcsb_polymer_struct_conn = rcsb_polymer_struct_conn

    @property
    def struct_asym(self):
        """Gets the struct_asym of this CorePolymerEntityInstance.  # noqa: E501


        :return: The struct_asym of this CorePolymerEntityInstance.  # noqa: E501
        :rtype: StructAsym
        """
        return self._struct_asym

    @struct_asym.setter
    def struct_asym(self, struct_asym):
        """Sets the struct_asym of this CorePolymerEntityInstance.


        :param struct_asym: The struct_asym of this CorePolymerEntityInstance.  # noqa: E501
        :type: StructAsym
        """

        self._struct_asym = struct_asym

    @property
    def rcsb_id(self):
        """Gets the rcsb_id of this CorePolymerEntityInstance.  # noqa: E501

        A unique identifier for each object in this entity instance container formed by  an 'dot' (.) separated concatenation of entry and entity instance identifiers.  # noqa: E501

        :return: The rcsb_id of this CorePolymerEntityInstance.  # noqa: E501
        :rtype: str
        """
        return self._rcsb_id

    @rcsb_id.setter
    def rcsb_id(self, rcsb_id):
        """Sets the rcsb_id of this CorePolymerEntityInstance.

        A unique identifier for each object in this entity instance container formed by  an 'dot' (.) separated concatenation of entry and entity instance identifiers.  # noqa: E501

        :param rcsb_id: The rcsb_id of this CorePolymerEntityInstance.  # noqa: E501
        :type: str
        """
        if rcsb_id is None:
            raise ValueError("Invalid value for `rcsb_id`, must not be `None`")  # noqa: E501

        self._rcsb_id = rcsb_id

    @property
    def rcsb_latest_revision(self):
        """Gets the rcsb_latest_revision of this CorePolymerEntityInstance.  # noqa: E501


        :return: The rcsb_latest_revision of this CorePolymerEntityInstance.  # noqa: E501
        :rtype: RcsbLatestRevision
        """
        return self._rcsb_latest_revision

    @rcsb_latest_revision.setter
    def rcsb_latest_revision(self, rcsb_latest_revision):
        """Sets the rcsb_latest_revision of this CorePolymerEntityInstance.


        :param rcsb_latest_revision: The rcsb_latest_revision of this CorePolymerEntityInstance.  # noqa: E501
        :type: RcsbLatestRevision
        """

        self._rcsb_latest_revision = rcsb_latest_revision

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CorePolymerEntityInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CorePolymerEntityInstance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
