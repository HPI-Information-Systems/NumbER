# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CoreEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'audit_author': 'list[AuditAuthor]',
        'cell': 'Cell',
        'citation': 'list[Citation]',
        'diffrn': 'list[Diffrn]',
        'diffrn_detector': 'list[DiffrnDetector]',
        'diffrn_radiation': 'list[DiffrnRadiation]',
        'diffrn_source': 'list[DiffrnSource]',
        'em_2d_crystal_entity': 'list[Em2dCrystalEntity]',
        'em_3d_crystal_entity': 'list[Em3dCrystalEntity]',
        'em_3d_fitting': 'list[Em3dFitting]',
        'em_3d_fitting_list': 'list[Em3dFittingList]',
        'em_3d_reconstruction': 'list[Em3dReconstruction]',
        'em_ctf_correction': 'list[EmCtfCorrection]',
        'em_diffraction': 'list[EmDiffraction]',
        'em_diffraction_shell': 'list[EmDiffractionShell]',
        'em_diffraction_stats': 'list[EmDiffractionStats]',
        'em_embedding': 'list[EmEmbedding]',
        'em_entity_assembly': 'list[EmEntityAssembly]',
        'em_experiment': 'EmExperiment',
        'em_helical_entity': 'list[EmHelicalEntity]',
        'em_image_recording': 'list[EmImageRecording]',
        'em_imaging': 'list[EmImaging]',
        'em_particle_selection': 'list[EmParticleSelection]',
        'em_single_particle_entity': 'list[EmSingleParticleEntity]',
        'em_software': 'list[EmSoftware]',
        'em_specimen': 'list[EmSpecimen]',
        'em_staining': 'list[EmStaining]',
        'em_vitrification': 'list[EmVitrification]',
        'entry': 'Entry',
        'exptl': 'list[Exptl]',
        'exptl_crystal': 'list[ExptlCrystal]',
        'exptl_crystal_grow': 'list[ExptlCrystalGrow]',
        'ma_data': 'list[MaData]',
        'pdbx_sg_project': 'list[PdbxSGProject]',
        'pdbx_audit_revision_category': 'list[PdbxAuditRevisionCategory]',
        'pdbx_audit_revision_details': 'list[PdbxAuditRevisionDetails]',
        'pdbx_audit_revision_group': 'list[PdbxAuditRevisionGroup]',
        'pdbx_audit_revision_history': 'list[PdbxAuditRevisionHistory]',
        'pdbx_audit_revision_item': 'list[PdbxAuditRevisionItem]',
        'pdbx_audit_support': 'list[PdbxAuditSupport]',
        'pdbx_database_pdb_obs_spr': 'list[PdbxDatabasePDBObsSpr]',
        'pdbx_database_related': 'list[PdbxDatabaseRelated]',
        'pdbx_database_status': 'PdbxDatabaseStatus',
        'pdbx_deposit_group': 'list[PdbxDepositGroup]',
        'pdbx_molecule_features': 'list[PdbxMoleculeFeatures]',
        'pdbx_nmr_details': 'PdbxNmrDetails',
        'pdbx_nmr_ensemble': 'PdbxNmrEnsemble',
        'pdbx_nmr_exptl': 'list[PdbxNmrExptl]',
        'pdbx_nmr_exptl_sample_conditions': 'list[PdbxNmrExptlSampleConditions]',
        'pdbx_nmr_refine': 'list[PdbxNmrRefine]',
        'pdbx_nmr_representative': 'PdbxNmrRepresentative',
        'pdbx_nmr_sample_details': 'list[PdbxNmrSampleDetails]',
        'pdbx_nmr_software': 'list[PdbxNmrSoftware]',
        'pdbx_nmr_spectrometer': 'list[PdbxNmrSpectrometer]',
        'pdbx_reflns_twin': 'list[PdbxReflnsTwin]',
        'pdbx_related_exp_data_set': 'list[PdbxRelatedExpDataSet]',
        'pdbx_serial_crystallography_data_reduction': 'list[PdbxSerialCrystallographyDataReduction]',
        'pdbx_serial_crystallography_measurement': 'list[PdbxSerialCrystallographyMeasurement]',
        'pdbx_serial_crystallography_sample_delivery': 'list[PdbxSerialCrystallographySampleDelivery]',
        'pdbx_serial_crystallography_sample_delivery_fixed_target': 'list[PdbxSerialCrystallographySampleDeliveryFixedTarget]',
        'pdbx_serial_crystallography_sample_delivery_injection': 'list[PdbxSerialCrystallographySampleDeliveryInjection]',
        'pdbx_soln_scatter': 'list[PdbxSolnScatter]',
        'pdbx_soln_scatter_model': 'list[PdbxSolnScatterModel]',
        'pdbx_vrpt_summary': 'PdbxVrptSummary',
        'rcsb_accession_info': 'RcsbAccessionInfo',
        'rcsb_comp_model_provenance': 'RcsbCompModelProvenance',
        'rcsb_entry_container_identifiers': 'RcsbEntryContainerIdentifiers',
        'rcsb_entry_info': 'RcsbEntryInfo',
        'rcsb_ma_qa_metric_global': 'list[RcsbMaQaMetricGlobal]',
        'rcsb_primary_citation': 'RcsbPrimaryCitation',
        'refine': 'list[Refine]',
        'refine_analyze': 'list[RefineAnalyze]',
        'refine_hist': 'list[RefineHist]',
        'refine_ls_restr': 'list[RefineLsRestr]',
        'reflns': 'list[Reflns]',
        'reflns_shell': 'list[ReflnsShell]',
        'software': 'list[Software]',
        'struct': 'Struct',
        'struct_keywords': 'StructKeywords',
        'symmetry': 'Symmetry',
        'rcsb_id': 'str',
        'rcsb_entry_group_membership': 'list[RcsbEntryGroupMembership]',
        'rcsb_external_references': 'list[RcsbExternalReferences]',
        'rcsb_binding_affinity': 'list[RcsbBindingAffinity]'
    }

    attribute_map = {
        'audit_author': 'audit_author',
        'cell': 'cell',
        'citation': 'citation',
        'diffrn': 'diffrn',
        'diffrn_detector': 'diffrn_detector',
        'diffrn_radiation': 'diffrn_radiation',
        'diffrn_source': 'diffrn_source',
        'em_2d_crystal_entity': 'em_2d_crystal_entity',
        'em_3d_crystal_entity': 'em_3d_crystal_entity',
        'em_3d_fitting': 'em_3d_fitting',
        'em_3d_fitting_list': 'em_3d_fitting_list',
        'em_3d_reconstruction': 'em_3d_reconstruction',
        'em_ctf_correction': 'em_ctf_correction',
        'em_diffraction': 'em_diffraction',
        'em_diffraction_shell': 'em_diffraction_shell',
        'em_diffraction_stats': 'em_diffraction_stats',
        'em_embedding': 'em_embedding',
        'em_entity_assembly': 'em_entity_assembly',
        'em_experiment': 'em_experiment',
        'em_helical_entity': 'em_helical_entity',
        'em_image_recording': 'em_image_recording',
        'em_imaging': 'em_imaging',
        'em_particle_selection': 'em_particle_selection',
        'em_single_particle_entity': 'em_single_particle_entity',
        'em_software': 'em_software',
        'em_specimen': 'em_specimen',
        'em_staining': 'em_staining',
        'em_vitrification': 'em_vitrification',
        'entry': 'entry',
        'exptl': 'exptl',
        'exptl_crystal': 'exptl_crystal',
        'exptl_crystal_grow': 'exptl_crystal_grow',
        'ma_data': 'ma_data',
        'pdbx_sg_project': 'pdbx_SG_project',
        'pdbx_audit_revision_category': 'pdbx_audit_revision_category',
        'pdbx_audit_revision_details': 'pdbx_audit_revision_details',
        'pdbx_audit_revision_group': 'pdbx_audit_revision_group',
        'pdbx_audit_revision_history': 'pdbx_audit_revision_history',
        'pdbx_audit_revision_item': 'pdbx_audit_revision_item',
        'pdbx_audit_support': 'pdbx_audit_support',
        'pdbx_database_pdb_obs_spr': 'pdbx_database_PDB_obs_spr',
        'pdbx_database_related': 'pdbx_database_related',
        'pdbx_database_status': 'pdbx_database_status',
        'pdbx_deposit_group': 'pdbx_deposit_group',
        'pdbx_molecule_features': 'pdbx_molecule_features',
        'pdbx_nmr_details': 'pdbx_nmr_details',
        'pdbx_nmr_ensemble': 'pdbx_nmr_ensemble',
        'pdbx_nmr_exptl': 'pdbx_nmr_exptl',
        'pdbx_nmr_exptl_sample_conditions': 'pdbx_nmr_exptl_sample_conditions',
        'pdbx_nmr_refine': 'pdbx_nmr_refine',
        'pdbx_nmr_representative': 'pdbx_nmr_representative',
        'pdbx_nmr_sample_details': 'pdbx_nmr_sample_details',
        'pdbx_nmr_software': 'pdbx_nmr_software',
        'pdbx_nmr_spectrometer': 'pdbx_nmr_spectrometer',
        'pdbx_reflns_twin': 'pdbx_reflns_twin',
        'pdbx_related_exp_data_set': 'pdbx_related_exp_data_set',
        'pdbx_serial_crystallography_data_reduction': 'pdbx_serial_crystallography_data_reduction',
        'pdbx_serial_crystallography_measurement': 'pdbx_serial_crystallography_measurement',
        'pdbx_serial_crystallography_sample_delivery': 'pdbx_serial_crystallography_sample_delivery',
        'pdbx_serial_crystallography_sample_delivery_fixed_target': 'pdbx_serial_crystallography_sample_delivery_fixed_target',
        'pdbx_serial_crystallography_sample_delivery_injection': 'pdbx_serial_crystallography_sample_delivery_injection',
        'pdbx_soln_scatter': 'pdbx_soln_scatter',
        'pdbx_soln_scatter_model': 'pdbx_soln_scatter_model',
        'pdbx_vrpt_summary': 'pdbx_vrpt_summary',
        'rcsb_accession_info': 'rcsb_accession_info',
        'rcsb_comp_model_provenance': 'rcsb_comp_model_provenance',
        'rcsb_entry_container_identifiers': 'rcsb_entry_container_identifiers',
        'rcsb_entry_info': 'rcsb_entry_info',
        'rcsb_ma_qa_metric_global': 'rcsb_ma_qa_metric_global',
        'rcsb_primary_citation': 'rcsb_primary_citation',
        'refine': 'refine',
        'refine_analyze': 'refine_analyze',
        'refine_hist': 'refine_hist',
        'refine_ls_restr': 'refine_ls_restr',
        'reflns': 'reflns',
        'reflns_shell': 'reflns_shell',
        'software': 'software',
        'struct': 'struct',
        'struct_keywords': 'struct_keywords',
        'symmetry': 'symmetry',
        'rcsb_id': 'rcsb_id',
        'rcsb_entry_group_membership': 'rcsb_entry_group_membership',
        'rcsb_external_references': 'rcsb_external_references',
        'rcsb_binding_affinity': 'rcsb_binding_affinity'
    }

    def __init__(self, audit_author=None, cell=None, citation=None, diffrn=None, diffrn_detector=None, diffrn_radiation=None, diffrn_source=None, em_2d_crystal_entity=None, em_3d_crystal_entity=None, em_3d_fitting=None, em_3d_fitting_list=None, em_3d_reconstruction=None, em_ctf_correction=None, em_diffraction=None, em_diffraction_shell=None, em_diffraction_stats=None, em_embedding=None, em_entity_assembly=None, em_experiment=None, em_helical_entity=None, em_image_recording=None, em_imaging=None, em_particle_selection=None, em_single_particle_entity=None, em_software=None, em_specimen=None, em_staining=None, em_vitrification=None, entry=None, exptl=None, exptl_crystal=None, exptl_crystal_grow=None, ma_data=None, pdbx_sg_project=None, pdbx_audit_revision_category=None, pdbx_audit_revision_details=None, pdbx_audit_revision_group=None, pdbx_audit_revision_history=None, pdbx_audit_revision_item=None, pdbx_audit_support=None, pdbx_database_pdb_obs_spr=None, pdbx_database_related=None, pdbx_database_status=None, pdbx_deposit_group=None, pdbx_molecule_features=None, pdbx_nmr_details=None, pdbx_nmr_ensemble=None, pdbx_nmr_exptl=None, pdbx_nmr_exptl_sample_conditions=None, pdbx_nmr_refine=None, pdbx_nmr_representative=None, pdbx_nmr_sample_details=None, pdbx_nmr_software=None, pdbx_nmr_spectrometer=None, pdbx_reflns_twin=None, pdbx_related_exp_data_set=None, pdbx_serial_crystallography_data_reduction=None, pdbx_serial_crystallography_measurement=None, pdbx_serial_crystallography_sample_delivery=None, pdbx_serial_crystallography_sample_delivery_fixed_target=None, pdbx_serial_crystallography_sample_delivery_injection=None, pdbx_soln_scatter=None, pdbx_soln_scatter_model=None, pdbx_vrpt_summary=None, rcsb_accession_info=None, rcsb_comp_model_provenance=None, rcsb_entry_container_identifiers=None, rcsb_entry_info=None, rcsb_ma_qa_metric_global=None, rcsb_primary_citation=None, refine=None, refine_analyze=None, refine_hist=None, refine_ls_restr=None, reflns=None, reflns_shell=None, software=None, struct=None, struct_keywords=None, symmetry=None, rcsb_id=None, rcsb_entry_group_membership=None, rcsb_external_references=None, rcsb_binding_affinity=None):  # noqa: E501
        """CoreEntry - a model defined in Swagger"""  # noqa: E501
        self._audit_author = None
        self._cell = None
        self._citation = None
        self._diffrn = None
        self._diffrn_detector = None
        self._diffrn_radiation = None
        self._diffrn_source = None
        self._em_2d_crystal_entity = None
        self._em_3d_crystal_entity = None
        self._em_3d_fitting = None
        self._em_3d_fitting_list = None
        self._em_3d_reconstruction = None
        self._em_ctf_correction = None
        self._em_diffraction = None
        self._em_diffraction_shell = None
        self._em_diffraction_stats = None
        self._em_embedding = None
        self._em_entity_assembly = None
        self._em_experiment = None
        self._em_helical_entity = None
        self._em_image_recording = None
        self._em_imaging = None
        self._em_particle_selection = None
        self._em_single_particle_entity = None
        self._em_software = None
        self._em_specimen = None
        self._em_staining = None
        self._em_vitrification = None
        self._entry = None
        self._exptl = None
        self._exptl_crystal = None
        self._exptl_crystal_grow = None
        self._ma_data = None
        self._pdbx_sg_project = None
        self._pdbx_audit_revision_category = None
        self._pdbx_audit_revision_details = None
        self._pdbx_audit_revision_group = None
        self._pdbx_audit_revision_history = None
        self._pdbx_audit_revision_item = None
        self._pdbx_audit_support = None
        self._pdbx_database_pdb_obs_spr = None
        self._pdbx_database_related = None
        self._pdbx_database_status = None
        self._pdbx_deposit_group = None
        self._pdbx_molecule_features = None
        self._pdbx_nmr_details = None
        self._pdbx_nmr_ensemble = None
        self._pdbx_nmr_exptl = None
        self._pdbx_nmr_exptl_sample_conditions = None
        self._pdbx_nmr_refine = None
        self._pdbx_nmr_representative = None
        self._pdbx_nmr_sample_details = None
        self._pdbx_nmr_software = None
        self._pdbx_nmr_spectrometer = None
        self._pdbx_reflns_twin = None
        self._pdbx_related_exp_data_set = None
        self._pdbx_serial_crystallography_data_reduction = None
        self._pdbx_serial_crystallography_measurement = None
        self._pdbx_serial_crystallography_sample_delivery = None
        self._pdbx_serial_crystallography_sample_delivery_fixed_target = None
        self._pdbx_serial_crystallography_sample_delivery_injection = None
        self._pdbx_soln_scatter = None
        self._pdbx_soln_scatter_model = None
        self._pdbx_vrpt_summary = None
        self._rcsb_accession_info = None
        self._rcsb_comp_model_provenance = None
        self._rcsb_entry_container_identifiers = None
        self._rcsb_entry_info = None
        self._rcsb_ma_qa_metric_global = None
        self._rcsb_primary_citation = None
        self._refine = None
        self._refine_analyze = None
        self._refine_hist = None
        self._refine_ls_restr = None
        self._reflns = None
        self._reflns_shell = None
        self._software = None
        self._struct = None
        self._struct_keywords = None
        self._symmetry = None
        self._rcsb_id = None
        self._rcsb_entry_group_membership = None
        self._rcsb_external_references = None
        self._rcsb_binding_affinity = None
        self.discriminator = None
        if audit_author is not None:
            self.audit_author = audit_author
        if cell is not None:
            self.cell = cell
        if citation is not None:
            self.citation = citation
        if diffrn is not None:
            self.diffrn = diffrn
        if diffrn_detector is not None:
            self.diffrn_detector = diffrn_detector
        if diffrn_radiation is not None:
            self.diffrn_radiation = diffrn_radiation
        if diffrn_source is not None:
            self.diffrn_source = diffrn_source
        if em_2d_crystal_entity is not None:
            self.em_2d_crystal_entity = em_2d_crystal_entity
        if em_3d_crystal_entity is not None:
            self.em_3d_crystal_entity = em_3d_crystal_entity
        if em_3d_fitting is not None:
            self.em_3d_fitting = em_3d_fitting
        if em_3d_fitting_list is not None:
            self.em_3d_fitting_list = em_3d_fitting_list
        if em_3d_reconstruction is not None:
            self.em_3d_reconstruction = em_3d_reconstruction
        if em_ctf_correction is not None:
            self.em_ctf_correction = em_ctf_correction
        if em_diffraction is not None:
            self.em_diffraction = em_diffraction
        if em_diffraction_shell is not None:
            self.em_diffraction_shell = em_diffraction_shell
        if em_diffraction_stats is not None:
            self.em_diffraction_stats = em_diffraction_stats
        if em_embedding is not None:
            self.em_embedding = em_embedding
        if em_entity_assembly is not None:
            self.em_entity_assembly = em_entity_assembly
        if em_experiment is not None:
            self.em_experiment = em_experiment
        if em_helical_entity is not None:
            self.em_helical_entity = em_helical_entity
        if em_image_recording is not None:
            self.em_image_recording = em_image_recording
        if em_imaging is not None:
            self.em_imaging = em_imaging
        if em_particle_selection is not None:
            self.em_particle_selection = em_particle_selection
        if em_single_particle_entity is not None:
            self.em_single_particle_entity = em_single_particle_entity
        if em_software is not None:
            self.em_software = em_software
        if em_specimen is not None:
            self.em_specimen = em_specimen
        if em_staining is not None:
            self.em_staining = em_staining
        if em_vitrification is not None:
            self.em_vitrification = em_vitrification
        if entry is not None:
            self.entry = entry
        if exptl is not None:
            self.exptl = exptl
        if exptl_crystal is not None:
            self.exptl_crystal = exptl_crystal
        if exptl_crystal_grow is not None:
            self.exptl_crystal_grow = exptl_crystal_grow
        if ma_data is not None:
            self.ma_data = ma_data
        if pdbx_sg_project is not None:
            self.pdbx_sg_project = pdbx_sg_project
        if pdbx_audit_revision_category is not None:
            self.pdbx_audit_revision_category = pdbx_audit_revision_category
        if pdbx_audit_revision_details is not None:
            self.pdbx_audit_revision_details = pdbx_audit_revision_details
        if pdbx_audit_revision_group is not None:
            self.pdbx_audit_revision_group = pdbx_audit_revision_group
        if pdbx_audit_revision_history is not None:
            self.pdbx_audit_revision_history = pdbx_audit_revision_history
        if pdbx_audit_revision_item is not None:
            self.pdbx_audit_revision_item = pdbx_audit_revision_item
        if pdbx_audit_support is not None:
            self.pdbx_audit_support = pdbx_audit_support
        if pdbx_database_pdb_obs_spr is not None:
            self.pdbx_database_pdb_obs_spr = pdbx_database_pdb_obs_spr
        if pdbx_database_related is not None:
            self.pdbx_database_related = pdbx_database_related
        if pdbx_database_status is not None:
            self.pdbx_database_status = pdbx_database_status
        if pdbx_deposit_group is not None:
            self.pdbx_deposit_group = pdbx_deposit_group
        if pdbx_molecule_features is not None:
            self.pdbx_molecule_features = pdbx_molecule_features
        if pdbx_nmr_details is not None:
            self.pdbx_nmr_details = pdbx_nmr_details
        if pdbx_nmr_ensemble is not None:
            self.pdbx_nmr_ensemble = pdbx_nmr_ensemble
        if pdbx_nmr_exptl is not None:
            self.pdbx_nmr_exptl = pdbx_nmr_exptl
        if pdbx_nmr_exptl_sample_conditions is not None:
            self.pdbx_nmr_exptl_sample_conditions = pdbx_nmr_exptl_sample_conditions
        if pdbx_nmr_refine is not None:
            self.pdbx_nmr_refine = pdbx_nmr_refine
        if pdbx_nmr_representative is not None:
            self.pdbx_nmr_representative = pdbx_nmr_representative
        if pdbx_nmr_sample_details is not None:
            self.pdbx_nmr_sample_details = pdbx_nmr_sample_details
        if pdbx_nmr_software is not None:
            self.pdbx_nmr_software = pdbx_nmr_software
        if pdbx_nmr_spectrometer is not None:
            self.pdbx_nmr_spectrometer = pdbx_nmr_spectrometer
        if pdbx_reflns_twin is not None:
            self.pdbx_reflns_twin = pdbx_reflns_twin
        if pdbx_related_exp_data_set is not None:
            self.pdbx_related_exp_data_set = pdbx_related_exp_data_set
        if pdbx_serial_crystallography_data_reduction is not None:
            self.pdbx_serial_crystallography_data_reduction = pdbx_serial_crystallography_data_reduction
        if pdbx_serial_crystallography_measurement is not None:
            self.pdbx_serial_crystallography_measurement = pdbx_serial_crystallography_measurement
        if pdbx_serial_crystallography_sample_delivery is not None:
            self.pdbx_serial_crystallography_sample_delivery = pdbx_serial_crystallography_sample_delivery
        if pdbx_serial_crystallography_sample_delivery_fixed_target is not None:
            self.pdbx_serial_crystallography_sample_delivery_fixed_target = pdbx_serial_crystallography_sample_delivery_fixed_target
        if pdbx_serial_crystallography_sample_delivery_injection is not None:
            self.pdbx_serial_crystallography_sample_delivery_injection = pdbx_serial_crystallography_sample_delivery_injection
        if pdbx_soln_scatter is not None:
            self.pdbx_soln_scatter = pdbx_soln_scatter
        if pdbx_soln_scatter_model is not None:
            self.pdbx_soln_scatter_model = pdbx_soln_scatter_model
        if pdbx_vrpt_summary is not None:
            self.pdbx_vrpt_summary = pdbx_vrpt_summary
        if rcsb_accession_info is not None:
            self.rcsb_accession_info = rcsb_accession_info
        if rcsb_comp_model_provenance is not None:
            self.rcsb_comp_model_provenance = rcsb_comp_model_provenance
        self.rcsb_entry_container_identifiers = rcsb_entry_container_identifiers
        self.rcsb_entry_info = rcsb_entry_info
        if rcsb_ma_qa_metric_global is not None:
            self.rcsb_ma_qa_metric_global = rcsb_ma_qa_metric_global
        if rcsb_primary_citation is not None:
            self.rcsb_primary_citation = rcsb_primary_citation
        if refine is not None:
            self.refine = refine
        if refine_analyze is not None:
            self.refine_analyze = refine_analyze
        if refine_hist is not None:
            self.refine_hist = refine_hist
        if refine_ls_restr is not None:
            self.refine_ls_restr = refine_ls_restr
        if reflns is not None:
            self.reflns = reflns
        if reflns_shell is not None:
            self.reflns_shell = reflns_shell
        if software is not None:
            self.software = software
        if struct is not None:
            self.struct = struct
        if struct_keywords is not None:
            self.struct_keywords = struct_keywords
        if symmetry is not None:
            self.symmetry = symmetry
        self.rcsb_id = rcsb_id
        if rcsb_entry_group_membership is not None:
            self.rcsb_entry_group_membership = rcsb_entry_group_membership
        if rcsb_external_references is not None:
            self.rcsb_external_references = rcsb_external_references
        if rcsb_binding_affinity is not None:
            self.rcsb_binding_affinity = rcsb_binding_affinity

    @property
    def audit_author(self):
        """Gets the audit_author of this CoreEntry.  # noqa: E501


        :return: The audit_author of this CoreEntry.  # noqa: E501
        :rtype: list[AuditAuthor]
        """
        return self._audit_author

    @audit_author.setter
    def audit_author(self, audit_author):
        """Sets the audit_author of this CoreEntry.


        :param audit_author: The audit_author of this CoreEntry.  # noqa: E501
        :type: list[AuditAuthor]
        """

        self._audit_author = audit_author

    @property
    def cell(self):
        """Gets the cell of this CoreEntry.  # noqa: E501


        :return: The cell of this CoreEntry.  # noqa: E501
        :rtype: Cell
        """
        return self._cell

    @cell.setter
    def cell(self, cell):
        """Sets the cell of this CoreEntry.


        :param cell: The cell of this CoreEntry.  # noqa: E501
        :type: Cell
        """

        self._cell = cell

    @property
    def citation(self):
        """Gets the citation of this CoreEntry.  # noqa: E501


        :return: The citation of this CoreEntry.  # noqa: E501
        :rtype: list[Citation]
        """
        return self._citation

    @citation.setter
    def citation(self, citation):
        """Sets the citation of this CoreEntry.


        :param citation: The citation of this CoreEntry.  # noqa: E501
        :type: list[Citation]
        """

        self._citation = citation

    @property
    def diffrn(self):
        """Gets the diffrn of this CoreEntry.  # noqa: E501


        :return: The diffrn of this CoreEntry.  # noqa: E501
        :rtype: list[Diffrn]
        """
        return self._diffrn

    @diffrn.setter
    def diffrn(self, diffrn):
        """Sets the diffrn of this CoreEntry.


        :param diffrn: The diffrn of this CoreEntry.  # noqa: E501
        :type: list[Diffrn]
        """

        self._diffrn = diffrn

    @property
    def diffrn_detector(self):
        """Gets the diffrn_detector of this CoreEntry.  # noqa: E501


        :return: The diffrn_detector of this CoreEntry.  # noqa: E501
        :rtype: list[DiffrnDetector]
        """
        return self._diffrn_detector

    @diffrn_detector.setter
    def diffrn_detector(self, diffrn_detector):
        """Sets the diffrn_detector of this CoreEntry.


        :param diffrn_detector: The diffrn_detector of this CoreEntry.  # noqa: E501
        :type: list[DiffrnDetector]
        """

        self._diffrn_detector = diffrn_detector

    @property
    def diffrn_radiation(self):
        """Gets the diffrn_radiation of this CoreEntry.  # noqa: E501


        :return: The diffrn_radiation of this CoreEntry.  # noqa: E501
        :rtype: list[DiffrnRadiation]
        """
        return self._diffrn_radiation

    @diffrn_radiation.setter
    def diffrn_radiation(self, diffrn_radiation):
        """Sets the diffrn_radiation of this CoreEntry.


        :param diffrn_radiation: The diffrn_radiation of this CoreEntry.  # noqa: E501
        :type: list[DiffrnRadiation]
        """

        self._diffrn_radiation = diffrn_radiation

    @property
    def diffrn_source(self):
        """Gets the diffrn_source of this CoreEntry.  # noqa: E501


        :return: The diffrn_source of this CoreEntry.  # noqa: E501
        :rtype: list[DiffrnSource]
        """
        return self._diffrn_source

    @diffrn_source.setter
    def diffrn_source(self, diffrn_source):
        """Sets the diffrn_source of this CoreEntry.


        :param diffrn_source: The diffrn_source of this CoreEntry.  # noqa: E501
        :type: list[DiffrnSource]
        """

        self._diffrn_source = diffrn_source

    @property
    def em_2d_crystal_entity(self):
        """Gets the em_2d_crystal_entity of this CoreEntry.  # noqa: E501


        :return: The em_2d_crystal_entity of this CoreEntry.  # noqa: E501
        :rtype: list[Em2dCrystalEntity]
        """
        return self._em_2d_crystal_entity

    @em_2d_crystal_entity.setter
    def em_2d_crystal_entity(self, em_2d_crystal_entity):
        """Sets the em_2d_crystal_entity of this CoreEntry.


        :param em_2d_crystal_entity: The em_2d_crystal_entity of this CoreEntry.  # noqa: E501
        :type: list[Em2dCrystalEntity]
        """

        self._em_2d_crystal_entity = em_2d_crystal_entity

    @property
    def em_3d_crystal_entity(self):
        """Gets the em_3d_crystal_entity of this CoreEntry.  # noqa: E501


        :return: The em_3d_crystal_entity of this CoreEntry.  # noqa: E501
        :rtype: list[Em3dCrystalEntity]
        """
        return self._em_3d_crystal_entity

    @em_3d_crystal_entity.setter
    def em_3d_crystal_entity(self, em_3d_crystal_entity):
        """Sets the em_3d_crystal_entity of this CoreEntry.


        :param em_3d_crystal_entity: The em_3d_crystal_entity of this CoreEntry.  # noqa: E501
        :type: list[Em3dCrystalEntity]
        """

        self._em_3d_crystal_entity = em_3d_crystal_entity

    @property
    def em_3d_fitting(self):
        """Gets the em_3d_fitting of this CoreEntry.  # noqa: E501


        :return: The em_3d_fitting of this CoreEntry.  # noqa: E501
        :rtype: list[Em3dFitting]
        """
        return self._em_3d_fitting

    @em_3d_fitting.setter
    def em_3d_fitting(self, em_3d_fitting):
        """Sets the em_3d_fitting of this CoreEntry.


        :param em_3d_fitting: The em_3d_fitting of this CoreEntry.  # noqa: E501
        :type: list[Em3dFitting]
        """

        self._em_3d_fitting = em_3d_fitting

    @property
    def em_3d_fitting_list(self):
        """Gets the em_3d_fitting_list of this CoreEntry.  # noqa: E501


        :return: The em_3d_fitting_list of this CoreEntry.  # noqa: E501
        :rtype: list[Em3dFittingList]
        """
        return self._em_3d_fitting_list

    @em_3d_fitting_list.setter
    def em_3d_fitting_list(self, em_3d_fitting_list):
        """Sets the em_3d_fitting_list of this CoreEntry.


        :param em_3d_fitting_list: The em_3d_fitting_list of this CoreEntry.  # noqa: E501
        :type: list[Em3dFittingList]
        """

        self._em_3d_fitting_list = em_3d_fitting_list

    @property
    def em_3d_reconstruction(self):
        """Gets the em_3d_reconstruction of this CoreEntry.  # noqa: E501


        :return: The em_3d_reconstruction of this CoreEntry.  # noqa: E501
        :rtype: list[Em3dReconstruction]
        """
        return self._em_3d_reconstruction

    @em_3d_reconstruction.setter
    def em_3d_reconstruction(self, em_3d_reconstruction):
        """Sets the em_3d_reconstruction of this CoreEntry.


        :param em_3d_reconstruction: The em_3d_reconstruction of this CoreEntry.  # noqa: E501
        :type: list[Em3dReconstruction]
        """

        self._em_3d_reconstruction = em_3d_reconstruction

    @property
    def em_ctf_correction(self):
        """Gets the em_ctf_correction of this CoreEntry.  # noqa: E501


        :return: The em_ctf_correction of this CoreEntry.  # noqa: E501
        :rtype: list[EmCtfCorrection]
        """
        return self._em_ctf_correction

    @em_ctf_correction.setter
    def em_ctf_correction(self, em_ctf_correction):
        """Sets the em_ctf_correction of this CoreEntry.


        :param em_ctf_correction: The em_ctf_correction of this CoreEntry.  # noqa: E501
        :type: list[EmCtfCorrection]
        """

        self._em_ctf_correction = em_ctf_correction

    @property
    def em_diffraction(self):
        """Gets the em_diffraction of this CoreEntry.  # noqa: E501


        :return: The em_diffraction of this CoreEntry.  # noqa: E501
        :rtype: list[EmDiffraction]
        """
        return self._em_diffraction

    @em_diffraction.setter
    def em_diffraction(self, em_diffraction):
        """Sets the em_diffraction of this CoreEntry.


        :param em_diffraction: The em_diffraction of this CoreEntry.  # noqa: E501
        :type: list[EmDiffraction]
        """

        self._em_diffraction = em_diffraction

    @property
    def em_diffraction_shell(self):
        """Gets the em_diffraction_shell of this CoreEntry.  # noqa: E501


        :return: The em_diffraction_shell of this CoreEntry.  # noqa: E501
        :rtype: list[EmDiffractionShell]
        """
        return self._em_diffraction_shell

    @em_diffraction_shell.setter
    def em_diffraction_shell(self, em_diffraction_shell):
        """Sets the em_diffraction_shell of this CoreEntry.


        :param em_diffraction_shell: The em_diffraction_shell of this CoreEntry.  # noqa: E501
        :type: list[EmDiffractionShell]
        """

        self._em_diffraction_shell = em_diffraction_shell

    @property
    def em_diffraction_stats(self):
        """Gets the em_diffraction_stats of this CoreEntry.  # noqa: E501


        :return: The em_diffraction_stats of this CoreEntry.  # noqa: E501
        :rtype: list[EmDiffractionStats]
        """
        return self._em_diffraction_stats

    @em_diffraction_stats.setter
    def em_diffraction_stats(self, em_diffraction_stats):
        """Sets the em_diffraction_stats of this CoreEntry.


        :param em_diffraction_stats: The em_diffraction_stats of this CoreEntry.  # noqa: E501
        :type: list[EmDiffractionStats]
        """

        self._em_diffraction_stats = em_diffraction_stats

    @property
    def em_embedding(self):
        """Gets the em_embedding of this CoreEntry.  # noqa: E501


        :return: The em_embedding of this CoreEntry.  # noqa: E501
        :rtype: list[EmEmbedding]
        """
        return self._em_embedding

    @em_embedding.setter
    def em_embedding(self, em_embedding):
        """Sets the em_embedding of this CoreEntry.


        :param em_embedding: The em_embedding of this CoreEntry.  # noqa: E501
        :type: list[EmEmbedding]
        """

        self._em_embedding = em_embedding

    @property
    def em_entity_assembly(self):
        """Gets the em_entity_assembly of this CoreEntry.  # noqa: E501


        :return: The em_entity_assembly of this CoreEntry.  # noqa: E501
        :rtype: list[EmEntityAssembly]
        """
        return self._em_entity_assembly

    @em_entity_assembly.setter
    def em_entity_assembly(self, em_entity_assembly):
        """Sets the em_entity_assembly of this CoreEntry.


        :param em_entity_assembly: The em_entity_assembly of this CoreEntry.  # noqa: E501
        :type: list[EmEntityAssembly]
        """

        self._em_entity_assembly = em_entity_assembly

    @property
    def em_experiment(self):
        """Gets the em_experiment of this CoreEntry.  # noqa: E501


        :return: The em_experiment of this CoreEntry.  # noqa: E501
        :rtype: EmExperiment
        """
        return self._em_experiment

    @em_experiment.setter
    def em_experiment(self, em_experiment):
        """Sets the em_experiment of this CoreEntry.


        :param em_experiment: The em_experiment of this CoreEntry.  # noqa: E501
        :type: EmExperiment
        """

        self._em_experiment = em_experiment

    @property
    def em_helical_entity(self):
        """Gets the em_helical_entity of this CoreEntry.  # noqa: E501


        :return: The em_helical_entity of this CoreEntry.  # noqa: E501
        :rtype: list[EmHelicalEntity]
        """
        return self._em_helical_entity

    @em_helical_entity.setter
    def em_helical_entity(self, em_helical_entity):
        """Sets the em_helical_entity of this CoreEntry.


        :param em_helical_entity: The em_helical_entity of this CoreEntry.  # noqa: E501
        :type: list[EmHelicalEntity]
        """

        self._em_helical_entity = em_helical_entity

    @property
    def em_image_recording(self):
        """Gets the em_image_recording of this CoreEntry.  # noqa: E501


        :return: The em_image_recording of this CoreEntry.  # noqa: E501
        :rtype: list[EmImageRecording]
        """
        return self._em_image_recording

    @em_image_recording.setter
    def em_image_recording(self, em_image_recording):
        """Sets the em_image_recording of this CoreEntry.


        :param em_image_recording: The em_image_recording of this CoreEntry.  # noqa: E501
        :type: list[EmImageRecording]
        """

        self._em_image_recording = em_image_recording

    @property
    def em_imaging(self):
        """Gets the em_imaging of this CoreEntry.  # noqa: E501


        :return: The em_imaging of this CoreEntry.  # noqa: E501
        :rtype: list[EmImaging]
        """
        return self._em_imaging

    @em_imaging.setter
    def em_imaging(self, em_imaging):
        """Sets the em_imaging of this CoreEntry.


        :param em_imaging: The em_imaging of this CoreEntry.  # noqa: E501
        :type: list[EmImaging]
        """

        self._em_imaging = em_imaging

    @property
    def em_particle_selection(self):
        """Gets the em_particle_selection of this CoreEntry.  # noqa: E501


        :return: The em_particle_selection of this CoreEntry.  # noqa: E501
        :rtype: list[EmParticleSelection]
        """
        return self._em_particle_selection

    @em_particle_selection.setter
    def em_particle_selection(self, em_particle_selection):
        """Sets the em_particle_selection of this CoreEntry.


        :param em_particle_selection: The em_particle_selection of this CoreEntry.  # noqa: E501
        :type: list[EmParticleSelection]
        """

        self._em_particle_selection = em_particle_selection

    @property
    def em_single_particle_entity(self):
        """Gets the em_single_particle_entity of this CoreEntry.  # noqa: E501


        :return: The em_single_particle_entity of this CoreEntry.  # noqa: E501
        :rtype: list[EmSingleParticleEntity]
        """
        return self._em_single_particle_entity

    @em_single_particle_entity.setter
    def em_single_particle_entity(self, em_single_particle_entity):
        """Sets the em_single_particle_entity of this CoreEntry.


        :param em_single_particle_entity: The em_single_particle_entity of this CoreEntry.  # noqa: E501
        :type: list[EmSingleParticleEntity]
        """

        self._em_single_particle_entity = em_single_particle_entity

    @property
    def em_software(self):
        """Gets the em_software of this CoreEntry.  # noqa: E501


        :return: The em_software of this CoreEntry.  # noqa: E501
        :rtype: list[EmSoftware]
        """
        return self._em_software

    @em_software.setter
    def em_software(self, em_software):
        """Sets the em_software of this CoreEntry.


        :param em_software: The em_software of this CoreEntry.  # noqa: E501
        :type: list[EmSoftware]
        """

        self._em_software = em_software

    @property
    def em_specimen(self):
        """Gets the em_specimen of this CoreEntry.  # noqa: E501


        :return: The em_specimen of this CoreEntry.  # noqa: E501
        :rtype: list[EmSpecimen]
        """
        return self._em_specimen

    @em_specimen.setter
    def em_specimen(self, em_specimen):
        """Sets the em_specimen of this CoreEntry.


        :param em_specimen: The em_specimen of this CoreEntry.  # noqa: E501
        :type: list[EmSpecimen]
        """

        self._em_specimen = em_specimen

    @property
    def em_staining(self):
        """Gets the em_staining of this CoreEntry.  # noqa: E501


        :return: The em_staining of this CoreEntry.  # noqa: E501
        :rtype: list[EmStaining]
        """
        return self._em_staining

    @em_staining.setter
    def em_staining(self, em_staining):
        """Sets the em_staining of this CoreEntry.


        :param em_staining: The em_staining of this CoreEntry.  # noqa: E501
        :type: list[EmStaining]
        """

        self._em_staining = em_staining

    @property
    def em_vitrification(self):
        """Gets the em_vitrification of this CoreEntry.  # noqa: E501


        :return: The em_vitrification of this CoreEntry.  # noqa: E501
        :rtype: list[EmVitrification]
        """
        return self._em_vitrification

    @em_vitrification.setter
    def em_vitrification(self, em_vitrification):
        """Sets the em_vitrification of this CoreEntry.


        :param em_vitrification: The em_vitrification of this CoreEntry.  # noqa: E501
        :type: list[EmVitrification]
        """

        self._em_vitrification = em_vitrification

    @property
    def entry(self):
        """Gets the entry of this CoreEntry.  # noqa: E501


        :return: The entry of this CoreEntry.  # noqa: E501
        :rtype: Entry
        """
        return self._entry

    @entry.setter
    def entry(self, entry):
        """Sets the entry of this CoreEntry.


        :param entry: The entry of this CoreEntry.  # noqa: E501
        :type: Entry
        """

        self._entry = entry

    @property
    def exptl(self):
        """Gets the exptl of this CoreEntry.  # noqa: E501


        :return: The exptl of this CoreEntry.  # noqa: E501
        :rtype: list[Exptl]
        """
        return self._exptl

    @exptl.setter
    def exptl(self, exptl):
        """Sets the exptl of this CoreEntry.


        :param exptl: The exptl of this CoreEntry.  # noqa: E501
        :type: list[Exptl]
        """

        self._exptl = exptl

    @property
    def exptl_crystal(self):
        """Gets the exptl_crystal of this CoreEntry.  # noqa: E501


        :return: The exptl_crystal of this CoreEntry.  # noqa: E501
        :rtype: list[ExptlCrystal]
        """
        return self._exptl_crystal

    @exptl_crystal.setter
    def exptl_crystal(self, exptl_crystal):
        """Sets the exptl_crystal of this CoreEntry.


        :param exptl_crystal: The exptl_crystal of this CoreEntry.  # noqa: E501
        :type: list[ExptlCrystal]
        """

        self._exptl_crystal = exptl_crystal

    @property
    def exptl_crystal_grow(self):
        """Gets the exptl_crystal_grow of this CoreEntry.  # noqa: E501


        :return: The exptl_crystal_grow of this CoreEntry.  # noqa: E501
        :rtype: list[ExptlCrystalGrow]
        """
        return self._exptl_crystal_grow

    @exptl_crystal_grow.setter
    def exptl_crystal_grow(self, exptl_crystal_grow):
        """Sets the exptl_crystal_grow of this CoreEntry.


        :param exptl_crystal_grow: The exptl_crystal_grow of this CoreEntry.  # noqa: E501
        :type: list[ExptlCrystalGrow]
        """

        self._exptl_crystal_grow = exptl_crystal_grow

    @property
    def ma_data(self):
        """Gets the ma_data of this CoreEntry.  # noqa: E501


        :return: The ma_data of this CoreEntry.  # noqa: E501
        :rtype: list[MaData]
        """
        return self._ma_data

    @ma_data.setter
    def ma_data(self, ma_data):
        """Sets the ma_data of this CoreEntry.


        :param ma_data: The ma_data of this CoreEntry.  # noqa: E501
        :type: list[MaData]
        """

        self._ma_data = ma_data

    @property
    def pdbx_sg_project(self):
        """Gets the pdbx_sg_project of this CoreEntry.  # noqa: E501


        :return: The pdbx_sg_project of this CoreEntry.  # noqa: E501
        :rtype: list[PdbxSGProject]
        """
        return self._pdbx_sg_project

    @pdbx_sg_project.setter
    def pdbx_sg_project(self, pdbx_sg_project):
        """Sets the pdbx_sg_project of this CoreEntry.


        :param pdbx_sg_project: The pdbx_sg_project of this CoreEntry.  # noqa: E501
        :type: list[PdbxSGProject]
        """

        self._pdbx_sg_project = pdbx_sg_project

    @property
    def pdbx_audit_revision_category(self):
        """Gets the pdbx_audit_revision_category of this CoreEntry.  # noqa: E501


        :return: The pdbx_audit_revision_category of this CoreEntry.  # noqa: E501
        :rtype: list[PdbxAuditRevisionCategory]
        """
        return self._pdbx_audit_revision_category

    @pdbx_audit_revision_category.setter
    def pdbx_audit_revision_category(self, pdbx_audit_revision_category):
        """Sets the pdbx_audit_revision_category of this CoreEntry.


        :param pdbx_audit_revision_category: The pdbx_audit_revision_category of this CoreEntry.  # noqa: E501
        :type: list[PdbxAuditRevisionCategory]
        """

        self._pdbx_audit_revision_category = pdbx_audit_revision_category

    @property
    def pdbx_audit_revision_details(self):
        """Gets the pdbx_audit_revision_details of this CoreEntry.  # noqa: E501


        :return: The pdbx_audit_revision_details of this CoreEntry.  # noqa: E501
        :rtype: list[PdbxAuditRevisionDetails]
        """
        return self._pdbx_audit_revision_details

    @pdbx_audit_revision_details.setter
    def pdbx_audit_revision_details(self, pdbx_audit_revision_details):
        """Sets the pdbx_audit_revision_details of this CoreEntry.


        :param pdbx_audit_revision_details: The pdbx_audit_revision_details of this CoreEntry.  # noqa: E501
        :type: list[PdbxAuditRevisionDetails]
        """

        self._pdbx_audit_revision_details = pdbx_audit_revision_details

    @property
    def pdbx_audit_revision_group(self):
        """Gets the pdbx_audit_revision_group of this CoreEntry.  # noqa: E501


        :return: The pdbx_audit_revision_group of this CoreEntry.  # noqa: E501
        :rtype: list[PdbxAuditRevisionGroup]
        """
        return self._pdbx_audit_revision_group

    @pdbx_audit_revision_group.setter
    def pdbx_audit_revision_group(self, pdbx_audit_revision_group):
        """Sets the pdbx_audit_revision_group of this CoreEntry.


        :param pdbx_audit_revision_group: The pdbx_audit_revision_group of this CoreEntry.  # noqa: E501
        :type: list[PdbxAuditRevisionGroup]
        """

        self._pdbx_audit_revision_group = pdbx_audit_revision_group

    @property
    def pdbx_audit_revision_history(self):
        """Gets the pdbx_audit_revision_history of this CoreEntry.  # noqa: E501


        :return: The pdbx_audit_revision_history of this CoreEntry.  # noqa: E501
        :rtype: list[PdbxAuditRevisionHistory]
        """
        return self._pdbx_audit_revision_history

    @pdbx_audit_revision_history.setter
    def pdbx_audit_revision_history(self, pdbx_audit_revision_history):
        """Sets the pdbx_audit_revision_history of this CoreEntry.


        :param pdbx_audit_revision_history: The pdbx_audit_revision_history of this CoreEntry.  # noqa: E501
        :type: list[PdbxAuditRevisionHistory]
        """

        self._pdbx_audit_revision_history = pdbx_audit_revision_history

    @property
    def pdbx_audit_revision_item(self):
        """Gets the pdbx_audit_revision_item of this CoreEntry.  # noqa: E501


        :return: The pdbx_audit_revision_item of this CoreEntry.  # noqa: E501
        :rtype: list[PdbxAuditRevisionItem]
        """
        return self._pdbx_audit_revision_item

    @pdbx_audit_revision_item.setter
    def pdbx_audit_revision_item(self, pdbx_audit_revision_item):
        """Sets the pdbx_audit_revision_item of this CoreEntry.


        :param pdbx_audit_revision_item: The pdbx_audit_revision_item of this CoreEntry.  # noqa: E501
        :type: list[PdbxAuditRevisionItem]
        """

        self._pdbx_audit_revision_item = pdbx_audit_revision_item

    @property
    def pdbx_audit_support(self):
        """Gets the pdbx_audit_support of this CoreEntry.  # noqa: E501


        :return: The pdbx_audit_support of this CoreEntry.  # noqa: E501
        :rtype: list[PdbxAuditSupport]
        """
        return self._pdbx_audit_support

    @pdbx_audit_support.setter
    def pdbx_audit_support(self, pdbx_audit_support):
        """Sets the pdbx_audit_support of this CoreEntry.


        :param pdbx_audit_support: The pdbx_audit_support of this CoreEntry.  # noqa: E501
        :type: list[PdbxAuditSupport]
        """

        self._pdbx_audit_support = pdbx_audit_support

    @property
    def pdbx_database_pdb_obs_spr(self):
        """Gets the pdbx_database_pdb_obs_spr of this CoreEntry.  # noqa: E501


        :return: The pdbx_database_pdb_obs_spr of this CoreEntry.  # noqa: E501
        :rtype: list[PdbxDatabasePDBObsSpr]
        """
        return self._pdbx_database_pdb_obs_spr

    @pdbx_database_pdb_obs_spr.setter
    def pdbx_database_pdb_obs_spr(self, pdbx_database_pdb_obs_spr):
        """Sets the pdbx_database_pdb_obs_spr of this CoreEntry.


        :param pdbx_database_pdb_obs_spr: The pdbx_database_pdb_obs_spr of this CoreEntry.  # noqa: E501
        :type: list[PdbxDatabasePDBObsSpr]
        """

        self._pdbx_database_pdb_obs_spr = pdbx_database_pdb_obs_spr

    @property
    def pdbx_database_related(self):
        """Gets the pdbx_database_related of this CoreEntry.  # noqa: E501


        :return: The pdbx_database_related of this CoreEntry.  # noqa: E501
        :rtype: list[PdbxDatabaseRelated]
        """
        return self._pdbx_database_related

    @pdbx_database_related.setter
    def pdbx_database_related(self, pdbx_database_related):
        """Sets the pdbx_database_related of this CoreEntry.


        :param pdbx_database_related: The pdbx_database_related of this CoreEntry.  # noqa: E501
        :type: list[PdbxDatabaseRelated]
        """

        self._pdbx_database_related = pdbx_database_related

    @property
    def pdbx_database_status(self):
        """Gets the pdbx_database_status of this CoreEntry.  # noqa: E501


        :return: The pdbx_database_status of this CoreEntry.  # noqa: E501
        :rtype: PdbxDatabaseStatus
        """
        return self._pdbx_database_status

    @pdbx_database_status.setter
    def pdbx_database_status(self, pdbx_database_status):
        """Sets the pdbx_database_status of this CoreEntry.


        :param pdbx_database_status: The pdbx_database_status of this CoreEntry.  # noqa: E501
        :type: PdbxDatabaseStatus
        """

        self._pdbx_database_status = pdbx_database_status

    @property
    def pdbx_deposit_group(self):
        """Gets the pdbx_deposit_group of this CoreEntry.  # noqa: E501


        :return: The pdbx_deposit_group of this CoreEntry.  # noqa: E501
        :rtype: list[PdbxDepositGroup]
        """
        return self._pdbx_deposit_group

    @pdbx_deposit_group.setter
    def pdbx_deposit_group(self, pdbx_deposit_group):
        """Sets the pdbx_deposit_group of this CoreEntry.


        :param pdbx_deposit_group: The pdbx_deposit_group of this CoreEntry.  # noqa: E501
        :type: list[PdbxDepositGroup]
        """

        self._pdbx_deposit_group = pdbx_deposit_group

    @property
    def pdbx_molecule_features(self):
        """Gets the pdbx_molecule_features of this CoreEntry.  # noqa: E501


        :return: The pdbx_molecule_features of this CoreEntry.  # noqa: E501
        :rtype: list[PdbxMoleculeFeatures]
        """
        return self._pdbx_molecule_features

    @pdbx_molecule_features.setter
    def pdbx_molecule_features(self, pdbx_molecule_features):
        """Sets the pdbx_molecule_features of this CoreEntry.


        :param pdbx_molecule_features: The pdbx_molecule_features of this CoreEntry.  # noqa: E501
        :type: list[PdbxMoleculeFeatures]
        """

        self._pdbx_molecule_features = pdbx_molecule_features

    @property
    def pdbx_nmr_details(self):
        """Gets the pdbx_nmr_details of this CoreEntry.  # noqa: E501


        :return: The pdbx_nmr_details of this CoreEntry.  # noqa: E501
        :rtype: PdbxNmrDetails
        """
        return self._pdbx_nmr_details

    @pdbx_nmr_details.setter
    def pdbx_nmr_details(self, pdbx_nmr_details):
        """Sets the pdbx_nmr_details of this CoreEntry.


        :param pdbx_nmr_details: The pdbx_nmr_details of this CoreEntry.  # noqa: E501
        :type: PdbxNmrDetails
        """

        self._pdbx_nmr_details = pdbx_nmr_details

    @property
    def pdbx_nmr_ensemble(self):
        """Gets the pdbx_nmr_ensemble of this CoreEntry.  # noqa: E501


        :return: The pdbx_nmr_ensemble of this CoreEntry.  # noqa: E501
        :rtype: PdbxNmrEnsemble
        """
        return self._pdbx_nmr_ensemble

    @pdbx_nmr_ensemble.setter
    def pdbx_nmr_ensemble(self, pdbx_nmr_ensemble):
        """Sets the pdbx_nmr_ensemble of this CoreEntry.


        :param pdbx_nmr_ensemble: The pdbx_nmr_ensemble of this CoreEntry.  # noqa: E501
        :type: PdbxNmrEnsemble
        """

        self._pdbx_nmr_ensemble = pdbx_nmr_ensemble

    @property
    def pdbx_nmr_exptl(self):
        """Gets the pdbx_nmr_exptl of this CoreEntry.  # noqa: E501


        :return: The pdbx_nmr_exptl of this CoreEntry.  # noqa: E501
        :rtype: list[PdbxNmrExptl]
        """
        return self._pdbx_nmr_exptl

    @pdbx_nmr_exptl.setter
    def pdbx_nmr_exptl(self, pdbx_nmr_exptl):
        """Sets the pdbx_nmr_exptl of this CoreEntry.


        :param pdbx_nmr_exptl: The pdbx_nmr_exptl of this CoreEntry.  # noqa: E501
        :type: list[PdbxNmrExptl]
        """

        self._pdbx_nmr_exptl = pdbx_nmr_exptl

    @property
    def pdbx_nmr_exptl_sample_conditions(self):
        """Gets the pdbx_nmr_exptl_sample_conditions of this CoreEntry.  # noqa: E501


        :return: The pdbx_nmr_exptl_sample_conditions of this CoreEntry.  # noqa: E501
        :rtype: list[PdbxNmrExptlSampleConditions]
        """
        return self._pdbx_nmr_exptl_sample_conditions

    @pdbx_nmr_exptl_sample_conditions.setter
    def pdbx_nmr_exptl_sample_conditions(self, pdbx_nmr_exptl_sample_conditions):
        """Sets the pdbx_nmr_exptl_sample_conditions of this CoreEntry.


        :param pdbx_nmr_exptl_sample_conditions: The pdbx_nmr_exptl_sample_conditions of this CoreEntry.  # noqa: E501
        :type: list[PdbxNmrExptlSampleConditions]
        """

        self._pdbx_nmr_exptl_sample_conditions = pdbx_nmr_exptl_sample_conditions

    @property
    def pdbx_nmr_refine(self):
        """Gets the pdbx_nmr_refine of this CoreEntry.  # noqa: E501


        :return: The pdbx_nmr_refine of this CoreEntry.  # noqa: E501
        :rtype: list[PdbxNmrRefine]
        """
        return self._pdbx_nmr_refine

    @pdbx_nmr_refine.setter
    def pdbx_nmr_refine(self, pdbx_nmr_refine):
        """Sets the pdbx_nmr_refine of this CoreEntry.


        :param pdbx_nmr_refine: The pdbx_nmr_refine of this CoreEntry.  # noqa: E501
        :type: list[PdbxNmrRefine]
        """

        self._pdbx_nmr_refine = pdbx_nmr_refine

    @property
    def pdbx_nmr_representative(self):
        """Gets the pdbx_nmr_representative of this CoreEntry.  # noqa: E501


        :return: The pdbx_nmr_representative of this CoreEntry.  # noqa: E501
        :rtype: PdbxNmrRepresentative
        """
        return self._pdbx_nmr_representative

    @pdbx_nmr_representative.setter
    def pdbx_nmr_representative(self, pdbx_nmr_representative):
        """Sets the pdbx_nmr_representative of this CoreEntry.


        :param pdbx_nmr_representative: The pdbx_nmr_representative of this CoreEntry.  # noqa: E501
        :type: PdbxNmrRepresentative
        """

        self._pdbx_nmr_representative = pdbx_nmr_representative

    @property
    def pdbx_nmr_sample_details(self):
        """Gets the pdbx_nmr_sample_details of this CoreEntry.  # noqa: E501


        :return: The pdbx_nmr_sample_details of this CoreEntry.  # noqa: E501
        :rtype: list[PdbxNmrSampleDetails]
        """
        return self._pdbx_nmr_sample_details

    @pdbx_nmr_sample_details.setter
    def pdbx_nmr_sample_details(self, pdbx_nmr_sample_details):
        """Sets the pdbx_nmr_sample_details of this CoreEntry.


        :param pdbx_nmr_sample_details: The pdbx_nmr_sample_details of this CoreEntry.  # noqa: E501
        :type: list[PdbxNmrSampleDetails]
        """

        self._pdbx_nmr_sample_details = pdbx_nmr_sample_details

    @property
    def pdbx_nmr_software(self):
        """Gets the pdbx_nmr_software of this CoreEntry.  # noqa: E501


        :return: The pdbx_nmr_software of this CoreEntry.  # noqa: E501
        :rtype: list[PdbxNmrSoftware]
        """
        return self._pdbx_nmr_software

    @pdbx_nmr_software.setter
    def pdbx_nmr_software(self, pdbx_nmr_software):
        """Sets the pdbx_nmr_software of this CoreEntry.


        :param pdbx_nmr_software: The pdbx_nmr_software of this CoreEntry.  # noqa: E501
        :type: list[PdbxNmrSoftware]
        """

        self._pdbx_nmr_software = pdbx_nmr_software

    @property
    def pdbx_nmr_spectrometer(self):
        """Gets the pdbx_nmr_spectrometer of this CoreEntry.  # noqa: E501


        :return: The pdbx_nmr_spectrometer of this CoreEntry.  # noqa: E501
        :rtype: list[PdbxNmrSpectrometer]
        """
        return self._pdbx_nmr_spectrometer

    @pdbx_nmr_spectrometer.setter
    def pdbx_nmr_spectrometer(self, pdbx_nmr_spectrometer):
        """Sets the pdbx_nmr_spectrometer of this CoreEntry.


        :param pdbx_nmr_spectrometer: The pdbx_nmr_spectrometer of this CoreEntry.  # noqa: E501
        :type: list[PdbxNmrSpectrometer]
        """

        self._pdbx_nmr_spectrometer = pdbx_nmr_spectrometer

    @property
    def pdbx_reflns_twin(self):
        """Gets the pdbx_reflns_twin of this CoreEntry.  # noqa: E501


        :return: The pdbx_reflns_twin of this CoreEntry.  # noqa: E501
        :rtype: list[PdbxReflnsTwin]
        """
        return self._pdbx_reflns_twin

    @pdbx_reflns_twin.setter
    def pdbx_reflns_twin(self, pdbx_reflns_twin):
        """Sets the pdbx_reflns_twin of this CoreEntry.


        :param pdbx_reflns_twin: The pdbx_reflns_twin of this CoreEntry.  # noqa: E501
        :type: list[PdbxReflnsTwin]
        """

        self._pdbx_reflns_twin = pdbx_reflns_twin

    @property
    def pdbx_related_exp_data_set(self):
        """Gets the pdbx_related_exp_data_set of this CoreEntry.  # noqa: E501


        :return: The pdbx_related_exp_data_set of this CoreEntry.  # noqa: E501
        :rtype: list[PdbxRelatedExpDataSet]
        """
        return self._pdbx_related_exp_data_set

    @pdbx_related_exp_data_set.setter
    def pdbx_related_exp_data_set(self, pdbx_related_exp_data_set):
        """Sets the pdbx_related_exp_data_set of this CoreEntry.


        :param pdbx_related_exp_data_set: The pdbx_related_exp_data_set of this CoreEntry.  # noqa: E501
        :type: list[PdbxRelatedExpDataSet]
        """

        self._pdbx_related_exp_data_set = pdbx_related_exp_data_set

    @property
    def pdbx_serial_crystallography_data_reduction(self):
        """Gets the pdbx_serial_crystallography_data_reduction of this CoreEntry.  # noqa: E501


        :return: The pdbx_serial_crystallography_data_reduction of this CoreEntry.  # noqa: E501
        :rtype: list[PdbxSerialCrystallographyDataReduction]
        """
        return self._pdbx_serial_crystallography_data_reduction

    @pdbx_serial_crystallography_data_reduction.setter
    def pdbx_serial_crystallography_data_reduction(self, pdbx_serial_crystallography_data_reduction):
        """Sets the pdbx_serial_crystallography_data_reduction of this CoreEntry.


        :param pdbx_serial_crystallography_data_reduction: The pdbx_serial_crystallography_data_reduction of this CoreEntry.  # noqa: E501
        :type: list[PdbxSerialCrystallographyDataReduction]
        """

        self._pdbx_serial_crystallography_data_reduction = pdbx_serial_crystallography_data_reduction

    @property
    def pdbx_serial_crystallography_measurement(self):
        """Gets the pdbx_serial_crystallography_measurement of this CoreEntry.  # noqa: E501


        :return: The pdbx_serial_crystallography_measurement of this CoreEntry.  # noqa: E501
        :rtype: list[PdbxSerialCrystallographyMeasurement]
        """
        return self._pdbx_serial_crystallography_measurement

    @pdbx_serial_crystallography_measurement.setter
    def pdbx_serial_crystallography_measurement(self, pdbx_serial_crystallography_measurement):
        """Sets the pdbx_serial_crystallography_measurement of this CoreEntry.


        :param pdbx_serial_crystallography_measurement: The pdbx_serial_crystallography_measurement of this CoreEntry.  # noqa: E501
        :type: list[PdbxSerialCrystallographyMeasurement]
        """

        self._pdbx_serial_crystallography_measurement = pdbx_serial_crystallography_measurement

    @property
    def pdbx_serial_crystallography_sample_delivery(self):
        """Gets the pdbx_serial_crystallography_sample_delivery of this CoreEntry.  # noqa: E501


        :return: The pdbx_serial_crystallography_sample_delivery of this CoreEntry.  # noqa: E501
        :rtype: list[PdbxSerialCrystallographySampleDelivery]
        """
        return self._pdbx_serial_crystallography_sample_delivery

    @pdbx_serial_crystallography_sample_delivery.setter
    def pdbx_serial_crystallography_sample_delivery(self, pdbx_serial_crystallography_sample_delivery):
        """Sets the pdbx_serial_crystallography_sample_delivery of this CoreEntry.


        :param pdbx_serial_crystallography_sample_delivery: The pdbx_serial_crystallography_sample_delivery of this CoreEntry.  # noqa: E501
        :type: list[PdbxSerialCrystallographySampleDelivery]
        """

        self._pdbx_serial_crystallography_sample_delivery = pdbx_serial_crystallography_sample_delivery

    @property
    def pdbx_serial_crystallography_sample_delivery_fixed_target(self):
        """Gets the pdbx_serial_crystallography_sample_delivery_fixed_target of this CoreEntry.  # noqa: E501


        :return: The pdbx_serial_crystallography_sample_delivery_fixed_target of this CoreEntry.  # noqa: E501
        :rtype: list[PdbxSerialCrystallographySampleDeliveryFixedTarget]
        """
        return self._pdbx_serial_crystallography_sample_delivery_fixed_target

    @pdbx_serial_crystallography_sample_delivery_fixed_target.setter
    def pdbx_serial_crystallography_sample_delivery_fixed_target(self, pdbx_serial_crystallography_sample_delivery_fixed_target):
        """Sets the pdbx_serial_crystallography_sample_delivery_fixed_target of this CoreEntry.


        :param pdbx_serial_crystallography_sample_delivery_fixed_target: The pdbx_serial_crystallography_sample_delivery_fixed_target of this CoreEntry.  # noqa: E501
        :type: list[PdbxSerialCrystallographySampleDeliveryFixedTarget]
        """

        self._pdbx_serial_crystallography_sample_delivery_fixed_target = pdbx_serial_crystallography_sample_delivery_fixed_target

    @property
    def pdbx_serial_crystallography_sample_delivery_injection(self):
        """Gets the pdbx_serial_crystallography_sample_delivery_injection of this CoreEntry.  # noqa: E501


        :return: The pdbx_serial_crystallography_sample_delivery_injection of this CoreEntry.  # noqa: E501
        :rtype: list[PdbxSerialCrystallographySampleDeliveryInjection]
        """
        return self._pdbx_serial_crystallography_sample_delivery_injection

    @pdbx_serial_crystallography_sample_delivery_injection.setter
    def pdbx_serial_crystallography_sample_delivery_injection(self, pdbx_serial_crystallography_sample_delivery_injection):
        """Sets the pdbx_serial_crystallography_sample_delivery_injection of this CoreEntry.


        :param pdbx_serial_crystallography_sample_delivery_injection: The pdbx_serial_crystallography_sample_delivery_injection of this CoreEntry.  # noqa: E501
        :type: list[PdbxSerialCrystallographySampleDeliveryInjection]
        """

        self._pdbx_serial_crystallography_sample_delivery_injection = pdbx_serial_crystallography_sample_delivery_injection

    @property
    def pdbx_soln_scatter(self):
        """Gets the pdbx_soln_scatter of this CoreEntry.  # noqa: E501


        :return: The pdbx_soln_scatter of this CoreEntry.  # noqa: E501
        :rtype: list[PdbxSolnScatter]
        """
        return self._pdbx_soln_scatter

    @pdbx_soln_scatter.setter
    def pdbx_soln_scatter(self, pdbx_soln_scatter):
        """Sets the pdbx_soln_scatter of this CoreEntry.


        :param pdbx_soln_scatter: The pdbx_soln_scatter of this CoreEntry.  # noqa: E501
        :type: list[PdbxSolnScatter]
        """

        self._pdbx_soln_scatter = pdbx_soln_scatter

    @property
    def pdbx_soln_scatter_model(self):
        """Gets the pdbx_soln_scatter_model of this CoreEntry.  # noqa: E501


        :return: The pdbx_soln_scatter_model of this CoreEntry.  # noqa: E501
        :rtype: list[PdbxSolnScatterModel]
        """
        return self._pdbx_soln_scatter_model

    @pdbx_soln_scatter_model.setter
    def pdbx_soln_scatter_model(self, pdbx_soln_scatter_model):
        """Sets the pdbx_soln_scatter_model of this CoreEntry.


        :param pdbx_soln_scatter_model: The pdbx_soln_scatter_model of this CoreEntry.  # noqa: E501
        :type: list[PdbxSolnScatterModel]
        """

        self._pdbx_soln_scatter_model = pdbx_soln_scatter_model

    @property
    def pdbx_vrpt_summary(self):
        """Gets the pdbx_vrpt_summary of this CoreEntry.  # noqa: E501


        :return: The pdbx_vrpt_summary of this CoreEntry.  # noqa: E501
        :rtype: PdbxVrptSummary
        """
        return self._pdbx_vrpt_summary

    @pdbx_vrpt_summary.setter
    def pdbx_vrpt_summary(self, pdbx_vrpt_summary):
        """Sets the pdbx_vrpt_summary of this CoreEntry.


        :param pdbx_vrpt_summary: The pdbx_vrpt_summary of this CoreEntry.  # noqa: E501
        :type: PdbxVrptSummary
        """

        self._pdbx_vrpt_summary = pdbx_vrpt_summary

    @property
    def rcsb_accession_info(self):
        """Gets the rcsb_accession_info of this CoreEntry.  # noqa: E501


        :return: The rcsb_accession_info of this CoreEntry.  # noqa: E501
        :rtype: RcsbAccessionInfo
        """
        return self._rcsb_accession_info

    @rcsb_accession_info.setter
    def rcsb_accession_info(self, rcsb_accession_info):
        """Sets the rcsb_accession_info of this CoreEntry.


        :param rcsb_accession_info: The rcsb_accession_info of this CoreEntry.  # noqa: E501
        :type: RcsbAccessionInfo
        """

        self._rcsb_accession_info = rcsb_accession_info

    @property
    def rcsb_comp_model_provenance(self):
        """Gets the rcsb_comp_model_provenance of this CoreEntry.  # noqa: E501


        :return: The rcsb_comp_model_provenance of this CoreEntry.  # noqa: E501
        :rtype: RcsbCompModelProvenance
        """
        return self._rcsb_comp_model_provenance

    @rcsb_comp_model_provenance.setter
    def rcsb_comp_model_provenance(self, rcsb_comp_model_provenance):
        """Sets the rcsb_comp_model_provenance of this CoreEntry.


        :param rcsb_comp_model_provenance: The rcsb_comp_model_provenance of this CoreEntry.  # noqa: E501
        :type: RcsbCompModelProvenance
        """

        self._rcsb_comp_model_provenance = rcsb_comp_model_provenance

    @property
    def rcsb_entry_container_identifiers(self):
        """Gets the rcsb_entry_container_identifiers of this CoreEntry.  # noqa: E501


        :return: The rcsb_entry_container_identifiers of this CoreEntry.  # noqa: E501
        :rtype: RcsbEntryContainerIdentifiers
        """
        return self._rcsb_entry_container_identifiers

    @rcsb_entry_container_identifiers.setter
    def rcsb_entry_container_identifiers(self, rcsb_entry_container_identifiers):
        """Sets the rcsb_entry_container_identifiers of this CoreEntry.


        :param rcsb_entry_container_identifiers: The rcsb_entry_container_identifiers of this CoreEntry.  # noqa: E501
        :type: RcsbEntryContainerIdentifiers
        """
        if rcsb_entry_container_identifiers is None:
            raise ValueError("Invalid value for `rcsb_entry_container_identifiers`, must not be `None`")  # noqa: E501

        self._rcsb_entry_container_identifiers = rcsb_entry_container_identifiers

    @property
    def rcsb_entry_info(self):
        """Gets the rcsb_entry_info of this CoreEntry.  # noqa: E501


        :return: The rcsb_entry_info of this CoreEntry.  # noqa: E501
        :rtype: RcsbEntryInfo
        """
        return self._rcsb_entry_info

    @rcsb_entry_info.setter
    def rcsb_entry_info(self, rcsb_entry_info):
        """Sets the rcsb_entry_info of this CoreEntry.


        :param rcsb_entry_info: The rcsb_entry_info of this CoreEntry.  # noqa: E501
        :type: RcsbEntryInfo
        """
        if rcsb_entry_info is None:
            raise ValueError("Invalid value for `rcsb_entry_info`, must not be `None`")  # noqa: E501

        self._rcsb_entry_info = rcsb_entry_info

    @property
    def rcsb_ma_qa_metric_global(self):
        """Gets the rcsb_ma_qa_metric_global of this CoreEntry.  # noqa: E501


        :return: The rcsb_ma_qa_metric_global of this CoreEntry.  # noqa: E501
        :rtype: list[RcsbMaQaMetricGlobal]
        """
        return self._rcsb_ma_qa_metric_global

    @rcsb_ma_qa_metric_global.setter
    def rcsb_ma_qa_metric_global(self, rcsb_ma_qa_metric_global):
        """Sets the rcsb_ma_qa_metric_global of this CoreEntry.


        :param rcsb_ma_qa_metric_global: The rcsb_ma_qa_metric_global of this CoreEntry.  # noqa: E501
        :type: list[RcsbMaQaMetricGlobal]
        """

        self._rcsb_ma_qa_metric_global = rcsb_ma_qa_metric_global

    @property
    def rcsb_primary_citation(self):
        """Gets the rcsb_primary_citation of this CoreEntry.  # noqa: E501


        :return: The rcsb_primary_citation of this CoreEntry.  # noqa: E501
        :rtype: RcsbPrimaryCitation
        """
        return self._rcsb_primary_citation

    @rcsb_primary_citation.setter
    def rcsb_primary_citation(self, rcsb_primary_citation):
        """Sets the rcsb_primary_citation of this CoreEntry.


        :param rcsb_primary_citation: The rcsb_primary_citation of this CoreEntry.  # noqa: E501
        :type: RcsbPrimaryCitation
        """

        self._rcsb_primary_citation = rcsb_primary_citation

    @property
    def refine(self):
        """Gets the refine of this CoreEntry.  # noqa: E501


        :return: The refine of this CoreEntry.  # noqa: E501
        :rtype: list[Refine]
        """
        return self._refine

    @refine.setter
    def refine(self, refine):
        """Sets the refine of this CoreEntry.


        :param refine: The refine of this CoreEntry.  # noqa: E501
        :type: list[Refine]
        """

        self._refine = refine

    @property
    def refine_analyze(self):
        """Gets the refine_analyze of this CoreEntry.  # noqa: E501


        :return: The refine_analyze of this CoreEntry.  # noqa: E501
        :rtype: list[RefineAnalyze]
        """
        return self._refine_analyze

    @refine_analyze.setter
    def refine_analyze(self, refine_analyze):
        """Sets the refine_analyze of this CoreEntry.


        :param refine_analyze: The refine_analyze of this CoreEntry.  # noqa: E501
        :type: list[RefineAnalyze]
        """

        self._refine_analyze = refine_analyze

    @property
    def refine_hist(self):
        """Gets the refine_hist of this CoreEntry.  # noqa: E501


        :return: The refine_hist of this CoreEntry.  # noqa: E501
        :rtype: list[RefineHist]
        """
        return self._refine_hist

    @refine_hist.setter
    def refine_hist(self, refine_hist):
        """Sets the refine_hist of this CoreEntry.


        :param refine_hist: The refine_hist of this CoreEntry.  # noqa: E501
        :type: list[RefineHist]
        """

        self._refine_hist = refine_hist

    @property
    def refine_ls_restr(self):
        """Gets the refine_ls_restr of this CoreEntry.  # noqa: E501


        :return: The refine_ls_restr of this CoreEntry.  # noqa: E501
        :rtype: list[RefineLsRestr]
        """
        return self._refine_ls_restr

    @refine_ls_restr.setter
    def refine_ls_restr(self, refine_ls_restr):
        """Sets the refine_ls_restr of this CoreEntry.


        :param refine_ls_restr: The refine_ls_restr of this CoreEntry.  # noqa: E501
        :type: list[RefineLsRestr]
        """

        self._refine_ls_restr = refine_ls_restr

    @property
    def reflns(self):
        """Gets the reflns of this CoreEntry.  # noqa: E501


        :return: The reflns of this CoreEntry.  # noqa: E501
        :rtype: list[Reflns]
        """
        return self._reflns

    @reflns.setter
    def reflns(self, reflns):
        """Sets the reflns of this CoreEntry.


        :param reflns: The reflns of this CoreEntry.  # noqa: E501
        :type: list[Reflns]
        """

        self._reflns = reflns

    @property
    def reflns_shell(self):
        """Gets the reflns_shell of this CoreEntry.  # noqa: E501


        :return: The reflns_shell of this CoreEntry.  # noqa: E501
        :rtype: list[ReflnsShell]
        """
        return self._reflns_shell

    @reflns_shell.setter
    def reflns_shell(self, reflns_shell):
        """Sets the reflns_shell of this CoreEntry.


        :param reflns_shell: The reflns_shell of this CoreEntry.  # noqa: E501
        :type: list[ReflnsShell]
        """

        self._reflns_shell = reflns_shell

    @property
    def software(self):
        """Gets the software of this CoreEntry.  # noqa: E501


        :return: The software of this CoreEntry.  # noqa: E501
        :rtype: list[Software]
        """
        return self._software

    @software.setter
    def software(self, software):
        """Sets the software of this CoreEntry.


        :param software: The software of this CoreEntry.  # noqa: E501
        :type: list[Software]
        """

        self._software = software

    @property
    def struct(self):
        """Gets the struct of this CoreEntry.  # noqa: E501


        :return: The struct of this CoreEntry.  # noqa: E501
        :rtype: Struct
        """
        return self._struct

    @struct.setter
    def struct(self, struct):
        """Sets the struct of this CoreEntry.


        :param struct: The struct of this CoreEntry.  # noqa: E501
        :type: Struct
        """

        self._struct = struct

    @property
    def struct_keywords(self):
        """Gets the struct_keywords of this CoreEntry.  # noqa: E501


        :return: The struct_keywords of this CoreEntry.  # noqa: E501
        :rtype: StructKeywords
        """
        return self._struct_keywords

    @struct_keywords.setter
    def struct_keywords(self, struct_keywords):
        """Sets the struct_keywords of this CoreEntry.


        :param struct_keywords: The struct_keywords of this CoreEntry.  # noqa: E501
        :type: StructKeywords
        """

        self._struct_keywords = struct_keywords

    @property
    def symmetry(self):
        """Gets the symmetry of this CoreEntry.  # noqa: E501


        :return: The symmetry of this CoreEntry.  # noqa: E501
        :rtype: Symmetry
        """
        return self._symmetry

    @symmetry.setter
    def symmetry(self, symmetry):
        """Sets the symmetry of this CoreEntry.


        :param symmetry: The symmetry of this CoreEntry.  # noqa: E501
        :type: Symmetry
        """

        self._symmetry = symmetry

    @property
    def rcsb_id(self):
        """Gets the rcsb_id of this CoreEntry.  # noqa: E501

        A unique identifier for each object in this entry container.  # noqa: E501

        :return: The rcsb_id of this CoreEntry.  # noqa: E501
        :rtype: str
        """
        return self._rcsb_id

    @rcsb_id.setter
    def rcsb_id(self, rcsb_id):
        """Sets the rcsb_id of this CoreEntry.

        A unique identifier for each object in this entry container.  # noqa: E501

        :param rcsb_id: The rcsb_id of this CoreEntry.  # noqa: E501
        :type: str
        """
        if rcsb_id is None:
            raise ValueError("Invalid value for `rcsb_id`, must not be `None`")  # noqa: E501

        self._rcsb_id = rcsb_id

    @property
    def rcsb_entry_group_membership(self):
        """Gets the rcsb_entry_group_membership of this CoreEntry.  # noqa: E501


        :return: The rcsb_entry_group_membership of this CoreEntry.  # noqa: E501
        :rtype: list[RcsbEntryGroupMembership]
        """
        return self._rcsb_entry_group_membership

    @rcsb_entry_group_membership.setter
    def rcsb_entry_group_membership(self, rcsb_entry_group_membership):
        """Sets the rcsb_entry_group_membership of this CoreEntry.


        :param rcsb_entry_group_membership: The rcsb_entry_group_membership of this CoreEntry.  # noqa: E501
        :type: list[RcsbEntryGroupMembership]
        """

        self._rcsb_entry_group_membership = rcsb_entry_group_membership

    @property
    def rcsb_external_references(self):
        """Gets the rcsb_external_references of this CoreEntry.  # noqa: E501


        :return: The rcsb_external_references of this CoreEntry.  # noqa: E501
        :rtype: list[RcsbExternalReferences]
        """
        return self._rcsb_external_references

    @rcsb_external_references.setter
    def rcsb_external_references(self, rcsb_external_references):
        """Sets the rcsb_external_references of this CoreEntry.


        :param rcsb_external_references: The rcsb_external_references of this CoreEntry.  # noqa: E501
        :type: list[RcsbExternalReferences]
        """

        self._rcsb_external_references = rcsb_external_references

    @property
    def rcsb_binding_affinity(self):
        """Gets the rcsb_binding_affinity of this CoreEntry.  # noqa: E501


        :return: The rcsb_binding_affinity of this CoreEntry.  # noqa: E501
        :rtype: list[RcsbBindingAffinity]
        """
        return self._rcsb_binding_affinity

    @rcsb_binding_affinity.setter
    def rcsb_binding_affinity(self, rcsb_binding_affinity):
        """Sets the rcsb_binding_affinity of this CoreEntry.


        :param rcsb_binding_affinity: The rcsb_binding_affinity of this CoreEntry.  # noqa: E501
        :type: list[RcsbBindingAffinity]
        """

        self._rcsb_binding_affinity = rcsb_binding_affinity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoreEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoreEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
