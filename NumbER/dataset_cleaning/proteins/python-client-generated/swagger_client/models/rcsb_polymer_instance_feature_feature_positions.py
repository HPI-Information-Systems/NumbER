# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RcsbPolymerInstanceFeatureFeaturePositions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'beg_comp_id': 'str',
        'beg_seq_id': 'int',
        'end_seq_id': 'int',
        'value': 'float',
        'values': 'list[float]'
    }

    attribute_map = {
        'beg_comp_id': 'beg_comp_id',
        'beg_seq_id': 'beg_seq_id',
        'end_seq_id': 'end_seq_id',
        'value': 'value',
        'values': 'values'
    }

    def __init__(self, beg_comp_id=None, beg_seq_id=None, end_seq_id=None, value=None, values=None):  # noqa: E501
        """RcsbPolymerInstanceFeatureFeaturePositions - a model defined in Swagger"""  # noqa: E501
        self._beg_comp_id = None
        self._beg_seq_id = None
        self._end_seq_id = None
        self._value = None
        self._values = None
        self.discriminator = None
        if beg_comp_id is not None:
            self.beg_comp_id = beg_comp_id
        self.beg_seq_id = beg_seq_id
        if end_seq_id is not None:
            self.end_seq_id = end_seq_id
        if value is not None:
            self.value = value
        if values is not None:
            self.values = values

    @property
    def beg_comp_id(self):
        """Gets the beg_comp_id of this RcsbPolymerInstanceFeatureFeaturePositions.  # noqa: E501

        An identifier for the monomer(s) corresponding to the feature assignment.  # noqa: E501

        :return: The beg_comp_id of this RcsbPolymerInstanceFeatureFeaturePositions.  # noqa: E501
        :rtype: str
        """
        return self._beg_comp_id

    @beg_comp_id.setter
    def beg_comp_id(self, beg_comp_id):
        """Sets the beg_comp_id of this RcsbPolymerInstanceFeatureFeaturePositions.

        An identifier for the monomer(s) corresponding to the feature assignment.  # noqa: E501

        :param beg_comp_id: The beg_comp_id of this RcsbPolymerInstanceFeatureFeaturePositions.  # noqa: E501
        :type: str
        """

        self._beg_comp_id = beg_comp_id

    @property
    def beg_seq_id(self):
        """Gets the beg_seq_id of this RcsbPolymerInstanceFeatureFeaturePositions.  # noqa: E501

        An identifier for the monomer at which this segment of the feature begins.  # noqa: E501

        :return: The beg_seq_id of this RcsbPolymerInstanceFeatureFeaturePositions.  # noqa: E501
        :rtype: int
        """
        return self._beg_seq_id

    @beg_seq_id.setter
    def beg_seq_id(self, beg_seq_id):
        """Sets the beg_seq_id of this RcsbPolymerInstanceFeatureFeaturePositions.

        An identifier for the monomer at which this segment of the feature begins.  # noqa: E501

        :param beg_seq_id: The beg_seq_id of this RcsbPolymerInstanceFeatureFeaturePositions.  # noqa: E501
        :type: int
        """
        if beg_seq_id is None:
            raise ValueError("Invalid value for `beg_seq_id`, must not be `None`")  # noqa: E501

        self._beg_seq_id = beg_seq_id

    @property
    def end_seq_id(self):
        """Gets the end_seq_id of this RcsbPolymerInstanceFeatureFeaturePositions.  # noqa: E501

        An identifier for the monomer at which this segment of the feature ends.  # noqa: E501

        :return: The end_seq_id of this RcsbPolymerInstanceFeatureFeaturePositions.  # noqa: E501
        :rtype: int
        """
        return self._end_seq_id

    @end_seq_id.setter
    def end_seq_id(self, end_seq_id):
        """Sets the end_seq_id of this RcsbPolymerInstanceFeatureFeaturePositions.

        An identifier for the monomer at which this segment of the feature ends.  # noqa: E501

        :param end_seq_id: The end_seq_id of this RcsbPolymerInstanceFeatureFeaturePositions.  # noqa: E501
        :type: int
        """

        self._end_seq_id = end_seq_id

    @property
    def value(self):
        """Gets the value of this RcsbPolymerInstanceFeatureFeaturePositions.  # noqa: E501

        The value of the feature over the monomer segment.  # noqa: E501

        :return: The value of this RcsbPolymerInstanceFeatureFeaturePositions.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this RcsbPolymerInstanceFeatureFeaturePositions.

        The value of the feature over the monomer segment.  # noqa: E501

        :param value: The value of this RcsbPolymerInstanceFeatureFeaturePositions.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def values(self):
        """Gets the values of this RcsbPolymerInstanceFeatureFeaturePositions.  # noqa: E501

        The value(s) of the feature over the monomer segment.  # noqa: E501

        :return: The values of this RcsbPolymerInstanceFeatureFeaturePositions.  # noqa: E501
        :rtype: list[float]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this RcsbPolymerInstanceFeatureFeaturePositions.

        The value(s) of the feature over the monomer segment.  # noqa: E501

        :param values: The values of this RcsbPolymerInstanceFeatureFeaturePositions.  # noqa: E501
        :type: list[float]
        """

        self._values = values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RcsbPolymerInstanceFeatureFeaturePositions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RcsbPolymerInstanceFeatureFeaturePositions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
