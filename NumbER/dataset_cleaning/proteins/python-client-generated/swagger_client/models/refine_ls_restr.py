# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RefineLsRestr(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dev_ideal': 'float',
        'dev_ideal_target': 'float',
        'number': 'int',
        'pdbx_refine_id': 'str',
        'pdbx_restraint_function': 'str',
        'type': 'str',
        'weight': 'float'
    }

    attribute_map = {
        'dev_ideal': 'dev_ideal',
        'dev_ideal_target': 'dev_ideal_target',
        'number': 'number',
        'pdbx_refine_id': 'pdbx_refine_id',
        'pdbx_restraint_function': 'pdbx_restraint_function',
        'type': 'type',
        'weight': 'weight'
    }

    def __init__(self, dev_ideal=None, dev_ideal_target=None, number=None, pdbx_refine_id=None, pdbx_restraint_function=None, type=None, weight=None):  # noqa: E501
        """RefineLsRestr - a model defined in Swagger"""  # noqa: E501
        self._dev_ideal = None
        self._dev_ideal_target = None
        self._number = None
        self._pdbx_refine_id = None
        self._pdbx_restraint_function = None
        self._type = None
        self._weight = None
        self.discriminator = None
        if dev_ideal is not None:
            self.dev_ideal = dev_ideal
        if dev_ideal_target is not None:
            self.dev_ideal_target = dev_ideal_target
        if number is not None:
            self.number = number
        self.pdbx_refine_id = pdbx_refine_id
        if pdbx_restraint_function is not None:
            self.pdbx_restraint_function = pdbx_restraint_function
        self.type = type
        if weight is not None:
            self.weight = weight

    @property
    def dev_ideal(self):
        """Gets the dev_ideal of this RefineLsRestr.  # noqa: E501

        For the given parameter type, the root-mean-square deviation  between the ideal values used as restraints in the least-squares  refinement and the values obtained by refinement. For instance,  bond distances may deviate by 0.018 \\%A (r.m.s.) from ideal  values in the current model.  # noqa: E501

        :return: The dev_ideal of this RefineLsRestr.  # noqa: E501
        :rtype: float
        """
        return self._dev_ideal

    @dev_ideal.setter
    def dev_ideal(self, dev_ideal):
        """Sets the dev_ideal of this RefineLsRestr.

        For the given parameter type, the root-mean-square deviation  between the ideal values used as restraints in the least-squares  refinement and the values obtained by refinement. For instance,  bond distances may deviate by 0.018 \\%A (r.m.s.) from ideal  values in the current model.  # noqa: E501

        :param dev_ideal: The dev_ideal of this RefineLsRestr.  # noqa: E501
        :type: float
        """

        self._dev_ideal = dev_ideal

    @property
    def dev_ideal_target(self):
        """Gets the dev_ideal_target of this RefineLsRestr.  # noqa: E501

        For the given parameter type, the target root-mean-square  deviation between the ideal values used as restraints in the  least-squares refinement and the values obtained by refinement.  # noqa: E501

        :return: The dev_ideal_target of this RefineLsRestr.  # noqa: E501
        :rtype: float
        """
        return self._dev_ideal_target

    @dev_ideal_target.setter
    def dev_ideal_target(self, dev_ideal_target):
        """Sets the dev_ideal_target of this RefineLsRestr.

        For the given parameter type, the target root-mean-square  deviation between the ideal values used as restraints in the  least-squares refinement and the values obtained by refinement.  # noqa: E501

        :param dev_ideal_target: The dev_ideal_target of this RefineLsRestr.  # noqa: E501
        :type: float
        """

        self._dev_ideal_target = dev_ideal_target

    @property
    def number(self):
        """Gets the number of this RefineLsRestr.  # noqa: E501

        The number of parameters of this type subjected to restraint in  least-squares refinement.  # noqa: E501

        :return: The number of this RefineLsRestr.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this RefineLsRestr.

        The number of parameters of this type subjected to restraint in  least-squares refinement.  # noqa: E501

        :param number: The number of this RefineLsRestr.  # noqa: E501
        :type: int
        """

        self._number = number

    @property
    def pdbx_refine_id(self):
        """Gets the pdbx_refine_id of this RefineLsRestr.  # noqa: E501

        This data item uniquely identifies a refinement within an entry.  _refine_ls_restr.pdbx_refine_id can be used to distinguish the results  of joint refinements.  # noqa: E501

        :return: The pdbx_refine_id of this RefineLsRestr.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_refine_id

    @pdbx_refine_id.setter
    def pdbx_refine_id(self, pdbx_refine_id):
        """Sets the pdbx_refine_id of this RefineLsRestr.

        This data item uniquely identifies a refinement within an entry.  _refine_ls_restr.pdbx_refine_id can be used to distinguish the results  of joint refinements.  # noqa: E501

        :param pdbx_refine_id: The pdbx_refine_id of this RefineLsRestr.  # noqa: E501
        :type: str
        """
        if pdbx_refine_id is None:
            raise ValueError("Invalid value for `pdbx_refine_id`, must not be `None`")  # noqa: E501

        self._pdbx_refine_id = pdbx_refine_id

    @property
    def pdbx_restraint_function(self):
        """Gets the pdbx_restraint_function of this RefineLsRestr.  # noqa: E501

        The functional form of the restraint function used in the least-squares  refinement.  # noqa: E501

        :return: The pdbx_restraint_function of this RefineLsRestr.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_restraint_function

    @pdbx_restraint_function.setter
    def pdbx_restraint_function(self, pdbx_restraint_function):
        """Sets the pdbx_restraint_function of this RefineLsRestr.

        The functional form of the restraint function used in the least-squares  refinement.  # noqa: E501

        :param pdbx_restraint_function: The pdbx_restraint_function of this RefineLsRestr.  # noqa: E501
        :type: str
        """

        self._pdbx_restraint_function = pdbx_restraint_function

    @property
    def type(self):
        """Gets the type of this RefineLsRestr.  # noqa: E501

        The type of the parameter being restrained.  Explicit sets of data values are provided for the programs  PROTIN/PROLSQ (beginning with p_) and RESTRAIN (beginning with  RESTRAIN_). As computer programs change, these data values  are given as examples, not as an enumeration list. Computer  programs that convert a data block to a refinement table will  expect the exact form of the data values given here to be used.  # noqa: E501

        :return: The type of this RefineLsRestr.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RefineLsRestr.

        The type of the parameter being restrained.  Explicit sets of data values are provided for the programs  PROTIN/PROLSQ (beginning with p_) and RESTRAIN (beginning with  RESTRAIN_). As computer programs change, these data values  are given as examples, not as an enumeration list. Computer  programs that convert a data block to a refinement table will  expect the exact form of the data values given here to be used.  # noqa: E501

        :param type: The type of this RefineLsRestr.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def weight(self):
        """Gets the weight of this RefineLsRestr.  # noqa: E501

        The weighting value applied to this type of restraint in  the least-squares refinement.  # noqa: E501

        :return: The weight of this RefineLsRestr.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this RefineLsRestr.

        The weighting value applied to this type of restraint in  the least-squares refinement.  # noqa: E501

        :param weight: The weight of this RefineLsRestr.  # noqa: E501
        :type: float
        """

        self._weight = weight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RefineLsRestr, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RefineLsRestr):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
