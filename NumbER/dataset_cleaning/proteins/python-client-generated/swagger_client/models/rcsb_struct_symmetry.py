# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RcsbStructSymmetry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'str',
        'type': 'str',
        'stoichiometry': 'list[str]',
        'oligomeric_state': 'str',
        'clusters': 'list[RcsbStructSymmetryClusters]',
        'rotation_axes': 'list[RcsbStructSymmetryRotationAxes]',
        'kind': 'str'
    }

    attribute_map = {
        'symbol': 'symbol',
        'type': 'type',
        'stoichiometry': 'stoichiometry',
        'oligomeric_state': 'oligomeric_state',
        'clusters': 'clusters',
        'rotation_axes': 'rotation_axes',
        'kind': 'kind'
    }

    def __init__(self, symbol=None, type=None, stoichiometry=None, oligomeric_state=None, clusters=None, rotation_axes=None, kind=None):  # noqa: E501
        """RcsbStructSymmetry - a model defined in Swagger"""  # noqa: E501
        self._symbol = None
        self._type = None
        self._stoichiometry = None
        self._oligomeric_state = None
        self._clusters = None
        self._rotation_axes = None
        self._kind = None
        self.discriminator = None
        self.symbol = symbol
        self.type = type
        self.stoichiometry = stoichiometry
        self.oligomeric_state = oligomeric_state
        self.clusters = clusters
        if rotation_axes is not None:
            self.rotation_axes = rotation_axes
        self.kind = kind

    @property
    def symbol(self):
        """Gets the symbol of this RcsbStructSymmetry.  # noqa: E501

        Symmetry symbol refers to point group or helical symmetry of identical polymeric subunits in Sch�nflies notation. Contains point group symbol (e.g., C2, C5, D2, T, O, I) or H for helical symmetry.  # noqa: E501

        :return: The symbol of this RcsbStructSymmetry.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this RcsbStructSymmetry.

        Symmetry symbol refers to point group or helical symmetry of identical polymeric subunits in Sch�nflies notation. Contains point group symbol (e.g., C2, C5, D2, T, O, I) or H for helical symmetry.  # noqa: E501

        :param symbol: The symbol of this RcsbStructSymmetry.  # noqa: E501
        :type: str
        """
        if symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501

        self._symbol = symbol

    @property
    def type(self):
        """Gets the type of this RcsbStructSymmetry.  # noqa: E501

        Symmetry type refers to point group or helical symmetry of identical polymeric subunits. Contains point group types (e.g. Cyclic, Dihedral) or Helical for helical symmetry.  # noqa: E501

        :return: The type of this RcsbStructSymmetry.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RcsbStructSymmetry.

        Symmetry type refers to point group or helical symmetry of identical polymeric subunits. Contains point group types (e.g. Cyclic, Dihedral) or Helical for helical symmetry.  # noqa: E501

        :param type: The type of this RcsbStructSymmetry.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["Asymmetric", "Cyclic", "Dihedral", "Tetrahedral", "Octahedral", "Icosahedral", "Helical"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def stoichiometry(self):
        """Gets the stoichiometry of this RcsbStructSymmetry.  # noqa: E501

        Each type of different subunits is assigned a latter. The number of equivalent subunits is added as a coefficient after each letter (except 1 which is not added explicitly).  # noqa: E501

        :return: The stoichiometry of this RcsbStructSymmetry.  # noqa: E501
        :rtype: list[str]
        """
        return self._stoichiometry

    @stoichiometry.setter
    def stoichiometry(self, stoichiometry):
        """Sets the stoichiometry of this RcsbStructSymmetry.

        Each type of different subunits is assigned a latter. The number of equivalent subunits is added as a coefficient after each letter (except 1 which is not added explicitly).  # noqa: E501

        :param stoichiometry: The stoichiometry of this RcsbStructSymmetry.  # noqa: E501
        :type: list[str]
        """
        if stoichiometry is None:
            raise ValueError("Invalid value for `stoichiometry`, must not be `None`")  # noqa: E501

        self._stoichiometry = stoichiometry

    @property
    def oligomeric_state(self):
        """Gets the oligomeric_state of this RcsbStructSymmetry.  # noqa: E501

        Oligomeric state refers to a composition of polymeric subunits in quaternary structure. Quaternary structure may be composed either exclusively of several copies of identical subunits, in which case they are termed homo-oligomers, or alternatively by at least one copy of different subunits (hetero-oligomers). Quaternary structure composed of a single subunit is denoted as 'Monomer'.  # noqa: E501

        :return: The oligomeric_state of this RcsbStructSymmetry.  # noqa: E501
        :rtype: str
        """
        return self._oligomeric_state

    @oligomeric_state.setter
    def oligomeric_state(self, oligomeric_state):
        """Sets the oligomeric_state of this RcsbStructSymmetry.

        Oligomeric state refers to a composition of polymeric subunits in quaternary structure. Quaternary structure may be composed either exclusively of several copies of identical subunits, in which case they are termed homo-oligomers, or alternatively by at least one copy of different subunits (hetero-oligomers). Quaternary structure composed of a single subunit is denoted as 'Monomer'.  # noqa: E501

        :param oligomeric_state: The oligomeric_state of this RcsbStructSymmetry.  # noqa: E501
        :type: str
        """
        if oligomeric_state is None:
            raise ValueError("Invalid value for `oligomeric_state`, must not be `None`")  # noqa: E501

        self._oligomeric_state = oligomeric_state

    @property
    def clusters(self):
        """Gets the clusters of this RcsbStructSymmetry.  # noqa: E501


        :return: The clusters of this RcsbStructSymmetry.  # noqa: E501
        :rtype: list[RcsbStructSymmetryClusters]
        """
        return self._clusters

    @clusters.setter
    def clusters(self, clusters):
        """Sets the clusters of this RcsbStructSymmetry.


        :param clusters: The clusters of this RcsbStructSymmetry.  # noqa: E501
        :type: list[RcsbStructSymmetryClusters]
        """
        if clusters is None:
            raise ValueError("Invalid value for `clusters`, must not be `None`")  # noqa: E501

        self._clusters = clusters

    @property
    def rotation_axes(self):
        """Gets the rotation_axes of this RcsbStructSymmetry.  # noqa: E501

        The orientation of the principal rotation (symmetry) axis.  # noqa: E501

        :return: The rotation_axes of this RcsbStructSymmetry.  # noqa: E501
        :rtype: list[RcsbStructSymmetryRotationAxes]
        """
        return self._rotation_axes

    @rotation_axes.setter
    def rotation_axes(self, rotation_axes):
        """Sets the rotation_axes of this RcsbStructSymmetry.

        The orientation of the principal rotation (symmetry) axis.  # noqa: E501

        :param rotation_axes: The rotation_axes of this RcsbStructSymmetry.  # noqa: E501
        :type: list[RcsbStructSymmetryRotationAxes]
        """

        self._rotation_axes = rotation_axes

    @property
    def kind(self):
        """Gets the kind of this RcsbStructSymmetry.  # noqa: E501

        The granularity at which the symmetry calculation is performed. In 'Global Symmetry' all polymeric subunits in assembly are used. In 'Local Symmetry' only a subset of polymeric subunits is considered. In 'Pseudo Symmetry' the threshold for subunits similarity is relaxed.  # noqa: E501

        :return: The kind of this RcsbStructSymmetry.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this RcsbStructSymmetry.

        The granularity at which the symmetry calculation is performed. In 'Global Symmetry' all polymeric subunits in assembly are used. In 'Local Symmetry' only a subset of polymeric subunits is considered. In 'Pseudo Symmetry' the threshold for subunits similarity is relaxed.  # noqa: E501

        :param kind: The kind of this RcsbStructSymmetry.  # noqa: E501
        :type: str
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501
        allowed_values = ["Global Symmetry", "Pseudo Symmetry", "Local Symmetry"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"  # noqa: E501
                .format(kind, allowed_values)
            )

        self._kind = kind

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RcsbStructSymmetry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RcsbStructSymmetry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
