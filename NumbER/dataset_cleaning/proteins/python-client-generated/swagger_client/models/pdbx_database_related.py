# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PdbxDatabaseRelated(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content_type': 'str',
        'db_id': 'str',
        'db_name': 'str',
        'details': 'str'
    }

    attribute_map = {
        'content_type': 'content_type',
        'db_id': 'db_id',
        'db_name': 'db_name',
        'details': 'details'
    }

    def __init__(self, content_type=None, db_id=None, db_name=None, details=None):  # noqa: E501
        """PdbxDatabaseRelated - a model defined in Swagger"""  # noqa: E501
        self._content_type = None
        self._db_id = None
        self._db_name = None
        self._details = None
        self.discriminator = None
        self.content_type = content_type
        self.db_id = db_id
        self.db_name = db_name
        if details is not None:
            self.details = details

    @property
    def content_type(self):
        """Gets the content_type of this PdbxDatabaseRelated.  # noqa: E501

        The identifying content type of the related entry.  # noqa: E501

        :return: The content_type of this PdbxDatabaseRelated.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this PdbxDatabaseRelated.

        The identifying content type of the related entry.  # noqa: E501

        :param content_type: The content_type of this PdbxDatabaseRelated.  # noqa: E501
        :type: str
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")  # noqa: E501
        allowed_values = ["associated EM volume", "associated NMR restraints", "associated SAS data", "associated structure factors", "complete structure", "derivative structure", "ensemble", "minimized average structure", "native structure", "other", "other EM volume", "protein target sequence and/or protocol data", "re-refinement", "representative structure", "split", "unspecified"]  # noqa: E501
        if content_type not in allowed_values:
            raise ValueError(
                "Invalid value for `content_type` ({0}), must be one of {1}"  # noqa: E501
                .format(content_type, allowed_values)
            )

        self._content_type = content_type

    @property
    def db_id(self):
        """Gets the db_id of this PdbxDatabaseRelated.  # noqa: E501

        The identifying code in the related database.  # noqa: E501

        :return: The db_id of this PdbxDatabaseRelated.  # noqa: E501
        :rtype: str
        """
        return self._db_id

    @db_id.setter
    def db_id(self, db_id):
        """Sets the db_id of this PdbxDatabaseRelated.

        The identifying code in the related database.  # noqa: E501

        :param db_id: The db_id of this PdbxDatabaseRelated.  # noqa: E501
        :type: str
        """
        if db_id is None:
            raise ValueError("Invalid value for `db_id`, must not be `None`")  # noqa: E501

        self._db_id = db_id

    @property
    def db_name(self):
        """Gets the db_name of this PdbxDatabaseRelated.  # noqa: E501

        The name of the database containing the related entry.  # noqa: E501

        :return: The db_name of this PdbxDatabaseRelated.  # noqa: E501
        :rtype: str
        """
        return self._db_name

    @db_name.setter
    def db_name(self, db_name):
        """Sets the db_name of this PdbxDatabaseRelated.

        The name of the database containing the related entry.  # noqa: E501

        :param db_name: The db_name of this PdbxDatabaseRelated.  # noqa: E501
        :type: str
        """
        if db_name is None:
            raise ValueError("Invalid value for `db_name`, must not be `None`")  # noqa: E501

        self._db_name = db_name

    @property
    def details(self):
        """Gets the details of this PdbxDatabaseRelated.  # noqa: E501

        A description of the related entry.  # noqa: E501

        :return: The details of this PdbxDatabaseRelated.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this PdbxDatabaseRelated.

        A description of the related entry.  # noqa: E501

        :param details: The details of this PdbxDatabaseRelated.  # noqa: E501
        :type: str
        """

        self._details = details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PdbxDatabaseRelated, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdbxDatabaseRelated):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
