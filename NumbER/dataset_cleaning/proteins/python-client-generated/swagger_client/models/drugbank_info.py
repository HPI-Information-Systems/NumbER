# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DrugbankInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'affected_organisms': 'list[str]',
        'atc_codes': 'list[str]',
        'brand_names': 'list[str]',
        'cas_number': 'str',
        'description': 'str',
        'drug_categories': 'list[str]',
        'drug_groups': 'list[str]',
        'drugbank_id': 'str',
        'indication': 'str',
        'mechanism_of_action': 'str',
        'name': 'str',
        'pharmacology': 'str',
        'synonyms': 'list[str]'
    }

    attribute_map = {
        'affected_organisms': 'affected_organisms',
        'atc_codes': 'atc_codes',
        'brand_names': 'brand_names',
        'cas_number': 'cas_number',
        'description': 'description',
        'drug_categories': 'drug_categories',
        'drug_groups': 'drug_groups',
        'drugbank_id': 'drugbank_id',
        'indication': 'indication',
        'mechanism_of_action': 'mechanism_of_action',
        'name': 'name',
        'pharmacology': 'pharmacology',
        'synonyms': 'synonyms'
    }

    def __init__(self, affected_organisms=None, atc_codes=None, brand_names=None, cas_number=None, description=None, drug_categories=None, drug_groups=None, drugbank_id=None, indication=None, mechanism_of_action=None, name=None, pharmacology=None, synonyms=None):  # noqa: E501
        """DrugbankInfo - a model defined in Swagger"""  # noqa: E501
        self._affected_organisms = None
        self._atc_codes = None
        self._brand_names = None
        self._cas_number = None
        self._description = None
        self._drug_categories = None
        self._drug_groups = None
        self._drugbank_id = None
        self._indication = None
        self._mechanism_of_action = None
        self._name = None
        self._pharmacology = None
        self._synonyms = None
        self.discriminator = None
        if affected_organisms is not None:
            self.affected_organisms = affected_organisms
        if atc_codes is not None:
            self.atc_codes = atc_codes
        if brand_names is not None:
            self.brand_names = brand_names
        if cas_number is not None:
            self.cas_number = cas_number
        if description is not None:
            self.description = description
        if drug_categories is not None:
            self.drug_categories = drug_categories
        if drug_groups is not None:
            self.drug_groups = drug_groups
        self.drugbank_id = drugbank_id
        if indication is not None:
            self.indication = indication
        if mechanism_of_action is not None:
            self.mechanism_of_action = mechanism_of_action
        if name is not None:
            self.name = name
        if pharmacology is not None:
            self.pharmacology = pharmacology
        if synonyms is not None:
            self.synonyms = synonyms

    @property
    def affected_organisms(self):
        """Gets the affected_organisms of this DrugbankInfo.  # noqa: E501

        The DrugBank drug affected organisms.  # noqa: E501

        :return: The affected_organisms of this DrugbankInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._affected_organisms

    @affected_organisms.setter
    def affected_organisms(self, affected_organisms):
        """Sets the affected_organisms of this DrugbankInfo.

        The DrugBank drug affected organisms.  # noqa: E501

        :param affected_organisms: The affected_organisms of this DrugbankInfo.  # noqa: E501
        :type: list[str]
        """

        self._affected_organisms = affected_organisms

    @property
    def atc_codes(self):
        """Gets the atc_codes of this DrugbankInfo.  # noqa: E501

        The Anatomical Therapeutic Chemical Classification System (ATC) codes.  # noqa: E501

        :return: The atc_codes of this DrugbankInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._atc_codes

    @atc_codes.setter
    def atc_codes(self, atc_codes):
        """Sets the atc_codes of this DrugbankInfo.

        The Anatomical Therapeutic Chemical Classification System (ATC) codes.  # noqa: E501

        :param atc_codes: The atc_codes of this DrugbankInfo.  # noqa: E501
        :type: list[str]
        """

        self._atc_codes = atc_codes

    @property
    def brand_names(self):
        """Gets the brand_names of this DrugbankInfo.  # noqa: E501

        DrugBank drug brand names.  # noqa: E501

        :return: The brand_names of this DrugbankInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._brand_names

    @brand_names.setter
    def brand_names(self, brand_names):
        """Sets the brand_names of this DrugbankInfo.

        DrugBank drug brand names.  # noqa: E501

        :param brand_names: The brand_names of this DrugbankInfo.  # noqa: E501
        :type: list[str]
        """

        self._brand_names = brand_names

    @property
    def cas_number(self):
        """Gets the cas_number of this DrugbankInfo.  # noqa: E501

        The DrugBank assigned Chemical Abstracts Service identifier.  # noqa: E501

        :return: The cas_number of this DrugbankInfo.  # noqa: E501
        :rtype: str
        """
        return self._cas_number

    @cas_number.setter
    def cas_number(self, cas_number):
        """Sets the cas_number of this DrugbankInfo.

        The DrugBank assigned Chemical Abstracts Service identifier.  # noqa: E501

        :param cas_number: The cas_number of this DrugbankInfo.  # noqa: E501
        :type: str
        """

        self._cas_number = cas_number

    @property
    def description(self):
        """Gets the description of this DrugbankInfo.  # noqa: E501

        The DrugBank drug description.  # noqa: E501

        :return: The description of this DrugbankInfo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DrugbankInfo.

        The DrugBank drug description.  # noqa: E501

        :param description: The description of this DrugbankInfo.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def drug_categories(self):
        """Gets the drug_categories of this DrugbankInfo.  # noqa: E501

        The DrugBank drug categories.  # noqa: E501

        :return: The drug_categories of this DrugbankInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._drug_categories

    @drug_categories.setter
    def drug_categories(self, drug_categories):
        """Sets the drug_categories of this DrugbankInfo.

        The DrugBank drug categories.  # noqa: E501

        :param drug_categories: The drug_categories of this DrugbankInfo.  # noqa: E501
        :type: list[str]
        """

        self._drug_categories = drug_categories

    @property
    def drug_groups(self):
        """Gets the drug_groups of this DrugbankInfo.  # noqa: E501

        The DrugBank drug drug groups.  # noqa: E501

        :return: The drug_groups of this DrugbankInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._drug_groups

    @drug_groups.setter
    def drug_groups(self, drug_groups):
        """Sets the drug_groups of this DrugbankInfo.

        The DrugBank drug drug groups.  # noqa: E501

        :param drug_groups: The drug_groups of this DrugbankInfo.  # noqa: E501
        :type: list[str]
        """

        self._drug_groups = drug_groups

    @property
    def drugbank_id(self):
        """Gets the drugbank_id of this DrugbankInfo.  # noqa: E501

        The DrugBank accession code  # noqa: E501

        :return: The drugbank_id of this DrugbankInfo.  # noqa: E501
        :rtype: str
        """
        return self._drugbank_id

    @drugbank_id.setter
    def drugbank_id(self, drugbank_id):
        """Sets the drugbank_id of this DrugbankInfo.

        The DrugBank accession code  # noqa: E501

        :param drugbank_id: The drugbank_id of this DrugbankInfo.  # noqa: E501
        :type: str
        """
        if drugbank_id is None:
            raise ValueError("Invalid value for `drugbank_id`, must not be `None`")  # noqa: E501

        self._drugbank_id = drugbank_id

    @property
    def indication(self):
        """Gets the indication of this DrugbankInfo.  # noqa: E501

        The DrugBank drug indication.  # noqa: E501

        :return: The indication of this DrugbankInfo.  # noqa: E501
        :rtype: str
        """
        return self._indication

    @indication.setter
    def indication(self, indication):
        """Sets the indication of this DrugbankInfo.

        The DrugBank drug indication.  # noqa: E501

        :param indication: The indication of this DrugbankInfo.  # noqa: E501
        :type: str
        """

        self._indication = indication

    @property
    def mechanism_of_action(self):
        """Gets the mechanism_of_action of this DrugbankInfo.  # noqa: E501

        The DrugBank drug mechanism of actions.  # noqa: E501

        :return: The mechanism_of_action of this DrugbankInfo.  # noqa: E501
        :rtype: str
        """
        return self._mechanism_of_action

    @mechanism_of_action.setter
    def mechanism_of_action(self, mechanism_of_action):
        """Sets the mechanism_of_action of this DrugbankInfo.

        The DrugBank drug mechanism of actions.  # noqa: E501

        :param mechanism_of_action: The mechanism_of_action of this DrugbankInfo.  # noqa: E501
        :type: str
        """

        self._mechanism_of_action = mechanism_of_action

    @property
    def name(self):
        """Gets the name of this DrugbankInfo.  # noqa: E501

        The DrugBank drug name.  # noqa: E501

        :return: The name of this DrugbankInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DrugbankInfo.

        The DrugBank drug name.  # noqa: E501

        :param name: The name of this DrugbankInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def pharmacology(self):
        """Gets the pharmacology of this DrugbankInfo.  # noqa: E501

        The DrugBank drug pharmacology.  # noqa: E501

        :return: The pharmacology of this DrugbankInfo.  # noqa: E501
        :rtype: str
        """
        return self._pharmacology

    @pharmacology.setter
    def pharmacology(self, pharmacology):
        """Sets the pharmacology of this DrugbankInfo.

        The DrugBank drug pharmacology.  # noqa: E501

        :param pharmacology: The pharmacology of this DrugbankInfo.  # noqa: E501
        :type: str
        """

        self._pharmacology = pharmacology

    @property
    def synonyms(self):
        """Gets the synonyms of this DrugbankInfo.  # noqa: E501

        DrugBank drug name synonyms.  # noqa: E501

        :return: The synonyms of this DrugbankInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._synonyms

    @synonyms.setter
    def synonyms(self, synonyms):
        """Sets the synonyms of this DrugbankInfo.

        DrugBank drug name synonyms.  # noqa: E501

        :param synonyms: The synonyms of this DrugbankInfo.  # noqa: E501
        :type: list[str]
        """

        self._synonyms = synonyms

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DrugbankInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DrugbankInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
