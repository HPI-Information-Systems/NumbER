# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PdbxReferenceEntityPoly(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'db_code': 'str',
        'db_name': 'str',
        'prd_id': 'str',
        'ref_entity_id': 'str',
        'type': 'str'
    }

    attribute_map = {
        'db_code': 'db_code',
        'db_name': 'db_name',
        'prd_id': 'prd_id',
        'ref_entity_id': 'ref_entity_id',
        'type': 'type'
    }

    def __init__(self, db_code=None, db_name=None, prd_id=None, ref_entity_id=None, type=None):  # noqa: E501
        """PdbxReferenceEntityPoly - a model defined in Swagger"""  # noqa: E501
        self._db_code = None
        self._db_name = None
        self._prd_id = None
        self._ref_entity_id = None
        self._type = None
        self.discriminator = None
        if db_code is not None:
            self.db_code = db_code
        if db_name is not None:
            self.db_name = db_name
        self.prd_id = prd_id
        self.ref_entity_id = ref_entity_id
        if type is not None:
            self.type = type

    @property
    def db_code(self):
        """Gets the db_code of this PdbxReferenceEntityPoly.  # noqa: E501

        The database code for this source information  # noqa: E501

        :return: The db_code of this PdbxReferenceEntityPoly.  # noqa: E501
        :rtype: str
        """
        return self._db_code

    @db_code.setter
    def db_code(self, db_code):
        """Sets the db_code of this PdbxReferenceEntityPoly.

        The database code for this source information  # noqa: E501

        :param db_code: The db_code of this PdbxReferenceEntityPoly.  # noqa: E501
        :type: str
        """

        self._db_code = db_code

    @property
    def db_name(self):
        """Gets the db_name of this PdbxReferenceEntityPoly.  # noqa: E501

        The database name for this source information  # noqa: E501

        :return: The db_name of this PdbxReferenceEntityPoly.  # noqa: E501
        :rtype: str
        """
        return self._db_name

    @db_name.setter
    def db_name(self, db_name):
        """Sets the db_name of this PdbxReferenceEntityPoly.

        The database name for this source information  # noqa: E501

        :param db_name: The db_name of this PdbxReferenceEntityPoly.  # noqa: E501
        :type: str
        """

        self._db_name = db_name

    @property
    def prd_id(self):
        """Gets the prd_id of this PdbxReferenceEntityPoly.  # noqa: E501

        The value of _pdbx_reference_entity_poly.prd_id is a reference         _pdbx_reference_entity_list.prd_id in the  PDBX_REFERENCE_ENTITY_LIST category.  # noqa: E501

        :return: The prd_id of this PdbxReferenceEntityPoly.  # noqa: E501
        :rtype: str
        """
        return self._prd_id

    @prd_id.setter
    def prd_id(self, prd_id):
        """Sets the prd_id of this PdbxReferenceEntityPoly.

        The value of _pdbx_reference_entity_poly.prd_id is a reference         _pdbx_reference_entity_list.prd_id in the  PDBX_REFERENCE_ENTITY_LIST category.  # noqa: E501

        :param prd_id: The prd_id of this PdbxReferenceEntityPoly.  # noqa: E501
        :type: str
        """
        if prd_id is None:
            raise ValueError("Invalid value for `prd_id`, must not be `None`")  # noqa: E501

        self._prd_id = prd_id

    @property
    def ref_entity_id(self):
        """Gets the ref_entity_id of this PdbxReferenceEntityPoly.  # noqa: E501

        The value of _pdbx_reference_entity_poly.ref_entity_id is a reference  to _pdbx_reference_entity_list.ref_entity_id in PDBX_REFERENCE_ENTITY_LIST category.  # noqa: E501

        :return: The ref_entity_id of this PdbxReferenceEntityPoly.  # noqa: E501
        :rtype: str
        """
        return self._ref_entity_id

    @ref_entity_id.setter
    def ref_entity_id(self, ref_entity_id):
        """Sets the ref_entity_id of this PdbxReferenceEntityPoly.

        The value of _pdbx_reference_entity_poly.ref_entity_id is a reference  to _pdbx_reference_entity_list.ref_entity_id in PDBX_REFERENCE_ENTITY_LIST category.  # noqa: E501

        :param ref_entity_id: The ref_entity_id of this PdbxReferenceEntityPoly.  # noqa: E501
        :type: str
        """
        if ref_entity_id is None:
            raise ValueError("Invalid value for `ref_entity_id`, must not be `None`")  # noqa: E501

        self._ref_entity_id = ref_entity_id

    @property
    def type(self):
        """Gets the type of this PdbxReferenceEntityPoly.  # noqa: E501

        The type of the polymer.  # noqa: E501

        :return: The type of this PdbxReferenceEntityPoly.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PdbxReferenceEntityPoly.

        The type of the polymer.  # noqa: E501

        :param type: The type of this PdbxReferenceEntityPoly.  # noqa: E501
        :type: str
        """
        allowed_values = ["nucleic-acid-like", "oligosaccharide", "peptide-like", "polysaccharide-like"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PdbxReferenceEntityPoly, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdbxReferenceEntityPoly):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
