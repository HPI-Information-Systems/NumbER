# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EmDiffraction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'camera_length': 'float',
        'id': 'str',
        'imaging_id': 'str',
        'tilt_angle_list': 'str'
    }

    attribute_map = {
        'camera_length': 'camera_length',
        'id': 'id',
        'imaging_id': 'imaging_id',
        'tilt_angle_list': 'tilt_angle_list'
    }

    def __init__(self, camera_length=None, id=None, imaging_id=None, tilt_angle_list=None):  # noqa: E501
        """EmDiffraction - a model defined in Swagger"""  # noqa: E501
        self._camera_length = None
        self._id = None
        self._imaging_id = None
        self._tilt_angle_list = None
        self.discriminator = None
        if camera_length is not None:
            self.camera_length = camera_length
        self.id = id
        if imaging_id is not None:
            self.imaging_id = imaging_id
        if tilt_angle_list is not None:
            self.tilt_angle_list = tilt_angle_list

    @property
    def camera_length(self):
        """Gets the camera_length of this EmDiffraction.  # noqa: E501

        The camera length (in millimeters). The camera length is the  product of the objective focal length and the combined magnification  of the intermediate and projector lenses when the microscope is  operated in the diffraction mode.  # noqa: E501

        :return: The camera_length of this EmDiffraction.  # noqa: E501
        :rtype: float
        """
        return self._camera_length

    @camera_length.setter
    def camera_length(self, camera_length):
        """Sets the camera_length of this EmDiffraction.

        The camera length (in millimeters). The camera length is the  product of the objective focal length and the combined magnification  of the intermediate and projector lenses when the microscope is  operated in the diffraction mode.  # noqa: E501

        :param camera_length: The camera_length of this EmDiffraction.  # noqa: E501
        :type: float
        """

        self._camera_length = camera_length

    @property
    def id(self):
        """Gets the id of this EmDiffraction.  # noqa: E501

        PRIMARY KEY  # noqa: E501

        :return: The id of this EmDiffraction.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EmDiffraction.

        PRIMARY KEY  # noqa: E501

        :param id: The id of this EmDiffraction.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def imaging_id(self):
        """Gets the imaging_id of this EmDiffraction.  # noqa: E501

        Foreign key to the EM_IMAGING category  # noqa: E501

        :return: The imaging_id of this EmDiffraction.  # noqa: E501
        :rtype: str
        """
        return self._imaging_id

    @imaging_id.setter
    def imaging_id(self, imaging_id):
        """Sets the imaging_id of this EmDiffraction.

        Foreign key to the EM_IMAGING category  # noqa: E501

        :param imaging_id: The imaging_id of this EmDiffraction.  # noqa: E501
        :type: str
        """

        self._imaging_id = imaging_id

    @property
    def tilt_angle_list(self):
        """Gets the tilt_angle_list of this EmDiffraction.  # noqa: E501

        Comma-separated list of tilt angles (in degrees) used in the electron diffraction experiment.  # noqa: E501

        :return: The tilt_angle_list of this EmDiffraction.  # noqa: E501
        :rtype: str
        """
        return self._tilt_angle_list

    @tilt_angle_list.setter
    def tilt_angle_list(self, tilt_angle_list):
        """Sets the tilt_angle_list of this EmDiffraction.

        Comma-separated list of tilt angles (in degrees) used in the electron diffraction experiment.  # noqa: E501

        :param tilt_angle_list: The tilt_angle_list of this EmDiffraction.  # noqa: E501
        :type: str
        """

        self._tilt_angle_list = tilt_angle_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmDiffraction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmDiffraction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
