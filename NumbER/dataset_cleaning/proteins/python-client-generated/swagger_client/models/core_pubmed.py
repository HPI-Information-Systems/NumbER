# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CorePubmed(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rcsb_id': 'str',
        'rcsb_pubmed_container_identifiers': 'RcsbPubmedContainerIdentifiers',
        'rcsb_pubmed_central_id': 'str',
        'rcsb_pubmed_doi': 'str',
        'rcsb_pubmed_abstract_text': 'str',
        'rcsb_pubmed_affiliation_info': 'list[str]',
        'rcsb_pubmed_mesh_descriptors': 'list[str]',
        'rcsb_pubmed_mesh_descriptors_lineage': 'list[RcsbPubmedMeshDescriptorsLineage]'
    }

    attribute_map = {
        'rcsb_id': 'rcsb_id',
        'rcsb_pubmed_container_identifiers': 'rcsb_pubmed_container_identifiers',
        'rcsb_pubmed_central_id': 'rcsb_pubmed_central_id',
        'rcsb_pubmed_doi': 'rcsb_pubmed_doi',
        'rcsb_pubmed_abstract_text': 'rcsb_pubmed_abstract_text',
        'rcsb_pubmed_affiliation_info': 'rcsb_pubmed_affiliation_info',
        'rcsb_pubmed_mesh_descriptors': 'rcsb_pubmed_mesh_descriptors',
        'rcsb_pubmed_mesh_descriptors_lineage': 'rcsb_pubmed_mesh_descriptors_lineage'
    }

    def __init__(self, rcsb_id=None, rcsb_pubmed_container_identifiers=None, rcsb_pubmed_central_id=None, rcsb_pubmed_doi=None, rcsb_pubmed_abstract_text=None, rcsb_pubmed_affiliation_info=None, rcsb_pubmed_mesh_descriptors=None, rcsb_pubmed_mesh_descriptors_lineage=None):  # noqa: E501
        """CorePubmed - a model defined in Swagger"""  # noqa: E501
        self._rcsb_id = None
        self._rcsb_pubmed_container_identifiers = None
        self._rcsb_pubmed_central_id = None
        self._rcsb_pubmed_doi = None
        self._rcsb_pubmed_abstract_text = None
        self._rcsb_pubmed_affiliation_info = None
        self._rcsb_pubmed_mesh_descriptors = None
        self._rcsb_pubmed_mesh_descriptors_lineage = None
        self.discriminator = None
        if rcsb_id is not None:
            self.rcsb_id = rcsb_id
        self.rcsb_pubmed_container_identifiers = rcsb_pubmed_container_identifiers
        if rcsb_pubmed_central_id is not None:
            self.rcsb_pubmed_central_id = rcsb_pubmed_central_id
        if rcsb_pubmed_doi is not None:
            self.rcsb_pubmed_doi = rcsb_pubmed_doi
        if rcsb_pubmed_abstract_text is not None:
            self.rcsb_pubmed_abstract_text = rcsb_pubmed_abstract_text
        if rcsb_pubmed_affiliation_info is not None:
            self.rcsb_pubmed_affiliation_info = rcsb_pubmed_affiliation_info
        if rcsb_pubmed_mesh_descriptors is not None:
            self.rcsb_pubmed_mesh_descriptors = rcsb_pubmed_mesh_descriptors
        if rcsb_pubmed_mesh_descriptors_lineage is not None:
            self.rcsb_pubmed_mesh_descriptors_lineage = rcsb_pubmed_mesh_descriptors_lineage

    @property
    def rcsb_id(self):
        """Gets the rcsb_id of this CorePubmed.  # noqa: E501

        Unique integer value assigned to each PubMed record.  # noqa: E501

        :return: The rcsb_id of this CorePubmed.  # noqa: E501
        :rtype: str
        """
        return self._rcsb_id

    @rcsb_id.setter
    def rcsb_id(self, rcsb_id):
        """Sets the rcsb_id of this CorePubmed.

        Unique integer value assigned to each PubMed record.  # noqa: E501

        :param rcsb_id: The rcsb_id of this CorePubmed.  # noqa: E501
        :type: str
        """

        self._rcsb_id = rcsb_id

    @property
    def rcsb_pubmed_container_identifiers(self):
        """Gets the rcsb_pubmed_container_identifiers of this CorePubmed.  # noqa: E501


        :return: The rcsb_pubmed_container_identifiers of this CorePubmed.  # noqa: E501
        :rtype: RcsbPubmedContainerIdentifiers
        """
        return self._rcsb_pubmed_container_identifiers

    @rcsb_pubmed_container_identifiers.setter
    def rcsb_pubmed_container_identifiers(self, rcsb_pubmed_container_identifiers):
        """Sets the rcsb_pubmed_container_identifiers of this CorePubmed.


        :param rcsb_pubmed_container_identifiers: The rcsb_pubmed_container_identifiers of this CorePubmed.  # noqa: E501
        :type: RcsbPubmedContainerIdentifiers
        """
        if rcsb_pubmed_container_identifiers is None:
            raise ValueError("Invalid value for `rcsb_pubmed_container_identifiers`, must not be `None`")  # noqa: E501

        self._rcsb_pubmed_container_identifiers = rcsb_pubmed_container_identifiers

    @property
    def rcsb_pubmed_central_id(self):
        """Gets the rcsb_pubmed_central_id of this CorePubmed.  # noqa: E501

        Unique integer value assigned to each PubMed Central record.  # noqa: E501

        :return: The rcsb_pubmed_central_id of this CorePubmed.  # noqa: E501
        :rtype: str
        """
        return self._rcsb_pubmed_central_id

    @rcsb_pubmed_central_id.setter
    def rcsb_pubmed_central_id(self, rcsb_pubmed_central_id):
        """Sets the rcsb_pubmed_central_id of this CorePubmed.

        Unique integer value assigned to each PubMed Central record.  # noqa: E501

        :param rcsb_pubmed_central_id: The rcsb_pubmed_central_id of this CorePubmed.  # noqa: E501
        :type: str
        """

        self._rcsb_pubmed_central_id = rcsb_pubmed_central_id

    @property
    def rcsb_pubmed_doi(self):
        """Gets the rcsb_pubmed_doi of this CorePubmed.  # noqa: E501

        Persistent identifier used to provide a link to an article location on the Internet.  # noqa: E501

        :return: The rcsb_pubmed_doi of this CorePubmed.  # noqa: E501
        :rtype: str
        """
        return self._rcsb_pubmed_doi

    @rcsb_pubmed_doi.setter
    def rcsb_pubmed_doi(self, rcsb_pubmed_doi):
        """Sets the rcsb_pubmed_doi of this CorePubmed.

        Persistent identifier used to provide a link to an article location on the Internet.  # noqa: E501

        :param rcsb_pubmed_doi: The rcsb_pubmed_doi of this CorePubmed.  # noqa: E501
        :type: str
        """

        self._rcsb_pubmed_doi = rcsb_pubmed_doi

    @property
    def rcsb_pubmed_abstract_text(self):
        """Gets the rcsb_pubmed_abstract_text of this CorePubmed.  # noqa: E501

        A concise, accurate and factual mini-version of the paper contents.  # noqa: E501

        :return: The rcsb_pubmed_abstract_text of this CorePubmed.  # noqa: E501
        :rtype: str
        """
        return self._rcsb_pubmed_abstract_text

    @rcsb_pubmed_abstract_text.setter
    def rcsb_pubmed_abstract_text(self, rcsb_pubmed_abstract_text):
        """Sets the rcsb_pubmed_abstract_text of this CorePubmed.

        A concise, accurate and factual mini-version of the paper contents.  # noqa: E501

        :param rcsb_pubmed_abstract_text: The rcsb_pubmed_abstract_text of this CorePubmed.  # noqa: E501
        :type: str
        """

        self._rcsb_pubmed_abstract_text = rcsb_pubmed_abstract_text

    @property
    def rcsb_pubmed_affiliation_info(self):
        """Gets the rcsb_pubmed_affiliation_info of this CorePubmed.  # noqa: E501


        :return: The rcsb_pubmed_affiliation_info of this CorePubmed.  # noqa: E501
        :rtype: list[str]
        """
        return self._rcsb_pubmed_affiliation_info

    @rcsb_pubmed_affiliation_info.setter
    def rcsb_pubmed_affiliation_info(self, rcsb_pubmed_affiliation_info):
        """Sets the rcsb_pubmed_affiliation_info of this CorePubmed.


        :param rcsb_pubmed_affiliation_info: The rcsb_pubmed_affiliation_info of this CorePubmed.  # noqa: E501
        :type: list[str]
        """

        self._rcsb_pubmed_affiliation_info = rcsb_pubmed_affiliation_info

    @property
    def rcsb_pubmed_mesh_descriptors(self):
        """Gets the rcsb_pubmed_mesh_descriptors of this CorePubmed.  # noqa: E501


        :return: The rcsb_pubmed_mesh_descriptors of this CorePubmed.  # noqa: E501
        :rtype: list[str]
        """
        return self._rcsb_pubmed_mesh_descriptors

    @rcsb_pubmed_mesh_descriptors.setter
    def rcsb_pubmed_mesh_descriptors(self, rcsb_pubmed_mesh_descriptors):
        """Sets the rcsb_pubmed_mesh_descriptors of this CorePubmed.


        :param rcsb_pubmed_mesh_descriptors: The rcsb_pubmed_mesh_descriptors of this CorePubmed.  # noqa: E501
        :type: list[str]
        """

        self._rcsb_pubmed_mesh_descriptors = rcsb_pubmed_mesh_descriptors

    @property
    def rcsb_pubmed_mesh_descriptors_lineage(self):
        """Gets the rcsb_pubmed_mesh_descriptors_lineage of this CorePubmed.  # noqa: E501


        :return: The rcsb_pubmed_mesh_descriptors_lineage of this CorePubmed.  # noqa: E501
        :rtype: list[RcsbPubmedMeshDescriptorsLineage]
        """
        return self._rcsb_pubmed_mesh_descriptors_lineage

    @rcsb_pubmed_mesh_descriptors_lineage.setter
    def rcsb_pubmed_mesh_descriptors_lineage(self, rcsb_pubmed_mesh_descriptors_lineage):
        """Sets the rcsb_pubmed_mesh_descriptors_lineage of this CorePubmed.


        :param rcsb_pubmed_mesh_descriptors_lineage: The rcsb_pubmed_mesh_descriptors_lineage of this CorePubmed.  # noqa: E501
        :type: list[RcsbPubmedMeshDescriptorsLineage]
        """

        self._rcsb_pubmed_mesh_descriptors_lineage = rcsb_pubmed_mesh_descriptors_lineage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CorePubmed, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CorePubmed):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
