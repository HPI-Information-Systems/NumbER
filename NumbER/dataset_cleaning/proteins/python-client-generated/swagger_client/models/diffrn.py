# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Diffrn(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ambient_pressure': 'float',
        'ambient_temp': 'float',
        'ambient_temp_details': 'str',
        'crystal_id': 'str',
        'crystal_support': 'str',
        'details': 'str',
        'id': 'str',
        'pdbx_serial_crystal_experiment': 'str'
    }

    attribute_map = {
        'ambient_pressure': 'ambient_pressure',
        'ambient_temp': 'ambient_temp',
        'ambient_temp_details': 'ambient_temp_details',
        'crystal_id': 'crystal_id',
        'crystal_support': 'crystal_support',
        'details': 'details',
        'id': 'id',
        'pdbx_serial_crystal_experiment': 'pdbx_serial_crystal_experiment'
    }

    def __init__(self, ambient_pressure=None, ambient_temp=None, ambient_temp_details=None, crystal_id=None, crystal_support=None, details=None, id=None, pdbx_serial_crystal_experiment=None):  # noqa: E501
        """Diffrn - a model defined in Swagger"""  # noqa: E501
        self._ambient_pressure = None
        self._ambient_temp = None
        self._ambient_temp_details = None
        self._crystal_id = None
        self._crystal_support = None
        self._details = None
        self._id = None
        self._pdbx_serial_crystal_experiment = None
        self.discriminator = None
        if ambient_pressure is not None:
            self.ambient_pressure = ambient_pressure
        if ambient_temp is not None:
            self.ambient_temp = ambient_temp
        if ambient_temp_details is not None:
            self.ambient_temp_details = ambient_temp_details
        if crystal_id is not None:
            self.crystal_id = crystal_id
        if crystal_support is not None:
            self.crystal_support = crystal_support
        if details is not None:
            self.details = details
        self.id = id
        if pdbx_serial_crystal_experiment is not None:
            self.pdbx_serial_crystal_experiment = pdbx_serial_crystal_experiment

    @property
    def ambient_pressure(self):
        """Gets the ambient_pressure of this Diffrn.  # noqa: E501

        The mean hydrostatic pressure in kilopascals at which the  intensities were measured.  # noqa: E501

        :return: The ambient_pressure of this Diffrn.  # noqa: E501
        :rtype: float
        """
        return self._ambient_pressure

    @ambient_pressure.setter
    def ambient_pressure(self, ambient_pressure):
        """Sets the ambient_pressure of this Diffrn.

        The mean hydrostatic pressure in kilopascals at which the  intensities were measured.  # noqa: E501

        :param ambient_pressure: The ambient_pressure of this Diffrn.  # noqa: E501
        :type: float
        """

        self._ambient_pressure = ambient_pressure

    @property
    def ambient_temp(self):
        """Gets the ambient_temp of this Diffrn.  # noqa: E501

        The mean temperature in kelvins at which the intensities were  measured.  # noqa: E501

        :return: The ambient_temp of this Diffrn.  # noqa: E501
        :rtype: float
        """
        return self._ambient_temp

    @ambient_temp.setter
    def ambient_temp(self, ambient_temp):
        """Sets the ambient_temp of this Diffrn.

        The mean temperature in kelvins at which the intensities were  measured.  # noqa: E501

        :param ambient_temp: The ambient_temp of this Diffrn.  # noqa: E501
        :type: float
        """

        self._ambient_temp = ambient_temp

    @property
    def ambient_temp_details(self):
        """Gets the ambient_temp_details of this Diffrn.  # noqa: E501

        A description of special aspects of temperature control during  data collection.  # noqa: E501

        :return: The ambient_temp_details of this Diffrn.  # noqa: E501
        :rtype: str
        """
        return self._ambient_temp_details

    @ambient_temp_details.setter
    def ambient_temp_details(self, ambient_temp_details):
        """Sets the ambient_temp_details of this Diffrn.

        A description of special aspects of temperature control during  data collection.  # noqa: E501

        :param ambient_temp_details: The ambient_temp_details of this Diffrn.  # noqa: E501
        :type: str
        """

        self._ambient_temp_details = ambient_temp_details

    @property
    def crystal_id(self):
        """Gets the crystal_id of this Diffrn.  # noqa: E501

        This data item is a pointer to _exptl_crystal.id in the  EXPTL_CRYSTAL category.  # noqa: E501

        :return: The crystal_id of this Diffrn.  # noqa: E501
        :rtype: str
        """
        return self._crystal_id

    @crystal_id.setter
    def crystal_id(self, crystal_id):
        """Sets the crystal_id of this Diffrn.

        This data item is a pointer to _exptl_crystal.id in the  EXPTL_CRYSTAL category.  # noqa: E501

        :param crystal_id: The crystal_id of this Diffrn.  # noqa: E501
        :type: str
        """

        self._crystal_id = crystal_id

    @property
    def crystal_support(self):
        """Gets the crystal_support of this Diffrn.  # noqa: E501

        The physical device used to support the crystal during data  collection.  # noqa: E501

        :return: The crystal_support of this Diffrn.  # noqa: E501
        :rtype: str
        """
        return self._crystal_support

    @crystal_support.setter
    def crystal_support(self, crystal_support):
        """Sets the crystal_support of this Diffrn.

        The physical device used to support the crystal during data  collection.  # noqa: E501

        :param crystal_support: The crystal_support of this Diffrn.  # noqa: E501
        :type: str
        """

        self._crystal_support = crystal_support

    @property
    def details(self):
        """Gets the details of this Diffrn.  # noqa: E501

        Special details of the diffraction measurement process. Should  include information about source instability, crystal motion,  degradation and so on.  # noqa: E501

        :return: The details of this Diffrn.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Diffrn.

        Special details of the diffraction measurement process. Should  include information about source instability, crystal motion,  degradation and so on.  # noqa: E501

        :param details: The details of this Diffrn.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def id(self):
        """Gets the id of this Diffrn.  # noqa: E501

        This data item uniquely identifies a set of diffraction  data.  # noqa: E501

        :return: The id of this Diffrn.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Diffrn.

        This data item uniquely identifies a set of diffraction  data.  # noqa: E501

        :param id: The id of this Diffrn.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def pdbx_serial_crystal_experiment(self):
        """Gets the pdbx_serial_crystal_experiment of this Diffrn.  # noqa: E501

        Y/N if using serial crystallography experiment in which multiple crystals contribute to each diffraction frame in the experiment.  # noqa: E501

        :return: The pdbx_serial_crystal_experiment of this Diffrn.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_serial_crystal_experiment

    @pdbx_serial_crystal_experiment.setter
    def pdbx_serial_crystal_experiment(self, pdbx_serial_crystal_experiment):
        """Sets the pdbx_serial_crystal_experiment of this Diffrn.

        Y/N if using serial crystallography experiment in which multiple crystals contribute to each diffraction frame in the experiment.  # noqa: E501

        :param pdbx_serial_crystal_experiment: The pdbx_serial_crystal_experiment of this Diffrn.  # noqa: E501
        :type: str
        """

        self._pdbx_serial_crystal_experiment = pdbx_serial_crystal_experiment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Diffrn, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Diffrn):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
