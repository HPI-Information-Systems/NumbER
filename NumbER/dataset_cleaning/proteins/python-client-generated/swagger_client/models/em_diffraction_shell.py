# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EmDiffractionShell(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'em_diffraction_stats_id': 'str',
        'fourier_space_coverage': 'float',
        'high_resolution': 'float',
        'id': 'str',
        'low_resolution': 'float',
        'multiplicity': 'float',
        'num_structure_factors': 'int',
        'phase_residual': 'float'
    }

    attribute_map = {
        'em_diffraction_stats_id': 'em_diffraction_stats_id',
        'fourier_space_coverage': 'fourier_space_coverage',
        'high_resolution': 'high_resolution',
        'id': 'id',
        'low_resolution': 'low_resolution',
        'multiplicity': 'multiplicity',
        'num_structure_factors': 'num_structure_factors',
        'phase_residual': 'phase_residual'
    }

    def __init__(self, em_diffraction_stats_id=None, fourier_space_coverage=None, high_resolution=None, id=None, low_resolution=None, multiplicity=None, num_structure_factors=None, phase_residual=None):  # noqa: E501
        """EmDiffractionShell - a model defined in Swagger"""  # noqa: E501
        self._em_diffraction_stats_id = None
        self._fourier_space_coverage = None
        self._high_resolution = None
        self._id = None
        self._low_resolution = None
        self._multiplicity = None
        self._num_structure_factors = None
        self._phase_residual = None
        self.discriminator = None
        if em_diffraction_stats_id is not None:
            self.em_diffraction_stats_id = em_diffraction_stats_id
        if fourier_space_coverage is not None:
            self.fourier_space_coverage = fourier_space_coverage
        if high_resolution is not None:
            self.high_resolution = high_resolution
        self.id = id
        if low_resolution is not None:
            self.low_resolution = low_resolution
        if multiplicity is not None:
            self.multiplicity = multiplicity
        if num_structure_factors is not None:
            self.num_structure_factors = num_structure_factors
        if phase_residual is not None:
            self.phase_residual = phase_residual

    @property
    def em_diffraction_stats_id(self):
        """Gets the em_diffraction_stats_id of this EmDiffractionShell.  # noqa: E501

        Pointer to EM CRYSTALLOGRAPHY STATS  # noqa: E501

        :return: The em_diffraction_stats_id of this EmDiffractionShell.  # noqa: E501
        :rtype: str
        """
        return self._em_diffraction_stats_id

    @em_diffraction_stats_id.setter
    def em_diffraction_stats_id(self, em_diffraction_stats_id):
        """Sets the em_diffraction_stats_id of this EmDiffractionShell.

        Pointer to EM CRYSTALLOGRAPHY STATS  # noqa: E501

        :param em_diffraction_stats_id: The em_diffraction_stats_id of this EmDiffractionShell.  # noqa: E501
        :type: str
        """

        self._em_diffraction_stats_id = em_diffraction_stats_id

    @property
    def fourier_space_coverage(self):
        """Gets the fourier_space_coverage of this EmDiffractionShell.  # noqa: E501

        Completeness of the structure factor data within this resolution shell, in percent  # noqa: E501

        :return: The fourier_space_coverage of this EmDiffractionShell.  # noqa: E501
        :rtype: float
        """
        return self._fourier_space_coverage

    @fourier_space_coverage.setter
    def fourier_space_coverage(self, fourier_space_coverage):
        """Sets the fourier_space_coverage of this EmDiffractionShell.

        Completeness of the structure factor data within this resolution shell, in percent  # noqa: E501

        :param fourier_space_coverage: The fourier_space_coverage of this EmDiffractionShell.  # noqa: E501
        :type: float
        """

        self._fourier_space_coverage = fourier_space_coverage

    @property
    def high_resolution(self):
        """Gets the high_resolution of this EmDiffractionShell.  # noqa: E501

        High resolution limit for this shell (angstroms)  # noqa: E501

        :return: The high_resolution of this EmDiffractionShell.  # noqa: E501
        :rtype: float
        """
        return self._high_resolution

    @high_resolution.setter
    def high_resolution(self, high_resolution):
        """Sets the high_resolution of this EmDiffractionShell.

        High resolution limit for this shell (angstroms)  # noqa: E501

        :param high_resolution: The high_resolution of this EmDiffractionShell.  # noqa: E501
        :type: float
        """

        self._high_resolution = high_resolution

    @property
    def id(self):
        """Gets the id of this EmDiffractionShell.  # noqa: E501

        PRIMARY KEY  # noqa: E501

        :return: The id of this EmDiffractionShell.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EmDiffractionShell.

        PRIMARY KEY  # noqa: E501

        :param id: The id of this EmDiffractionShell.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def low_resolution(self):
        """Gets the low_resolution of this EmDiffractionShell.  # noqa: E501

        Low resolution limit for this shell (angstroms)  # noqa: E501

        :return: The low_resolution of this EmDiffractionShell.  # noqa: E501
        :rtype: float
        """
        return self._low_resolution

    @low_resolution.setter
    def low_resolution(self, low_resolution):
        """Sets the low_resolution of this EmDiffractionShell.

        Low resolution limit for this shell (angstroms)  # noqa: E501

        :param low_resolution: The low_resolution of this EmDiffractionShell.  # noqa: E501
        :type: float
        """

        self._low_resolution = low_resolution

    @property
    def multiplicity(self):
        """Gets the multiplicity of this EmDiffractionShell.  # noqa: E501

        Multiplicity (average number of measurements) for the structure factors in this resolution shell  # noqa: E501

        :return: The multiplicity of this EmDiffractionShell.  # noqa: E501
        :rtype: float
        """
        return self._multiplicity

    @multiplicity.setter
    def multiplicity(self, multiplicity):
        """Sets the multiplicity of this EmDiffractionShell.

        Multiplicity (average number of measurements) for the structure factors in this resolution shell  # noqa: E501

        :param multiplicity: The multiplicity of this EmDiffractionShell.  # noqa: E501
        :type: float
        """

        self._multiplicity = multiplicity

    @property
    def num_structure_factors(self):
        """Gets the num_structure_factors of this EmDiffractionShell.  # noqa: E501

        Number of measured structure factors in this resolution shell  # noqa: E501

        :return: The num_structure_factors of this EmDiffractionShell.  # noqa: E501
        :rtype: int
        """
        return self._num_structure_factors

    @num_structure_factors.setter
    def num_structure_factors(self, num_structure_factors):
        """Sets the num_structure_factors of this EmDiffractionShell.

        Number of measured structure factors in this resolution shell  # noqa: E501

        :param num_structure_factors: The num_structure_factors of this EmDiffractionShell.  # noqa: E501
        :type: int
        """

        self._num_structure_factors = num_structure_factors

    @property
    def phase_residual(self):
        """Gets the phase_residual of this EmDiffractionShell.  # noqa: E501

        Phase residual for this resolution shell, in degrees  # noqa: E501

        :return: The phase_residual of this EmDiffractionShell.  # noqa: E501
        :rtype: float
        """
        return self._phase_residual

    @phase_residual.setter
    def phase_residual(self, phase_residual):
        """Sets the phase_residual of this EmDiffractionShell.

        Phase residual for this resolution shell, in degrees  # noqa: E501

        :param phase_residual: The phase_residual of this EmDiffractionShell.  # noqa: E501
        :type: float
        """

        self._phase_residual = phase_residual

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmDiffractionShell, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmDiffractionShell):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
