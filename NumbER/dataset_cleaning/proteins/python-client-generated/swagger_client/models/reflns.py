# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Reflns(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'b_iso_wilson_estimate': 'float',
        'r_free_details': 'str',
        'rmerge_f_all': 'float',
        'rmerge_f_obs': 'float',
        'd_resolution_high': 'float',
        'd_resolution_low': 'float',
        'data_reduction_details': 'str',
        'data_reduction_method': 'str',
        'details': 'str',
        'limit_h_max': 'int',
        'limit_h_min': 'int',
        'limit_k_max': 'int',
        'limit_k_min': 'int',
        'limit_l_max': 'int',
        'limit_l_min': 'int',
        'number_all': 'int',
        'number_obs': 'int',
        'observed_criterion': 'str',
        'observed_criterion_f_max': 'float',
        'observed_criterion_f_min': 'float',
        'observed_criterion_i_max': 'float',
        'observed_criterion_i_min': 'float',
        'observed_criterion_sigma_f': 'float',
        'observed_criterion_sigma_i': 'float',
        'pdbx_cc_half': 'float',
        'pdbx_r_split': 'float',
        'pdbx_rmerge_i_obs': 'float',
        'pdbx_rpim_i_all': 'float',
        'pdbx_rrim_i_all': 'float',
        'pdbx_rsym_value': 'float',
        'pdbx_chi_squared': 'float',
        'pdbx_diffrn_id': 'list[str]',
        'pdbx_net_i_over_av_sigma_i': 'float',
        'pdbx_net_i_over_sigma_i': 'float',
        'pdbx_number_measured_all': 'int',
        'pdbx_ordinal': 'int',
        'pdbx_redundancy': 'float',
        'pdbx_scaling_rejects': 'int',
        'percent_possible_obs': 'float',
        'phase_calculation_details': 'str'
    }

    attribute_map = {
        'b_iso_wilson_estimate': 'B_iso_Wilson_estimate',
        'r_free_details': 'R_free_details',
        'rmerge_f_all': 'Rmerge_F_all',
        'rmerge_f_obs': 'Rmerge_F_obs',
        'd_resolution_high': 'd_resolution_high',
        'd_resolution_low': 'd_resolution_low',
        'data_reduction_details': 'data_reduction_details',
        'data_reduction_method': 'data_reduction_method',
        'details': 'details',
        'limit_h_max': 'limit_h_max',
        'limit_h_min': 'limit_h_min',
        'limit_k_max': 'limit_k_max',
        'limit_k_min': 'limit_k_min',
        'limit_l_max': 'limit_l_max',
        'limit_l_min': 'limit_l_min',
        'number_all': 'number_all',
        'number_obs': 'number_obs',
        'observed_criterion': 'observed_criterion',
        'observed_criterion_f_max': 'observed_criterion_F_max',
        'observed_criterion_f_min': 'observed_criterion_F_min',
        'observed_criterion_i_max': 'observed_criterion_I_max',
        'observed_criterion_i_min': 'observed_criterion_I_min',
        'observed_criterion_sigma_f': 'observed_criterion_sigma_F',
        'observed_criterion_sigma_i': 'observed_criterion_sigma_I',
        'pdbx_cc_half': 'pdbx_CC_half',
        'pdbx_r_split': 'pdbx_R_split',
        'pdbx_rmerge_i_obs': 'pdbx_Rmerge_I_obs',
        'pdbx_rpim_i_all': 'pdbx_Rpim_I_all',
        'pdbx_rrim_i_all': 'pdbx_Rrim_I_all',
        'pdbx_rsym_value': 'pdbx_Rsym_value',
        'pdbx_chi_squared': 'pdbx_chi_squared',
        'pdbx_diffrn_id': 'pdbx_diffrn_id',
        'pdbx_net_i_over_av_sigma_i': 'pdbx_netI_over_av_sigmaI',
        'pdbx_net_i_over_sigma_i': 'pdbx_netI_over_sigmaI',
        'pdbx_number_measured_all': 'pdbx_number_measured_all',
        'pdbx_ordinal': 'pdbx_ordinal',
        'pdbx_redundancy': 'pdbx_redundancy',
        'pdbx_scaling_rejects': 'pdbx_scaling_rejects',
        'percent_possible_obs': 'percent_possible_obs',
        'phase_calculation_details': 'phase_calculation_details'
    }

    def __init__(self, b_iso_wilson_estimate=None, r_free_details=None, rmerge_f_all=None, rmerge_f_obs=None, d_resolution_high=None, d_resolution_low=None, data_reduction_details=None, data_reduction_method=None, details=None, limit_h_max=None, limit_h_min=None, limit_k_max=None, limit_k_min=None, limit_l_max=None, limit_l_min=None, number_all=None, number_obs=None, observed_criterion=None, observed_criterion_f_max=None, observed_criterion_f_min=None, observed_criterion_i_max=None, observed_criterion_i_min=None, observed_criterion_sigma_f=None, observed_criterion_sigma_i=None, pdbx_cc_half=None, pdbx_r_split=None, pdbx_rmerge_i_obs=None, pdbx_rpim_i_all=None, pdbx_rrim_i_all=None, pdbx_rsym_value=None, pdbx_chi_squared=None, pdbx_diffrn_id=None, pdbx_net_i_over_av_sigma_i=None, pdbx_net_i_over_sigma_i=None, pdbx_number_measured_all=None, pdbx_ordinal=None, pdbx_redundancy=None, pdbx_scaling_rejects=None, percent_possible_obs=None, phase_calculation_details=None):  # noqa: E501
        """Reflns - a model defined in Swagger"""  # noqa: E501
        self._b_iso_wilson_estimate = None
        self._r_free_details = None
        self._rmerge_f_all = None
        self._rmerge_f_obs = None
        self._d_resolution_high = None
        self._d_resolution_low = None
        self._data_reduction_details = None
        self._data_reduction_method = None
        self._details = None
        self._limit_h_max = None
        self._limit_h_min = None
        self._limit_k_max = None
        self._limit_k_min = None
        self._limit_l_max = None
        self._limit_l_min = None
        self._number_all = None
        self._number_obs = None
        self._observed_criterion = None
        self._observed_criterion_f_max = None
        self._observed_criterion_f_min = None
        self._observed_criterion_i_max = None
        self._observed_criterion_i_min = None
        self._observed_criterion_sigma_f = None
        self._observed_criterion_sigma_i = None
        self._pdbx_cc_half = None
        self._pdbx_r_split = None
        self._pdbx_rmerge_i_obs = None
        self._pdbx_rpim_i_all = None
        self._pdbx_rrim_i_all = None
        self._pdbx_rsym_value = None
        self._pdbx_chi_squared = None
        self._pdbx_diffrn_id = None
        self._pdbx_net_i_over_av_sigma_i = None
        self._pdbx_net_i_over_sigma_i = None
        self._pdbx_number_measured_all = None
        self._pdbx_ordinal = None
        self._pdbx_redundancy = None
        self._pdbx_scaling_rejects = None
        self._percent_possible_obs = None
        self._phase_calculation_details = None
        self.discriminator = None
        if b_iso_wilson_estimate is not None:
            self.b_iso_wilson_estimate = b_iso_wilson_estimate
        if r_free_details is not None:
            self.r_free_details = r_free_details
        if rmerge_f_all is not None:
            self.rmerge_f_all = rmerge_f_all
        if rmerge_f_obs is not None:
            self.rmerge_f_obs = rmerge_f_obs
        if d_resolution_high is not None:
            self.d_resolution_high = d_resolution_high
        if d_resolution_low is not None:
            self.d_resolution_low = d_resolution_low
        if data_reduction_details is not None:
            self.data_reduction_details = data_reduction_details
        if data_reduction_method is not None:
            self.data_reduction_method = data_reduction_method
        if details is not None:
            self.details = details
        if limit_h_max is not None:
            self.limit_h_max = limit_h_max
        if limit_h_min is not None:
            self.limit_h_min = limit_h_min
        if limit_k_max is not None:
            self.limit_k_max = limit_k_max
        if limit_k_min is not None:
            self.limit_k_min = limit_k_min
        if limit_l_max is not None:
            self.limit_l_max = limit_l_max
        if limit_l_min is not None:
            self.limit_l_min = limit_l_min
        if number_all is not None:
            self.number_all = number_all
        if number_obs is not None:
            self.number_obs = number_obs
        if observed_criterion is not None:
            self.observed_criterion = observed_criterion
        if observed_criterion_f_max is not None:
            self.observed_criterion_f_max = observed_criterion_f_max
        if observed_criterion_f_min is not None:
            self.observed_criterion_f_min = observed_criterion_f_min
        if observed_criterion_i_max is not None:
            self.observed_criterion_i_max = observed_criterion_i_max
        if observed_criterion_i_min is not None:
            self.observed_criterion_i_min = observed_criterion_i_min
        if observed_criterion_sigma_f is not None:
            self.observed_criterion_sigma_f = observed_criterion_sigma_f
        if observed_criterion_sigma_i is not None:
            self.observed_criterion_sigma_i = observed_criterion_sigma_i
        if pdbx_cc_half is not None:
            self.pdbx_cc_half = pdbx_cc_half
        if pdbx_r_split is not None:
            self.pdbx_r_split = pdbx_r_split
        if pdbx_rmerge_i_obs is not None:
            self.pdbx_rmerge_i_obs = pdbx_rmerge_i_obs
        if pdbx_rpim_i_all is not None:
            self.pdbx_rpim_i_all = pdbx_rpim_i_all
        if pdbx_rrim_i_all is not None:
            self.pdbx_rrim_i_all = pdbx_rrim_i_all
        if pdbx_rsym_value is not None:
            self.pdbx_rsym_value = pdbx_rsym_value
        if pdbx_chi_squared is not None:
            self.pdbx_chi_squared = pdbx_chi_squared
        if pdbx_diffrn_id is not None:
            self.pdbx_diffrn_id = pdbx_diffrn_id
        if pdbx_net_i_over_av_sigma_i is not None:
            self.pdbx_net_i_over_av_sigma_i = pdbx_net_i_over_av_sigma_i
        if pdbx_net_i_over_sigma_i is not None:
            self.pdbx_net_i_over_sigma_i = pdbx_net_i_over_sigma_i
        if pdbx_number_measured_all is not None:
            self.pdbx_number_measured_all = pdbx_number_measured_all
        self.pdbx_ordinal = pdbx_ordinal
        if pdbx_redundancy is not None:
            self.pdbx_redundancy = pdbx_redundancy
        if pdbx_scaling_rejects is not None:
            self.pdbx_scaling_rejects = pdbx_scaling_rejects
        if percent_possible_obs is not None:
            self.percent_possible_obs = percent_possible_obs
        if phase_calculation_details is not None:
            self.phase_calculation_details = phase_calculation_details

    @property
    def b_iso_wilson_estimate(self):
        """Gets the b_iso_wilson_estimate of this Reflns.  # noqa: E501

        The value of the overall isotropic displacement parameter  estimated from the slope of the Wilson plot.  # noqa: E501

        :return: The b_iso_wilson_estimate of this Reflns.  # noqa: E501
        :rtype: float
        """
        return self._b_iso_wilson_estimate

    @b_iso_wilson_estimate.setter
    def b_iso_wilson_estimate(self, b_iso_wilson_estimate):
        """Sets the b_iso_wilson_estimate of this Reflns.

        The value of the overall isotropic displacement parameter  estimated from the slope of the Wilson plot.  # noqa: E501

        :param b_iso_wilson_estimate: The b_iso_wilson_estimate of this Reflns.  # noqa: E501
        :type: float
        """

        self._b_iso_wilson_estimate = b_iso_wilson_estimate

    @property
    def r_free_details(self):
        """Gets the r_free_details of this Reflns.  # noqa: E501

        A description of the method by which a subset of reflections was  selected for exclusion from refinement so as to be used in the  calculation of a 'free' R factor.  # noqa: E501

        :return: The r_free_details of this Reflns.  # noqa: E501
        :rtype: str
        """
        return self._r_free_details

    @r_free_details.setter
    def r_free_details(self, r_free_details):
        """Sets the r_free_details of this Reflns.

        A description of the method by which a subset of reflections was  selected for exclusion from refinement so as to be used in the  calculation of a 'free' R factor.  # noqa: E501

        :param r_free_details: The r_free_details of this Reflns.  # noqa: E501
        :type: str
        """

        self._r_free_details = r_free_details

    @property
    def rmerge_f_all(self):
        """Gets the rmerge_f_all of this Reflns.  # noqa: E501

        Residual factor Rmerge for all reflections that satisfy the  resolution limits established by _reflns.d_resolution_high  and _reflns.d_resolution_low.               sum~i~(sum~j~|F~j~ - <F>|)  Rmerge(F) = --------------------------                   sum~i~(sum~j~<F>)   F~j~ = the amplitude of the jth observation of reflection i  <F>  = the mean of the amplitudes of all observations of         reflection i   sum~i~ is taken over all reflections  sum~j~ is taken over all observations of each reflection  # noqa: E501

        :return: The rmerge_f_all of this Reflns.  # noqa: E501
        :rtype: float
        """
        return self._rmerge_f_all

    @rmerge_f_all.setter
    def rmerge_f_all(self, rmerge_f_all):
        """Sets the rmerge_f_all of this Reflns.

        Residual factor Rmerge for all reflections that satisfy the  resolution limits established by _reflns.d_resolution_high  and _reflns.d_resolution_low.               sum~i~(sum~j~|F~j~ - <F>|)  Rmerge(F) = --------------------------                   sum~i~(sum~j~<F>)   F~j~ = the amplitude of the jth observation of reflection i  <F>  = the mean of the amplitudes of all observations of         reflection i   sum~i~ is taken over all reflections  sum~j~ is taken over all observations of each reflection  # noqa: E501

        :param rmerge_f_all: The rmerge_f_all of this Reflns.  # noqa: E501
        :type: float
        """

        self._rmerge_f_all = rmerge_f_all

    @property
    def rmerge_f_obs(self):
        """Gets the rmerge_f_obs of this Reflns.  # noqa: E501

        Residual factor Rmerge for reflections that satisfy the  resolution limits established by _reflns.d_resolution_high  and _reflns.d_resolution_low and the observation limit  established by _reflns.observed_criterion.               sum~i~(sum~j~|F~j~ - <F>|)  Rmerge(F) = --------------------------                   sum~i~(sum~j~<F>)   F~j~ = the amplitude of the jth observation of reflection i  <F>  = the mean of the amplitudes of all observations of         reflection i   sum~i~ is taken over all reflections  sum~j~ is taken over all observations of each reflection  # noqa: E501

        :return: The rmerge_f_obs of this Reflns.  # noqa: E501
        :rtype: float
        """
        return self._rmerge_f_obs

    @rmerge_f_obs.setter
    def rmerge_f_obs(self, rmerge_f_obs):
        """Sets the rmerge_f_obs of this Reflns.

        Residual factor Rmerge for reflections that satisfy the  resolution limits established by _reflns.d_resolution_high  and _reflns.d_resolution_low and the observation limit  established by _reflns.observed_criterion.               sum~i~(sum~j~|F~j~ - <F>|)  Rmerge(F) = --------------------------                   sum~i~(sum~j~<F>)   F~j~ = the amplitude of the jth observation of reflection i  <F>  = the mean of the amplitudes of all observations of         reflection i   sum~i~ is taken over all reflections  sum~j~ is taken over all observations of each reflection  # noqa: E501

        :param rmerge_f_obs: The rmerge_f_obs of this Reflns.  # noqa: E501
        :type: float
        """

        self._rmerge_f_obs = rmerge_f_obs

    @property
    def d_resolution_high(self):
        """Gets the d_resolution_high of this Reflns.  # noqa: E501

        The smallest value in angstroms for the interplanar spacings  for the reflection data. This is called the highest resolution.  # noqa: E501

        :return: The d_resolution_high of this Reflns.  # noqa: E501
        :rtype: float
        """
        return self._d_resolution_high

    @d_resolution_high.setter
    def d_resolution_high(self, d_resolution_high):
        """Sets the d_resolution_high of this Reflns.

        The smallest value in angstroms for the interplanar spacings  for the reflection data. This is called the highest resolution.  # noqa: E501

        :param d_resolution_high: The d_resolution_high of this Reflns.  # noqa: E501
        :type: float
        """

        self._d_resolution_high = d_resolution_high

    @property
    def d_resolution_low(self):
        """Gets the d_resolution_low of this Reflns.  # noqa: E501

        The largest value in angstroms for the interplanar spacings  for the reflection data. This is called the lowest resolution.  # noqa: E501

        :return: The d_resolution_low of this Reflns.  # noqa: E501
        :rtype: float
        """
        return self._d_resolution_low

    @d_resolution_low.setter
    def d_resolution_low(self, d_resolution_low):
        """Sets the d_resolution_low of this Reflns.

        The largest value in angstroms for the interplanar spacings  for the reflection data. This is called the lowest resolution.  # noqa: E501

        :param d_resolution_low: The d_resolution_low of this Reflns.  # noqa: E501
        :type: float
        """

        self._d_resolution_low = d_resolution_low

    @property
    def data_reduction_details(self):
        """Gets the data_reduction_details of this Reflns.  # noqa: E501

        A description of special aspects of the data-reduction  procedures.  # noqa: E501

        :return: The data_reduction_details of this Reflns.  # noqa: E501
        :rtype: str
        """
        return self._data_reduction_details

    @data_reduction_details.setter
    def data_reduction_details(self, data_reduction_details):
        """Sets the data_reduction_details of this Reflns.

        A description of special aspects of the data-reduction  procedures.  # noqa: E501

        :param data_reduction_details: The data_reduction_details of this Reflns.  # noqa: E501
        :type: str
        """

        self._data_reduction_details = data_reduction_details

    @property
    def data_reduction_method(self):
        """Gets the data_reduction_method of this Reflns.  # noqa: E501

        The method used for data reduction.   Note that this is not the computer program used, which is  described in the SOFTWARE category, but the method  itself.   This data item should be used to describe significant  methodological options used within the data-reduction programs.  # noqa: E501

        :return: The data_reduction_method of this Reflns.  # noqa: E501
        :rtype: str
        """
        return self._data_reduction_method

    @data_reduction_method.setter
    def data_reduction_method(self, data_reduction_method):
        """Sets the data_reduction_method of this Reflns.

        The method used for data reduction.   Note that this is not the computer program used, which is  described in the SOFTWARE category, but the method  itself.   This data item should be used to describe significant  methodological options used within the data-reduction programs.  # noqa: E501

        :param data_reduction_method: The data_reduction_method of this Reflns.  # noqa: E501
        :type: str
        """

        self._data_reduction_method = data_reduction_method

    @property
    def details(self):
        """Gets the details of this Reflns.  # noqa: E501

        A description of reflection data not covered by other data  names. This should include details of the Friedel pairs.  # noqa: E501

        :return: The details of this Reflns.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Reflns.

        A description of reflection data not covered by other data  names. This should include details of the Friedel pairs.  # noqa: E501

        :param details: The details of this Reflns.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def limit_h_max(self):
        """Gets the limit_h_max of this Reflns.  # noqa: E501

        Maximum value of the Miller index h for the reflection data. This  need not have the same value as _diffrn_reflns.limit_h_max.  # noqa: E501

        :return: The limit_h_max of this Reflns.  # noqa: E501
        :rtype: int
        """
        return self._limit_h_max

    @limit_h_max.setter
    def limit_h_max(self, limit_h_max):
        """Sets the limit_h_max of this Reflns.

        Maximum value of the Miller index h for the reflection data. This  need not have the same value as _diffrn_reflns.limit_h_max.  # noqa: E501

        :param limit_h_max: The limit_h_max of this Reflns.  # noqa: E501
        :type: int
        """

        self._limit_h_max = limit_h_max

    @property
    def limit_h_min(self):
        """Gets the limit_h_min of this Reflns.  # noqa: E501

        Minimum value of the Miller index h for the reflection data. This  need not have the same value as _diffrn_reflns.limit_h_min.  # noqa: E501

        :return: The limit_h_min of this Reflns.  # noqa: E501
        :rtype: int
        """
        return self._limit_h_min

    @limit_h_min.setter
    def limit_h_min(self, limit_h_min):
        """Sets the limit_h_min of this Reflns.

        Minimum value of the Miller index h for the reflection data. This  need not have the same value as _diffrn_reflns.limit_h_min.  # noqa: E501

        :param limit_h_min: The limit_h_min of this Reflns.  # noqa: E501
        :type: int
        """

        self._limit_h_min = limit_h_min

    @property
    def limit_k_max(self):
        """Gets the limit_k_max of this Reflns.  # noqa: E501

        Maximum value of the Miller index k for the reflection data. This  need not have the same value as _diffrn_reflns.limit_k_max.  # noqa: E501

        :return: The limit_k_max of this Reflns.  # noqa: E501
        :rtype: int
        """
        return self._limit_k_max

    @limit_k_max.setter
    def limit_k_max(self, limit_k_max):
        """Sets the limit_k_max of this Reflns.

        Maximum value of the Miller index k for the reflection data. This  need not have the same value as _diffrn_reflns.limit_k_max.  # noqa: E501

        :param limit_k_max: The limit_k_max of this Reflns.  # noqa: E501
        :type: int
        """

        self._limit_k_max = limit_k_max

    @property
    def limit_k_min(self):
        """Gets the limit_k_min of this Reflns.  # noqa: E501

        Minimum value of the Miller index k for the reflection data. This  need not have the same value as _diffrn_reflns.limit_k_min.  # noqa: E501

        :return: The limit_k_min of this Reflns.  # noqa: E501
        :rtype: int
        """
        return self._limit_k_min

    @limit_k_min.setter
    def limit_k_min(self, limit_k_min):
        """Sets the limit_k_min of this Reflns.

        Minimum value of the Miller index k for the reflection data. This  need not have the same value as _diffrn_reflns.limit_k_min.  # noqa: E501

        :param limit_k_min: The limit_k_min of this Reflns.  # noqa: E501
        :type: int
        """

        self._limit_k_min = limit_k_min

    @property
    def limit_l_max(self):
        """Gets the limit_l_max of this Reflns.  # noqa: E501

        Maximum value of the Miller index l for the reflection data. This  need not have the same value as _diffrn_reflns.limit_l_max.  # noqa: E501

        :return: The limit_l_max of this Reflns.  # noqa: E501
        :rtype: int
        """
        return self._limit_l_max

    @limit_l_max.setter
    def limit_l_max(self, limit_l_max):
        """Sets the limit_l_max of this Reflns.

        Maximum value of the Miller index l for the reflection data. This  need not have the same value as _diffrn_reflns.limit_l_max.  # noqa: E501

        :param limit_l_max: The limit_l_max of this Reflns.  # noqa: E501
        :type: int
        """

        self._limit_l_max = limit_l_max

    @property
    def limit_l_min(self):
        """Gets the limit_l_min of this Reflns.  # noqa: E501

        Minimum value of the Miller index l for the reflection data. This  need not have the same value as _diffrn_reflns.limit_l_min.  # noqa: E501

        :return: The limit_l_min of this Reflns.  # noqa: E501
        :rtype: int
        """
        return self._limit_l_min

    @limit_l_min.setter
    def limit_l_min(self, limit_l_min):
        """Sets the limit_l_min of this Reflns.

        Minimum value of the Miller index l for the reflection data. This  need not have the same value as _diffrn_reflns.limit_l_min.  # noqa: E501

        :param limit_l_min: The limit_l_min of this Reflns.  # noqa: E501
        :type: int
        """

        self._limit_l_min = limit_l_min

    @property
    def number_all(self):
        """Gets the number_all of this Reflns.  # noqa: E501

        The total number of reflections in the REFLN list (not the  DIFFRN_REFLN list). This number may contain Friedel-equivalent  reflections according to the nature of the structure and the  procedures used. The item _reflns.details describes the  reflection data.  # noqa: E501

        :return: The number_all of this Reflns.  # noqa: E501
        :rtype: int
        """
        return self._number_all

    @number_all.setter
    def number_all(self, number_all):
        """Sets the number_all of this Reflns.

        The total number of reflections in the REFLN list (not the  DIFFRN_REFLN list). This number may contain Friedel-equivalent  reflections according to the nature of the structure and the  procedures used. The item _reflns.details describes the  reflection data.  # noqa: E501

        :param number_all: The number_all of this Reflns.  # noqa: E501
        :type: int
        """

        self._number_all = number_all

    @property
    def number_obs(self):
        """Gets the number_obs of this Reflns.  # noqa: E501

        The number of reflections in the REFLN list (not the DIFFRN_REFLN  list) classified as observed (see _reflns.observed_criterion).  This number may contain Friedel-equivalent reflections according  to the nature of the structure and the procedures used.  # noqa: E501

        :return: The number_obs of this Reflns.  # noqa: E501
        :rtype: int
        """
        return self._number_obs

    @number_obs.setter
    def number_obs(self, number_obs):
        """Sets the number_obs of this Reflns.

        The number of reflections in the REFLN list (not the DIFFRN_REFLN  list) classified as observed (see _reflns.observed_criterion).  This number may contain Friedel-equivalent reflections according  to the nature of the structure and the procedures used.  # noqa: E501

        :param number_obs: The number_obs of this Reflns.  # noqa: E501
        :type: int
        """

        self._number_obs = number_obs

    @property
    def observed_criterion(self):
        """Gets the observed_criterion of this Reflns.  # noqa: E501

        The criterion used to classify a reflection as 'observed'. This  criterion is usually expressed in terms of a sigma(I) or  sigma(F) threshold.  # noqa: E501

        :return: The observed_criterion of this Reflns.  # noqa: E501
        :rtype: str
        """
        return self._observed_criterion

    @observed_criterion.setter
    def observed_criterion(self, observed_criterion):
        """Sets the observed_criterion of this Reflns.

        The criterion used to classify a reflection as 'observed'. This  criterion is usually expressed in terms of a sigma(I) or  sigma(F) threshold.  # noqa: E501

        :param observed_criterion: The observed_criterion of this Reflns.  # noqa: E501
        :type: str
        """

        self._observed_criterion = observed_criterion

    @property
    def observed_criterion_f_max(self):
        """Gets the observed_criterion_f_max of this Reflns.  # noqa: E501

        The criterion used to classify a reflection as 'observed'  expressed as an upper limit for the value of F.  # noqa: E501

        :return: The observed_criterion_f_max of this Reflns.  # noqa: E501
        :rtype: float
        """
        return self._observed_criterion_f_max

    @observed_criterion_f_max.setter
    def observed_criterion_f_max(self, observed_criterion_f_max):
        """Sets the observed_criterion_f_max of this Reflns.

        The criterion used to classify a reflection as 'observed'  expressed as an upper limit for the value of F.  # noqa: E501

        :param observed_criterion_f_max: The observed_criterion_f_max of this Reflns.  # noqa: E501
        :type: float
        """

        self._observed_criterion_f_max = observed_criterion_f_max

    @property
    def observed_criterion_f_min(self):
        """Gets the observed_criterion_f_min of this Reflns.  # noqa: E501

        The criterion used to classify a reflection as 'observed'  expressed as a lower limit for the value of F.  # noqa: E501

        :return: The observed_criterion_f_min of this Reflns.  # noqa: E501
        :rtype: float
        """
        return self._observed_criterion_f_min

    @observed_criterion_f_min.setter
    def observed_criterion_f_min(self, observed_criterion_f_min):
        """Sets the observed_criterion_f_min of this Reflns.

        The criterion used to classify a reflection as 'observed'  expressed as a lower limit for the value of F.  # noqa: E501

        :param observed_criterion_f_min: The observed_criterion_f_min of this Reflns.  # noqa: E501
        :type: float
        """

        self._observed_criterion_f_min = observed_criterion_f_min

    @property
    def observed_criterion_i_max(self):
        """Gets the observed_criterion_i_max of this Reflns.  # noqa: E501

        The criterion used to classify a reflection as 'observed'  expressed as an upper limit for the value of I.  # noqa: E501

        :return: The observed_criterion_i_max of this Reflns.  # noqa: E501
        :rtype: float
        """
        return self._observed_criterion_i_max

    @observed_criterion_i_max.setter
    def observed_criterion_i_max(self, observed_criterion_i_max):
        """Sets the observed_criterion_i_max of this Reflns.

        The criterion used to classify a reflection as 'observed'  expressed as an upper limit for the value of I.  # noqa: E501

        :param observed_criterion_i_max: The observed_criterion_i_max of this Reflns.  # noqa: E501
        :type: float
        """

        self._observed_criterion_i_max = observed_criterion_i_max

    @property
    def observed_criterion_i_min(self):
        """Gets the observed_criterion_i_min of this Reflns.  # noqa: E501

        The criterion used to classify a reflection as 'observed'  expressed as a lower limit for the value of I.  # noqa: E501

        :return: The observed_criterion_i_min of this Reflns.  # noqa: E501
        :rtype: float
        """
        return self._observed_criterion_i_min

    @observed_criterion_i_min.setter
    def observed_criterion_i_min(self, observed_criterion_i_min):
        """Sets the observed_criterion_i_min of this Reflns.

        The criterion used to classify a reflection as 'observed'  expressed as a lower limit for the value of I.  # noqa: E501

        :param observed_criterion_i_min: The observed_criterion_i_min of this Reflns.  # noqa: E501
        :type: float
        """

        self._observed_criterion_i_min = observed_criterion_i_min

    @property
    def observed_criterion_sigma_f(self):
        """Gets the observed_criterion_sigma_f of this Reflns.  # noqa: E501

        The criterion used to classify a reflection as 'observed'  expressed as a multiple of the value of sigma(F).  # noqa: E501

        :return: The observed_criterion_sigma_f of this Reflns.  # noqa: E501
        :rtype: float
        """
        return self._observed_criterion_sigma_f

    @observed_criterion_sigma_f.setter
    def observed_criterion_sigma_f(self, observed_criterion_sigma_f):
        """Sets the observed_criterion_sigma_f of this Reflns.

        The criterion used to classify a reflection as 'observed'  expressed as a multiple of the value of sigma(F).  # noqa: E501

        :param observed_criterion_sigma_f: The observed_criterion_sigma_f of this Reflns.  # noqa: E501
        :type: float
        """

        self._observed_criterion_sigma_f = observed_criterion_sigma_f

    @property
    def observed_criterion_sigma_i(self):
        """Gets the observed_criterion_sigma_i of this Reflns.  # noqa: E501

        The criterion used to classify a reflection as 'observed'  expressed as a multiple of the value of sigma(I).  # noqa: E501

        :return: The observed_criterion_sigma_i of this Reflns.  # noqa: E501
        :rtype: float
        """
        return self._observed_criterion_sigma_i

    @observed_criterion_sigma_i.setter
    def observed_criterion_sigma_i(self, observed_criterion_sigma_i):
        """Sets the observed_criterion_sigma_i of this Reflns.

        The criterion used to classify a reflection as 'observed'  expressed as a multiple of the value of sigma(I).  # noqa: E501

        :param observed_criterion_sigma_i: The observed_criterion_sigma_i of this Reflns.  # noqa: E501
        :type: float
        """

        self._observed_criterion_sigma_i = observed_criterion_sigma_i

    @property
    def pdbx_cc_half(self):
        """Gets the pdbx_cc_half of this Reflns.  # noqa: E501

        The Pearson's correlation coefficient expressed as a decimal value               between the average intensities from randomly selected               half-datasets.         Ref: Karplus & Diederichs (2012), Science 336, 1030-33  # noqa: E501

        :return: The pdbx_cc_half of this Reflns.  # noqa: E501
        :rtype: float
        """
        return self._pdbx_cc_half

    @pdbx_cc_half.setter
    def pdbx_cc_half(self, pdbx_cc_half):
        """Sets the pdbx_cc_half of this Reflns.

        The Pearson's correlation coefficient expressed as a decimal value               between the average intensities from randomly selected               half-datasets.         Ref: Karplus & Diederichs (2012), Science 336, 1030-33  # noqa: E501

        :param pdbx_cc_half: The pdbx_cc_half of this Reflns.  # noqa: E501
        :type: float
        """

        self._pdbx_cc_half = pdbx_cc_half

    @property
    def pdbx_r_split(self):
        """Gets the pdbx_r_split of this Reflns.  # noqa: E501

        R split measures the agreement between the sets of intensities created by merging               odd- and even-numbered images  from the overall data.         Ref: T. A. White, R. A. Kirian, A. V. Martin, A. Aquila, K. Nass, A. Barty               and H. N. Chapman (2012), J. Appl. Cryst. 45, 335-341  # noqa: E501

        :return: The pdbx_r_split of this Reflns.  # noqa: E501
        :rtype: float
        """
        return self._pdbx_r_split

    @pdbx_r_split.setter
    def pdbx_r_split(self, pdbx_r_split):
        """Sets the pdbx_r_split of this Reflns.

        R split measures the agreement between the sets of intensities created by merging               odd- and even-numbered images  from the overall data.         Ref: T. A. White, R. A. Kirian, A. V. Martin, A. Aquila, K. Nass, A. Barty               and H. N. Chapman (2012), J. Appl. Cryst. 45, 335-341  # noqa: E501

        :param pdbx_r_split: The pdbx_r_split of this Reflns.  # noqa: E501
        :type: float
        """

        self._pdbx_r_split = pdbx_r_split

    @property
    def pdbx_rmerge_i_obs(self):
        """Gets the pdbx_rmerge_i_obs of this Reflns.  # noqa: E501

        The R value for merging intensities satisfying the observed  criteria in this data set.  # noqa: E501

        :return: The pdbx_rmerge_i_obs of this Reflns.  # noqa: E501
        :rtype: float
        """
        return self._pdbx_rmerge_i_obs

    @pdbx_rmerge_i_obs.setter
    def pdbx_rmerge_i_obs(self, pdbx_rmerge_i_obs):
        """Sets the pdbx_rmerge_i_obs of this Reflns.

        The R value for merging intensities satisfying the observed  criteria in this data set.  # noqa: E501

        :param pdbx_rmerge_i_obs: The pdbx_rmerge_i_obs of this Reflns.  # noqa: E501
        :type: float
        """

        self._pdbx_rmerge_i_obs = pdbx_rmerge_i_obs

    @property
    def pdbx_rpim_i_all(self):
        """Gets the pdbx_rpim_i_all of this Reflns.  # noqa: E501

        The precision-indicating merging R factor value Rpim,  for merging all intensities in this data set.          sum~i~ [1/(N~i~ - 1)]1/2^ sum~j~ | I~j~ - <I~i~> |  Rpim = --------------------------------------------------                       sum~i~ ( sum~j~ I~j~ )   I~j~   = the intensity of the jth observation of reflection i  <I~i~> = the mean of the intensities of all observations           of reflection i  N~i~   = the redundancy (the number of times reflection i           has been measured).   sum~i~ is taken over all reflections  sum~j~ is taken over all observations of each reflection.   Ref: Diederichs, K. & Karplus, P. A. (1997). Nature Struct.       Biol. 4, 269-275.       Weiss, M. S. & Hilgenfeld, R. (1997). J. Appl. Cryst.       30, 203-205.       Weiss, M. S. (2001). J. Appl. Cryst. 34, 130-135.  # noqa: E501

        :return: The pdbx_rpim_i_all of this Reflns.  # noqa: E501
        :rtype: float
        """
        return self._pdbx_rpim_i_all

    @pdbx_rpim_i_all.setter
    def pdbx_rpim_i_all(self, pdbx_rpim_i_all):
        """Sets the pdbx_rpim_i_all of this Reflns.

        The precision-indicating merging R factor value Rpim,  for merging all intensities in this data set.          sum~i~ [1/(N~i~ - 1)]1/2^ sum~j~ | I~j~ - <I~i~> |  Rpim = --------------------------------------------------                       sum~i~ ( sum~j~ I~j~ )   I~j~   = the intensity of the jth observation of reflection i  <I~i~> = the mean of the intensities of all observations           of reflection i  N~i~   = the redundancy (the number of times reflection i           has been measured).   sum~i~ is taken over all reflections  sum~j~ is taken over all observations of each reflection.   Ref: Diederichs, K. & Karplus, P. A. (1997). Nature Struct.       Biol. 4, 269-275.       Weiss, M. S. & Hilgenfeld, R. (1997). J. Appl. Cryst.       30, 203-205.       Weiss, M. S. (2001). J. Appl. Cryst. 34, 130-135.  # noqa: E501

        :param pdbx_rpim_i_all: The pdbx_rpim_i_all of this Reflns.  # noqa: E501
        :type: float
        """

        self._pdbx_rpim_i_all = pdbx_rpim_i_all

    @property
    def pdbx_rrim_i_all(self):
        """Gets the pdbx_rrim_i_all of this Reflns.  # noqa: E501

        The redundancy-independent merging R factor value Rrim,               also denoted Rmeas, for merging all intensities in this               data set.                       sum~i~ [N~i~/(N~i~ - 1)]1/2^ sum~j~ | I~j~ - <I~i~> |               Rrim = ----------------------------------------------------                                   sum~i~ ( sum~j~ I~j~ )                I~j~   = the intensity of the jth observation of reflection i               <I~i~> = the mean of the intensities of all observations of                        reflection i         N~i~   = the redundancy (the number of times reflection i                        has been measured).                sum~i~ is taken over all reflections               sum~j~ is taken over all observations of each reflection.                Ref: Diederichs, K. & Karplus, P. A. (1997). Nature Struct.                    Biol. 4, 269-275.                    Weiss, M. S. & Hilgenfeld, R. (1997). J. Appl. Cryst.                    30, 203-205.                    Weiss, M. S. (2001). J. Appl. Cryst. 34, 130-135.  # noqa: E501

        :return: The pdbx_rrim_i_all of this Reflns.  # noqa: E501
        :rtype: float
        """
        return self._pdbx_rrim_i_all

    @pdbx_rrim_i_all.setter
    def pdbx_rrim_i_all(self, pdbx_rrim_i_all):
        """Sets the pdbx_rrim_i_all of this Reflns.

        The redundancy-independent merging R factor value Rrim,               also denoted Rmeas, for merging all intensities in this               data set.                       sum~i~ [N~i~/(N~i~ - 1)]1/2^ sum~j~ | I~j~ - <I~i~> |               Rrim = ----------------------------------------------------                                   sum~i~ ( sum~j~ I~j~ )                I~j~   = the intensity of the jth observation of reflection i               <I~i~> = the mean of the intensities of all observations of                        reflection i         N~i~   = the redundancy (the number of times reflection i                        has been measured).                sum~i~ is taken over all reflections               sum~j~ is taken over all observations of each reflection.                Ref: Diederichs, K. & Karplus, P. A. (1997). Nature Struct.                    Biol. 4, 269-275.                    Weiss, M. S. & Hilgenfeld, R. (1997). J. Appl. Cryst.                    30, 203-205.                    Weiss, M. S. (2001). J. Appl. Cryst. 34, 130-135.  # noqa: E501

        :param pdbx_rrim_i_all: The pdbx_rrim_i_all of this Reflns.  # noqa: E501
        :type: float
        """

        self._pdbx_rrim_i_all = pdbx_rrim_i_all

    @property
    def pdbx_rsym_value(self):
        """Gets the pdbx_rsym_value of this Reflns.  # noqa: E501

        The R sym value as a decimal number.  # noqa: E501

        :return: The pdbx_rsym_value of this Reflns.  # noqa: E501
        :rtype: float
        """
        return self._pdbx_rsym_value

    @pdbx_rsym_value.setter
    def pdbx_rsym_value(self, pdbx_rsym_value):
        """Sets the pdbx_rsym_value of this Reflns.

        The R sym value as a decimal number.  # noqa: E501

        :param pdbx_rsym_value: The pdbx_rsym_value of this Reflns.  # noqa: E501
        :type: float
        """

        self._pdbx_rsym_value = pdbx_rsym_value

    @property
    def pdbx_chi_squared(self):
        """Gets the pdbx_chi_squared of this Reflns.  # noqa: E501

        Overall  Chi-squared statistic.  # noqa: E501

        :return: The pdbx_chi_squared of this Reflns.  # noqa: E501
        :rtype: float
        """
        return self._pdbx_chi_squared

    @pdbx_chi_squared.setter
    def pdbx_chi_squared(self, pdbx_chi_squared):
        """Sets the pdbx_chi_squared of this Reflns.

        Overall  Chi-squared statistic.  # noqa: E501

        :param pdbx_chi_squared: The pdbx_chi_squared of this Reflns.  # noqa: E501
        :type: float
        """

        self._pdbx_chi_squared = pdbx_chi_squared

    @property
    def pdbx_diffrn_id(self):
        """Gets the pdbx_diffrn_id of this Reflns.  # noqa: E501

        An identifier for the diffraction data set for this set of summary statistics.   Multiple diffraction data sets entered as a comma separated list.  # noqa: E501

        :return: The pdbx_diffrn_id of this Reflns.  # noqa: E501
        :rtype: list[str]
        """
        return self._pdbx_diffrn_id

    @pdbx_diffrn_id.setter
    def pdbx_diffrn_id(self, pdbx_diffrn_id):
        """Sets the pdbx_diffrn_id of this Reflns.

        An identifier for the diffraction data set for this set of summary statistics.   Multiple diffraction data sets entered as a comma separated list.  # noqa: E501

        :param pdbx_diffrn_id: The pdbx_diffrn_id of this Reflns.  # noqa: E501
        :type: list[str]
        """

        self._pdbx_diffrn_id = pdbx_diffrn_id

    @property
    def pdbx_net_i_over_av_sigma_i(self):
        """Gets the pdbx_net_i_over_av_sigma_i of this Reflns.  # noqa: E501

        The ratio of the average intensity to the average uncertainty,  <I>/<sigma(I)>.  # noqa: E501

        :return: The pdbx_net_i_over_av_sigma_i of this Reflns.  # noqa: E501
        :rtype: float
        """
        return self._pdbx_net_i_over_av_sigma_i

    @pdbx_net_i_over_av_sigma_i.setter
    def pdbx_net_i_over_av_sigma_i(self, pdbx_net_i_over_av_sigma_i):
        """Sets the pdbx_net_i_over_av_sigma_i of this Reflns.

        The ratio of the average intensity to the average uncertainty,  <I>/<sigma(I)>.  # noqa: E501

        :param pdbx_net_i_over_av_sigma_i: The pdbx_net_i_over_av_sigma_i of this Reflns.  # noqa: E501
        :type: float
        """

        self._pdbx_net_i_over_av_sigma_i = pdbx_net_i_over_av_sigma_i

    @property
    def pdbx_net_i_over_sigma_i(self):
        """Gets the pdbx_net_i_over_sigma_i of this Reflns.  # noqa: E501

        The mean of the ratio of the intensities to their  standard uncertainties, <I/sigma(I)>.  # noqa: E501

        :return: The pdbx_net_i_over_sigma_i of this Reflns.  # noqa: E501
        :rtype: float
        """
        return self._pdbx_net_i_over_sigma_i

    @pdbx_net_i_over_sigma_i.setter
    def pdbx_net_i_over_sigma_i(self, pdbx_net_i_over_sigma_i):
        """Sets the pdbx_net_i_over_sigma_i of this Reflns.

        The mean of the ratio of the intensities to their  standard uncertainties, <I/sigma(I)>.  # noqa: E501

        :param pdbx_net_i_over_sigma_i: The pdbx_net_i_over_sigma_i of this Reflns.  # noqa: E501
        :type: float
        """

        self._pdbx_net_i_over_sigma_i = pdbx_net_i_over_sigma_i

    @property
    def pdbx_number_measured_all(self):
        """Gets the pdbx_number_measured_all of this Reflns.  # noqa: E501

        Total number of measured reflections.  # noqa: E501

        :return: The pdbx_number_measured_all of this Reflns.  # noqa: E501
        :rtype: int
        """
        return self._pdbx_number_measured_all

    @pdbx_number_measured_all.setter
    def pdbx_number_measured_all(self, pdbx_number_measured_all):
        """Sets the pdbx_number_measured_all of this Reflns.

        Total number of measured reflections.  # noqa: E501

        :param pdbx_number_measured_all: The pdbx_number_measured_all of this Reflns.  # noqa: E501
        :type: int
        """

        self._pdbx_number_measured_all = pdbx_number_measured_all

    @property
    def pdbx_ordinal(self):
        """Gets the pdbx_ordinal of this Reflns.  # noqa: E501

        An ordinal identifier for this set of reflection statistics.  # noqa: E501

        :return: The pdbx_ordinal of this Reflns.  # noqa: E501
        :rtype: int
        """
        return self._pdbx_ordinal

    @pdbx_ordinal.setter
    def pdbx_ordinal(self, pdbx_ordinal):
        """Sets the pdbx_ordinal of this Reflns.

        An ordinal identifier for this set of reflection statistics.  # noqa: E501

        :param pdbx_ordinal: The pdbx_ordinal of this Reflns.  # noqa: E501
        :type: int
        """
        if pdbx_ordinal is None:
            raise ValueError("Invalid value for `pdbx_ordinal`, must not be `None`")  # noqa: E501

        self._pdbx_ordinal = pdbx_ordinal

    @property
    def pdbx_redundancy(self):
        """Gets the pdbx_redundancy of this Reflns.  # noqa: E501

        Overall redundancy for this data set.  # noqa: E501

        :return: The pdbx_redundancy of this Reflns.  # noqa: E501
        :rtype: float
        """
        return self._pdbx_redundancy

    @pdbx_redundancy.setter
    def pdbx_redundancy(self, pdbx_redundancy):
        """Sets the pdbx_redundancy of this Reflns.

        Overall redundancy for this data set.  # noqa: E501

        :param pdbx_redundancy: The pdbx_redundancy of this Reflns.  # noqa: E501
        :type: float
        """

        self._pdbx_redundancy = pdbx_redundancy

    @property
    def pdbx_scaling_rejects(self):
        """Gets the pdbx_scaling_rejects of this Reflns.  # noqa: E501

        Number of reflections rejected in scaling operations.  # noqa: E501

        :return: The pdbx_scaling_rejects of this Reflns.  # noqa: E501
        :rtype: int
        """
        return self._pdbx_scaling_rejects

    @pdbx_scaling_rejects.setter
    def pdbx_scaling_rejects(self, pdbx_scaling_rejects):
        """Sets the pdbx_scaling_rejects of this Reflns.

        Number of reflections rejected in scaling operations.  # noqa: E501

        :param pdbx_scaling_rejects: The pdbx_scaling_rejects of this Reflns.  # noqa: E501
        :type: int
        """

        self._pdbx_scaling_rejects = pdbx_scaling_rejects

    @property
    def percent_possible_obs(self):
        """Gets the percent_possible_obs of this Reflns.  # noqa: E501

        The percentage of geometrically possible reflections represented  by reflections that satisfy the resolution limits established  by _reflns.d_resolution_high and _reflns.d_resolution_low and  the observation limit established by  _reflns.observed_criterion.  # noqa: E501

        :return: The percent_possible_obs of this Reflns.  # noqa: E501
        :rtype: float
        """
        return self._percent_possible_obs

    @percent_possible_obs.setter
    def percent_possible_obs(self, percent_possible_obs):
        """Sets the percent_possible_obs of this Reflns.

        The percentage of geometrically possible reflections represented  by reflections that satisfy the resolution limits established  by _reflns.d_resolution_high and _reflns.d_resolution_low and  the observation limit established by  _reflns.observed_criterion.  # noqa: E501

        :param percent_possible_obs: The percent_possible_obs of this Reflns.  # noqa: E501
        :type: float
        """

        self._percent_possible_obs = percent_possible_obs

    @property
    def phase_calculation_details(self):
        """Gets the phase_calculation_details of this Reflns.  # noqa: E501

        The value of _reflns.phase_calculation_details describes a  special details about calculation of phases in _refln.phase_calc.  # noqa: E501

        :return: The phase_calculation_details of this Reflns.  # noqa: E501
        :rtype: str
        """
        return self._phase_calculation_details

    @phase_calculation_details.setter
    def phase_calculation_details(self, phase_calculation_details):
        """Sets the phase_calculation_details of this Reflns.

        The value of _reflns.phase_calculation_details describes a  special details about calculation of phases in _refln.phase_calc.  # noqa: E501

        :param phase_calculation_details: The phase_calculation_details of this Reflns.  # noqa: E501
        :type: str
        """

        self._phase_calculation_details = phase_calculation_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Reflns, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Reflns):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
