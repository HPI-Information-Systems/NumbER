# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EmSpecimen(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'concentration': 'float',
        'details': 'str',
        'embedding_applied': 'str',
        'experiment_id': 'str',
        'id': 'str',
        'shadowing_applied': 'str',
        'staining_applied': 'str',
        'vitrification_applied': 'str'
    }

    attribute_map = {
        'concentration': 'concentration',
        'details': 'details',
        'embedding_applied': 'embedding_applied',
        'experiment_id': 'experiment_id',
        'id': 'id',
        'shadowing_applied': 'shadowing_applied',
        'staining_applied': 'staining_applied',
        'vitrification_applied': 'vitrification_applied'
    }

    def __init__(self, concentration=None, details=None, embedding_applied=None, experiment_id=None, id=None, shadowing_applied=None, staining_applied=None, vitrification_applied=None):  # noqa: E501
        """EmSpecimen - a model defined in Swagger"""  # noqa: E501
        self._concentration = None
        self._details = None
        self._embedding_applied = None
        self._experiment_id = None
        self._id = None
        self._shadowing_applied = None
        self._staining_applied = None
        self._vitrification_applied = None
        self.discriminator = None
        if concentration is not None:
            self.concentration = concentration
        if details is not None:
            self.details = details
        if embedding_applied is not None:
            self.embedding_applied = embedding_applied
        self.experiment_id = experiment_id
        self.id = id
        if shadowing_applied is not None:
            self.shadowing_applied = shadowing_applied
        if staining_applied is not None:
            self.staining_applied = staining_applied
        if vitrification_applied is not None:
            self.vitrification_applied = vitrification_applied

    @property
    def concentration(self):
        """Gets the concentration of this EmSpecimen.  # noqa: E501

        The concentration (in milligrams per milliliter, mg/ml)  of the complex in the sample.  # noqa: E501

        :return: The concentration of this EmSpecimen.  # noqa: E501
        :rtype: float
        """
        return self._concentration

    @concentration.setter
    def concentration(self, concentration):
        """Sets the concentration of this EmSpecimen.

        The concentration (in milligrams per milliliter, mg/ml)  of the complex in the sample.  # noqa: E501

        :param concentration: The concentration of this EmSpecimen.  # noqa: E501
        :type: float
        """

        self._concentration = concentration

    @property
    def details(self):
        """Gets the details of this EmSpecimen.  # noqa: E501

        A description of any additional details of the specimen preparation.  # noqa: E501

        :return: The details of this EmSpecimen.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this EmSpecimen.

        A description of any additional details of the specimen preparation.  # noqa: E501

        :param details: The details of this EmSpecimen.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def embedding_applied(self):
        """Gets the embedding_applied of this EmSpecimen.  # noqa: E501

        'YES' indicates that the specimen has been embedded.  # noqa: E501

        :return: The embedding_applied of this EmSpecimen.  # noqa: E501
        :rtype: str
        """
        return self._embedding_applied

    @embedding_applied.setter
    def embedding_applied(self, embedding_applied):
        """Sets the embedding_applied of this EmSpecimen.

        'YES' indicates that the specimen has been embedded.  # noqa: E501

        :param embedding_applied: The embedding_applied of this EmSpecimen.  # noqa: E501
        :type: str
        """
        allowed_values = ["NO", "YES"]  # noqa: E501
        if embedding_applied not in allowed_values:
            raise ValueError(
                "Invalid value for `embedding_applied` ({0}), must be one of {1}"  # noqa: E501
                .format(embedding_applied, allowed_values)
            )

        self._embedding_applied = embedding_applied

    @property
    def experiment_id(self):
        """Gets the experiment_id of this EmSpecimen.  # noqa: E501

        Pointer to _em_experiment.id.  # noqa: E501

        :return: The experiment_id of this EmSpecimen.  # noqa: E501
        :rtype: str
        """
        return self._experiment_id

    @experiment_id.setter
    def experiment_id(self, experiment_id):
        """Sets the experiment_id of this EmSpecimen.

        Pointer to _em_experiment.id.  # noqa: E501

        :param experiment_id: The experiment_id of this EmSpecimen.  # noqa: E501
        :type: str
        """
        if experiment_id is None:
            raise ValueError("Invalid value for `experiment_id`, must not be `None`")  # noqa: E501

        self._experiment_id = experiment_id

    @property
    def id(self):
        """Gets the id of this EmSpecimen.  # noqa: E501

        PRIMARY KEY  # noqa: E501

        :return: The id of this EmSpecimen.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EmSpecimen.

        PRIMARY KEY  # noqa: E501

        :param id: The id of this EmSpecimen.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def shadowing_applied(self):
        """Gets the shadowing_applied of this EmSpecimen.  # noqa: E501

        'YES' indicates that the specimen has been shadowed.  # noqa: E501

        :return: The shadowing_applied of this EmSpecimen.  # noqa: E501
        :rtype: str
        """
        return self._shadowing_applied

    @shadowing_applied.setter
    def shadowing_applied(self, shadowing_applied):
        """Sets the shadowing_applied of this EmSpecimen.

        'YES' indicates that the specimen has been shadowed.  # noqa: E501

        :param shadowing_applied: The shadowing_applied of this EmSpecimen.  # noqa: E501
        :type: str
        """
        allowed_values = ["NO", "YES"]  # noqa: E501
        if shadowing_applied not in allowed_values:
            raise ValueError(
                "Invalid value for `shadowing_applied` ({0}), must be one of {1}"  # noqa: E501
                .format(shadowing_applied, allowed_values)
            )

        self._shadowing_applied = shadowing_applied

    @property
    def staining_applied(self):
        """Gets the staining_applied of this EmSpecimen.  # noqa: E501

        'YES' indicates that the specimen has been stained.  # noqa: E501

        :return: The staining_applied of this EmSpecimen.  # noqa: E501
        :rtype: str
        """
        return self._staining_applied

    @staining_applied.setter
    def staining_applied(self, staining_applied):
        """Sets the staining_applied of this EmSpecimen.

        'YES' indicates that the specimen has been stained.  # noqa: E501

        :param staining_applied: The staining_applied of this EmSpecimen.  # noqa: E501
        :type: str
        """
        allowed_values = ["NO", "YES"]  # noqa: E501
        if staining_applied not in allowed_values:
            raise ValueError(
                "Invalid value for `staining_applied` ({0}), must be one of {1}"  # noqa: E501
                .format(staining_applied, allowed_values)
            )

        self._staining_applied = staining_applied

    @property
    def vitrification_applied(self):
        """Gets the vitrification_applied of this EmSpecimen.  # noqa: E501

        'YES' indicates that the specimen was vitrified by cryopreservation.  # noqa: E501

        :return: The vitrification_applied of this EmSpecimen.  # noqa: E501
        :rtype: str
        """
        return self._vitrification_applied

    @vitrification_applied.setter
    def vitrification_applied(self, vitrification_applied):
        """Sets the vitrification_applied of this EmSpecimen.

        'YES' indicates that the specimen was vitrified by cryopreservation.  # noqa: E501

        :param vitrification_applied: The vitrification_applied of this EmSpecimen.  # noqa: E501
        :type: str
        """
        allowed_values = ["NO", "YES"]  # noqa: E501
        if vitrification_applied not in allowed_values:
            raise ValueError(
                "Invalid value for `vitrification_applied` ({0}), must be one of {1}"  # noqa: E501
                .format(vitrification_applied, allowed_values)
            )

        self._vitrification_applied = vitrification_applied

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmSpecimen, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmSpecimen):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
