# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RcsbLatestRevision(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'major_revision': 'int',
        'minor_revision': 'int',
        'revision_date': 'datetime'
    }

    attribute_map = {
        'major_revision': 'major_revision',
        'minor_revision': 'minor_revision',
        'revision_date': 'revision_date'
    }

    def __init__(self, major_revision=None, minor_revision=None, revision_date=None):  # noqa: E501
        """RcsbLatestRevision - a model defined in Swagger"""  # noqa: E501
        self._major_revision = None
        self._minor_revision = None
        self._revision_date = None
        self.discriminator = None
        if major_revision is not None:
            self.major_revision = major_revision
        if minor_revision is not None:
            self.minor_revision = minor_revision
        if revision_date is not None:
            self.revision_date = revision_date

    @property
    def major_revision(self):
        """Gets the major_revision of this RcsbLatestRevision.  # noqa: E501

        The major version number of the latest revision.  # noqa: E501

        :return: The major_revision of this RcsbLatestRevision.  # noqa: E501
        :rtype: int
        """
        return self._major_revision

    @major_revision.setter
    def major_revision(self, major_revision):
        """Sets the major_revision of this RcsbLatestRevision.

        The major version number of the latest revision.  # noqa: E501

        :param major_revision: The major_revision of this RcsbLatestRevision.  # noqa: E501
        :type: int
        """

        self._major_revision = major_revision

    @property
    def minor_revision(self):
        """Gets the minor_revision of this RcsbLatestRevision.  # noqa: E501

        The minor version number of the latest revision.  # noqa: E501

        :return: The minor_revision of this RcsbLatestRevision.  # noqa: E501
        :rtype: int
        """
        return self._minor_revision

    @minor_revision.setter
    def minor_revision(self, minor_revision):
        """Sets the minor_revision of this RcsbLatestRevision.

        The minor version number of the latest revision.  # noqa: E501

        :param minor_revision: The minor_revision of this RcsbLatestRevision.  # noqa: E501
        :type: int
        """

        self._minor_revision = minor_revision

    @property
    def revision_date(self):
        """Gets the revision_date of this RcsbLatestRevision.  # noqa: E501

        The release date of the latest revision item.  # noqa: E501

        :return: The revision_date of this RcsbLatestRevision.  # noqa: E501
        :rtype: datetime
        """
        return self._revision_date

    @revision_date.setter
    def revision_date(self, revision_date):
        """Sets the revision_date of this RcsbLatestRevision.

        The release date of the latest revision item.  # noqa: E501

        :param revision_date: The revision_date of this RcsbLatestRevision.  # noqa: E501
        :type: datetime
        """

        self._revision_date = revision_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RcsbLatestRevision, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RcsbLatestRevision):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
