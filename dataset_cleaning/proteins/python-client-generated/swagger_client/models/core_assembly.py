# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CoreAssembly(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pdbx_struct_assembly': 'PdbxStructAssembly',
        'pdbx_struct_assembly_auth_evidence': 'list[PdbxStructAssemblyAuthEvidence]',
        'pdbx_struct_assembly_gen': 'list[PdbxStructAssemblyGen]',
        'pdbx_struct_assembly_prop': 'list[PdbxStructAssemblyProp]',
        'pdbx_struct_oper_list': 'list[PdbxStructOperList]',
        'rcsb_assembly_container_identifiers': 'RcsbAssemblyContainerIdentifiers',
        'rcsb_assembly_info': 'RcsbAssemblyInfo',
        'rcsb_id': 'str',
        'rcsb_struct_symmetry': 'list[RcsbStructSymmetry]',
        'rcsb_struct_symmetry_provenance_code': 'str',
        'rcsb_struct_symmetry_lineage': 'list[RcsbStructSymmetryLineage]',
        'rcsb_latest_revision': 'RcsbLatestRevision'
    }

    attribute_map = {
        'pdbx_struct_assembly': 'pdbx_struct_assembly',
        'pdbx_struct_assembly_auth_evidence': 'pdbx_struct_assembly_auth_evidence',
        'pdbx_struct_assembly_gen': 'pdbx_struct_assembly_gen',
        'pdbx_struct_assembly_prop': 'pdbx_struct_assembly_prop',
        'pdbx_struct_oper_list': 'pdbx_struct_oper_list',
        'rcsb_assembly_container_identifiers': 'rcsb_assembly_container_identifiers',
        'rcsb_assembly_info': 'rcsb_assembly_info',
        'rcsb_id': 'rcsb_id',
        'rcsb_struct_symmetry': 'rcsb_struct_symmetry',
        'rcsb_struct_symmetry_provenance_code': 'rcsb_struct_symmetry_provenance_code',
        'rcsb_struct_symmetry_lineage': 'rcsb_struct_symmetry_lineage',
        'rcsb_latest_revision': 'rcsb_latest_revision'
    }

    def __init__(self, pdbx_struct_assembly=None, pdbx_struct_assembly_auth_evidence=None, pdbx_struct_assembly_gen=None, pdbx_struct_assembly_prop=None, pdbx_struct_oper_list=None, rcsb_assembly_container_identifiers=None, rcsb_assembly_info=None, rcsb_id=None, rcsb_struct_symmetry=None, rcsb_struct_symmetry_provenance_code=None, rcsb_struct_symmetry_lineage=None, rcsb_latest_revision=None):  # noqa: E501
        """CoreAssembly - a model defined in Swagger"""  # noqa: E501
        self._pdbx_struct_assembly = None
        self._pdbx_struct_assembly_auth_evidence = None
        self._pdbx_struct_assembly_gen = None
        self._pdbx_struct_assembly_prop = None
        self._pdbx_struct_oper_list = None
        self._rcsb_assembly_container_identifiers = None
        self._rcsb_assembly_info = None
        self._rcsb_id = None
        self._rcsb_struct_symmetry = None
        self._rcsb_struct_symmetry_provenance_code = None
        self._rcsb_struct_symmetry_lineage = None
        self._rcsb_latest_revision = None
        self.discriminator = None
        if pdbx_struct_assembly is not None:
            self.pdbx_struct_assembly = pdbx_struct_assembly
        if pdbx_struct_assembly_auth_evidence is not None:
            self.pdbx_struct_assembly_auth_evidence = pdbx_struct_assembly_auth_evidence
        if pdbx_struct_assembly_gen is not None:
            self.pdbx_struct_assembly_gen = pdbx_struct_assembly_gen
        if pdbx_struct_assembly_prop is not None:
            self.pdbx_struct_assembly_prop = pdbx_struct_assembly_prop
        if pdbx_struct_oper_list is not None:
            self.pdbx_struct_oper_list = pdbx_struct_oper_list
        self.rcsb_assembly_container_identifiers = rcsb_assembly_container_identifiers
        if rcsb_assembly_info is not None:
            self.rcsb_assembly_info = rcsb_assembly_info
        self.rcsb_id = rcsb_id
        if rcsb_struct_symmetry is not None:
            self.rcsb_struct_symmetry = rcsb_struct_symmetry
        if rcsb_struct_symmetry_provenance_code is not None:
            self.rcsb_struct_symmetry_provenance_code = rcsb_struct_symmetry_provenance_code
        if rcsb_struct_symmetry_lineage is not None:
            self.rcsb_struct_symmetry_lineage = rcsb_struct_symmetry_lineage
        if rcsb_latest_revision is not None:
            self.rcsb_latest_revision = rcsb_latest_revision

    @property
    def pdbx_struct_assembly(self):
        """Gets the pdbx_struct_assembly of this CoreAssembly.  # noqa: E501


        :return: The pdbx_struct_assembly of this CoreAssembly.  # noqa: E501
        :rtype: PdbxStructAssembly
        """
        return self._pdbx_struct_assembly

    @pdbx_struct_assembly.setter
    def pdbx_struct_assembly(self, pdbx_struct_assembly):
        """Sets the pdbx_struct_assembly of this CoreAssembly.


        :param pdbx_struct_assembly: The pdbx_struct_assembly of this CoreAssembly.  # noqa: E501
        :type: PdbxStructAssembly
        """

        self._pdbx_struct_assembly = pdbx_struct_assembly

    @property
    def pdbx_struct_assembly_auth_evidence(self):
        """Gets the pdbx_struct_assembly_auth_evidence of this CoreAssembly.  # noqa: E501


        :return: The pdbx_struct_assembly_auth_evidence of this CoreAssembly.  # noqa: E501
        :rtype: list[PdbxStructAssemblyAuthEvidence]
        """
        return self._pdbx_struct_assembly_auth_evidence

    @pdbx_struct_assembly_auth_evidence.setter
    def pdbx_struct_assembly_auth_evidence(self, pdbx_struct_assembly_auth_evidence):
        """Sets the pdbx_struct_assembly_auth_evidence of this CoreAssembly.


        :param pdbx_struct_assembly_auth_evidence: The pdbx_struct_assembly_auth_evidence of this CoreAssembly.  # noqa: E501
        :type: list[PdbxStructAssemblyAuthEvidence]
        """

        self._pdbx_struct_assembly_auth_evidence = pdbx_struct_assembly_auth_evidence

    @property
    def pdbx_struct_assembly_gen(self):
        """Gets the pdbx_struct_assembly_gen of this CoreAssembly.  # noqa: E501


        :return: The pdbx_struct_assembly_gen of this CoreAssembly.  # noqa: E501
        :rtype: list[PdbxStructAssemblyGen]
        """
        return self._pdbx_struct_assembly_gen

    @pdbx_struct_assembly_gen.setter
    def pdbx_struct_assembly_gen(self, pdbx_struct_assembly_gen):
        """Sets the pdbx_struct_assembly_gen of this CoreAssembly.


        :param pdbx_struct_assembly_gen: The pdbx_struct_assembly_gen of this CoreAssembly.  # noqa: E501
        :type: list[PdbxStructAssemblyGen]
        """

        self._pdbx_struct_assembly_gen = pdbx_struct_assembly_gen

    @property
    def pdbx_struct_assembly_prop(self):
        """Gets the pdbx_struct_assembly_prop of this CoreAssembly.  # noqa: E501


        :return: The pdbx_struct_assembly_prop of this CoreAssembly.  # noqa: E501
        :rtype: list[PdbxStructAssemblyProp]
        """
        return self._pdbx_struct_assembly_prop

    @pdbx_struct_assembly_prop.setter
    def pdbx_struct_assembly_prop(self, pdbx_struct_assembly_prop):
        """Sets the pdbx_struct_assembly_prop of this CoreAssembly.


        :param pdbx_struct_assembly_prop: The pdbx_struct_assembly_prop of this CoreAssembly.  # noqa: E501
        :type: list[PdbxStructAssemblyProp]
        """

        self._pdbx_struct_assembly_prop = pdbx_struct_assembly_prop

    @property
    def pdbx_struct_oper_list(self):
        """Gets the pdbx_struct_oper_list of this CoreAssembly.  # noqa: E501


        :return: The pdbx_struct_oper_list of this CoreAssembly.  # noqa: E501
        :rtype: list[PdbxStructOperList]
        """
        return self._pdbx_struct_oper_list

    @pdbx_struct_oper_list.setter
    def pdbx_struct_oper_list(self, pdbx_struct_oper_list):
        """Sets the pdbx_struct_oper_list of this CoreAssembly.


        :param pdbx_struct_oper_list: The pdbx_struct_oper_list of this CoreAssembly.  # noqa: E501
        :type: list[PdbxStructOperList]
        """

        self._pdbx_struct_oper_list = pdbx_struct_oper_list

    @property
    def rcsb_assembly_container_identifiers(self):
        """Gets the rcsb_assembly_container_identifiers of this CoreAssembly.  # noqa: E501


        :return: The rcsb_assembly_container_identifiers of this CoreAssembly.  # noqa: E501
        :rtype: RcsbAssemblyContainerIdentifiers
        """
        return self._rcsb_assembly_container_identifiers

    @rcsb_assembly_container_identifiers.setter
    def rcsb_assembly_container_identifiers(self, rcsb_assembly_container_identifiers):
        """Sets the rcsb_assembly_container_identifiers of this CoreAssembly.


        :param rcsb_assembly_container_identifiers: The rcsb_assembly_container_identifiers of this CoreAssembly.  # noqa: E501
        :type: RcsbAssemblyContainerIdentifiers
        """
        if rcsb_assembly_container_identifiers is None:
            raise ValueError("Invalid value for `rcsb_assembly_container_identifiers`, must not be `None`")  # noqa: E501

        self._rcsb_assembly_container_identifiers = rcsb_assembly_container_identifiers

    @property
    def rcsb_assembly_info(self):
        """Gets the rcsb_assembly_info of this CoreAssembly.  # noqa: E501


        :return: The rcsb_assembly_info of this CoreAssembly.  # noqa: E501
        :rtype: RcsbAssemblyInfo
        """
        return self._rcsb_assembly_info

    @rcsb_assembly_info.setter
    def rcsb_assembly_info(self, rcsb_assembly_info):
        """Sets the rcsb_assembly_info of this CoreAssembly.


        :param rcsb_assembly_info: The rcsb_assembly_info of this CoreAssembly.  # noqa: E501
        :type: RcsbAssemblyInfo
        """

        self._rcsb_assembly_info = rcsb_assembly_info

    @property
    def rcsb_id(self):
        """Gets the rcsb_id of this CoreAssembly.  # noqa: E501

        A unique identifier for each object in this assembly container formed by  a dash separated concatenation of entry and assembly identifiers.  # noqa: E501

        :return: The rcsb_id of this CoreAssembly.  # noqa: E501
        :rtype: str
        """
        return self._rcsb_id

    @rcsb_id.setter
    def rcsb_id(self, rcsb_id):
        """Sets the rcsb_id of this CoreAssembly.

        A unique identifier for each object in this assembly container formed by  a dash separated concatenation of entry and assembly identifiers.  # noqa: E501

        :param rcsb_id: The rcsb_id of this CoreAssembly.  # noqa: E501
        :type: str
        """
        if rcsb_id is None:
            raise ValueError("Invalid value for `rcsb_id`, must not be `None`")  # noqa: E501

        self._rcsb_id = rcsb_id

    @property
    def rcsb_struct_symmetry(self):
        """Gets the rcsb_struct_symmetry of this CoreAssembly.  # noqa: E501


        :return: The rcsb_struct_symmetry of this CoreAssembly.  # noqa: E501
        :rtype: list[RcsbStructSymmetry]
        """
        return self._rcsb_struct_symmetry

    @rcsb_struct_symmetry.setter
    def rcsb_struct_symmetry(self, rcsb_struct_symmetry):
        """Sets the rcsb_struct_symmetry of this CoreAssembly.


        :param rcsb_struct_symmetry: The rcsb_struct_symmetry of this CoreAssembly.  # noqa: E501
        :type: list[RcsbStructSymmetry]
        """

        self._rcsb_struct_symmetry = rcsb_struct_symmetry

    @property
    def rcsb_struct_symmetry_provenance_code(self):
        """Gets the rcsb_struct_symmetry_provenance_code of this CoreAssembly.  # noqa: E501

        The title and version of software package used for symmetry calculations.  # noqa: E501

        :return: The rcsb_struct_symmetry_provenance_code of this CoreAssembly.  # noqa: E501
        :rtype: str
        """
        return self._rcsb_struct_symmetry_provenance_code

    @rcsb_struct_symmetry_provenance_code.setter
    def rcsb_struct_symmetry_provenance_code(self, rcsb_struct_symmetry_provenance_code):
        """Sets the rcsb_struct_symmetry_provenance_code of this CoreAssembly.

        The title and version of software package used for symmetry calculations.  # noqa: E501

        :param rcsb_struct_symmetry_provenance_code: The rcsb_struct_symmetry_provenance_code of this CoreAssembly.  # noqa: E501
        :type: str
        """

        self._rcsb_struct_symmetry_provenance_code = rcsb_struct_symmetry_provenance_code

    @property
    def rcsb_struct_symmetry_lineage(self):
        """Gets the rcsb_struct_symmetry_lineage of this CoreAssembly.  # noqa: E501


        :return: The rcsb_struct_symmetry_lineage of this CoreAssembly.  # noqa: E501
        :rtype: list[RcsbStructSymmetryLineage]
        """
        return self._rcsb_struct_symmetry_lineage

    @rcsb_struct_symmetry_lineage.setter
    def rcsb_struct_symmetry_lineage(self, rcsb_struct_symmetry_lineage):
        """Sets the rcsb_struct_symmetry_lineage of this CoreAssembly.


        :param rcsb_struct_symmetry_lineage: The rcsb_struct_symmetry_lineage of this CoreAssembly.  # noqa: E501
        :type: list[RcsbStructSymmetryLineage]
        """

        self._rcsb_struct_symmetry_lineage = rcsb_struct_symmetry_lineage

    @property
    def rcsb_latest_revision(self):
        """Gets the rcsb_latest_revision of this CoreAssembly.  # noqa: E501


        :return: The rcsb_latest_revision of this CoreAssembly.  # noqa: E501
        :rtype: RcsbLatestRevision
        """
        return self._rcsb_latest_revision

    @rcsb_latest_revision.setter
    def rcsb_latest_revision(self, rcsb_latest_revision):
        """Sets the rcsb_latest_revision of this CoreAssembly.


        :param rcsb_latest_revision: The rcsb_latest_revision of this CoreAssembly.  # noqa: E501
        :type: RcsbLatestRevision
        """

        self._rcsb_latest_revision = rcsb_latest_revision

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoreAssembly, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoreAssembly):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
