# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PdbxEntityNonpoly(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comp_id': 'str',
        'entity_id': 'str',
        'name': 'str',
        'rcsb_prd_id': 'str'
    }

    attribute_map = {
        'comp_id': 'comp_id',
        'entity_id': 'entity_id',
        'name': 'name',
        'rcsb_prd_id': 'rcsb_prd_id'
    }

    def __init__(self, comp_id=None, entity_id=None, name=None, rcsb_prd_id=None):  # noqa: E501
        """PdbxEntityNonpoly - a model defined in Swagger"""  # noqa: E501
        self._comp_id = None
        self._entity_id = None
        self._name = None
        self._rcsb_prd_id = None
        self.discriminator = None
        if comp_id is not None:
            self.comp_id = comp_id
        self.entity_id = entity_id
        if name is not None:
            self.name = name
        if rcsb_prd_id is not None:
            self.rcsb_prd_id = rcsb_prd_id

    @property
    def comp_id(self):
        """Gets the comp_id of this PdbxEntityNonpoly.  # noqa: E501

        This data item is a pointer to _chem_comp.id in the CHEM_COMP category.  # noqa: E501

        :return: The comp_id of this PdbxEntityNonpoly.  # noqa: E501
        :rtype: str
        """
        return self._comp_id

    @comp_id.setter
    def comp_id(self, comp_id):
        """Sets the comp_id of this PdbxEntityNonpoly.

        This data item is a pointer to _chem_comp.id in the CHEM_COMP category.  # noqa: E501

        :param comp_id: The comp_id of this PdbxEntityNonpoly.  # noqa: E501
        :type: str
        """

        self._comp_id = comp_id

    @property
    def entity_id(self):
        """Gets the entity_id of this PdbxEntityNonpoly.  # noqa: E501

        This data item is a pointer to _entity.id in the ENTITY category.  # noqa: E501

        :return: The entity_id of this PdbxEntityNonpoly.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this PdbxEntityNonpoly.

        This data item is a pointer to _entity.id in the ENTITY category.  # noqa: E501

        :param entity_id: The entity_id of this PdbxEntityNonpoly.  # noqa: E501
        :type: str
        """
        if entity_id is None:
            raise ValueError("Invalid value for `entity_id`, must not be `None`")  # noqa: E501

        self._entity_id = entity_id

    @property
    def name(self):
        """Gets the name of this PdbxEntityNonpoly.  # noqa: E501

        A name for the non-polymer entity  # noqa: E501

        :return: The name of this PdbxEntityNonpoly.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PdbxEntityNonpoly.

        A name for the non-polymer entity  # noqa: E501

        :param name: The name of this PdbxEntityNonpoly.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def rcsb_prd_id(self):
        """Gets the rcsb_prd_id of this PdbxEntityNonpoly.  # noqa: E501

        For non-polymer BIRD molecules the BIRD identifier for the entity.  # noqa: E501

        :return: The rcsb_prd_id of this PdbxEntityNonpoly.  # noqa: E501
        :rtype: str
        """
        return self._rcsb_prd_id

    @rcsb_prd_id.setter
    def rcsb_prd_id(self, rcsb_prd_id):
        """Sets the rcsb_prd_id of this PdbxEntityNonpoly.

        For non-polymer BIRD molecules the BIRD identifier for the entity.  # noqa: E501

        :param rcsb_prd_id: The rcsb_prd_id of this PdbxEntityNonpoly.  # noqa: E501
        :type: str
        """

        self._rcsb_prd_id = rcsb_prd_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PdbxEntityNonpoly, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdbxEntityNonpoly):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
