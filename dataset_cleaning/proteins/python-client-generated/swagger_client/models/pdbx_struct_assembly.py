# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PdbxStructAssembly(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'details': 'str',
        'id': 'str',
        'method_details': 'str',
        'oligomeric_count': 'int',
        'oligomeric_details': 'str',
        'rcsb_candidate_assembly': 'str',
        'rcsb_details': 'str'
    }

    attribute_map = {
        'details': 'details',
        'id': 'id',
        'method_details': 'method_details',
        'oligomeric_count': 'oligomeric_count',
        'oligomeric_details': 'oligomeric_details',
        'rcsb_candidate_assembly': 'rcsb_candidate_assembly',
        'rcsb_details': 'rcsb_details'
    }

    def __init__(self, details=None, id=None, method_details=None, oligomeric_count=None, oligomeric_details=None, rcsb_candidate_assembly=None, rcsb_details=None):  # noqa: E501
        """PdbxStructAssembly - a model defined in Swagger"""  # noqa: E501
        self._details = None
        self._id = None
        self._method_details = None
        self._oligomeric_count = None
        self._oligomeric_details = None
        self._rcsb_candidate_assembly = None
        self._rcsb_details = None
        self.discriminator = None
        if details is not None:
            self.details = details
        self.id = id
        if method_details is not None:
            self.method_details = method_details
        if oligomeric_count is not None:
            self.oligomeric_count = oligomeric_count
        if oligomeric_details is not None:
            self.oligomeric_details = oligomeric_details
        if rcsb_candidate_assembly is not None:
            self.rcsb_candidate_assembly = rcsb_candidate_assembly
        if rcsb_details is not None:
            self.rcsb_details = rcsb_details

    @property
    def details(self):
        """Gets the details of this PdbxStructAssembly.  # noqa: E501

        A description of special aspects of the macromolecular assembly.                 In the PDB, 'representative helical assembly', 'complete point assembly',         'complete icosahedral assembly', 'software_defined_assembly', 'author_defined_assembly',         and 'author_and_software_defined_assembly' are considered \"biologically relevant assemblies.  # noqa: E501

        :return: The details of this PdbxStructAssembly.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this PdbxStructAssembly.

        A description of special aspects of the macromolecular assembly.                 In the PDB, 'representative helical assembly', 'complete point assembly',         'complete icosahedral assembly', 'software_defined_assembly', 'author_defined_assembly',         and 'author_and_software_defined_assembly' are considered \"biologically relevant assemblies.  # noqa: E501

        :param details: The details of this PdbxStructAssembly.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def id(self):
        """Gets the id of this PdbxStructAssembly.  # noqa: E501

        The value of _pdbx_struct_assembly.id must uniquely identify a record in  the PDBX_STRUCT_ASSEMBLY list.  # noqa: E501

        :return: The id of this PdbxStructAssembly.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PdbxStructAssembly.

        The value of _pdbx_struct_assembly.id must uniquely identify a record in  the PDBX_STRUCT_ASSEMBLY list.  # noqa: E501

        :param id: The id of this PdbxStructAssembly.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def method_details(self):
        """Gets the method_details of this PdbxStructAssembly.  # noqa: E501

        Provides details of the method used to determine or  compute the assembly.  # noqa: E501

        :return: The method_details of this PdbxStructAssembly.  # noqa: E501
        :rtype: str
        """
        return self._method_details

    @method_details.setter
    def method_details(self, method_details):
        """Sets the method_details of this PdbxStructAssembly.

        Provides details of the method used to determine or  compute the assembly.  # noqa: E501

        :param method_details: The method_details of this PdbxStructAssembly.  # noqa: E501
        :type: str
        """

        self._method_details = method_details

    @property
    def oligomeric_count(self):
        """Gets the oligomeric_count of this PdbxStructAssembly.  # noqa: E501

        The number of polymer molecules in the assembly.  # noqa: E501

        :return: The oligomeric_count of this PdbxStructAssembly.  # noqa: E501
        :rtype: int
        """
        return self._oligomeric_count

    @oligomeric_count.setter
    def oligomeric_count(self, oligomeric_count):
        """Sets the oligomeric_count of this PdbxStructAssembly.

        The number of polymer molecules in the assembly.  # noqa: E501

        :param oligomeric_count: The oligomeric_count of this PdbxStructAssembly.  # noqa: E501
        :type: int
        """

        self._oligomeric_count = oligomeric_count

    @property
    def oligomeric_details(self):
        """Gets the oligomeric_details of this PdbxStructAssembly.  # noqa: E501

        Provides the details of the oligomeric state of the assembly.  # noqa: E501

        :return: The oligomeric_details of this PdbxStructAssembly.  # noqa: E501
        :rtype: str
        """
        return self._oligomeric_details

    @oligomeric_details.setter
    def oligomeric_details(self, oligomeric_details):
        """Sets the oligomeric_details of this PdbxStructAssembly.

        Provides the details of the oligomeric state of the assembly.  # noqa: E501

        :param oligomeric_details: The oligomeric_details of this PdbxStructAssembly.  # noqa: E501
        :type: str
        """

        self._oligomeric_details = oligomeric_details

    @property
    def rcsb_candidate_assembly(self):
        """Gets the rcsb_candidate_assembly of this PdbxStructAssembly.  # noqa: E501

        Candidate macromolecular assembly.   Excludes the following cases classified in pdbx_struct_asembly.details:   'crystal asymmetric unit', 'crystal asymmetric unit, crystal frame', 'helical asymmetric unit',  'helical asymmetric unit, std helical frame','icosahedral 23 hexamer', 'icosahedral asymmetric unit',  'icosahedral asymmetric unit, std point frame','icosahedral pentamer', 'pentasymmetron capsid unit',  'point asymmetric unit', 'point asymmetric unit, std point frame','trisymmetron capsid unit',   and 'deposited_coordinates'.  # noqa: E501

        :return: The rcsb_candidate_assembly of this PdbxStructAssembly.  # noqa: E501
        :rtype: str
        """
        return self._rcsb_candidate_assembly

    @rcsb_candidate_assembly.setter
    def rcsb_candidate_assembly(self, rcsb_candidate_assembly):
        """Sets the rcsb_candidate_assembly of this PdbxStructAssembly.

        Candidate macromolecular assembly.   Excludes the following cases classified in pdbx_struct_asembly.details:   'crystal asymmetric unit', 'crystal asymmetric unit, crystal frame', 'helical asymmetric unit',  'helical asymmetric unit, std helical frame','icosahedral 23 hexamer', 'icosahedral asymmetric unit',  'icosahedral asymmetric unit, std point frame','icosahedral pentamer', 'pentasymmetron capsid unit',  'point asymmetric unit', 'point asymmetric unit, std point frame','trisymmetron capsid unit',   and 'deposited_coordinates'.  # noqa: E501

        :param rcsb_candidate_assembly: The rcsb_candidate_assembly of this PdbxStructAssembly.  # noqa: E501
        :type: str
        """
        allowed_values = ["N", "Y"]  # noqa: E501
        if rcsb_candidate_assembly not in allowed_values:
            raise ValueError(
                "Invalid value for `rcsb_candidate_assembly` ({0}), must be one of {1}"  # noqa: E501
                .format(rcsb_candidate_assembly, allowed_values)
            )

        self._rcsb_candidate_assembly = rcsb_candidate_assembly

    @property
    def rcsb_details(self):
        """Gets the rcsb_details of this PdbxStructAssembly.  # noqa: E501

        A filtered description of the macromolecular assembly.  # noqa: E501

        :return: The rcsb_details of this PdbxStructAssembly.  # noqa: E501
        :rtype: str
        """
        return self._rcsb_details

    @rcsb_details.setter
    def rcsb_details(self, rcsb_details):
        """Sets the rcsb_details of this PdbxStructAssembly.

        A filtered description of the macromolecular assembly.  # noqa: E501

        :param rcsb_details: The rcsb_details of this PdbxStructAssembly.  # noqa: E501
        :type: str
        """
        allowed_values = ["author_and_software_defined_assembly", "author_defined_assembly", "software_defined_assembly"]  # noqa: E501
        if rcsb_details not in allowed_values:
            raise ValueError(
                "Invalid value for `rcsb_details` ({0}), must be one of {1}"  # noqa: E501
                .format(rcsb_details, allowed_values)
            )

        self._rcsb_details = rcsb_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PdbxStructAssembly, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdbxStructAssembly):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
