# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RcsbAssemblyInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assembly_id': 'str',
        'atom_count': 'int',
        'branched_atom_count': 'int',
        'branched_entity_count': 'int',
        'branched_entity_instance_count': 'int',
        'entry_id': 'str',
        'hydrogen_atom_count': 'int',
        'modeled_polymer_monomer_count': 'int',
        'na_polymer_entity_types': 'str',
        'nonpolymer_atom_count': 'int',
        'nonpolymer_entity_count': 'int',
        'nonpolymer_entity_instance_count': 'int',
        'polymer_atom_count': 'int',
        'polymer_composition': 'str',
        'polymer_entity_count': 'int',
        'polymer_entity_count_dna': 'int',
        'polymer_entity_count_rna': 'int',
        'polymer_entity_count_nucleic_acid': 'int',
        'polymer_entity_count_nucleic_acid_hybrid': 'int',
        'polymer_entity_count_protein': 'int',
        'polymer_entity_instance_count': 'int',
        'polymer_entity_instance_count_dna': 'int',
        'polymer_entity_instance_count_rna': 'int',
        'polymer_entity_instance_count_nucleic_acid': 'int',
        'polymer_entity_instance_count_nucleic_acid_hybrid': 'int',
        'polymer_entity_instance_count_protein': 'int',
        'polymer_monomer_count': 'int',
        'selected_polymer_entity_types': 'str',
        'solvent_atom_count': 'int',
        'solvent_entity_count': 'int',
        'solvent_entity_instance_count': 'int',
        'unmodeled_polymer_monomer_count': 'int',
        'num_interfaces': 'int',
        'num_interface_entities': 'int',
        'num_homomeric_interface_entities': 'int',
        'num_heteromeric_interface_entities': 'int',
        'num_isologous_interface_entities': 'int',
        'num_heterologous_interface_entities': 'int',
        'num_protein_interface_entities': 'int',
        'num_na_interface_entities': 'int',
        'num_prot_na_interface_entities': 'int',
        'total_assembly_buried_surface_area': 'float',
        'total_number_interface_residues': 'int'
    }

    attribute_map = {
        'assembly_id': 'assembly_id',
        'atom_count': 'atom_count',
        'branched_atom_count': 'branched_atom_count',
        'branched_entity_count': 'branched_entity_count',
        'branched_entity_instance_count': 'branched_entity_instance_count',
        'entry_id': 'entry_id',
        'hydrogen_atom_count': 'hydrogen_atom_count',
        'modeled_polymer_monomer_count': 'modeled_polymer_monomer_count',
        'na_polymer_entity_types': 'na_polymer_entity_types',
        'nonpolymer_atom_count': 'nonpolymer_atom_count',
        'nonpolymer_entity_count': 'nonpolymer_entity_count',
        'nonpolymer_entity_instance_count': 'nonpolymer_entity_instance_count',
        'polymer_atom_count': 'polymer_atom_count',
        'polymer_composition': 'polymer_composition',
        'polymer_entity_count': 'polymer_entity_count',
        'polymer_entity_count_dna': 'polymer_entity_count_DNA',
        'polymer_entity_count_rna': 'polymer_entity_count_RNA',
        'polymer_entity_count_nucleic_acid': 'polymer_entity_count_nucleic_acid',
        'polymer_entity_count_nucleic_acid_hybrid': 'polymer_entity_count_nucleic_acid_hybrid',
        'polymer_entity_count_protein': 'polymer_entity_count_protein',
        'polymer_entity_instance_count': 'polymer_entity_instance_count',
        'polymer_entity_instance_count_dna': 'polymer_entity_instance_count_DNA',
        'polymer_entity_instance_count_rna': 'polymer_entity_instance_count_RNA',
        'polymer_entity_instance_count_nucleic_acid': 'polymer_entity_instance_count_nucleic_acid',
        'polymer_entity_instance_count_nucleic_acid_hybrid': 'polymer_entity_instance_count_nucleic_acid_hybrid',
        'polymer_entity_instance_count_protein': 'polymer_entity_instance_count_protein',
        'polymer_monomer_count': 'polymer_monomer_count',
        'selected_polymer_entity_types': 'selected_polymer_entity_types',
        'solvent_atom_count': 'solvent_atom_count',
        'solvent_entity_count': 'solvent_entity_count',
        'solvent_entity_instance_count': 'solvent_entity_instance_count',
        'unmodeled_polymer_monomer_count': 'unmodeled_polymer_monomer_count',
        'num_interfaces': 'num_interfaces',
        'num_interface_entities': 'num_interface_entities',
        'num_homomeric_interface_entities': 'num_homomeric_interface_entities',
        'num_heteromeric_interface_entities': 'num_heteromeric_interface_entities',
        'num_isologous_interface_entities': 'num_isologous_interface_entities',
        'num_heterologous_interface_entities': 'num_heterologous_interface_entities',
        'num_protein_interface_entities': 'num_protein_interface_entities',
        'num_na_interface_entities': 'num_na_interface_entities',
        'num_prot_na_interface_entities': 'num_prot-na_interface_entities',
        'total_assembly_buried_surface_area': 'total_assembly_buried_surface_area',
        'total_number_interface_residues': 'total_number_interface_residues'
    }

    def __init__(self, assembly_id=None, atom_count=None, branched_atom_count=None, branched_entity_count=None, branched_entity_instance_count=None, entry_id=None, hydrogen_atom_count=None, modeled_polymer_monomer_count=None, na_polymer_entity_types=None, nonpolymer_atom_count=None, nonpolymer_entity_count=None, nonpolymer_entity_instance_count=None, polymer_atom_count=None, polymer_composition=None, polymer_entity_count=None, polymer_entity_count_dna=None, polymer_entity_count_rna=None, polymer_entity_count_nucleic_acid=None, polymer_entity_count_nucleic_acid_hybrid=None, polymer_entity_count_protein=None, polymer_entity_instance_count=None, polymer_entity_instance_count_dna=None, polymer_entity_instance_count_rna=None, polymer_entity_instance_count_nucleic_acid=None, polymer_entity_instance_count_nucleic_acid_hybrid=None, polymer_entity_instance_count_protein=None, polymer_monomer_count=None, selected_polymer_entity_types=None, solvent_atom_count=None, solvent_entity_count=None, solvent_entity_instance_count=None, unmodeled_polymer_monomer_count=None, num_interfaces=None, num_interface_entities=None, num_homomeric_interface_entities=None, num_heteromeric_interface_entities=None, num_isologous_interface_entities=None, num_heterologous_interface_entities=None, num_protein_interface_entities=None, num_na_interface_entities=None, num_prot_na_interface_entities=None, total_assembly_buried_surface_area=None, total_number_interface_residues=None):  # noqa: E501
        """RcsbAssemblyInfo - a model defined in Swagger"""  # noqa: E501
        self._assembly_id = None
        self._atom_count = None
        self._branched_atom_count = None
        self._branched_entity_count = None
        self._branched_entity_instance_count = None
        self._entry_id = None
        self._hydrogen_atom_count = None
        self._modeled_polymer_monomer_count = None
        self._na_polymer_entity_types = None
        self._nonpolymer_atom_count = None
        self._nonpolymer_entity_count = None
        self._nonpolymer_entity_instance_count = None
        self._polymer_atom_count = None
        self._polymer_composition = None
        self._polymer_entity_count = None
        self._polymer_entity_count_dna = None
        self._polymer_entity_count_rna = None
        self._polymer_entity_count_nucleic_acid = None
        self._polymer_entity_count_nucleic_acid_hybrid = None
        self._polymer_entity_count_protein = None
        self._polymer_entity_instance_count = None
        self._polymer_entity_instance_count_dna = None
        self._polymer_entity_instance_count_rna = None
        self._polymer_entity_instance_count_nucleic_acid = None
        self._polymer_entity_instance_count_nucleic_acid_hybrid = None
        self._polymer_entity_instance_count_protein = None
        self._polymer_monomer_count = None
        self._selected_polymer_entity_types = None
        self._solvent_atom_count = None
        self._solvent_entity_count = None
        self._solvent_entity_instance_count = None
        self._unmodeled_polymer_monomer_count = None
        self._num_interfaces = None
        self._num_interface_entities = None
        self._num_homomeric_interface_entities = None
        self._num_heteromeric_interface_entities = None
        self._num_isologous_interface_entities = None
        self._num_heterologous_interface_entities = None
        self._num_protein_interface_entities = None
        self._num_na_interface_entities = None
        self._num_prot_na_interface_entities = None
        self._total_assembly_buried_surface_area = None
        self._total_number_interface_residues = None
        self.discriminator = None
        if assembly_id is not None:
            self.assembly_id = assembly_id
        if atom_count is not None:
            self.atom_count = atom_count
        if branched_atom_count is not None:
            self.branched_atom_count = branched_atom_count
        if branched_entity_count is not None:
            self.branched_entity_count = branched_entity_count
        if branched_entity_instance_count is not None:
            self.branched_entity_instance_count = branched_entity_instance_count
        self.entry_id = entry_id
        if hydrogen_atom_count is not None:
            self.hydrogen_atom_count = hydrogen_atom_count
        if modeled_polymer_monomer_count is not None:
            self.modeled_polymer_monomer_count = modeled_polymer_monomer_count
        if na_polymer_entity_types is not None:
            self.na_polymer_entity_types = na_polymer_entity_types
        if nonpolymer_atom_count is not None:
            self.nonpolymer_atom_count = nonpolymer_atom_count
        if nonpolymer_entity_count is not None:
            self.nonpolymer_entity_count = nonpolymer_entity_count
        if nonpolymer_entity_instance_count is not None:
            self.nonpolymer_entity_instance_count = nonpolymer_entity_instance_count
        if polymer_atom_count is not None:
            self.polymer_atom_count = polymer_atom_count
        if polymer_composition is not None:
            self.polymer_composition = polymer_composition
        if polymer_entity_count is not None:
            self.polymer_entity_count = polymer_entity_count
        if polymer_entity_count_dna is not None:
            self.polymer_entity_count_dna = polymer_entity_count_dna
        if polymer_entity_count_rna is not None:
            self.polymer_entity_count_rna = polymer_entity_count_rna
        if polymer_entity_count_nucleic_acid is not None:
            self.polymer_entity_count_nucleic_acid = polymer_entity_count_nucleic_acid
        if polymer_entity_count_nucleic_acid_hybrid is not None:
            self.polymer_entity_count_nucleic_acid_hybrid = polymer_entity_count_nucleic_acid_hybrid
        if polymer_entity_count_protein is not None:
            self.polymer_entity_count_protein = polymer_entity_count_protein
        if polymer_entity_instance_count is not None:
            self.polymer_entity_instance_count = polymer_entity_instance_count
        if polymer_entity_instance_count_dna is not None:
            self.polymer_entity_instance_count_dna = polymer_entity_instance_count_dna
        if polymer_entity_instance_count_rna is not None:
            self.polymer_entity_instance_count_rna = polymer_entity_instance_count_rna
        if polymer_entity_instance_count_nucleic_acid is not None:
            self.polymer_entity_instance_count_nucleic_acid = polymer_entity_instance_count_nucleic_acid
        if polymer_entity_instance_count_nucleic_acid_hybrid is not None:
            self.polymer_entity_instance_count_nucleic_acid_hybrid = polymer_entity_instance_count_nucleic_acid_hybrid
        if polymer_entity_instance_count_protein is not None:
            self.polymer_entity_instance_count_protein = polymer_entity_instance_count_protein
        if polymer_monomer_count is not None:
            self.polymer_monomer_count = polymer_monomer_count
        if selected_polymer_entity_types is not None:
            self.selected_polymer_entity_types = selected_polymer_entity_types
        if solvent_atom_count is not None:
            self.solvent_atom_count = solvent_atom_count
        if solvent_entity_count is not None:
            self.solvent_entity_count = solvent_entity_count
        if solvent_entity_instance_count is not None:
            self.solvent_entity_instance_count = solvent_entity_instance_count
        if unmodeled_polymer_monomer_count is not None:
            self.unmodeled_polymer_monomer_count = unmodeled_polymer_monomer_count
        if num_interfaces is not None:
            self.num_interfaces = num_interfaces
        if num_interface_entities is not None:
            self.num_interface_entities = num_interface_entities
        if num_homomeric_interface_entities is not None:
            self.num_homomeric_interface_entities = num_homomeric_interface_entities
        if num_heteromeric_interface_entities is not None:
            self.num_heteromeric_interface_entities = num_heteromeric_interface_entities
        if num_isologous_interface_entities is not None:
            self.num_isologous_interface_entities = num_isologous_interface_entities
        if num_heterologous_interface_entities is not None:
            self.num_heterologous_interface_entities = num_heterologous_interface_entities
        if num_protein_interface_entities is not None:
            self.num_protein_interface_entities = num_protein_interface_entities
        if num_na_interface_entities is not None:
            self.num_na_interface_entities = num_na_interface_entities
        if num_prot_na_interface_entities is not None:
            self.num_prot_na_interface_entities = num_prot_na_interface_entities
        if total_assembly_buried_surface_area is not None:
            self.total_assembly_buried_surface_area = total_assembly_buried_surface_area
        if total_number_interface_residues is not None:
            self.total_number_interface_residues = total_number_interface_residues

    @property
    def assembly_id(self):
        """Gets the assembly_id of this RcsbAssemblyInfo.  # noqa: E501

        Entity identifier for the container.  # noqa: E501

        :return: The assembly_id of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: str
        """
        return self._assembly_id

    @assembly_id.setter
    def assembly_id(self, assembly_id):
        """Sets the assembly_id of this RcsbAssemblyInfo.

        Entity identifier for the container.  # noqa: E501

        :param assembly_id: The assembly_id of this RcsbAssemblyInfo.  # noqa: E501
        :type: str
        """

        self._assembly_id = assembly_id

    @property
    def atom_count(self):
        """Gets the atom_count of this RcsbAssemblyInfo.  # noqa: E501

        The assembly non-hydrogen atomic coordinate count.  # noqa: E501

        :return: The atom_count of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: int
        """
        return self._atom_count

    @atom_count.setter
    def atom_count(self, atom_count):
        """Sets the atom_count of this RcsbAssemblyInfo.

        The assembly non-hydrogen atomic coordinate count.  # noqa: E501

        :param atom_count: The atom_count of this RcsbAssemblyInfo.  # noqa: E501
        :type: int
        """

        self._atom_count = atom_count

    @property
    def branched_atom_count(self):
        """Gets the branched_atom_count of this RcsbAssemblyInfo.  # noqa: E501

        The assembly non-hydrogen branched entity atomic coordinate count.  # noqa: E501

        :return: The branched_atom_count of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: int
        """
        return self._branched_atom_count

    @branched_atom_count.setter
    def branched_atom_count(self, branched_atom_count):
        """Sets the branched_atom_count of this RcsbAssemblyInfo.

        The assembly non-hydrogen branched entity atomic coordinate count.  # noqa: E501

        :param branched_atom_count: The branched_atom_count of this RcsbAssemblyInfo.  # noqa: E501
        :type: int
        """

        self._branched_atom_count = branched_atom_count

    @property
    def branched_entity_count(self):
        """Gets the branched_entity_count of this RcsbAssemblyInfo.  # noqa: E501

        The number of distinct branched entities in the generated assembly.  # noqa: E501

        :return: The branched_entity_count of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: int
        """
        return self._branched_entity_count

    @branched_entity_count.setter
    def branched_entity_count(self, branched_entity_count):
        """Sets the branched_entity_count of this RcsbAssemblyInfo.

        The number of distinct branched entities in the generated assembly.  # noqa: E501

        :param branched_entity_count: The branched_entity_count of this RcsbAssemblyInfo.  # noqa: E501
        :type: int
        """

        self._branched_entity_count = branched_entity_count

    @property
    def branched_entity_instance_count(self):
        """Gets the branched_entity_instance_count of this RcsbAssemblyInfo.  # noqa: E501

        The number of branched instances in the generated assembly data set.  This is the total count of branched entity instances generated in the assembly coordinate data.  # noqa: E501

        :return: The branched_entity_instance_count of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: int
        """
        return self._branched_entity_instance_count

    @branched_entity_instance_count.setter
    def branched_entity_instance_count(self, branched_entity_instance_count):
        """Sets the branched_entity_instance_count of this RcsbAssemblyInfo.

        The number of branched instances in the generated assembly data set.  This is the total count of branched entity instances generated in the assembly coordinate data.  # noqa: E501

        :param branched_entity_instance_count: The branched_entity_instance_count of this RcsbAssemblyInfo.  # noqa: E501
        :type: int
        """

        self._branched_entity_instance_count = branched_entity_instance_count

    @property
    def entry_id(self):
        """Gets the entry_id of this RcsbAssemblyInfo.  # noqa: E501

        The PDB entry accession code.  # noqa: E501

        :return: The entry_id of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: str
        """
        return self._entry_id

    @entry_id.setter
    def entry_id(self, entry_id):
        """Sets the entry_id of this RcsbAssemblyInfo.

        The PDB entry accession code.  # noqa: E501

        :param entry_id: The entry_id of this RcsbAssemblyInfo.  # noqa: E501
        :type: str
        """
        if entry_id is None:
            raise ValueError("Invalid value for `entry_id`, must not be `None`")  # noqa: E501

        self._entry_id = entry_id

    @property
    def hydrogen_atom_count(self):
        """Gets the hydrogen_atom_count of this RcsbAssemblyInfo.  # noqa: E501

        The assembly hydrogen atomic coordinate count.  # noqa: E501

        :return: The hydrogen_atom_count of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: int
        """
        return self._hydrogen_atom_count

    @hydrogen_atom_count.setter
    def hydrogen_atom_count(self, hydrogen_atom_count):
        """Sets the hydrogen_atom_count of this RcsbAssemblyInfo.

        The assembly hydrogen atomic coordinate count.  # noqa: E501

        :param hydrogen_atom_count: The hydrogen_atom_count of this RcsbAssemblyInfo.  # noqa: E501
        :type: int
        """

        self._hydrogen_atom_count = hydrogen_atom_count

    @property
    def modeled_polymer_monomer_count(self):
        """Gets the modeled_polymer_monomer_count of this RcsbAssemblyInfo.  # noqa: E501

        The number of modeled polymer monomers in the assembly coordinate data.  This is the total count of monomers with reported coordinate data for all polymer  entity instances in the generated assembly coordinate data.  # noqa: E501

        :return: The modeled_polymer_monomer_count of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: int
        """
        return self._modeled_polymer_monomer_count

    @modeled_polymer_monomer_count.setter
    def modeled_polymer_monomer_count(self, modeled_polymer_monomer_count):
        """Sets the modeled_polymer_monomer_count of this RcsbAssemblyInfo.

        The number of modeled polymer monomers in the assembly coordinate data.  This is the total count of monomers with reported coordinate data for all polymer  entity instances in the generated assembly coordinate data.  # noqa: E501

        :param modeled_polymer_monomer_count: The modeled_polymer_monomer_count of this RcsbAssemblyInfo.  # noqa: E501
        :type: int
        """

        self._modeled_polymer_monomer_count = modeled_polymer_monomer_count

    @property
    def na_polymer_entity_types(self):
        """Gets the na_polymer_entity_types of this RcsbAssemblyInfo.  # noqa: E501

        Nucleic acid polymer entity type categories describing the generated assembly.  # noqa: E501

        :return: The na_polymer_entity_types of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: str
        """
        return self._na_polymer_entity_types

    @na_polymer_entity_types.setter
    def na_polymer_entity_types(self, na_polymer_entity_types):
        """Sets the na_polymer_entity_types of this RcsbAssemblyInfo.

        Nucleic acid polymer entity type categories describing the generated assembly.  # noqa: E501

        :param na_polymer_entity_types: The na_polymer_entity_types of this RcsbAssemblyInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["DNA (only)", "DNA/RNA (only)", "NA-hybrid (only)", "Other", "RNA (only)"]  # noqa: E501
        if na_polymer_entity_types not in allowed_values:
            raise ValueError(
                "Invalid value for `na_polymer_entity_types` ({0}), must be one of {1}"  # noqa: E501
                .format(na_polymer_entity_types, allowed_values)
            )

        self._na_polymer_entity_types = na_polymer_entity_types

    @property
    def nonpolymer_atom_count(self):
        """Gets the nonpolymer_atom_count of this RcsbAssemblyInfo.  # noqa: E501

        The assembly non-hydrogen non-polymer entity atomic coordinate count.  # noqa: E501

        :return: The nonpolymer_atom_count of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: int
        """
        return self._nonpolymer_atom_count

    @nonpolymer_atom_count.setter
    def nonpolymer_atom_count(self, nonpolymer_atom_count):
        """Sets the nonpolymer_atom_count of this RcsbAssemblyInfo.

        The assembly non-hydrogen non-polymer entity atomic coordinate count.  # noqa: E501

        :param nonpolymer_atom_count: The nonpolymer_atom_count of this RcsbAssemblyInfo.  # noqa: E501
        :type: int
        """

        self._nonpolymer_atom_count = nonpolymer_atom_count

    @property
    def nonpolymer_entity_count(self):
        """Gets the nonpolymer_entity_count of this RcsbAssemblyInfo.  # noqa: E501

        The number of distinct non-polymer entities in the generated assembly exclusive of solvent.  # noqa: E501

        :return: The nonpolymer_entity_count of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: int
        """
        return self._nonpolymer_entity_count

    @nonpolymer_entity_count.setter
    def nonpolymer_entity_count(self, nonpolymer_entity_count):
        """Sets the nonpolymer_entity_count of this RcsbAssemblyInfo.

        The number of distinct non-polymer entities in the generated assembly exclusive of solvent.  # noqa: E501

        :param nonpolymer_entity_count: The nonpolymer_entity_count of this RcsbAssemblyInfo.  # noqa: E501
        :type: int
        """

        self._nonpolymer_entity_count = nonpolymer_entity_count

    @property
    def nonpolymer_entity_instance_count(self):
        """Gets the nonpolymer_entity_instance_count of this RcsbAssemblyInfo.  # noqa: E501

        The number of non-polymer instances in the generated assembly data set exclusive of solvent.  This is the total count of non-polymer entity instances generated in the assembly coordinate data.  # noqa: E501

        :return: The nonpolymer_entity_instance_count of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: int
        """
        return self._nonpolymer_entity_instance_count

    @nonpolymer_entity_instance_count.setter
    def nonpolymer_entity_instance_count(self, nonpolymer_entity_instance_count):
        """Sets the nonpolymer_entity_instance_count of this RcsbAssemblyInfo.

        The number of non-polymer instances in the generated assembly data set exclusive of solvent.  This is the total count of non-polymer entity instances generated in the assembly coordinate data.  # noqa: E501

        :param nonpolymer_entity_instance_count: The nonpolymer_entity_instance_count of this RcsbAssemblyInfo.  # noqa: E501
        :type: int
        """

        self._nonpolymer_entity_instance_count = nonpolymer_entity_instance_count

    @property
    def polymer_atom_count(self):
        """Gets the polymer_atom_count of this RcsbAssemblyInfo.  # noqa: E501

        The assembly non-hydrogen polymer entity atomic coordinate count.  # noqa: E501

        :return: The polymer_atom_count of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: int
        """
        return self._polymer_atom_count

    @polymer_atom_count.setter
    def polymer_atom_count(self, polymer_atom_count):
        """Sets the polymer_atom_count of this RcsbAssemblyInfo.

        The assembly non-hydrogen polymer entity atomic coordinate count.  # noqa: E501

        :param polymer_atom_count: The polymer_atom_count of this RcsbAssemblyInfo.  # noqa: E501
        :type: int
        """

        self._polymer_atom_count = polymer_atom_count

    @property
    def polymer_composition(self):
        """Gets the polymer_composition of this RcsbAssemblyInfo.  # noqa: E501

        Categories describing the polymer entity composition for the generated assembly.  # noqa: E501

        :return: The polymer_composition of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: str
        """
        return self._polymer_composition

    @polymer_composition.setter
    def polymer_composition(self, polymer_composition):
        """Sets the polymer_composition of this RcsbAssemblyInfo.

        Categories describing the polymer entity composition for the generated assembly.  # noqa: E501

        :param polymer_composition: The polymer_composition of this RcsbAssemblyInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["DNA", "DNA/RNA", "NA-hybrid", "NA/oligosaccharide", "RNA", "heteromeric protein", "homomeric protein", "oligosaccharide", "other", "other type composition", "other type pair", "protein/NA", "protein/NA/oligosaccharide", "protein/oligosaccharide"]  # noqa: E501
        if polymer_composition not in allowed_values:
            raise ValueError(
                "Invalid value for `polymer_composition` ({0}), must be one of {1}"  # noqa: E501
                .format(polymer_composition, allowed_values)
            )

        self._polymer_composition = polymer_composition

    @property
    def polymer_entity_count(self):
        """Gets the polymer_entity_count of this RcsbAssemblyInfo.  # noqa: E501

        The number of distinct polymer entities in the generated assembly.  # noqa: E501

        :return: The polymer_entity_count of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: int
        """
        return self._polymer_entity_count

    @polymer_entity_count.setter
    def polymer_entity_count(self, polymer_entity_count):
        """Sets the polymer_entity_count of this RcsbAssemblyInfo.

        The number of distinct polymer entities in the generated assembly.  # noqa: E501

        :param polymer_entity_count: The polymer_entity_count of this RcsbAssemblyInfo.  # noqa: E501
        :type: int
        """

        self._polymer_entity_count = polymer_entity_count

    @property
    def polymer_entity_count_dna(self):
        """Gets the polymer_entity_count_dna of this RcsbAssemblyInfo.  # noqa: E501

        The number of distinct DNA polymer entities in the generated assembly.  # noqa: E501

        :return: The polymer_entity_count_dna of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: int
        """
        return self._polymer_entity_count_dna

    @polymer_entity_count_dna.setter
    def polymer_entity_count_dna(self, polymer_entity_count_dna):
        """Sets the polymer_entity_count_dna of this RcsbAssemblyInfo.

        The number of distinct DNA polymer entities in the generated assembly.  # noqa: E501

        :param polymer_entity_count_dna: The polymer_entity_count_dna of this RcsbAssemblyInfo.  # noqa: E501
        :type: int
        """

        self._polymer_entity_count_dna = polymer_entity_count_dna

    @property
    def polymer_entity_count_rna(self):
        """Gets the polymer_entity_count_rna of this RcsbAssemblyInfo.  # noqa: E501

        The number of distinct RNA polymer entities in the generated assembly.  # noqa: E501

        :return: The polymer_entity_count_rna of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: int
        """
        return self._polymer_entity_count_rna

    @polymer_entity_count_rna.setter
    def polymer_entity_count_rna(self, polymer_entity_count_rna):
        """Sets the polymer_entity_count_rna of this RcsbAssemblyInfo.

        The number of distinct RNA polymer entities in the generated assembly.  # noqa: E501

        :param polymer_entity_count_rna: The polymer_entity_count_rna of this RcsbAssemblyInfo.  # noqa: E501
        :type: int
        """

        self._polymer_entity_count_rna = polymer_entity_count_rna

    @property
    def polymer_entity_count_nucleic_acid(self):
        """Gets the polymer_entity_count_nucleic_acid of this RcsbAssemblyInfo.  # noqa: E501

        The number of distinct nucleic acid polymer entities (DNA or RNA) in the generated assembly.  # noqa: E501

        :return: The polymer_entity_count_nucleic_acid of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: int
        """
        return self._polymer_entity_count_nucleic_acid

    @polymer_entity_count_nucleic_acid.setter
    def polymer_entity_count_nucleic_acid(self, polymer_entity_count_nucleic_acid):
        """Sets the polymer_entity_count_nucleic_acid of this RcsbAssemblyInfo.

        The number of distinct nucleic acid polymer entities (DNA or RNA) in the generated assembly.  # noqa: E501

        :param polymer_entity_count_nucleic_acid: The polymer_entity_count_nucleic_acid of this RcsbAssemblyInfo.  # noqa: E501
        :type: int
        """

        self._polymer_entity_count_nucleic_acid = polymer_entity_count_nucleic_acid

    @property
    def polymer_entity_count_nucleic_acid_hybrid(self):
        """Gets the polymer_entity_count_nucleic_acid_hybrid of this RcsbAssemblyInfo.  # noqa: E501

        The number of distinct hybrid nucleic acid polymer entities in the generated assembly.  # noqa: E501

        :return: The polymer_entity_count_nucleic_acid_hybrid of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: int
        """
        return self._polymer_entity_count_nucleic_acid_hybrid

    @polymer_entity_count_nucleic_acid_hybrid.setter
    def polymer_entity_count_nucleic_acid_hybrid(self, polymer_entity_count_nucleic_acid_hybrid):
        """Sets the polymer_entity_count_nucleic_acid_hybrid of this RcsbAssemblyInfo.

        The number of distinct hybrid nucleic acid polymer entities in the generated assembly.  # noqa: E501

        :param polymer_entity_count_nucleic_acid_hybrid: The polymer_entity_count_nucleic_acid_hybrid of this RcsbAssemblyInfo.  # noqa: E501
        :type: int
        """

        self._polymer_entity_count_nucleic_acid_hybrid = polymer_entity_count_nucleic_acid_hybrid

    @property
    def polymer_entity_count_protein(self):
        """Gets the polymer_entity_count_protein of this RcsbAssemblyInfo.  # noqa: E501

        The number of distinct protein polymer entities in the generated assembly.  # noqa: E501

        :return: The polymer_entity_count_protein of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: int
        """
        return self._polymer_entity_count_protein

    @polymer_entity_count_protein.setter
    def polymer_entity_count_protein(self, polymer_entity_count_protein):
        """Sets the polymer_entity_count_protein of this RcsbAssemblyInfo.

        The number of distinct protein polymer entities in the generated assembly.  # noqa: E501

        :param polymer_entity_count_protein: The polymer_entity_count_protein of this RcsbAssemblyInfo.  # noqa: E501
        :type: int
        """

        self._polymer_entity_count_protein = polymer_entity_count_protein

    @property
    def polymer_entity_instance_count(self):
        """Gets the polymer_entity_instance_count of this RcsbAssemblyInfo.  # noqa: E501

        The number of polymer instances in the generated assembly data set.  This is the total count of polymer entity instances generated in the assembly coordinate data.  # noqa: E501

        :return: The polymer_entity_instance_count of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: int
        """
        return self._polymer_entity_instance_count

    @polymer_entity_instance_count.setter
    def polymer_entity_instance_count(self, polymer_entity_instance_count):
        """Sets the polymer_entity_instance_count of this RcsbAssemblyInfo.

        The number of polymer instances in the generated assembly data set.  This is the total count of polymer entity instances generated in the assembly coordinate data.  # noqa: E501

        :param polymer_entity_instance_count: The polymer_entity_instance_count of this RcsbAssemblyInfo.  # noqa: E501
        :type: int
        """

        self._polymer_entity_instance_count = polymer_entity_instance_count

    @property
    def polymer_entity_instance_count_dna(self):
        """Gets the polymer_entity_instance_count_dna of this RcsbAssemblyInfo.  # noqa: E501

        The number of DNA polymer instances in the generated assembly data set.  This is the total count of DNA polymer entity instances generated in the assembly coordinate data.  # noqa: E501

        :return: The polymer_entity_instance_count_dna of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: int
        """
        return self._polymer_entity_instance_count_dna

    @polymer_entity_instance_count_dna.setter
    def polymer_entity_instance_count_dna(self, polymer_entity_instance_count_dna):
        """Sets the polymer_entity_instance_count_dna of this RcsbAssemblyInfo.

        The number of DNA polymer instances in the generated assembly data set.  This is the total count of DNA polymer entity instances generated in the assembly coordinate data.  # noqa: E501

        :param polymer_entity_instance_count_dna: The polymer_entity_instance_count_dna of this RcsbAssemblyInfo.  # noqa: E501
        :type: int
        """

        self._polymer_entity_instance_count_dna = polymer_entity_instance_count_dna

    @property
    def polymer_entity_instance_count_rna(self):
        """Gets the polymer_entity_instance_count_rna of this RcsbAssemblyInfo.  # noqa: E501

        The number of RNA polymer instances in the generated assembly data set.  This is the total count of RNA polymer entity instances generated in the assembly coordinate data.  # noqa: E501

        :return: The polymer_entity_instance_count_rna of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: int
        """
        return self._polymer_entity_instance_count_rna

    @polymer_entity_instance_count_rna.setter
    def polymer_entity_instance_count_rna(self, polymer_entity_instance_count_rna):
        """Sets the polymer_entity_instance_count_rna of this RcsbAssemblyInfo.

        The number of RNA polymer instances in the generated assembly data set.  This is the total count of RNA polymer entity instances generated in the assembly coordinate data.  # noqa: E501

        :param polymer_entity_instance_count_rna: The polymer_entity_instance_count_rna of this RcsbAssemblyInfo.  # noqa: E501
        :type: int
        """

        self._polymer_entity_instance_count_rna = polymer_entity_instance_count_rna

    @property
    def polymer_entity_instance_count_nucleic_acid(self):
        """Gets the polymer_entity_instance_count_nucleic_acid of this RcsbAssemblyInfo.  # noqa: E501

        The number of nucleic acid polymer instances in the generated assembly data set.  This is the total count of nucleic acid polymer entity instances generated in the assembly coordinate data.  # noqa: E501

        :return: The polymer_entity_instance_count_nucleic_acid of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: int
        """
        return self._polymer_entity_instance_count_nucleic_acid

    @polymer_entity_instance_count_nucleic_acid.setter
    def polymer_entity_instance_count_nucleic_acid(self, polymer_entity_instance_count_nucleic_acid):
        """Sets the polymer_entity_instance_count_nucleic_acid of this RcsbAssemblyInfo.

        The number of nucleic acid polymer instances in the generated assembly data set.  This is the total count of nucleic acid polymer entity instances generated in the assembly coordinate data.  # noqa: E501

        :param polymer_entity_instance_count_nucleic_acid: The polymer_entity_instance_count_nucleic_acid of this RcsbAssemblyInfo.  # noqa: E501
        :type: int
        """

        self._polymer_entity_instance_count_nucleic_acid = polymer_entity_instance_count_nucleic_acid

    @property
    def polymer_entity_instance_count_nucleic_acid_hybrid(self):
        """Gets the polymer_entity_instance_count_nucleic_acid_hybrid of this RcsbAssemblyInfo.  # noqa: E501

        The number of hybrid nucleic acide polymer instances in the generated assembly data set.  This is the total count of hybrid nucleic acid polymer entity instances generated in the assembly coordinate data.  # noqa: E501

        :return: The polymer_entity_instance_count_nucleic_acid_hybrid of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: int
        """
        return self._polymer_entity_instance_count_nucleic_acid_hybrid

    @polymer_entity_instance_count_nucleic_acid_hybrid.setter
    def polymer_entity_instance_count_nucleic_acid_hybrid(self, polymer_entity_instance_count_nucleic_acid_hybrid):
        """Sets the polymer_entity_instance_count_nucleic_acid_hybrid of this RcsbAssemblyInfo.

        The number of hybrid nucleic acide polymer instances in the generated assembly data set.  This is the total count of hybrid nucleic acid polymer entity instances generated in the assembly coordinate data.  # noqa: E501

        :param polymer_entity_instance_count_nucleic_acid_hybrid: The polymer_entity_instance_count_nucleic_acid_hybrid of this RcsbAssemblyInfo.  # noqa: E501
        :type: int
        """

        self._polymer_entity_instance_count_nucleic_acid_hybrid = polymer_entity_instance_count_nucleic_acid_hybrid

    @property
    def polymer_entity_instance_count_protein(self):
        """Gets the polymer_entity_instance_count_protein of this RcsbAssemblyInfo.  # noqa: E501

        The number of protein polymer instances in the generated assembly data set.  This is the total count of protein polymer entity instances generated in the assembly coordinate data.  # noqa: E501

        :return: The polymer_entity_instance_count_protein of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: int
        """
        return self._polymer_entity_instance_count_protein

    @polymer_entity_instance_count_protein.setter
    def polymer_entity_instance_count_protein(self, polymer_entity_instance_count_protein):
        """Sets the polymer_entity_instance_count_protein of this RcsbAssemblyInfo.

        The number of protein polymer instances in the generated assembly data set.  This is the total count of protein polymer entity instances generated in the assembly coordinate data.  # noqa: E501

        :param polymer_entity_instance_count_protein: The polymer_entity_instance_count_protein of this RcsbAssemblyInfo.  # noqa: E501
        :type: int
        """

        self._polymer_entity_instance_count_protein = polymer_entity_instance_count_protein

    @property
    def polymer_monomer_count(self):
        """Gets the polymer_monomer_count of this RcsbAssemblyInfo.  # noqa: E501

        The number of polymer monomers in sample entity instances comprising the assembly data set.  This is the total count of monomers for all polymer entity instances  in the generated assembly coordinate data.  # noqa: E501

        :return: The polymer_monomer_count of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: int
        """
        return self._polymer_monomer_count

    @polymer_monomer_count.setter
    def polymer_monomer_count(self, polymer_monomer_count):
        """Sets the polymer_monomer_count of this RcsbAssemblyInfo.

        The number of polymer monomers in sample entity instances comprising the assembly data set.  This is the total count of monomers for all polymer entity instances  in the generated assembly coordinate data.  # noqa: E501

        :param polymer_monomer_count: The polymer_monomer_count of this RcsbAssemblyInfo.  # noqa: E501
        :type: int
        """

        self._polymer_monomer_count = polymer_monomer_count

    @property
    def selected_polymer_entity_types(self):
        """Gets the selected_polymer_entity_types of this RcsbAssemblyInfo.  # noqa: E501

        Selected polymer entity type categories describing the generated assembly.  # noqa: E501

        :return: The selected_polymer_entity_types of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: str
        """
        return self._selected_polymer_entity_types

    @selected_polymer_entity_types.setter
    def selected_polymer_entity_types(self, selected_polymer_entity_types):
        """Sets the selected_polymer_entity_types of this RcsbAssemblyInfo.

        Selected polymer entity type categories describing the generated assembly.  # noqa: E501

        :param selected_polymer_entity_types: The selected_polymer_entity_types of this RcsbAssemblyInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["Nucleic acid (only)", "Other", "Protein (only)", "Protein/NA"]  # noqa: E501
        if selected_polymer_entity_types not in allowed_values:
            raise ValueError(
                "Invalid value for `selected_polymer_entity_types` ({0}), must be one of {1}"  # noqa: E501
                .format(selected_polymer_entity_types, allowed_values)
            )

        self._selected_polymer_entity_types = selected_polymer_entity_types

    @property
    def solvent_atom_count(self):
        """Gets the solvent_atom_count of this RcsbAssemblyInfo.  # noqa: E501

        The assembly non-hydrogen solvent atomic coordinate count.  # noqa: E501

        :return: The solvent_atom_count of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: int
        """
        return self._solvent_atom_count

    @solvent_atom_count.setter
    def solvent_atom_count(self, solvent_atom_count):
        """Sets the solvent_atom_count of this RcsbAssemblyInfo.

        The assembly non-hydrogen solvent atomic coordinate count.  # noqa: E501

        :param solvent_atom_count: The solvent_atom_count of this RcsbAssemblyInfo.  # noqa: E501
        :type: int
        """

        self._solvent_atom_count = solvent_atom_count

    @property
    def solvent_entity_count(self):
        """Gets the solvent_entity_count of this RcsbAssemblyInfo.  # noqa: E501

        The number of distinct solvent entities in the generated assembly.  # noqa: E501

        :return: The solvent_entity_count of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: int
        """
        return self._solvent_entity_count

    @solvent_entity_count.setter
    def solvent_entity_count(self, solvent_entity_count):
        """Sets the solvent_entity_count of this RcsbAssemblyInfo.

        The number of distinct solvent entities in the generated assembly.  # noqa: E501

        :param solvent_entity_count: The solvent_entity_count of this RcsbAssemblyInfo.  # noqa: E501
        :type: int
        """

        self._solvent_entity_count = solvent_entity_count

    @property
    def solvent_entity_instance_count(self):
        """Gets the solvent_entity_instance_count of this RcsbAssemblyInfo.  # noqa: E501

        The number of solvent instances in the generated assembly data set.  This is the total count of solvent entity instances generated in the assembly coordinate data.  # noqa: E501

        :return: The solvent_entity_instance_count of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: int
        """
        return self._solvent_entity_instance_count

    @solvent_entity_instance_count.setter
    def solvent_entity_instance_count(self, solvent_entity_instance_count):
        """Sets the solvent_entity_instance_count of this RcsbAssemblyInfo.

        The number of solvent instances in the generated assembly data set.  This is the total count of solvent entity instances generated in the assembly coordinate data.  # noqa: E501

        :param solvent_entity_instance_count: The solvent_entity_instance_count of this RcsbAssemblyInfo.  # noqa: E501
        :type: int
        """

        self._solvent_entity_instance_count = solvent_entity_instance_count

    @property
    def unmodeled_polymer_monomer_count(self):
        """Gets the unmodeled_polymer_monomer_count of this RcsbAssemblyInfo.  # noqa: E501

        The number of unmodeled polymer monomers in the assembly coordinate data. This is  the total count of monomers with unreported coordinate data for all polymer  entity instances in the generated assembly coordinate data.  # noqa: E501

        :return: The unmodeled_polymer_monomer_count of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: int
        """
        return self._unmodeled_polymer_monomer_count

    @unmodeled_polymer_monomer_count.setter
    def unmodeled_polymer_monomer_count(self, unmodeled_polymer_monomer_count):
        """Sets the unmodeled_polymer_monomer_count of this RcsbAssemblyInfo.

        The number of unmodeled polymer monomers in the assembly coordinate data. This is  the total count of monomers with unreported coordinate data for all polymer  entity instances in the generated assembly coordinate data.  # noqa: E501

        :param unmodeled_polymer_monomer_count: The unmodeled_polymer_monomer_count of this RcsbAssemblyInfo.  # noqa: E501
        :type: int
        """

        self._unmodeled_polymer_monomer_count = unmodeled_polymer_monomer_count

    @property
    def num_interfaces(self):
        """Gets the num_interfaces of this RcsbAssemblyInfo.  # noqa: E501

        Number of geometrically equivalent (i.e. same asym_ids on either side) polymer-polymer interfaces in the assembly  # noqa: E501

        :return: The num_interfaces of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: int
        """
        return self._num_interfaces

    @num_interfaces.setter
    def num_interfaces(self, num_interfaces):
        """Sets the num_interfaces of this RcsbAssemblyInfo.

        Number of geometrically equivalent (i.e. same asym_ids on either side) polymer-polymer interfaces in the assembly  # noqa: E501

        :param num_interfaces: The num_interfaces of this RcsbAssemblyInfo.  # noqa: E501
        :type: int
        """

        self._num_interfaces = num_interfaces

    @property
    def num_interface_entities(self):
        """Gets the num_interface_entities of this RcsbAssemblyInfo.  # noqa: E501

        Number of polymer-polymer interface entities, grouping equivalent interfaces at the entity level (i.e. same entity_ids on either side, with similar but not identical binding sites)  # noqa: E501

        :return: The num_interface_entities of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: int
        """
        return self._num_interface_entities

    @num_interface_entities.setter
    def num_interface_entities(self, num_interface_entities):
        """Sets the num_interface_entities of this RcsbAssemblyInfo.

        Number of polymer-polymer interface entities, grouping equivalent interfaces at the entity level (i.e. same entity_ids on either side, with similar but not identical binding sites)  # noqa: E501

        :param num_interface_entities: The num_interface_entities of this RcsbAssemblyInfo.  # noqa: E501
        :type: int
        """

        self._num_interface_entities = num_interface_entities

    @property
    def num_homomeric_interface_entities(self):
        """Gets the num_homomeric_interface_entities of this RcsbAssemblyInfo.  # noqa: E501

        Number of homomeric (both partners are the same polymeric entity) interface entities  # noqa: E501

        :return: The num_homomeric_interface_entities of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: int
        """
        return self._num_homomeric_interface_entities

    @num_homomeric_interface_entities.setter
    def num_homomeric_interface_entities(self, num_homomeric_interface_entities):
        """Sets the num_homomeric_interface_entities of this RcsbAssemblyInfo.

        Number of homomeric (both partners are the same polymeric entity) interface entities  # noqa: E501

        :param num_homomeric_interface_entities: The num_homomeric_interface_entities of this RcsbAssemblyInfo.  # noqa: E501
        :type: int
        """

        self._num_homomeric_interface_entities = num_homomeric_interface_entities

    @property
    def num_heteromeric_interface_entities(self):
        """Gets the num_heteromeric_interface_entities of this RcsbAssemblyInfo.  # noqa: E501

        Number of heteromeric (both partners are different polymeric entities) interface entities  # noqa: E501

        :return: The num_heteromeric_interface_entities of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: int
        """
        return self._num_heteromeric_interface_entities

    @num_heteromeric_interface_entities.setter
    def num_heteromeric_interface_entities(self, num_heteromeric_interface_entities):
        """Sets the num_heteromeric_interface_entities of this RcsbAssemblyInfo.

        Number of heteromeric (both partners are different polymeric entities) interface entities  # noqa: E501

        :param num_heteromeric_interface_entities: The num_heteromeric_interface_entities of this RcsbAssemblyInfo.  # noqa: E501
        :type: int
        """

        self._num_heteromeric_interface_entities = num_heteromeric_interface_entities

    @property
    def num_isologous_interface_entities(self):
        """Gets the num_isologous_interface_entities of this RcsbAssemblyInfo.  # noqa: E501

        Number of isologous (both binding sites are same, i.e. interface is symmetric) interface entities  # noqa: E501

        :return: The num_isologous_interface_entities of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: int
        """
        return self._num_isologous_interface_entities

    @num_isologous_interface_entities.setter
    def num_isologous_interface_entities(self, num_isologous_interface_entities):
        """Sets the num_isologous_interface_entities of this RcsbAssemblyInfo.

        Number of isologous (both binding sites are same, i.e. interface is symmetric) interface entities  # noqa: E501

        :param num_isologous_interface_entities: The num_isologous_interface_entities of this RcsbAssemblyInfo.  # noqa: E501
        :type: int
        """

        self._num_isologous_interface_entities = num_isologous_interface_entities

    @property
    def num_heterologous_interface_entities(self):
        """Gets the num_heterologous_interface_entities of this RcsbAssemblyInfo.  # noqa: E501

        Number of heterologous (both binding sites are different) interface entities  # noqa: E501

        :return: The num_heterologous_interface_entities of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: int
        """
        return self._num_heterologous_interface_entities

    @num_heterologous_interface_entities.setter
    def num_heterologous_interface_entities(self, num_heterologous_interface_entities):
        """Sets the num_heterologous_interface_entities of this RcsbAssemblyInfo.

        Number of heterologous (both binding sites are different) interface entities  # noqa: E501

        :param num_heterologous_interface_entities: The num_heterologous_interface_entities of this RcsbAssemblyInfo.  # noqa: E501
        :type: int
        """

        self._num_heterologous_interface_entities = num_heterologous_interface_entities

    @property
    def num_protein_interface_entities(self):
        """Gets the num_protein_interface_entities of this RcsbAssemblyInfo.  # noqa: E501

        Number of protein-protein interface entities  # noqa: E501

        :return: The num_protein_interface_entities of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: int
        """
        return self._num_protein_interface_entities

    @num_protein_interface_entities.setter
    def num_protein_interface_entities(self, num_protein_interface_entities):
        """Sets the num_protein_interface_entities of this RcsbAssemblyInfo.

        Number of protein-protein interface entities  # noqa: E501

        :param num_protein_interface_entities: The num_protein_interface_entities of this RcsbAssemblyInfo.  # noqa: E501
        :type: int
        """

        self._num_protein_interface_entities = num_protein_interface_entities

    @property
    def num_na_interface_entities(self):
        """Gets the num_na_interface_entities of this RcsbAssemblyInfo.  # noqa: E501

        Number of nucleic acid-nucleic acid interface entities  # noqa: E501

        :return: The num_na_interface_entities of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: int
        """
        return self._num_na_interface_entities

    @num_na_interface_entities.setter
    def num_na_interface_entities(self, num_na_interface_entities):
        """Sets the num_na_interface_entities of this RcsbAssemblyInfo.

        Number of nucleic acid-nucleic acid interface entities  # noqa: E501

        :param num_na_interface_entities: The num_na_interface_entities of this RcsbAssemblyInfo.  # noqa: E501
        :type: int
        """

        self._num_na_interface_entities = num_na_interface_entities

    @property
    def num_prot_na_interface_entities(self):
        """Gets the num_prot_na_interface_entities of this RcsbAssemblyInfo.  # noqa: E501

        Number of protein-nucleic acid interface entities  # noqa: E501

        :return: The num_prot_na_interface_entities of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: int
        """
        return self._num_prot_na_interface_entities

    @num_prot_na_interface_entities.setter
    def num_prot_na_interface_entities(self, num_prot_na_interface_entities):
        """Sets the num_prot_na_interface_entities of this RcsbAssemblyInfo.

        Number of protein-nucleic acid interface entities  # noqa: E501

        :param num_prot_na_interface_entities: The num_prot_na_interface_entities of this RcsbAssemblyInfo.  # noqa: E501
        :type: int
        """

        self._num_prot_na_interface_entities = num_prot_na_interface_entities

    @property
    def total_assembly_buried_surface_area(self):
        """Gets the total_assembly_buried_surface_area of this RcsbAssemblyInfo.  # noqa: E501

        Total buried surface area calculated as the sum of buried surface areas over all interfaces  # noqa: E501

        :return: The total_assembly_buried_surface_area of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: float
        """
        return self._total_assembly_buried_surface_area

    @total_assembly_buried_surface_area.setter
    def total_assembly_buried_surface_area(self, total_assembly_buried_surface_area):
        """Sets the total_assembly_buried_surface_area of this RcsbAssemblyInfo.

        Total buried surface area calculated as the sum of buried surface areas over all interfaces  # noqa: E501

        :param total_assembly_buried_surface_area: The total_assembly_buried_surface_area of this RcsbAssemblyInfo.  # noqa: E501
        :type: float
        """

        self._total_assembly_buried_surface_area = total_assembly_buried_surface_area

    @property
    def total_number_interface_residues(self):
        """Gets the total_number_interface_residues of this RcsbAssemblyInfo.  # noqa: E501

        Total number of interfacing residues in the assembly, calculated as the sum of interfacing residues over all interfaces  # noqa: E501

        :return: The total_number_interface_residues of this RcsbAssemblyInfo.  # noqa: E501
        :rtype: int
        """
        return self._total_number_interface_residues

    @total_number_interface_residues.setter
    def total_number_interface_residues(self, total_number_interface_residues):
        """Sets the total_number_interface_residues of this RcsbAssemblyInfo.

        Total number of interfacing residues in the assembly, calculated as the sum of interfacing residues over all interfaces  # noqa: E501

        :param total_number_interface_residues: The total_number_interface_residues of this RcsbAssemblyInfo.  # noqa: E501
        :type: int
        """

        self._total_number_interface_residues = total_number_interface_residues

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RcsbAssemblyInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RcsbAssemblyInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
