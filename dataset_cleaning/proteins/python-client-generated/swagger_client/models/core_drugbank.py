# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CoreDrugbank(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'drugbank_container_identifiers': 'DrugbankContainerIdentifiers',
        'drugbank_info': 'DrugbankInfo',
        'drugbank_target': 'list[DrugbankTarget]'
    }

    attribute_map = {
        'drugbank_container_identifiers': 'drugbank_container_identifiers',
        'drugbank_info': 'drugbank_info',
        'drugbank_target': 'drugbank_target'
    }

    def __init__(self, drugbank_container_identifiers=None, drugbank_info=None, drugbank_target=None):  # noqa: E501
        """CoreDrugbank - a model defined in Swagger"""  # noqa: E501
        self._drugbank_container_identifiers = None
        self._drugbank_info = None
        self._drugbank_target = None
        self.discriminator = None
        if drugbank_container_identifiers is not None:
            self.drugbank_container_identifiers = drugbank_container_identifiers
        if drugbank_info is not None:
            self.drugbank_info = drugbank_info
        if drugbank_target is not None:
            self.drugbank_target = drugbank_target

    @property
    def drugbank_container_identifiers(self):
        """Gets the drugbank_container_identifiers of this CoreDrugbank.  # noqa: E501


        :return: The drugbank_container_identifiers of this CoreDrugbank.  # noqa: E501
        :rtype: DrugbankContainerIdentifiers
        """
        return self._drugbank_container_identifiers

    @drugbank_container_identifiers.setter
    def drugbank_container_identifiers(self, drugbank_container_identifiers):
        """Sets the drugbank_container_identifiers of this CoreDrugbank.


        :param drugbank_container_identifiers: The drugbank_container_identifiers of this CoreDrugbank.  # noqa: E501
        :type: DrugbankContainerIdentifiers
        """

        self._drugbank_container_identifiers = drugbank_container_identifiers

    @property
    def drugbank_info(self):
        """Gets the drugbank_info of this CoreDrugbank.  # noqa: E501


        :return: The drugbank_info of this CoreDrugbank.  # noqa: E501
        :rtype: DrugbankInfo
        """
        return self._drugbank_info

    @drugbank_info.setter
    def drugbank_info(self, drugbank_info):
        """Sets the drugbank_info of this CoreDrugbank.


        :param drugbank_info: The drugbank_info of this CoreDrugbank.  # noqa: E501
        :type: DrugbankInfo
        """

        self._drugbank_info = drugbank_info

    @property
    def drugbank_target(self):
        """Gets the drugbank_target of this CoreDrugbank.  # noqa: E501


        :return: The drugbank_target of this CoreDrugbank.  # noqa: E501
        :rtype: list[DrugbankTarget]
        """
        return self._drugbank_target

    @drugbank_target.setter
    def drugbank_target(self, drugbank_target):
        """Sets the drugbank_target of this CoreDrugbank.


        :param drugbank_target: The drugbank_target of this CoreDrugbank.  # noqa: E501
        :type: list[DrugbankTarget]
        """

        self._drugbank_target = drugbank_target

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoreDrugbank, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoreDrugbank):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
