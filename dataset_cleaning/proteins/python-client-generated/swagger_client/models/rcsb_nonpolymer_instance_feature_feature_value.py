# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RcsbNonpolymerInstanceFeatureFeatureValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comp_id': 'str',
        'details': 'str',
        'reference': 'float',
        'reported': 'float',
        'uncertainty_estimate': 'float',
        'uncertainty_estimate_type': 'str'
    }

    attribute_map = {
        'comp_id': 'comp_id',
        'details': 'details',
        'reference': 'reference',
        'reported': 'reported',
        'uncertainty_estimate': 'uncertainty_estimate',
        'uncertainty_estimate_type': 'uncertainty_estimate_type'
    }

    def __init__(self, comp_id=None, details=None, reference=None, reported=None, uncertainty_estimate=None, uncertainty_estimate_type=None):  # noqa: E501
        """RcsbNonpolymerInstanceFeatureFeatureValue - a model defined in Swagger"""  # noqa: E501
        self._comp_id = None
        self._details = None
        self._reference = None
        self._reported = None
        self._uncertainty_estimate = None
        self._uncertainty_estimate_type = None
        self.discriminator = None
        if comp_id is not None:
            self.comp_id = comp_id
        if details is not None:
            self.details = details
        if reference is not None:
            self.reference = reference
        if reported is not None:
            self.reported = reported
        if uncertainty_estimate is not None:
            self.uncertainty_estimate = uncertainty_estimate
        if uncertainty_estimate_type is not None:
            self.uncertainty_estimate_type = uncertainty_estimate_type

    @property
    def comp_id(self):
        """Gets the comp_id of this RcsbNonpolymerInstanceFeatureFeatureValue.  # noqa: E501

        The chemical component identifier for the instance of the feature value.  # noqa: E501

        :return: The comp_id of this RcsbNonpolymerInstanceFeatureFeatureValue.  # noqa: E501
        :rtype: str
        """
        return self._comp_id

    @comp_id.setter
    def comp_id(self, comp_id):
        """Sets the comp_id of this RcsbNonpolymerInstanceFeatureFeatureValue.

        The chemical component identifier for the instance of the feature value.  # noqa: E501

        :param comp_id: The comp_id of this RcsbNonpolymerInstanceFeatureFeatureValue.  # noqa: E501
        :type: str
        """

        self._comp_id = comp_id

    @property
    def details(self):
        """Gets the details of this RcsbNonpolymerInstanceFeatureFeatureValue.  # noqa: E501

        Specific details about the feature.  # noqa: E501

        :return: The details of this RcsbNonpolymerInstanceFeatureFeatureValue.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this RcsbNonpolymerInstanceFeatureFeatureValue.

        Specific details about the feature.  # noqa: E501

        :param details: The details of this RcsbNonpolymerInstanceFeatureFeatureValue.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def reference(self):
        """Gets the reference of this RcsbNonpolymerInstanceFeatureFeatureValue.  # noqa: E501

        The reference value of the feature.  # noqa: E501

        :return: The reference of this RcsbNonpolymerInstanceFeatureFeatureValue.  # noqa: E501
        :rtype: float
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this RcsbNonpolymerInstanceFeatureFeatureValue.

        The reference value of the feature.  # noqa: E501

        :param reference: The reference of this RcsbNonpolymerInstanceFeatureFeatureValue.  # noqa: E501
        :type: float
        """

        self._reference = reference

    @property
    def reported(self):
        """Gets the reported of this RcsbNonpolymerInstanceFeatureFeatureValue.  # noqa: E501

        The reported value of the feature.  # noqa: E501

        :return: The reported of this RcsbNonpolymerInstanceFeatureFeatureValue.  # noqa: E501
        :rtype: float
        """
        return self._reported

    @reported.setter
    def reported(self, reported):
        """Sets the reported of this RcsbNonpolymerInstanceFeatureFeatureValue.

        The reported value of the feature.  # noqa: E501

        :param reported: The reported of this RcsbNonpolymerInstanceFeatureFeatureValue.  # noqa: E501
        :type: float
        """

        self._reported = reported

    @property
    def uncertainty_estimate(self):
        """Gets the uncertainty_estimate of this RcsbNonpolymerInstanceFeatureFeatureValue.  # noqa: E501

        The estimated uncertainty of the reported feature value.  # noqa: E501

        :return: The uncertainty_estimate of this RcsbNonpolymerInstanceFeatureFeatureValue.  # noqa: E501
        :rtype: float
        """
        return self._uncertainty_estimate

    @uncertainty_estimate.setter
    def uncertainty_estimate(self, uncertainty_estimate):
        """Sets the uncertainty_estimate of this RcsbNonpolymerInstanceFeatureFeatureValue.

        The estimated uncertainty of the reported feature value.  # noqa: E501

        :param uncertainty_estimate: The uncertainty_estimate of this RcsbNonpolymerInstanceFeatureFeatureValue.  # noqa: E501
        :type: float
        """

        self._uncertainty_estimate = uncertainty_estimate

    @property
    def uncertainty_estimate_type(self):
        """Gets the uncertainty_estimate_type of this RcsbNonpolymerInstanceFeatureFeatureValue.  # noqa: E501

        The type of estimated uncertainty for the reported feature value.  # noqa: E501

        :return: The uncertainty_estimate_type of this RcsbNonpolymerInstanceFeatureFeatureValue.  # noqa: E501
        :rtype: str
        """
        return self._uncertainty_estimate_type

    @uncertainty_estimate_type.setter
    def uncertainty_estimate_type(self, uncertainty_estimate_type):
        """Sets the uncertainty_estimate_type of this RcsbNonpolymerInstanceFeatureFeatureValue.

        The type of estimated uncertainty for the reported feature value.  # noqa: E501

        :param uncertainty_estimate_type: The uncertainty_estimate_type of this RcsbNonpolymerInstanceFeatureFeatureValue.  # noqa: E501
        :type: str
        """
        allowed_values = ["Z-Score"]  # noqa: E501
        if uncertainty_estimate_type not in allowed_values:
            raise ValueError(
                "Invalid value for `uncertainty_estimate_type` ({0}), must be one of {1}"  # noqa: E501
                .format(uncertainty_estimate_type, allowed_values)
            )

        self._uncertainty_estimate_type = uncertainty_estimate_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RcsbNonpolymerInstanceFeatureFeatureValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RcsbNonpolymerInstanceFeatureFeatureValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
