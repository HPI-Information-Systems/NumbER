# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PdbxVrptSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'b_factor_type': 'str',
        'babinet_b': 'float',
        'babinet_k': 'float',
        'ca_only': 'str',
        'dcc_r': 'float',
        'dcc_rfree': 'float',
        'dcc_refinement_program': 'str',
        'eds_r': 'float',
        'eds_resolution': 'float',
        'eds_resolution_low': 'float',
        'emdb_deposition_date': 'datetime',
        'emdb_resolution': 'float',
        'fo_fc_correlation': 'float',
        'i_over_sigma': 'str',
        'pdb_r': 'float',
        'pdb_rfree': 'float',
        'pdb_deposition_date': 'datetime',
        'pdb_resolution': 'float',
        'pdb_resolution_low': 'float',
        'pdb_revision_date': 'datetime',
        'pdb_revision_number': 'float',
        'rna_suiteness': 'float',
        'wilson_b_aniso': 'str',
        'wilson_b_estimate': 'float',
        'absolute_percentile_dcc_rfree': 'float',
        'absolute_percentile_rna_suiteness': 'float',
        'absolute_percentile_clashscore': 'float',
        'absolute_percentile_percent_rsrz_outliers': 'float',
        'absolute_percentile_percent_ramachandran_outliers': 'float',
        'absolute_percentile_percent_rotamer_outliers': 'float',
        'acentric_outliers': 'int',
        'angles_rmsz': 'float',
        'atom_inclusion_all_atoms': 'float',
        'atom_inclusion_backbone': 'float',
        'attempted_validation_steps': 'str',
        'author_provided_fsc_resolution_by_cutoff_halfbit': 'float',
        'author_provided_fsc_resolution_by_cutoff_onebit': 'float',
        'author_provided_fsc_resolution_by_cutoff_pt_143': 'float',
        'author_provided_fsc_resolution_by_cutoff_pt_333': 'float',
        'author_provided_fsc_resolution_by_cutoff_pt_5': 'float',
        'author_provided_fsc_resolution_by_cutoff_threesigma': 'float',
        'bonds_rmsz': 'float',
        'bulk_solvent_b': 'float',
        'bulk_solvent_k': 'float',
        'calculated_fsc_resolution_by_cutoff_halfbit': 'float',
        'calculated_fsc_resolution_by_cutoff_onebit': 'float',
        'calculated_fsc_resolution_by_cutoff_pt_143': 'float',
        'calculated_fsc_resolution_by_cutoff_pt_333': 'float',
        'calculated_fsc_resolution_by_cutoff_pt_5': 'float',
        'calculated_fsc_resolution_by_cutoff_threesigma': 'float',
        'ccp4version': 'str',
        'centric_outliers': 'float',
        'chemical_shift_completeness': 'float',
        'chemical_shift_completeness_full_length': 'float',
        'chemical_shifts_input_filename': 'str',
        'clashscore': 'float',
        'clashscore_full_length': 'float',
        'contour_level_primary_map': 'str',
        'coordinates_input_filename': 'str',
        'cyrange_error': 'str',
        'cyrange_number_of_domains': 'int',
        'cyrange_version': 'str',
        'data_anisotropy': 'float',
        'data_completeness': 'float',
        'emdb_id': 'str',
        'high_resol_relative_percentile_dcc_rfree': 'float',
        'high_resol_relative_percentile_rna_suiteness': 'float',
        'high_resol_relative_percentile_clashscore': 'float',
        'high_resol_relative_percentile_percent_rsrz_outliers': 'float',
        'high_resol_relative_percentile_percent_ramachandran_outliers': 'float',
        'high_resol_relative_percentile_percent_rotamer_outliers': 'float',
        'ligands_for_buster_report': 'str',
        'low_resol_relative_percentile_dcc_rfree': 'float',
        'low_resol_relative_percentile_rna_suiteness': 'float',
        'low_resol_relative_percentile_clashscore': 'float',
        'low_resol_relative_percentile_percent_rsrz_outliers': 'float',
        'low_resol_relative_percentile_percent_ramachandran_outliers': 'float',
        'low_resol_relative_percentile_percent_rotamer_outliers': 'float',
        'medoid_model': 'int',
        'nmr_models_consistency_flag': 'str',
        'nmrclust_error': 'str',
        'nmrclust_number_of_clusters': 'int',
        'nmrclust_number_of_models': 'int',
        'nmrclust_number_of_outliers': 'int',
        'nmrclust_representative_model': 'int',
        'nmrclust_version': 'str',
        'no_ligands_for_buster_report': 'str',
        'no_ligands_for_mogul': 'str',
        'no_percentile_property': 'str',
        'num_h_reduce': 'float',
        'num_pd_bids_absolute_percentile_dcc_rfree': 'int',
        'num_pd_bids_absolute_percentile_rna_suiteness': 'int',
        'num_pd_bids_absolute_percentile_clashscore': 'int',
        'num_pd_bids_absolute_percentile_percent_rsrz_outliers': 'int',
        'num_pd_bids_absolute_percentile_percent_ramachandran_outliers': 'int',
        'num_pd_bids_absolute_percentile_percent_rotamer_outliers': 'int',
        'num_pd_bids_relative_percentile_dcc_rfree': 'int',
        'num_pd_bids_relative_percentile_rna_suiteness': 'int',
        'num_pd_bids_relative_percentile_clashscore': 'int',
        'num_pd_bids_relative_percentile_percent_rsrz_outliers': 'int',
        'num_pd_bids_relative_percentile_percent_ramachandran_outliers': 'int',
        'num_pd_bids_relative_percentile_percent_rotamer_outliers': 'int',
        'num_angles_rmsz': 'int',
        'num_bonds_rmsz': 'int',
        'num_free_reflections': 'int',
        'num_miller_indices': 'int',
        'panav_version': 'str',
        'percent_rsrz_outliers': 'float',
        'percent_free_reflections': 'float',
        'percent_ramachandran_outliers': 'float',
        'percent_ramachandran_outliers_full_length': 'float',
        'percent_rotamer_outliers': 'float',
        'percent_rotamer_outliers_full_length': 'float',
        'percentilebins': 'list[str]',
        'protein_dna_rna_entities': 'str',
        'rci_version': 'str',
        'reflections_input_filename': 'str',
        'refmac_version': 'str',
        'relative_percentile_dcc_rfree': 'float',
        'relative_percentile_rna_suiteness': 'float',
        'relative_percentile_clashscore': 'float',
        'relative_percentile_percent_rsrz_outliers': 'float',
        'relative_percentile_percent_ramachandran_outliers': 'float',
        'relative_percentile_percent_rotamer_outliers': 'float',
        'report_creation_date': 'str',
        'resol_high_from_reflectionsfile': 'float',
        'resol_low_from_reflectionsfile': 'float',
        'restypes_notchecked_for_bond_angle_geometry': 'list[str]',
        'shiftchecker_version': 'str',
        'trans_nsc': 'str',
        'twin_l': 'float',
        'twin_l2': 'float',
        'twin_fraction': 'str',
        'xtriage_input_columns': 'str'
    }

    attribute_map = {
        'b_factor_type': 'B_factor_type',
        'babinet_b': 'Babinet_b',
        'babinet_k': 'Babinet_k',
        'ca_only': 'CA_ONLY',
        'dcc_r': 'DCC_R',
        'dcc_rfree': 'DCC_Rfree',
        'dcc_refinement_program': 'DCC_refinement_program',
        'eds_r': 'EDS_R',
        'eds_resolution': 'EDS_resolution',
        'eds_resolution_low': 'EDS_resolution_low',
        'emdb_deposition_date': 'EMDB_deposition_date',
        'emdb_resolution': 'EMDB_resolution',
        'fo_fc_correlation': 'Fo_Fc_correlation',
        'i_over_sigma': 'I_over_sigma',
        'pdb_r': 'PDB_R',
        'pdb_rfree': 'PDB_Rfree',
        'pdb_deposition_date': 'PDB_deposition_date',
        'pdb_resolution': 'PDB_resolution',
        'pdb_resolution_low': 'PDB_resolution_low',
        'pdb_revision_date': 'PDB_revision_date',
        'pdb_revision_number': 'PDB_revision_number',
        'rna_suiteness': 'RNA_suiteness',
        'wilson_b_aniso': 'Wilson_B_aniso',
        'wilson_b_estimate': 'Wilson_B_estimate',
        'absolute_percentile_dcc_rfree': 'absolute_percentile_DCC_Rfree',
        'absolute_percentile_rna_suiteness': 'absolute_percentile_RNA_suiteness',
        'absolute_percentile_clashscore': 'absolute_percentile_clashscore',
        'absolute_percentile_percent_rsrz_outliers': 'absolute_percentile_percent_RSRZ_outliers',
        'absolute_percentile_percent_ramachandran_outliers': 'absolute_percentile_percent_ramachandran_outliers',
        'absolute_percentile_percent_rotamer_outliers': 'absolute_percentile_percent_rotamer_outliers',
        'acentric_outliers': 'acentric_outliers',
        'angles_rmsz': 'angles_RMSZ',
        'atom_inclusion_all_atoms': 'atom_inclusion_all_atoms',
        'atom_inclusion_backbone': 'atom_inclusion_backbone',
        'attempted_validation_steps': 'attempted_validation_steps',
        'author_provided_fsc_resolution_by_cutoff_halfbit': 'author_provided_fsc_resolution_by_cutoff_halfbit',
        'author_provided_fsc_resolution_by_cutoff_onebit': 'author_provided_fsc_resolution_by_cutoff_onebit',
        'author_provided_fsc_resolution_by_cutoff_pt_143': 'author_provided_fsc_resolution_by_cutoff_pt_143',
        'author_provided_fsc_resolution_by_cutoff_pt_333': 'author_provided_fsc_resolution_by_cutoff_pt_333',
        'author_provided_fsc_resolution_by_cutoff_pt_5': 'author_provided_fsc_resolution_by_cutoff_pt_5',
        'author_provided_fsc_resolution_by_cutoff_threesigma': 'author_provided_fsc_resolution_by_cutoff_threesigma',
        'bonds_rmsz': 'bonds_RMSZ',
        'bulk_solvent_b': 'bulk_solvent_b',
        'bulk_solvent_k': 'bulk_solvent_k',
        'calculated_fsc_resolution_by_cutoff_halfbit': 'calculated_fsc_resolution_by_cutoff_halfbit',
        'calculated_fsc_resolution_by_cutoff_onebit': 'calculated_fsc_resolution_by_cutoff_onebit',
        'calculated_fsc_resolution_by_cutoff_pt_143': 'calculated_fsc_resolution_by_cutoff_pt_143',
        'calculated_fsc_resolution_by_cutoff_pt_333': 'calculated_fsc_resolution_by_cutoff_pt_333',
        'calculated_fsc_resolution_by_cutoff_pt_5': 'calculated_fsc_resolution_by_cutoff_pt_5',
        'calculated_fsc_resolution_by_cutoff_threesigma': 'calculated_fsc_resolution_by_cutoff_threesigma',
        'ccp4version': 'ccp4version',
        'centric_outliers': 'centric_outliers',
        'chemical_shift_completeness': 'chemical_shift_completeness',
        'chemical_shift_completeness_full_length': 'chemical_shift_completeness_full_length',
        'chemical_shifts_input_filename': 'chemical_shifts_input_filename',
        'clashscore': 'clashscore',
        'clashscore_full_length': 'clashscore_full_length',
        'contour_level_primary_map': 'contour_level_primary_map',
        'coordinates_input_filename': 'coordinates_input_filename',
        'cyrange_error': 'cyrange_error',
        'cyrange_number_of_domains': 'cyrange_number_of_domains',
        'cyrange_version': 'cyrange_version',
        'data_anisotropy': 'data_anisotropy',
        'data_completeness': 'data_completeness',
        'emdb_id': 'emdb_id',
        'high_resol_relative_percentile_dcc_rfree': 'high_resol_relative_percentile_DCC_Rfree',
        'high_resol_relative_percentile_rna_suiteness': 'high_resol_relative_percentile_RNA_suiteness',
        'high_resol_relative_percentile_clashscore': 'high_resol_relative_percentile_clashscore',
        'high_resol_relative_percentile_percent_rsrz_outliers': 'high_resol_relative_percentile_percent_RSRZ_outliers',
        'high_resol_relative_percentile_percent_ramachandran_outliers': 'high_resol_relative_percentile_percent_ramachandran_outliers',
        'high_resol_relative_percentile_percent_rotamer_outliers': 'high_resol_relative_percentile_percent_rotamer_outliers',
        'ligands_for_buster_report': 'ligands_for_buster_report',
        'low_resol_relative_percentile_dcc_rfree': 'low_resol_relative_percentile_DCC_Rfree',
        'low_resol_relative_percentile_rna_suiteness': 'low_resol_relative_percentile_RNA_suiteness',
        'low_resol_relative_percentile_clashscore': 'low_resol_relative_percentile_clashscore',
        'low_resol_relative_percentile_percent_rsrz_outliers': 'low_resol_relative_percentile_percent_RSRZ_outliers',
        'low_resol_relative_percentile_percent_ramachandran_outliers': 'low_resol_relative_percentile_percent_ramachandran_outliers',
        'low_resol_relative_percentile_percent_rotamer_outliers': 'low_resol_relative_percentile_percent_rotamer_outliers',
        'medoid_model': 'medoid_model',
        'nmr_models_consistency_flag': 'nmr_models_consistency_flag',
        'nmrclust_error': 'nmrclust_error',
        'nmrclust_number_of_clusters': 'nmrclust_number_of_clusters',
        'nmrclust_number_of_models': 'nmrclust_number_of_models',
        'nmrclust_number_of_outliers': 'nmrclust_number_of_outliers',
        'nmrclust_representative_model': 'nmrclust_representative_model',
        'nmrclust_version': 'nmrclust_version',
        'no_ligands_for_buster_report': 'no_ligands_for_buster_report',
        'no_ligands_for_mogul': 'no_ligands_for_mogul',
        'no_percentile_property': 'no_percentile_property',
        'num_h_reduce': 'num_H_reduce',
        'num_pd_bids_absolute_percentile_dcc_rfree': 'num_PDBids_absolute_percentile_DCC_Rfree',
        'num_pd_bids_absolute_percentile_rna_suiteness': 'num_PDBids_absolute_percentile_RNA_suiteness',
        'num_pd_bids_absolute_percentile_clashscore': 'num_PDBids_absolute_percentile_clashscore',
        'num_pd_bids_absolute_percentile_percent_rsrz_outliers': 'num_PDBids_absolute_percentile_percent_RSRZ_outliers',
        'num_pd_bids_absolute_percentile_percent_ramachandran_outliers': 'num_PDBids_absolute_percentile_percent_ramachandran_outliers',
        'num_pd_bids_absolute_percentile_percent_rotamer_outliers': 'num_PDBids_absolute_percentile_percent_rotamer_outliers',
        'num_pd_bids_relative_percentile_dcc_rfree': 'num_PDBids_relative_percentile_DCC_Rfree',
        'num_pd_bids_relative_percentile_rna_suiteness': 'num_PDBids_relative_percentile_RNA_suiteness',
        'num_pd_bids_relative_percentile_clashscore': 'num_PDBids_relative_percentile_clashscore',
        'num_pd_bids_relative_percentile_percent_rsrz_outliers': 'num_PDBids_relative_percentile_percent_RSRZ_outliers',
        'num_pd_bids_relative_percentile_percent_ramachandran_outliers': 'num_PDBids_relative_percentile_percent_ramachandran_outliers',
        'num_pd_bids_relative_percentile_percent_rotamer_outliers': 'num_PDBids_relative_percentile_percent_rotamer_outliers',
        'num_angles_rmsz': 'num_angles_RMSZ',
        'num_bonds_rmsz': 'num_bonds_RMSZ',
        'num_free_reflections': 'num_free_reflections',
        'num_miller_indices': 'num_miller_indices',
        'panav_version': 'panav_version',
        'percent_rsrz_outliers': 'percent_RSRZ_outliers',
        'percent_free_reflections': 'percent_free_reflections',
        'percent_ramachandran_outliers': 'percent_ramachandran_outliers',
        'percent_ramachandran_outliers_full_length': 'percent_ramachandran_outliers_full_length',
        'percent_rotamer_outliers': 'percent_rotamer_outliers',
        'percent_rotamer_outliers_full_length': 'percent_rotamer_outliers_full_length',
        'percentilebins': 'percentilebins',
        'protein_dna_rna_entities': 'protein_DNA_RNA_entities',
        'rci_version': 'rci_version',
        'reflections_input_filename': 'reflections_input_filename',
        'refmac_version': 'refmac_version',
        'relative_percentile_dcc_rfree': 'relative_percentile_DCC_Rfree',
        'relative_percentile_rna_suiteness': 'relative_percentile_RNA_suiteness',
        'relative_percentile_clashscore': 'relative_percentile_clashscore',
        'relative_percentile_percent_rsrz_outliers': 'relative_percentile_percent_RSRZ_outliers',
        'relative_percentile_percent_ramachandran_outliers': 'relative_percentile_percent_ramachandran_outliers',
        'relative_percentile_percent_rotamer_outliers': 'relative_percentile_percent_rotamer_outliers',
        'report_creation_date': 'report_creation_date',
        'resol_high_from_reflectionsfile': 'resol_high_from_reflectionsfile',
        'resol_low_from_reflectionsfile': 'resol_low_from_reflectionsfile',
        'restypes_notchecked_for_bond_angle_geometry': 'restypes_notchecked_for_bond_angle_geometry',
        'shiftchecker_version': 'shiftchecker_version',
        'trans_nsc': 'trans_NSC',
        'twin_l': 'twin_L',
        'twin_l2': 'twin_L2',
        'twin_fraction': 'twin_fraction',
        'xtriage_input_columns': 'xtriage_input_columns'
    }

    def __init__(self, b_factor_type=None, babinet_b=None, babinet_k=None, ca_only=None, dcc_r=None, dcc_rfree=None, dcc_refinement_program=None, eds_r=None, eds_resolution=None, eds_resolution_low=None, emdb_deposition_date=None, emdb_resolution=None, fo_fc_correlation=None, i_over_sigma=None, pdb_r=None, pdb_rfree=None, pdb_deposition_date=None, pdb_resolution=None, pdb_resolution_low=None, pdb_revision_date=None, pdb_revision_number=None, rna_suiteness=None, wilson_b_aniso=None, wilson_b_estimate=None, absolute_percentile_dcc_rfree=None, absolute_percentile_rna_suiteness=None, absolute_percentile_clashscore=None, absolute_percentile_percent_rsrz_outliers=None, absolute_percentile_percent_ramachandran_outliers=None, absolute_percentile_percent_rotamer_outliers=None, acentric_outliers=None, angles_rmsz=None, atom_inclusion_all_atoms=None, atom_inclusion_backbone=None, attempted_validation_steps=None, author_provided_fsc_resolution_by_cutoff_halfbit=None, author_provided_fsc_resolution_by_cutoff_onebit=None, author_provided_fsc_resolution_by_cutoff_pt_143=None, author_provided_fsc_resolution_by_cutoff_pt_333=None, author_provided_fsc_resolution_by_cutoff_pt_5=None, author_provided_fsc_resolution_by_cutoff_threesigma=None, bonds_rmsz=None, bulk_solvent_b=None, bulk_solvent_k=None, calculated_fsc_resolution_by_cutoff_halfbit=None, calculated_fsc_resolution_by_cutoff_onebit=None, calculated_fsc_resolution_by_cutoff_pt_143=None, calculated_fsc_resolution_by_cutoff_pt_333=None, calculated_fsc_resolution_by_cutoff_pt_5=None, calculated_fsc_resolution_by_cutoff_threesigma=None, ccp4version=None, centric_outliers=None, chemical_shift_completeness=None, chemical_shift_completeness_full_length=None, chemical_shifts_input_filename=None, clashscore=None, clashscore_full_length=None, contour_level_primary_map=None, coordinates_input_filename=None, cyrange_error=None, cyrange_number_of_domains=None, cyrange_version=None, data_anisotropy=None, data_completeness=None, emdb_id=None, high_resol_relative_percentile_dcc_rfree=None, high_resol_relative_percentile_rna_suiteness=None, high_resol_relative_percentile_clashscore=None, high_resol_relative_percentile_percent_rsrz_outliers=None, high_resol_relative_percentile_percent_ramachandran_outliers=None, high_resol_relative_percentile_percent_rotamer_outliers=None, ligands_for_buster_report=None, low_resol_relative_percentile_dcc_rfree=None, low_resol_relative_percentile_rna_suiteness=None, low_resol_relative_percentile_clashscore=None, low_resol_relative_percentile_percent_rsrz_outliers=None, low_resol_relative_percentile_percent_ramachandran_outliers=None, low_resol_relative_percentile_percent_rotamer_outliers=None, medoid_model=None, nmr_models_consistency_flag=None, nmrclust_error=None, nmrclust_number_of_clusters=None, nmrclust_number_of_models=None, nmrclust_number_of_outliers=None, nmrclust_representative_model=None, nmrclust_version=None, no_ligands_for_buster_report=None, no_ligands_for_mogul=None, no_percentile_property=None, num_h_reduce=None, num_pd_bids_absolute_percentile_dcc_rfree=None, num_pd_bids_absolute_percentile_rna_suiteness=None, num_pd_bids_absolute_percentile_clashscore=None, num_pd_bids_absolute_percentile_percent_rsrz_outliers=None, num_pd_bids_absolute_percentile_percent_ramachandran_outliers=None, num_pd_bids_absolute_percentile_percent_rotamer_outliers=None, num_pd_bids_relative_percentile_dcc_rfree=None, num_pd_bids_relative_percentile_rna_suiteness=None, num_pd_bids_relative_percentile_clashscore=None, num_pd_bids_relative_percentile_percent_rsrz_outliers=None, num_pd_bids_relative_percentile_percent_ramachandran_outliers=None, num_pd_bids_relative_percentile_percent_rotamer_outliers=None, num_angles_rmsz=None, num_bonds_rmsz=None, num_free_reflections=None, num_miller_indices=None, panav_version=None, percent_rsrz_outliers=None, percent_free_reflections=None, percent_ramachandran_outliers=None, percent_ramachandran_outliers_full_length=None, percent_rotamer_outliers=None, percent_rotamer_outliers_full_length=None, percentilebins=None, protein_dna_rna_entities=None, rci_version=None, reflections_input_filename=None, refmac_version=None, relative_percentile_dcc_rfree=None, relative_percentile_rna_suiteness=None, relative_percentile_clashscore=None, relative_percentile_percent_rsrz_outliers=None, relative_percentile_percent_ramachandran_outliers=None, relative_percentile_percent_rotamer_outliers=None, report_creation_date=None, resol_high_from_reflectionsfile=None, resol_low_from_reflectionsfile=None, restypes_notchecked_for_bond_angle_geometry=None, shiftchecker_version=None, trans_nsc=None, twin_l=None, twin_l2=None, twin_fraction=None, xtriage_input_columns=None):  # noqa: E501
        """PdbxVrptSummary - a model defined in Swagger"""  # noqa: E501
        self._b_factor_type = None
        self._babinet_b = None
        self._babinet_k = None
        self._ca_only = None
        self._dcc_r = None
        self._dcc_rfree = None
        self._dcc_refinement_program = None
        self._eds_r = None
        self._eds_resolution = None
        self._eds_resolution_low = None
        self._emdb_deposition_date = None
        self._emdb_resolution = None
        self._fo_fc_correlation = None
        self._i_over_sigma = None
        self._pdb_r = None
        self._pdb_rfree = None
        self._pdb_deposition_date = None
        self._pdb_resolution = None
        self._pdb_resolution_low = None
        self._pdb_revision_date = None
        self._pdb_revision_number = None
        self._rna_suiteness = None
        self._wilson_b_aniso = None
        self._wilson_b_estimate = None
        self._absolute_percentile_dcc_rfree = None
        self._absolute_percentile_rna_suiteness = None
        self._absolute_percentile_clashscore = None
        self._absolute_percentile_percent_rsrz_outliers = None
        self._absolute_percentile_percent_ramachandran_outliers = None
        self._absolute_percentile_percent_rotamer_outliers = None
        self._acentric_outliers = None
        self._angles_rmsz = None
        self._atom_inclusion_all_atoms = None
        self._atom_inclusion_backbone = None
        self._attempted_validation_steps = None
        self._author_provided_fsc_resolution_by_cutoff_halfbit = None
        self._author_provided_fsc_resolution_by_cutoff_onebit = None
        self._author_provided_fsc_resolution_by_cutoff_pt_143 = None
        self._author_provided_fsc_resolution_by_cutoff_pt_333 = None
        self._author_provided_fsc_resolution_by_cutoff_pt_5 = None
        self._author_provided_fsc_resolution_by_cutoff_threesigma = None
        self._bonds_rmsz = None
        self._bulk_solvent_b = None
        self._bulk_solvent_k = None
        self._calculated_fsc_resolution_by_cutoff_halfbit = None
        self._calculated_fsc_resolution_by_cutoff_onebit = None
        self._calculated_fsc_resolution_by_cutoff_pt_143 = None
        self._calculated_fsc_resolution_by_cutoff_pt_333 = None
        self._calculated_fsc_resolution_by_cutoff_pt_5 = None
        self._calculated_fsc_resolution_by_cutoff_threesigma = None
        self._ccp4version = None
        self._centric_outliers = None
        self._chemical_shift_completeness = None
        self._chemical_shift_completeness_full_length = None
        self._chemical_shifts_input_filename = None
        self._clashscore = None
        self._clashscore_full_length = None
        self._contour_level_primary_map = None
        self._coordinates_input_filename = None
        self._cyrange_error = None
        self._cyrange_number_of_domains = None
        self._cyrange_version = None
        self._data_anisotropy = None
        self._data_completeness = None
        self._emdb_id = None
        self._high_resol_relative_percentile_dcc_rfree = None
        self._high_resol_relative_percentile_rna_suiteness = None
        self._high_resol_relative_percentile_clashscore = None
        self._high_resol_relative_percentile_percent_rsrz_outliers = None
        self._high_resol_relative_percentile_percent_ramachandran_outliers = None
        self._high_resol_relative_percentile_percent_rotamer_outliers = None
        self._ligands_for_buster_report = None
        self._low_resol_relative_percentile_dcc_rfree = None
        self._low_resol_relative_percentile_rna_suiteness = None
        self._low_resol_relative_percentile_clashscore = None
        self._low_resol_relative_percentile_percent_rsrz_outliers = None
        self._low_resol_relative_percentile_percent_ramachandran_outliers = None
        self._low_resol_relative_percentile_percent_rotamer_outliers = None
        self._medoid_model = None
        self._nmr_models_consistency_flag = None
        self._nmrclust_error = None
        self._nmrclust_number_of_clusters = None
        self._nmrclust_number_of_models = None
        self._nmrclust_number_of_outliers = None
        self._nmrclust_representative_model = None
        self._nmrclust_version = None
        self._no_ligands_for_buster_report = None
        self._no_ligands_for_mogul = None
        self._no_percentile_property = None
        self._num_h_reduce = None
        self._num_pd_bids_absolute_percentile_dcc_rfree = None
        self._num_pd_bids_absolute_percentile_rna_suiteness = None
        self._num_pd_bids_absolute_percentile_clashscore = None
        self._num_pd_bids_absolute_percentile_percent_rsrz_outliers = None
        self._num_pd_bids_absolute_percentile_percent_ramachandran_outliers = None
        self._num_pd_bids_absolute_percentile_percent_rotamer_outliers = None
        self._num_pd_bids_relative_percentile_dcc_rfree = None
        self._num_pd_bids_relative_percentile_rna_suiteness = None
        self._num_pd_bids_relative_percentile_clashscore = None
        self._num_pd_bids_relative_percentile_percent_rsrz_outliers = None
        self._num_pd_bids_relative_percentile_percent_ramachandran_outliers = None
        self._num_pd_bids_relative_percentile_percent_rotamer_outliers = None
        self._num_angles_rmsz = None
        self._num_bonds_rmsz = None
        self._num_free_reflections = None
        self._num_miller_indices = None
        self._panav_version = None
        self._percent_rsrz_outliers = None
        self._percent_free_reflections = None
        self._percent_ramachandran_outliers = None
        self._percent_ramachandran_outliers_full_length = None
        self._percent_rotamer_outliers = None
        self._percent_rotamer_outliers_full_length = None
        self._percentilebins = None
        self._protein_dna_rna_entities = None
        self._rci_version = None
        self._reflections_input_filename = None
        self._refmac_version = None
        self._relative_percentile_dcc_rfree = None
        self._relative_percentile_rna_suiteness = None
        self._relative_percentile_clashscore = None
        self._relative_percentile_percent_rsrz_outliers = None
        self._relative_percentile_percent_ramachandran_outliers = None
        self._relative_percentile_percent_rotamer_outliers = None
        self._report_creation_date = None
        self._resol_high_from_reflectionsfile = None
        self._resol_low_from_reflectionsfile = None
        self._restypes_notchecked_for_bond_angle_geometry = None
        self._shiftchecker_version = None
        self._trans_nsc = None
        self._twin_l = None
        self._twin_l2 = None
        self._twin_fraction = None
        self._xtriage_input_columns = None
        self.discriminator = None
        if b_factor_type is not None:
            self.b_factor_type = b_factor_type
        if babinet_b is not None:
            self.babinet_b = babinet_b
        if babinet_k is not None:
            self.babinet_k = babinet_k
        if ca_only is not None:
            self.ca_only = ca_only
        if dcc_r is not None:
            self.dcc_r = dcc_r
        if dcc_rfree is not None:
            self.dcc_rfree = dcc_rfree
        if dcc_refinement_program is not None:
            self.dcc_refinement_program = dcc_refinement_program
        if eds_r is not None:
            self.eds_r = eds_r
        if eds_resolution is not None:
            self.eds_resolution = eds_resolution
        if eds_resolution_low is not None:
            self.eds_resolution_low = eds_resolution_low
        if emdb_deposition_date is not None:
            self.emdb_deposition_date = emdb_deposition_date
        if emdb_resolution is not None:
            self.emdb_resolution = emdb_resolution
        if fo_fc_correlation is not None:
            self.fo_fc_correlation = fo_fc_correlation
        if i_over_sigma is not None:
            self.i_over_sigma = i_over_sigma
        if pdb_r is not None:
            self.pdb_r = pdb_r
        if pdb_rfree is not None:
            self.pdb_rfree = pdb_rfree
        if pdb_deposition_date is not None:
            self.pdb_deposition_date = pdb_deposition_date
        if pdb_resolution is not None:
            self.pdb_resolution = pdb_resolution
        if pdb_resolution_low is not None:
            self.pdb_resolution_low = pdb_resolution_low
        if pdb_revision_date is not None:
            self.pdb_revision_date = pdb_revision_date
        if pdb_revision_number is not None:
            self.pdb_revision_number = pdb_revision_number
        if rna_suiteness is not None:
            self.rna_suiteness = rna_suiteness
        if wilson_b_aniso is not None:
            self.wilson_b_aniso = wilson_b_aniso
        if wilson_b_estimate is not None:
            self.wilson_b_estimate = wilson_b_estimate
        if absolute_percentile_dcc_rfree is not None:
            self.absolute_percentile_dcc_rfree = absolute_percentile_dcc_rfree
        if absolute_percentile_rna_suiteness is not None:
            self.absolute_percentile_rna_suiteness = absolute_percentile_rna_suiteness
        if absolute_percentile_clashscore is not None:
            self.absolute_percentile_clashscore = absolute_percentile_clashscore
        if absolute_percentile_percent_rsrz_outliers is not None:
            self.absolute_percentile_percent_rsrz_outliers = absolute_percentile_percent_rsrz_outliers
        if absolute_percentile_percent_ramachandran_outliers is not None:
            self.absolute_percentile_percent_ramachandran_outliers = absolute_percentile_percent_ramachandran_outliers
        if absolute_percentile_percent_rotamer_outliers is not None:
            self.absolute_percentile_percent_rotamer_outliers = absolute_percentile_percent_rotamer_outliers
        if acentric_outliers is not None:
            self.acentric_outliers = acentric_outliers
        if angles_rmsz is not None:
            self.angles_rmsz = angles_rmsz
        if atom_inclusion_all_atoms is not None:
            self.atom_inclusion_all_atoms = atom_inclusion_all_atoms
        if atom_inclusion_backbone is not None:
            self.atom_inclusion_backbone = atom_inclusion_backbone
        if attempted_validation_steps is not None:
            self.attempted_validation_steps = attempted_validation_steps
        if author_provided_fsc_resolution_by_cutoff_halfbit is not None:
            self.author_provided_fsc_resolution_by_cutoff_halfbit = author_provided_fsc_resolution_by_cutoff_halfbit
        if author_provided_fsc_resolution_by_cutoff_onebit is not None:
            self.author_provided_fsc_resolution_by_cutoff_onebit = author_provided_fsc_resolution_by_cutoff_onebit
        if author_provided_fsc_resolution_by_cutoff_pt_143 is not None:
            self.author_provided_fsc_resolution_by_cutoff_pt_143 = author_provided_fsc_resolution_by_cutoff_pt_143
        if author_provided_fsc_resolution_by_cutoff_pt_333 is not None:
            self.author_provided_fsc_resolution_by_cutoff_pt_333 = author_provided_fsc_resolution_by_cutoff_pt_333
        if author_provided_fsc_resolution_by_cutoff_pt_5 is not None:
            self.author_provided_fsc_resolution_by_cutoff_pt_5 = author_provided_fsc_resolution_by_cutoff_pt_5
        if author_provided_fsc_resolution_by_cutoff_threesigma is not None:
            self.author_provided_fsc_resolution_by_cutoff_threesigma = author_provided_fsc_resolution_by_cutoff_threesigma
        if bonds_rmsz is not None:
            self.bonds_rmsz = bonds_rmsz
        if bulk_solvent_b is not None:
            self.bulk_solvent_b = bulk_solvent_b
        if bulk_solvent_k is not None:
            self.bulk_solvent_k = bulk_solvent_k
        if calculated_fsc_resolution_by_cutoff_halfbit is not None:
            self.calculated_fsc_resolution_by_cutoff_halfbit = calculated_fsc_resolution_by_cutoff_halfbit
        if calculated_fsc_resolution_by_cutoff_onebit is not None:
            self.calculated_fsc_resolution_by_cutoff_onebit = calculated_fsc_resolution_by_cutoff_onebit
        if calculated_fsc_resolution_by_cutoff_pt_143 is not None:
            self.calculated_fsc_resolution_by_cutoff_pt_143 = calculated_fsc_resolution_by_cutoff_pt_143
        if calculated_fsc_resolution_by_cutoff_pt_333 is not None:
            self.calculated_fsc_resolution_by_cutoff_pt_333 = calculated_fsc_resolution_by_cutoff_pt_333
        if calculated_fsc_resolution_by_cutoff_pt_5 is not None:
            self.calculated_fsc_resolution_by_cutoff_pt_5 = calculated_fsc_resolution_by_cutoff_pt_5
        if calculated_fsc_resolution_by_cutoff_threesigma is not None:
            self.calculated_fsc_resolution_by_cutoff_threesigma = calculated_fsc_resolution_by_cutoff_threesigma
        if ccp4version is not None:
            self.ccp4version = ccp4version
        if centric_outliers is not None:
            self.centric_outliers = centric_outliers
        if chemical_shift_completeness is not None:
            self.chemical_shift_completeness = chemical_shift_completeness
        if chemical_shift_completeness_full_length is not None:
            self.chemical_shift_completeness_full_length = chemical_shift_completeness_full_length
        if chemical_shifts_input_filename is not None:
            self.chemical_shifts_input_filename = chemical_shifts_input_filename
        if clashscore is not None:
            self.clashscore = clashscore
        if clashscore_full_length is not None:
            self.clashscore_full_length = clashscore_full_length
        if contour_level_primary_map is not None:
            self.contour_level_primary_map = contour_level_primary_map
        if coordinates_input_filename is not None:
            self.coordinates_input_filename = coordinates_input_filename
        if cyrange_error is not None:
            self.cyrange_error = cyrange_error
        if cyrange_number_of_domains is not None:
            self.cyrange_number_of_domains = cyrange_number_of_domains
        if cyrange_version is not None:
            self.cyrange_version = cyrange_version
        if data_anisotropy is not None:
            self.data_anisotropy = data_anisotropy
        if data_completeness is not None:
            self.data_completeness = data_completeness
        if emdb_id is not None:
            self.emdb_id = emdb_id
        if high_resol_relative_percentile_dcc_rfree is not None:
            self.high_resol_relative_percentile_dcc_rfree = high_resol_relative_percentile_dcc_rfree
        if high_resol_relative_percentile_rna_suiteness is not None:
            self.high_resol_relative_percentile_rna_suiteness = high_resol_relative_percentile_rna_suiteness
        if high_resol_relative_percentile_clashscore is not None:
            self.high_resol_relative_percentile_clashscore = high_resol_relative_percentile_clashscore
        if high_resol_relative_percentile_percent_rsrz_outliers is not None:
            self.high_resol_relative_percentile_percent_rsrz_outliers = high_resol_relative_percentile_percent_rsrz_outliers
        if high_resol_relative_percentile_percent_ramachandran_outliers is not None:
            self.high_resol_relative_percentile_percent_ramachandran_outliers = high_resol_relative_percentile_percent_ramachandran_outliers
        if high_resol_relative_percentile_percent_rotamer_outliers is not None:
            self.high_resol_relative_percentile_percent_rotamer_outliers = high_resol_relative_percentile_percent_rotamer_outliers
        if ligands_for_buster_report is not None:
            self.ligands_for_buster_report = ligands_for_buster_report
        if low_resol_relative_percentile_dcc_rfree is not None:
            self.low_resol_relative_percentile_dcc_rfree = low_resol_relative_percentile_dcc_rfree
        if low_resol_relative_percentile_rna_suiteness is not None:
            self.low_resol_relative_percentile_rna_suiteness = low_resol_relative_percentile_rna_suiteness
        if low_resol_relative_percentile_clashscore is not None:
            self.low_resol_relative_percentile_clashscore = low_resol_relative_percentile_clashscore
        if low_resol_relative_percentile_percent_rsrz_outliers is not None:
            self.low_resol_relative_percentile_percent_rsrz_outliers = low_resol_relative_percentile_percent_rsrz_outliers
        if low_resol_relative_percentile_percent_ramachandran_outliers is not None:
            self.low_resol_relative_percentile_percent_ramachandran_outliers = low_resol_relative_percentile_percent_ramachandran_outliers
        if low_resol_relative_percentile_percent_rotamer_outliers is not None:
            self.low_resol_relative_percentile_percent_rotamer_outliers = low_resol_relative_percentile_percent_rotamer_outliers
        if medoid_model is not None:
            self.medoid_model = medoid_model
        if nmr_models_consistency_flag is not None:
            self.nmr_models_consistency_flag = nmr_models_consistency_flag
        if nmrclust_error is not None:
            self.nmrclust_error = nmrclust_error
        if nmrclust_number_of_clusters is not None:
            self.nmrclust_number_of_clusters = nmrclust_number_of_clusters
        if nmrclust_number_of_models is not None:
            self.nmrclust_number_of_models = nmrclust_number_of_models
        if nmrclust_number_of_outliers is not None:
            self.nmrclust_number_of_outliers = nmrclust_number_of_outliers
        if nmrclust_representative_model is not None:
            self.nmrclust_representative_model = nmrclust_representative_model
        if nmrclust_version is not None:
            self.nmrclust_version = nmrclust_version
        if no_ligands_for_buster_report is not None:
            self.no_ligands_for_buster_report = no_ligands_for_buster_report
        if no_ligands_for_mogul is not None:
            self.no_ligands_for_mogul = no_ligands_for_mogul
        if no_percentile_property is not None:
            self.no_percentile_property = no_percentile_property
        if num_h_reduce is not None:
            self.num_h_reduce = num_h_reduce
        if num_pd_bids_absolute_percentile_dcc_rfree is not None:
            self.num_pd_bids_absolute_percentile_dcc_rfree = num_pd_bids_absolute_percentile_dcc_rfree
        if num_pd_bids_absolute_percentile_rna_suiteness is not None:
            self.num_pd_bids_absolute_percentile_rna_suiteness = num_pd_bids_absolute_percentile_rna_suiteness
        if num_pd_bids_absolute_percentile_clashscore is not None:
            self.num_pd_bids_absolute_percentile_clashscore = num_pd_bids_absolute_percentile_clashscore
        if num_pd_bids_absolute_percentile_percent_rsrz_outliers is not None:
            self.num_pd_bids_absolute_percentile_percent_rsrz_outliers = num_pd_bids_absolute_percentile_percent_rsrz_outliers
        if num_pd_bids_absolute_percentile_percent_ramachandran_outliers is not None:
            self.num_pd_bids_absolute_percentile_percent_ramachandran_outliers = num_pd_bids_absolute_percentile_percent_ramachandran_outliers
        if num_pd_bids_absolute_percentile_percent_rotamer_outliers is not None:
            self.num_pd_bids_absolute_percentile_percent_rotamer_outliers = num_pd_bids_absolute_percentile_percent_rotamer_outliers
        if num_pd_bids_relative_percentile_dcc_rfree is not None:
            self.num_pd_bids_relative_percentile_dcc_rfree = num_pd_bids_relative_percentile_dcc_rfree
        if num_pd_bids_relative_percentile_rna_suiteness is not None:
            self.num_pd_bids_relative_percentile_rna_suiteness = num_pd_bids_relative_percentile_rna_suiteness
        if num_pd_bids_relative_percentile_clashscore is not None:
            self.num_pd_bids_relative_percentile_clashscore = num_pd_bids_relative_percentile_clashscore
        if num_pd_bids_relative_percentile_percent_rsrz_outliers is not None:
            self.num_pd_bids_relative_percentile_percent_rsrz_outliers = num_pd_bids_relative_percentile_percent_rsrz_outliers
        if num_pd_bids_relative_percentile_percent_ramachandran_outliers is not None:
            self.num_pd_bids_relative_percentile_percent_ramachandran_outliers = num_pd_bids_relative_percentile_percent_ramachandran_outliers
        if num_pd_bids_relative_percentile_percent_rotamer_outliers is not None:
            self.num_pd_bids_relative_percentile_percent_rotamer_outliers = num_pd_bids_relative_percentile_percent_rotamer_outliers
        if num_angles_rmsz is not None:
            self.num_angles_rmsz = num_angles_rmsz
        if num_bonds_rmsz is not None:
            self.num_bonds_rmsz = num_bonds_rmsz
        if num_free_reflections is not None:
            self.num_free_reflections = num_free_reflections
        if num_miller_indices is not None:
            self.num_miller_indices = num_miller_indices
        if panav_version is not None:
            self.panav_version = panav_version
        if percent_rsrz_outliers is not None:
            self.percent_rsrz_outliers = percent_rsrz_outliers
        if percent_free_reflections is not None:
            self.percent_free_reflections = percent_free_reflections
        if percent_ramachandran_outliers is not None:
            self.percent_ramachandran_outliers = percent_ramachandran_outliers
        if percent_ramachandran_outliers_full_length is not None:
            self.percent_ramachandran_outliers_full_length = percent_ramachandran_outliers_full_length
        if percent_rotamer_outliers is not None:
            self.percent_rotamer_outliers = percent_rotamer_outliers
        if percent_rotamer_outliers_full_length is not None:
            self.percent_rotamer_outliers_full_length = percent_rotamer_outliers_full_length
        if percentilebins is not None:
            self.percentilebins = percentilebins
        if protein_dna_rna_entities is not None:
            self.protein_dna_rna_entities = protein_dna_rna_entities
        if rci_version is not None:
            self.rci_version = rci_version
        if reflections_input_filename is not None:
            self.reflections_input_filename = reflections_input_filename
        if refmac_version is not None:
            self.refmac_version = refmac_version
        if relative_percentile_dcc_rfree is not None:
            self.relative_percentile_dcc_rfree = relative_percentile_dcc_rfree
        if relative_percentile_rna_suiteness is not None:
            self.relative_percentile_rna_suiteness = relative_percentile_rna_suiteness
        if relative_percentile_clashscore is not None:
            self.relative_percentile_clashscore = relative_percentile_clashscore
        if relative_percentile_percent_rsrz_outliers is not None:
            self.relative_percentile_percent_rsrz_outliers = relative_percentile_percent_rsrz_outliers
        if relative_percentile_percent_ramachandran_outliers is not None:
            self.relative_percentile_percent_ramachandran_outliers = relative_percentile_percent_ramachandran_outliers
        if relative_percentile_percent_rotamer_outliers is not None:
            self.relative_percentile_percent_rotamer_outliers = relative_percentile_percent_rotamer_outliers
        if report_creation_date is not None:
            self.report_creation_date = report_creation_date
        if resol_high_from_reflectionsfile is not None:
            self.resol_high_from_reflectionsfile = resol_high_from_reflectionsfile
        if resol_low_from_reflectionsfile is not None:
            self.resol_low_from_reflectionsfile = resol_low_from_reflectionsfile
        if restypes_notchecked_for_bond_angle_geometry is not None:
            self.restypes_notchecked_for_bond_angle_geometry = restypes_notchecked_for_bond_angle_geometry
        if shiftchecker_version is not None:
            self.shiftchecker_version = shiftchecker_version
        if trans_nsc is not None:
            self.trans_nsc = trans_nsc
        if twin_l is not None:
            self.twin_l = twin_l
        if twin_l2 is not None:
            self.twin_l2 = twin_l2
        if twin_fraction is not None:
            self.twin_fraction = twin_fraction
        if xtriage_input_columns is not None:
            self.xtriage_input_columns = xtriage_input_columns

    @property
    def b_factor_type(self):
        """Gets the b_factor_type of this PdbxVrptSummary.  # noqa: E501

        String for B_factor_type either \"PARTIAL\" or \"FULL\".  # noqa: E501

        :return: The b_factor_type of this PdbxVrptSummary.  # noqa: E501
        :rtype: str
        """
        return self._b_factor_type

    @b_factor_type.setter
    def b_factor_type(self, b_factor_type):
        """Sets the b_factor_type of this PdbxVrptSummary.

        String for B_factor_type either \"PARTIAL\" or \"FULL\".  # noqa: E501

        :param b_factor_type: The b_factor_type of this PdbxVrptSummary.  # noqa: E501
        :type: str
        """
        allowed_values = ["FULL", "PARTIAL"]  # noqa: E501
        if b_factor_type not in allowed_values:
            raise ValueError(
                "Invalid value for `b_factor_type` ({0}), must be one of {1}"  # noqa: E501
                .format(b_factor_type, allowed_values)
            )

        self._b_factor_type = b_factor_type

    @property
    def babinet_b(self):
        """Gets the babinet_b of this PdbxVrptSummary.  # noqa: E501

        REFMAC scaling parameter as reported in log output line starting 'bulk solvent: scale'. Example:            X-ray entry specific, obtained in the eds step from REFMAC calculation.  # noqa: E501

        :return: The babinet_b of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._babinet_b

    @babinet_b.setter
    def babinet_b(self, babinet_b):
        """Sets the babinet_b of this PdbxVrptSummary.

        REFMAC scaling parameter as reported in log output line starting 'bulk solvent: scale'. Example:            X-ray entry specific, obtained in the eds step from REFMAC calculation.  # noqa: E501

        :param babinet_b: The babinet_b of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._babinet_b = babinet_b

    @property
    def babinet_k(self):
        """Gets the babinet_k of this PdbxVrptSummary.  # noqa: E501

        REFMAC scaling parameter as reported in log output line starting 'bulk solvent: scale'. Example:            X-ray entry specific, obtained in the eds step from REFMAC calculation.  # noqa: E501

        :return: The babinet_k of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._babinet_k

    @babinet_k.setter
    def babinet_k(self, babinet_k):
        """Sets the babinet_k of this PdbxVrptSummary.

        REFMAC scaling parameter as reported in log output line starting 'bulk solvent: scale'. Example:            X-ray entry specific, obtained in the eds step from REFMAC calculation.  # noqa: E501

        :param babinet_k: The babinet_k of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._babinet_k = babinet_k

    @property
    def ca_only(self):
        """Gets the ca_only of this PdbxVrptSummary.  # noqa: E501

        The string \"yes\".  # noqa: E501

        :return: The ca_only of this PdbxVrptSummary.  # noqa: E501
        :rtype: str
        """
        return self._ca_only

    @ca_only.setter
    def ca_only(self, ca_only):
        """Sets the ca_only of this PdbxVrptSummary.

        The string \"yes\".  # noqa: E501

        :param ca_only: The ca_only of this PdbxVrptSummary.  # noqa: E501
        :type: str
        """
        allowed_values = ["yes"]  # noqa: E501
        if ca_only not in allowed_values:
            raise ValueError(
                "Invalid value for `ca_only` ({0}), must be one of {1}"  # noqa: E501
                .format(ca_only, allowed_values)
            )

        self._ca_only = ca_only

    @property
    def dcc_r(self):
        """Gets the dcc_r of this PdbxVrptSummary.  # noqa: E501

        The overall R-factor from a DCC recalculation of an electron density map. Example:            Currently value is rounded to 2 decimal places. X-ray entry specific, obtained from the DCC program.  # noqa: E501

        :return: The dcc_r of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._dcc_r

    @dcc_r.setter
    def dcc_r(self, dcc_r):
        """Sets the dcc_r of this PdbxVrptSummary.

        The overall R-factor from a DCC recalculation of an electron density map. Example:            Currently value is rounded to 2 decimal places. X-ray entry specific, obtained from the DCC program.  # noqa: E501

        :param dcc_r: The dcc_r of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._dcc_r = dcc_r

    @property
    def dcc_rfree(self):
        """Gets the dcc_rfree of this PdbxVrptSummary.  # noqa: E501

        Either a decimal number or the string \"NotAvailable\".  # noqa: E501

        :return: The dcc_rfree of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._dcc_rfree

    @dcc_rfree.setter
    def dcc_rfree(self, dcc_rfree):
        """Sets the dcc_rfree of this PdbxVrptSummary.

        Either a decimal number or the string \"NotAvailable\".  # noqa: E501

        :param dcc_rfree: The dcc_rfree of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._dcc_rfree = dcc_rfree

    @property
    def dcc_refinement_program(self):
        """Gets the dcc_refinement_program of this PdbxVrptSummary.  # noqa: E501

        The pdbx_vrpt_software used by DCC to perform the recaluclation of the electron density maps. &#160;Currently one of \"CNS\", \"REFMAC\" or \"PHENIX\".  Example:            X-ray entry specific, obtained from the DCC program.  # noqa: E501

        :return: The dcc_refinement_program of this PdbxVrptSummary.  # noqa: E501
        :rtype: str
        """
        return self._dcc_refinement_program

    @dcc_refinement_program.setter
    def dcc_refinement_program(self, dcc_refinement_program):
        """Sets the dcc_refinement_program of this PdbxVrptSummary.

        The pdbx_vrpt_software used by DCC to perform the recaluclation of the electron density maps. &#160;Currently one of \"CNS\", \"REFMAC\" or \"PHENIX\".  Example:            X-ray entry specific, obtained from the DCC program.  # noqa: E501

        :param dcc_refinement_program: The dcc_refinement_program of this PdbxVrptSummary.  # noqa: E501
        :type: str
        """

        self._dcc_refinement_program = dcc_refinement_program

    @property
    def eds_r(self):
        """Gets the eds_r of this PdbxVrptSummary.  # noqa: E501

        The overall R factor from the EDS REFMAC calculation (no free set is used in this). Example:            Currently value is rounded to 2 decimal places. X-ray entry specific, obtained in the eds step from REFMAC calculation.  # noqa: E501

        :return: The eds_r of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._eds_r

    @eds_r.setter
    def eds_r(self, eds_r):
        """Sets the eds_r of this PdbxVrptSummary.

        The overall R factor from the EDS REFMAC calculation (no free set is used in this). Example:            Currently value is rounded to 2 decimal places. X-ray entry specific, obtained in the eds step from REFMAC calculation.  # noqa: E501

        :param eds_r: The eds_r of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._eds_r = eds_r

    @property
    def eds_resolution(self):
        """Gets the eds_resolution of this PdbxVrptSummary.  # noqa: E501

        The data high resolution diffraction limit, in Angstroms, found in the input structure factor file. Example:            X-ray entry specific, obtained in the eds step.  # noqa: E501

        :return: The eds_resolution of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._eds_resolution

    @eds_resolution.setter
    def eds_resolution(self, eds_resolution):
        """Sets the eds_resolution of this PdbxVrptSummary.

        The data high resolution diffraction limit, in Angstroms, found in the input structure factor file. Example:            X-ray entry specific, obtained in the eds step.  # noqa: E501

        :param eds_resolution: The eds_resolution of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._eds_resolution = eds_resolution

    @property
    def eds_resolution_low(self):
        """Gets the eds_resolution_low of this PdbxVrptSummary.  # noqa: E501

        The data low resolution diffraction limit, in Angstroms, found in the input structure factor file. Example:            X-ray entry specific, obtained in the eds step.  # noqa: E501

        :return: The eds_resolution_low of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._eds_resolution_low

    @eds_resolution_low.setter
    def eds_resolution_low(self, eds_resolution_low):
        """Sets the eds_resolution_low of this PdbxVrptSummary.

        The data low resolution diffraction limit, in Angstroms, found in the input structure factor file. Example:            X-ray entry specific, obtained in the eds step.  # noqa: E501

        :param eds_resolution_low: The eds_resolution_low of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._eds_resolution_low = eds_resolution_low

    @property
    def emdb_deposition_date(self):
        """Gets the emdb_deposition_date of this PdbxVrptSummary.  # noqa: E501

        Date in yyyy-mm-dd format when map was deposited to the EMDB. Reports produced by the validation server or during the initial deposition process should not have this item. If there is a difficulty parsing the item then \"unknown\" will be given.  # noqa: E501

        :return: The emdb_deposition_date of this PdbxVrptSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._emdb_deposition_date

    @emdb_deposition_date.setter
    def emdb_deposition_date(self, emdb_deposition_date):
        """Sets the emdb_deposition_date of this PdbxVrptSummary.

        Date in yyyy-mm-dd format when map was deposited to the EMDB. Reports produced by the validation server or during the initial deposition process should not have this item. If there is a difficulty parsing the item then \"unknown\" will be given.  # noqa: E501

        :param emdb_deposition_date: The emdb_deposition_date of this PdbxVrptSummary.  # noqa: E501
        :type: datetime
        """

        self._emdb_deposition_date = emdb_deposition_date

    @property
    def emdb_resolution(self):
        """Gets the emdb_resolution of this PdbxVrptSummary.  # noqa: E501

        Either a decimal number or the string \"NotAvailable\".  # noqa: E501

        :return: The emdb_resolution of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._emdb_resolution

    @emdb_resolution.setter
    def emdb_resolution(self, emdb_resolution):
        """Sets the emdb_resolution of this PdbxVrptSummary.

        Either a decimal number or the string \"NotAvailable\".  # noqa: E501

        :param emdb_resolution: The emdb_resolution of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._emdb_resolution = emdb_resolution

    @property
    def fo_fc_correlation(self):
        """Gets the fo_fc_correlation of this PdbxVrptSummary.  # noqa: E501

        Fo,Fc correlation: The difference between the observed structure factors (Fo) and the calculated structure factors (Fc) measures the correlation between the PDB_model_num and the i experimental data. Example:            X-ray entry specific, obtained in the eds step from REFMAC calculation.  # noqa: E501

        :return: The fo_fc_correlation of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._fo_fc_correlation

    @fo_fc_correlation.setter
    def fo_fc_correlation(self, fo_fc_correlation):
        """Sets the fo_fc_correlation of this PdbxVrptSummary.

        Fo,Fc correlation: The difference between the observed structure factors (Fo) and the calculated structure factors (Fc) measures the correlation between the PDB_model_num and the i experimental data. Example:            X-ray entry specific, obtained in the eds step from REFMAC calculation.  # noqa: E501

        :param fo_fc_correlation: The fo_fc_correlation of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._fo_fc_correlation = fo_fc_correlation

    @property
    def i_over_sigma(self):
        """Gets the i_over_sigma of this PdbxVrptSummary.  # noqa: E501

        Each reflection has an intensity (I) and an uncertainty in measurement (sigma(I)), so I/sigma(I) is the signal-to-noise ratio. This ratio decreases at higher resolution. <I/sigma(I)> is the mean of individual I/sigma(I) values. Value for outer resolution shell is given in parentheses. In case structure factor amplitudes are deposited, Xtriage estimates the intensities first and then calculates this metric. When intensities are available in the deposited file, these are converted to amplitudes and then back to intensity estimate before calculating the metric. Example            X-ray entry specific, calculated by Phenix Xtriage program.  # noqa: E501

        :return: The i_over_sigma of this PdbxVrptSummary.  # noqa: E501
        :rtype: str
        """
        return self._i_over_sigma

    @i_over_sigma.setter
    def i_over_sigma(self, i_over_sigma):
        """Sets the i_over_sigma of this PdbxVrptSummary.

        Each reflection has an intensity (I) and an uncertainty in measurement (sigma(I)), so I/sigma(I) is the signal-to-noise ratio. This ratio decreases at higher resolution. <I/sigma(I)> is the mean of individual I/sigma(I) values. Value for outer resolution shell is given in parentheses. In case structure factor amplitudes are deposited, Xtriage estimates the intensities first and then calculates this metric. When intensities are available in the deposited file, these are converted to amplitudes and then back to intensity estimate before calculating the metric. Example            X-ray entry specific, calculated by Phenix Xtriage program.  # noqa: E501

        :param i_over_sigma: The i_over_sigma of this PdbxVrptSummary.  # noqa: E501
        :type: str
        """

        self._i_over_sigma = i_over_sigma

    @property
    def pdb_r(self):
        """Gets the pdb_r of this PdbxVrptSummary.  # noqa: E501

        Either a decimal number or the string \"NotAvailable\".  # noqa: E501

        :return: The pdb_r of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._pdb_r

    @pdb_r.setter
    def pdb_r(self, pdb_r):
        """Sets the pdb_r of this PdbxVrptSummary.

        Either a decimal number or the string \"NotAvailable\".  # noqa: E501

        :param pdb_r: The pdb_r of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._pdb_r = pdb_r

    @property
    def pdb_rfree(self):
        """Gets the pdb_rfree of this PdbxVrptSummary.  # noqa: E501

        Either a decimal number or the string \"NotAvailable\".  # noqa: E501

        :return: The pdb_rfree of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._pdb_rfree

    @pdb_rfree.setter
    def pdb_rfree(self, pdb_rfree):
        """Sets the pdb_rfree of this PdbxVrptSummary.

        Either a decimal number or the string \"NotAvailable\".  # noqa: E501

        :param pdb_rfree: The pdb_rfree of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._pdb_rfree = pdb_rfree

    @property
    def pdb_deposition_date(self):
        """Gets the pdb_deposition_date of this PdbxVrptSummary.  # noqa: E501

        Date in yyyy-mm-dd format when structure was deposited to the PDB. Obtained from mmCIF table _database_PDB_rev item _database_PDB_rev.date_original Reports produced by the validation server or during the initial deposition process should not have this item. If there is a difficulty parsing the item then \"unknown\" will be given.  # noqa: E501

        :return: The pdb_deposition_date of this PdbxVrptSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._pdb_deposition_date

    @pdb_deposition_date.setter
    def pdb_deposition_date(self, pdb_deposition_date):
        """Sets the pdb_deposition_date of this PdbxVrptSummary.

        Date in yyyy-mm-dd format when structure was deposited to the PDB. Obtained from mmCIF table _database_PDB_rev item _database_PDB_rev.date_original Reports produced by the validation server or during the initial deposition process should not have this item. If there is a difficulty parsing the item then \"unknown\" will be given.  # noqa: E501

        :param pdb_deposition_date: The pdb_deposition_date of this PdbxVrptSummary.  # noqa: E501
        :type: datetime
        """

        self._pdb_deposition_date = pdb_deposition_date

    @property
    def pdb_resolution(self):
        """Gets the pdb_resolution of this PdbxVrptSummary.  # noqa: E501

        Either a decimal number or the string \"NotAvailable\".  # noqa: E501

        :return: The pdb_resolution of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._pdb_resolution

    @pdb_resolution.setter
    def pdb_resolution(self, pdb_resolution):
        """Sets the pdb_resolution of this PdbxVrptSummary.

        Either a decimal number or the string \"NotAvailable\".  # noqa: E501

        :param pdb_resolution: The pdb_resolution of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._pdb_resolution = pdb_resolution

    @property
    def pdb_resolution_low(self):
        """Gets the pdb_resolution_low of this PdbxVrptSummary.  # noqa: E501

        Either a decimal number or the string \"NotAvailable\".  # noqa: E501

        :return: The pdb_resolution_low of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._pdb_resolution_low

    @pdb_resolution_low.setter
    def pdb_resolution_low(self, pdb_resolution_low):
        """Sets the pdb_resolution_low of this PdbxVrptSummary.

        Either a decimal number or the string \"NotAvailable\".  # noqa: E501

        :param pdb_resolution_low: The pdb_resolution_low of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._pdb_resolution_low = pdb_resolution_low

    @property
    def pdb_revision_date(self):
        """Gets the pdb_revision_date of this PdbxVrptSummary.  # noqa: E501

        Date in yyyy-mm-dd format when the structure was last revised by PDB. Obtained from mmCIF table _database_PDB_rev item _database_PDB_rev.date Reports produced by the validation server or during the initial depositon process should not have this item. If there is a difficulty parsing the item then \"unknown\" will be given.  # noqa: E501

        :return: The pdb_revision_date of this PdbxVrptSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._pdb_revision_date

    @pdb_revision_date.setter
    def pdb_revision_date(self, pdb_revision_date):
        """Sets the pdb_revision_date of this PdbxVrptSummary.

        Date in yyyy-mm-dd format when the structure was last revised by PDB. Obtained from mmCIF table _database_PDB_rev item _database_PDB_rev.date Reports produced by the validation server or during the initial depositon process should not have this item. If there is a difficulty parsing the item then \"unknown\" will be given.  # noqa: E501

        :param pdb_revision_date: The pdb_revision_date of this PdbxVrptSummary.  # noqa: E501
        :type: datetime
        """

        self._pdb_revision_date = pdb_revision_date

    @property
    def pdb_revision_number(self):
        """Gets the pdb_revision_number of this PdbxVrptSummary.  # noqa: E501

        The last highest number that appears in mmCIF item _database_PDB_rev.num. Data items in the DATABASE_PDB_REV category record details about the history of the data block as archived by the Protein Data Bank (PDB). If the input mmCIF coordinate file lacks the information then a value of -1 is supplied.  # noqa: E501

        :return: The pdb_revision_number of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._pdb_revision_number

    @pdb_revision_number.setter
    def pdb_revision_number(self, pdb_revision_number):
        """Sets the pdb_revision_number of this PdbxVrptSummary.

        The last highest number that appears in mmCIF item _database_PDB_rev.num. Data items in the DATABASE_PDB_REV category record details about the history of the data block as archived by the Protein Data Bank (PDB). If the input mmCIF coordinate file lacks the information then a value of -1 is supplied.  # noqa: E501

        :param pdb_revision_number: The pdb_revision_number of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._pdb_revision_number = pdb_revision_number

    @property
    def rna_suiteness(self):
        """Gets the rna_suiteness of this PdbxVrptSummary.  # noqa: E501

        The MolProbity conformer-match quality parameter for RNA structures. Low values are worse. Example:           Specific to structures that contain RNA polymers.  # noqa: E501

        :return: The rna_suiteness of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._rna_suiteness

    @rna_suiteness.setter
    def rna_suiteness(self, rna_suiteness):
        """Sets the rna_suiteness of this PdbxVrptSummary.

        The MolProbity conformer-match quality parameter for RNA structures. Low values are worse. Example:           Specific to structures that contain RNA polymers.  # noqa: E501

        :param rna_suiteness: The rna_suiteness of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._rna_suiteness = rna_suiteness

    @property
    def wilson_b_aniso(self):
        """Gets the wilson_b_aniso of this PdbxVrptSummary.  # noqa: E501

        Result of absolute likelihood based Wilson scaling, The anisotropic B value of the data is determined using a likelihood based approach. The resulting B tensor is reported, the 3 diagonal values are given first, followed by the 3 off diagonal values. A large spread in (especially the diagonal) values indicates anisotropy. Example:            X-ray entry specific, calculated by Phenix Xtriage program.  # noqa: E501

        :return: The wilson_b_aniso of this PdbxVrptSummary.  # noqa: E501
        :rtype: str
        """
        return self._wilson_b_aniso

    @wilson_b_aniso.setter
    def wilson_b_aniso(self, wilson_b_aniso):
        """Sets the wilson_b_aniso of this PdbxVrptSummary.

        Result of absolute likelihood based Wilson scaling, The anisotropic B value of the data is determined using a likelihood based approach. The resulting B tensor is reported, the 3 diagonal values are given first, followed by the 3 off diagonal values. A large spread in (especially the diagonal) values indicates anisotropy. Example:            X-ray entry specific, calculated by Phenix Xtriage program.  # noqa: E501

        :param wilson_b_aniso: The wilson_b_aniso of this PdbxVrptSummary.  # noqa: E501
        :type: str
        """

        self._wilson_b_aniso = wilson_b_aniso

    @property
    def wilson_b_estimate(self):
        """Gets the wilson_b_estimate of this PdbxVrptSummary.  # noqa: E501

        An estimate of the overall B-value of the structure, calculated from the diffraction data. Units Angstroms squared. It serves as an indicator of the degree of order in the crystal and the value is usually not hugely different from the average B-value calculated from the model. Example:            X-ray entry specific, calculated by Phenix Xtriage program.  # noqa: E501

        :return: The wilson_b_estimate of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._wilson_b_estimate

    @wilson_b_estimate.setter
    def wilson_b_estimate(self, wilson_b_estimate):
        """Sets the wilson_b_estimate of this PdbxVrptSummary.

        An estimate of the overall B-value of the structure, calculated from the diffraction data. Units Angstroms squared. It serves as an indicator of the degree of order in the crystal and the value is usually not hugely different from the average B-value calculated from the model. Example:            X-ray entry specific, calculated by Phenix Xtriage program.  # noqa: E501

        :param wilson_b_estimate: The wilson_b_estimate of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._wilson_b_estimate = wilson_b_estimate

    @property
    def absolute_percentile_dcc_rfree(self):
        """Gets the absolute_percentile_dcc_rfree of this PdbxVrptSummary.  # noqa: E501

        Structures are judged in comparison to previously deposited PDB entries. The comparison is carried out by calculation of the percentile rank, i.e. the percentage of entries that are equal or poorer than this structure in terms of a quality indicator. Percentile ranks range from 0 (the worst) to 100 (the best).  # noqa: E501

        :return: The absolute_percentile_dcc_rfree of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._absolute_percentile_dcc_rfree

    @absolute_percentile_dcc_rfree.setter
    def absolute_percentile_dcc_rfree(self, absolute_percentile_dcc_rfree):
        """Sets the absolute_percentile_dcc_rfree of this PdbxVrptSummary.

        Structures are judged in comparison to previously deposited PDB entries. The comparison is carried out by calculation of the percentile rank, i.e. the percentage of entries that are equal or poorer than this structure in terms of a quality indicator. Percentile ranks range from 0 (the worst) to 100 (the best).  # noqa: E501

        :param absolute_percentile_dcc_rfree: The absolute_percentile_dcc_rfree of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._absolute_percentile_dcc_rfree = absolute_percentile_dcc_rfree

    @property
    def absolute_percentile_rna_suiteness(self):
        """Gets the absolute_percentile_rna_suiteness of this PdbxVrptSummary.  # noqa: E501

        Structures are judged in comparison to previously deposited PDB entries. The comparison is carried out by calculation of the percentile rank, i.e. the percentage of entries that are equal or poorer than this structure in terms of a quality indicator. Percentile ranks range from 0 (the worst) to 100 (the best).  # noqa: E501

        :return: The absolute_percentile_rna_suiteness of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._absolute_percentile_rna_suiteness

    @absolute_percentile_rna_suiteness.setter
    def absolute_percentile_rna_suiteness(self, absolute_percentile_rna_suiteness):
        """Sets the absolute_percentile_rna_suiteness of this PdbxVrptSummary.

        Structures are judged in comparison to previously deposited PDB entries. The comparison is carried out by calculation of the percentile rank, i.e. the percentage of entries that are equal or poorer than this structure in terms of a quality indicator. Percentile ranks range from 0 (the worst) to 100 (the best).  # noqa: E501

        :param absolute_percentile_rna_suiteness: The absolute_percentile_rna_suiteness of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._absolute_percentile_rna_suiteness = absolute_percentile_rna_suiteness

    @property
    def absolute_percentile_clashscore(self):
        """Gets the absolute_percentile_clashscore of this PdbxVrptSummary.  # noqa: E501

        Structures are judged in comparison to previously deposited PDB entries. The comparison is carried out by calculation of the percentile rank, i.e. the percentage of entries that are equal or poorer than this structure in terms of a quality indicator. Percentile ranks range from 0 (the worst) to 100 (the best).  # noqa: E501

        :return: The absolute_percentile_clashscore of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._absolute_percentile_clashscore

    @absolute_percentile_clashscore.setter
    def absolute_percentile_clashscore(self, absolute_percentile_clashscore):
        """Sets the absolute_percentile_clashscore of this PdbxVrptSummary.

        Structures are judged in comparison to previously deposited PDB entries. The comparison is carried out by calculation of the percentile rank, i.e. the percentage of entries that are equal or poorer than this structure in terms of a quality indicator. Percentile ranks range from 0 (the worst) to 100 (the best).  # noqa: E501

        :param absolute_percentile_clashscore: The absolute_percentile_clashscore of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._absolute_percentile_clashscore = absolute_percentile_clashscore

    @property
    def absolute_percentile_percent_rsrz_outliers(self):
        """Gets the absolute_percentile_percent_rsrz_outliers of this PdbxVrptSummary.  # noqa: E501

        Structures are judged in comparison to previously deposited PDB entries. The comparison is carried out by calculation of the percentile rank, i.e. the percentage of entries that are equal or poorer than this structure in terms of a quality indicator. Percentile ranks range from 0 (the worst) to 100 (the best).  # noqa: E501

        :return: The absolute_percentile_percent_rsrz_outliers of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._absolute_percentile_percent_rsrz_outliers

    @absolute_percentile_percent_rsrz_outliers.setter
    def absolute_percentile_percent_rsrz_outliers(self, absolute_percentile_percent_rsrz_outliers):
        """Sets the absolute_percentile_percent_rsrz_outliers of this PdbxVrptSummary.

        Structures are judged in comparison to previously deposited PDB entries. The comparison is carried out by calculation of the percentile rank, i.e. the percentage of entries that are equal or poorer than this structure in terms of a quality indicator. Percentile ranks range from 0 (the worst) to 100 (the best).  # noqa: E501

        :param absolute_percentile_percent_rsrz_outliers: The absolute_percentile_percent_rsrz_outliers of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._absolute_percentile_percent_rsrz_outliers = absolute_percentile_percent_rsrz_outliers

    @property
    def absolute_percentile_percent_ramachandran_outliers(self):
        """Gets the absolute_percentile_percent_ramachandran_outliers of this PdbxVrptSummary.  # noqa: E501

        Structures are judged in comparison to previously deposited PDB entries. The comparison is carried out by calculation of the percentile rank, i.e. the percentage of entries that are equal or poorer than this structure in terms of a quality indicator. Percentile ranks range from 0 (the worst) to 100 (the best).  # noqa: E501

        :return: The absolute_percentile_percent_ramachandran_outliers of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._absolute_percentile_percent_ramachandran_outliers

    @absolute_percentile_percent_ramachandran_outliers.setter
    def absolute_percentile_percent_ramachandran_outliers(self, absolute_percentile_percent_ramachandran_outliers):
        """Sets the absolute_percentile_percent_ramachandran_outliers of this PdbxVrptSummary.

        Structures are judged in comparison to previously deposited PDB entries. The comparison is carried out by calculation of the percentile rank, i.e. the percentage of entries that are equal or poorer than this structure in terms of a quality indicator. Percentile ranks range from 0 (the worst) to 100 (the best).  # noqa: E501

        :param absolute_percentile_percent_ramachandran_outliers: The absolute_percentile_percent_ramachandran_outliers of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._absolute_percentile_percent_ramachandran_outliers = absolute_percentile_percent_ramachandran_outliers

    @property
    def absolute_percentile_percent_rotamer_outliers(self):
        """Gets the absolute_percentile_percent_rotamer_outliers of this PdbxVrptSummary.  # noqa: E501

        Structures are judged in comparison to previously deposited PDB entries. The comparison is carried out by calculation of the percentile rank, i.e. the percentage of entries that are equal or poorer than this structure in terms of a quality indicator. Percentile ranks range from 0 (the worst) to 100 (the best).  # noqa: E501

        :return: The absolute_percentile_percent_rotamer_outliers of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._absolute_percentile_percent_rotamer_outliers

    @absolute_percentile_percent_rotamer_outliers.setter
    def absolute_percentile_percent_rotamer_outliers(self, absolute_percentile_percent_rotamer_outliers):
        """Sets the absolute_percentile_percent_rotamer_outliers of this PdbxVrptSummary.

        Structures are judged in comparison to previously deposited PDB entries. The comparison is carried out by calculation of the percentile rank, i.e. the percentage of entries that are equal or poorer than this structure in terms of a quality indicator. Percentile ranks range from 0 (the worst) to 100 (the best).  # noqa: E501

        :param absolute_percentile_percent_rotamer_outliers: The absolute_percentile_percent_rotamer_outliers of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._absolute_percentile_percent_rotamer_outliers = absolute_percentile_percent_rotamer_outliers

    @property
    def acentric_outliers(self):
        """Gets the acentric_outliers of this PdbxVrptSummary.  # noqa: E501

        The number of acentric reflections that Xtriage identifies as outliers on the basis of Wilson statistics. Note that if pseudo translational symmetry is present, a large number of 'outliers' will be present. Example:            X-ray entry specific, calculated by Phenix Xtriage program.  # noqa: E501

        :return: The acentric_outliers of this PdbxVrptSummary.  # noqa: E501
        :rtype: int
        """
        return self._acentric_outliers

    @acentric_outliers.setter
    def acentric_outliers(self, acentric_outliers):
        """Sets the acentric_outliers of this PdbxVrptSummary.

        The number of acentric reflections that Xtriage identifies as outliers on the basis of Wilson statistics. Note that if pseudo translational symmetry is present, a large number of 'outliers' will be present. Example:            X-ray entry specific, calculated by Phenix Xtriage program.  # noqa: E501

        :param acentric_outliers: The acentric_outliers of this PdbxVrptSummary.  # noqa: E501
        :type: int
        """

        self._acentric_outliers = acentric_outliers

    @property
    def angles_rmsz(self):
        """Gets the angles_rmsz of this PdbxVrptSummary.  # noqa: E501

        The overall root mean square of the Z-score for deviations of bond angles in comparison to \"standard geometry\" made using the MolProbity dangle program. Standard geometry parameters are taken from Engh and Huber (2001) and Parkinson et al. (1996). This value is for all chains in the structure.  # noqa: E501

        :return: The angles_rmsz of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._angles_rmsz

    @angles_rmsz.setter
    def angles_rmsz(self, angles_rmsz):
        """Sets the angles_rmsz of this PdbxVrptSummary.

        The overall root mean square of the Z-score for deviations of bond angles in comparison to \"standard geometry\" made using the MolProbity dangle program. Standard geometry parameters are taken from Engh and Huber (2001) and Parkinson et al. (1996). This value is for all chains in the structure.  # noqa: E501

        :param angles_rmsz: The angles_rmsz of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._angles_rmsz = angles_rmsz

    @property
    def atom_inclusion_all_atoms(self):
        """Gets the atom_inclusion_all_atoms of this PdbxVrptSummary.  # noqa: E501

        The proportion of all non hydrogen atoms within density.  # noqa: E501

        :return: The atom_inclusion_all_atoms of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._atom_inclusion_all_atoms

    @atom_inclusion_all_atoms.setter
    def atom_inclusion_all_atoms(self, atom_inclusion_all_atoms):
        """Sets the atom_inclusion_all_atoms of this PdbxVrptSummary.

        The proportion of all non hydrogen atoms within density.  # noqa: E501

        :param atom_inclusion_all_atoms: The atom_inclusion_all_atoms of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._atom_inclusion_all_atoms = atom_inclusion_all_atoms

    @property
    def atom_inclusion_backbone(self):
        """Gets the atom_inclusion_backbone of this PdbxVrptSummary.  # noqa: E501

        The proportion of backbone atoms within density.  # noqa: E501

        :return: The atom_inclusion_backbone of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._atom_inclusion_backbone

    @atom_inclusion_backbone.setter
    def atom_inclusion_backbone(self, atom_inclusion_backbone):
        """Sets the atom_inclusion_backbone of this PdbxVrptSummary.

        The proportion of backbone atoms within density.  # noqa: E501

        :param atom_inclusion_backbone: The atom_inclusion_backbone of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._atom_inclusion_backbone = atom_inclusion_backbone

    @property
    def attempted_validation_steps(self):
        """Gets the attempted_validation_steps of this PdbxVrptSummary.  # noqa: E501

        The steps that were attempted by the validation pipeline software. A step typically involves running a 3rd party validation tool, for instance \"mogul\" Each step that was successfully completed will result in a pdbx_vrpt_software element in the pdbx_vrpt_sotfware_notused list.  # noqa: E501

        :return: The attempted_validation_steps of this PdbxVrptSummary.  # noqa: E501
        :rtype: str
        """
        return self._attempted_validation_steps

    @attempted_validation_steps.setter
    def attempted_validation_steps(self, attempted_validation_steps):
        """Sets the attempted_validation_steps of this PdbxVrptSummary.

        The steps that were attempted by the validation pipeline software. A step typically involves running a 3rd party validation tool, for instance \"mogul\" Each step that was successfully completed will result in a pdbx_vrpt_software element in the pdbx_vrpt_sotfware_notused list.  # noqa: E501

        :param attempted_validation_steps: The attempted_validation_steps of this PdbxVrptSummary.  # noqa: E501
        :type: str
        """

        self._attempted_validation_steps = attempted_validation_steps

    @property
    def author_provided_fsc_resolution_by_cutoff_halfbit(self):
        """Gets the author_provided_fsc_resolution_by_cutoff_halfbit of this PdbxVrptSummary.  # noqa: E501

        The resolution from the intersection of the author provided fsc and the indicator curve halfbit.  # noqa: E501

        :return: The author_provided_fsc_resolution_by_cutoff_halfbit of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._author_provided_fsc_resolution_by_cutoff_halfbit

    @author_provided_fsc_resolution_by_cutoff_halfbit.setter
    def author_provided_fsc_resolution_by_cutoff_halfbit(self, author_provided_fsc_resolution_by_cutoff_halfbit):
        """Sets the author_provided_fsc_resolution_by_cutoff_halfbit of this PdbxVrptSummary.

        The resolution from the intersection of the author provided fsc and the indicator curve halfbit.  # noqa: E501

        :param author_provided_fsc_resolution_by_cutoff_halfbit: The author_provided_fsc_resolution_by_cutoff_halfbit of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._author_provided_fsc_resolution_by_cutoff_halfbit = author_provided_fsc_resolution_by_cutoff_halfbit

    @property
    def author_provided_fsc_resolution_by_cutoff_onebit(self):
        """Gets the author_provided_fsc_resolution_by_cutoff_onebit of this PdbxVrptSummary.  # noqa: E501

        The resolution from the intersection of the author provided fsc and the indicator curve onebit.  # noqa: E501

        :return: The author_provided_fsc_resolution_by_cutoff_onebit of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._author_provided_fsc_resolution_by_cutoff_onebit

    @author_provided_fsc_resolution_by_cutoff_onebit.setter
    def author_provided_fsc_resolution_by_cutoff_onebit(self, author_provided_fsc_resolution_by_cutoff_onebit):
        """Sets the author_provided_fsc_resolution_by_cutoff_onebit of this PdbxVrptSummary.

        The resolution from the intersection of the author provided fsc and the indicator curve onebit.  # noqa: E501

        :param author_provided_fsc_resolution_by_cutoff_onebit: The author_provided_fsc_resolution_by_cutoff_onebit of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._author_provided_fsc_resolution_by_cutoff_onebit = author_provided_fsc_resolution_by_cutoff_onebit

    @property
    def author_provided_fsc_resolution_by_cutoff_pt_143(self):
        """Gets the author_provided_fsc_resolution_by_cutoff_pt_143 of this PdbxVrptSummary.  # noqa: E501

        The resolution from the intersection of the author provided fsc and the indicator curve 0.143.  # noqa: E501

        :return: The author_provided_fsc_resolution_by_cutoff_pt_143 of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._author_provided_fsc_resolution_by_cutoff_pt_143

    @author_provided_fsc_resolution_by_cutoff_pt_143.setter
    def author_provided_fsc_resolution_by_cutoff_pt_143(self, author_provided_fsc_resolution_by_cutoff_pt_143):
        """Sets the author_provided_fsc_resolution_by_cutoff_pt_143 of this PdbxVrptSummary.

        The resolution from the intersection of the author provided fsc and the indicator curve 0.143.  # noqa: E501

        :param author_provided_fsc_resolution_by_cutoff_pt_143: The author_provided_fsc_resolution_by_cutoff_pt_143 of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._author_provided_fsc_resolution_by_cutoff_pt_143 = author_provided_fsc_resolution_by_cutoff_pt_143

    @property
    def author_provided_fsc_resolution_by_cutoff_pt_333(self):
        """Gets the author_provided_fsc_resolution_by_cutoff_pt_333 of this PdbxVrptSummary.  # noqa: E501

        The resolution from the intersection of the author provided fsc and the indicator curve 0.333.  # noqa: E501

        :return: The author_provided_fsc_resolution_by_cutoff_pt_333 of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._author_provided_fsc_resolution_by_cutoff_pt_333

    @author_provided_fsc_resolution_by_cutoff_pt_333.setter
    def author_provided_fsc_resolution_by_cutoff_pt_333(self, author_provided_fsc_resolution_by_cutoff_pt_333):
        """Sets the author_provided_fsc_resolution_by_cutoff_pt_333 of this PdbxVrptSummary.

        The resolution from the intersection of the author provided fsc and the indicator curve 0.333.  # noqa: E501

        :param author_provided_fsc_resolution_by_cutoff_pt_333: The author_provided_fsc_resolution_by_cutoff_pt_333 of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._author_provided_fsc_resolution_by_cutoff_pt_333 = author_provided_fsc_resolution_by_cutoff_pt_333

    @property
    def author_provided_fsc_resolution_by_cutoff_pt_5(self):
        """Gets the author_provided_fsc_resolution_by_cutoff_pt_5 of this PdbxVrptSummary.  # noqa: E501

        The resolution from the intersection of the author provided fsc and the indicator curve 0.5.  # noqa: E501

        :return: The author_provided_fsc_resolution_by_cutoff_pt_5 of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._author_provided_fsc_resolution_by_cutoff_pt_5

    @author_provided_fsc_resolution_by_cutoff_pt_5.setter
    def author_provided_fsc_resolution_by_cutoff_pt_5(self, author_provided_fsc_resolution_by_cutoff_pt_5):
        """Sets the author_provided_fsc_resolution_by_cutoff_pt_5 of this PdbxVrptSummary.

        The resolution from the intersection of the author provided fsc and the indicator curve 0.5.  # noqa: E501

        :param author_provided_fsc_resolution_by_cutoff_pt_5: The author_provided_fsc_resolution_by_cutoff_pt_5 of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._author_provided_fsc_resolution_by_cutoff_pt_5 = author_provided_fsc_resolution_by_cutoff_pt_5

    @property
    def author_provided_fsc_resolution_by_cutoff_threesigma(self):
        """Gets the author_provided_fsc_resolution_by_cutoff_threesigma of this PdbxVrptSummary.  # noqa: E501

        The resolution from the intersection of the author provided fsc and the indicator curve threesigma.  # noqa: E501

        :return: The author_provided_fsc_resolution_by_cutoff_threesigma of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._author_provided_fsc_resolution_by_cutoff_threesigma

    @author_provided_fsc_resolution_by_cutoff_threesigma.setter
    def author_provided_fsc_resolution_by_cutoff_threesigma(self, author_provided_fsc_resolution_by_cutoff_threesigma):
        """Sets the author_provided_fsc_resolution_by_cutoff_threesigma of this PdbxVrptSummary.

        The resolution from the intersection of the author provided fsc and the indicator curve threesigma.  # noqa: E501

        :param author_provided_fsc_resolution_by_cutoff_threesigma: The author_provided_fsc_resolution_by_cutoff_threesigma of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._author_provided_fsc_resolution_by_cutoff_threesigma = author_provided_fsc_resolution_by_cutoff_threesigma

    @property
    def bonds_rmsz(self):
        """Gets the bonds_rmsz of this PdbxVrptSummary.  # noqa: E501

        The overall root mean square of the Z-score for deviations of bond lengths in comparison to \"standard geometry\" made using the MolProbity dangle program. Standard geometry parameters are taken from Engh and Huber (2001) and Parkinson et al. (1996). This value is for all chains in the structure.  # noqa: E501

        :return: The bonds_rmsz of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._bonds_rmsz

    @bonds_rmsz.setter
    def bonds_rmsz(self, bonds_rmsz):
        """Sets the bonds_rmsz of this PdbxVrptSummary.

        The overall root mean square of the Z-score for deviations of bond lengths in comparison to \"standard geometry\" made using the MolProbity dangle program. Standard geometry parameters are taken from Engh and Huber (2001) and Parkinson et al. (1996). This value is for all chains in the structure.  # noqa: E501

        :param bonds_rmsz: The bonds_rmsz of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._bonds_rmsz = bonds_rmsz

    @property
    def bulk_solvent_b(self):
        """Gets the bulk_solvent_b of this PdbxVrptSummary.  # noqa: E501

        REFMAC scaling parameter as reported in log output line starting 'Partial structure    1: scale.' Example:            X-ray entry specific, obtained in the eds step from REFMAC calculation.  # noqa: E501

        :return: The bulk_solvent_b of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._bulk_solvent_b

    @bulk_solvent_b.setter
    def bulk_solvent_b(self, bulk_solvent_b):
        """Sets the bulk_solvent_b of this PdbxVrptSummary.

        REFMAC scaling parameter as reported in log output line starting 'Partial structure    1: scale.' Example:            X-ray entry specific, obtained in the eds step from REFMAC calculation.  # noqa: E501

        :param bulk_solvent_b: The bulk_solvent_b of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._bulk_solvent_b = bulk_solvent_b

    @property
    def bulk_solvent_k(self):
        """Gets the bulk_solvent_k of this PdbxVrptSummary.  # noqa: E501

        REFMAC scaling parameter as reported in log output line starting 'Partial structure    1: scale.' Example:            X-ray entry specific, obtained in the eds step from REFMAC calculation.  # noqa: E501

        :return: The bulk_solvent_k of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._bulk_solvent_k

    @bulk_solvent_k.setter
    def bulk_solvent_k(self, bulk_solvent_k):
        """Sets the bulk_solvent_k of this PdbxVrptSummary.

        REFMAC scaling parameter as reported in log output line starting 'Partial structure    1: scale.' Example:            X-ray entry specific, obtained in the eds step from REFMAC calculation.  # noqa: E501

        :param bulk_solvent_k: The bulk_solvent_k of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._bulk_solvent_k = bulk_solvent_k

    @property
    def calculated_fsc_resolution_by_cutoff_halfbit(self):
        """Gets the calculated_fsc_resolution_by_cutoff_halfbit of this PdbxVrptSummary.  # noqa: E501

        The resolution from the intersection of the fsc curve generated by from the provided halfmaps and the indicator curve halfbit.  # noqa: E501

        :return: The calculated_fsc_resolution_by_cutoff_halfbit of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._calculated_fsc_resolution_by_cutoff_halfbit

    @calculated_fsc_resolution_by_cutoff_halfbit.setter
    def calculated_fsc_resolution_by_cutoff_halfbit(self, calculated_fsc_resolution_by_cutoff_halfbit):
        """Sets the calculated_fsc_resolution_by_cutoff_halfbit of this PdbxVrptSummary.

        The resolution from the intersection of the fsc curve generated by from the provided halfmaps and the indicator curve halfbit.  # noqa: E501

        :param calculated_fsc_resolution_by_cutoff_halfbit: The calculated_fsc_resolution_by_cutoff_halfbit of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._calculated_fsc_resolution_by_cutoff_halfbit = calculated_fsc_resolution_by_cutoff_halfbit

    @property
    def calculated_fsc_resolution_by_cutoff_onebit(self):
        """Gets the calculated_fsc_resolution_by_cutoff_onebit of this PdbxVrptSummary.  # noqa: E501

        The resolution from the intersection of the fsc curve generated by from the provided halfmaps and the indicator curve onebit.  # noqa: E501

        :return: The calculated_fsc_resolution_by_cutoff_onebit of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._calculated_fsc_resolution_by_cutoff_onebit

    @calculated_fsc_resolution_by_cutoff_onebit.setter
    def calculated_fsc_resolution_by_cutoff_onebit(self, calculated_fsc_resolution_by_cutoff_onebit):
        """Sets the calculated_fsc_resolution_by_cutoff_onebit of this PdbxVrptSummary.

        The resolution from the intersection of the fsc curve generated by from the provided halfmaps and the indicator curve onebit.  # noqa: E501

        :param calculated_fsc_resolution_by_cutoff_onebit: The calculated_fsc_resolution_by_cutoff_onebit of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._calculated_fsc_resolution_by_cutoff_onebit = calculated_fsc_resolution_by_cutoff_onebit

    @property
    def calculated_fsc_resolution_by_cutoff_pt_143(self):
        """Gets the calculated_fsc_resolution_by_cutoff_pt_143 of this PdbxVrptSummary.  # noqa: E501

        The resolution from the intersection of the fsc curve generated by from the provided halfmaps and the indicator curve 0.143.  # noqa: E501

        :return: The calculated_fsc_resolution_by_cutoff_pt_143 of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._calculated_fsc_resolution_by_cutoff_pt_143

    @calculated_fsc_resolution_by_cutoff_pt_143.setter
    def calculated_fsc_resolution_by_cutoff_pt_143(self, calculated_fsc_resolution_by_cutoff_pt_143):
        """Sets the calculated_fsc_resolution_by_cutoff_pt_143 of this PdbxVrptSummary.

        The resolution from the intersection of the fsc curve generated by from the provided halfmaps and the indicator curve 0.143.  # noqa: E501

        :param calculated_fsc_resolution_by_cutoff_pt_143: The calculated_fsc_resolution_by_cutoff_pt_143 of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._calculated_fsc_resolution_by_cutoff_pt_143 = calculated_fsc_resolution_by_cutoff_pt_143

    @property
    def calculated_fsc_resolution_by_cutoff_pt_333(self):
        """Gets the calculated_fsc_resolution_by_cutoff_pt_333 of this PdbxVrptSummary.  # noqa: E501

        The resolution from the intersection of the fsc curve generated by from the provided halfmaps and the indicator curve 0.333.  # noqa: E501

        :return: The calculated_fsc_resolution_by_cutoff_pt_333 of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._calculated_fsc_resolution_by_cutoff_pt_333

    @calculated_fsc_resolution_by_cutoff_pt_333.setter
    def calculated_fsc_resolution_by_cutoff_pt_333(self, calculated_fsc_resolution_by_cutoff_pt_333):
        """Sets the calculated_fsc_resolution_by_cutoff_pt_333 of this PdbxVrptSummary.

        The resolution from the intersection of the fsc curve generated by from the provided halfmaps and the indicator curve 0.333.  # noqa: E501

        :param calculated_fsc_resolution_by_cutoff_pt_333: The calculated_fsc_resolution_by_cutoff_pt_333 of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._calculated_fsc_resolution_by_cutoff_pt_333 = calculated_fsc_resolution_by_cutoff_pt_333

    @property
    def calculated_fsc_resolution_by_cutoff_pt_5(self):
        """Gets the calculated_fsc_resolution_by_cutoff_pt_5 of this PdbxVrptSummary.  # noqa: E501

        The resolution from the intersection of the fsc curve generated by from the provided halfmaps and the indicator curve 0.5.  # noqa: E501

        :return: The calculated_fsc_resolution_by_cutoff_pt_5 of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._calculated_fsc_resolution_by_cutoff_pt_5

    @calculated_fsc_resolution_by_cutoff_pt_5.setter
    def calculated_fsc_resolution_by_cutoff_pt_5(self, calculated_fsc_resolution_by_cutoff_pt_5):
        """Sets the calculated_fsc_resolution_by_cutoff_pt_5 of this PdbxVrptSummary.

        The resolution from the intersection of the fsc curve generated by from the provided halfmaps and the indicator curve 0.5.  # noqa: E501

        :param calculated_fsc_resolution_by_cutoff_pt_5: The calculated_fsc_resolution_by_cutoff_pt_5 of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._calculated_fsc_resolution_by_cutoff_pt_5 = calculated_fsc_resolution_by_cutoff_pt_5

    @property
    def calculated_fsc_resolution_by_cutoff_threesigma(self):
        """Gets the calculated_fsc_resolution_by_cutoff_threesigma of this PdbxVrptSummary.  # noqa: E501

        The resolution from the intersection of the fsc curve generated by from the provided halfmaps and the indicator curve threesigma.  # noqa: E501

        :return: The calculated_fsc_resolution_by_cutoff_threesigma of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._calculated_fsc_resolution_by_cutoff_threesigma

    @calculated_fsc_resolution_by_cutoff_threesigma.setter
    def calculated_fsc_resolution_by_cutoff_threesigma(self, calculated_fsc_resolution_by_cutoff_threesigma):
        """Sets the calculated_fsc_resolution_by_cutoff_threesigma of this PdbxVrptSummary.

        The resolution from the intersection of the fsc curve generated by from the provided halfmaps and the indicator curve threesigma.  # noqa: E501

        :param calculated_fsc_resolution_by_cutoff_threesigma: The calculated_fsc_resolution_by_cutoff_threesigma of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._calculated_fsc_resolution_by_cutoff_threesigma = calculated_fsc_resolution_by_cutoff_threesigma

    @property
    def ccp4version(self):
        """Gets the ccp4version of this PdbxVrptSummary.  # noqa: E501

        The version of CCP4 suite pdbx_vrpt_sotfware_notused used in the analysis. Example:            X-ray entry specific, obtained from the eds step.  # noqa: E501

        :return: The ccp4version of this PdbxVrptSummary.  # noqa: E501
        :rtype: str
        """
        return self._ccp4version

    @ccp4version.setter
    def ccp4version(self, ccp4version):
        """Sets the ccp4version of this PdbxVrptSummary.

        The version of CCP4 suite pdbx_vrpt_sotfware_notused used in the analysis. Example:            X-ray entry specific, obtained from the eds step.  # noqa: E501

        :param ccp4version: The ccp4version of this PdbxVrptSummary.  # noqa: E501
        :type: str
        """

        self._ccp4version = ccp4version

    @property
    def centric_outliers(self):
        """Gets the centric_outliers of this PdbxVrptSummary.  # noqa: E501

        The number of centric reflections that Xtriage identifies as outliers. Example:            X-ray entry specific, calculated by Phenix Xtriage program.  # noqa: E501

        :return: The centric_outliers of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._centric_outliers

    @centric_outliers.setter
    def centric_outliers(self, centric_outliers):
        """Sets the centric_outliers of this PdbxVrptSummary.

        The number of centric reflections that Xtriage identifies as outliers. Example:            X-ray entry specific, calculated by Phenix Xtriage program.  # noqa: E501

        :param centric_outliers: The centric_outliers of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._centric_outliers = centric_outliers

    @property
    def chemical_shift_completeness(self):
        """Gets the chemical_shift_completeness of this PdbxVrptSummary.  # noqa: E501

        Overall completeness of the chemical shift assignments for the well-defined regions of the structure.  # noqa: E501

        :return: The chemical_shift_completeness of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._chemical_shift_completeness

    @chemical_shift_completeness.setter
    def chemical_shift_completeness(self, chemical_shift_completeness):
        """Sets the chemical_shift_completeness of this PdbxVrptSummary.

        Overall completeness of the chemical shift assignments for the well-defined regions of the structure.  # noqa: E501

        :param chemical_shift_completeness: The chemical_shift_completeness of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._chemical_shift_completeness = chemical_shift_completeness

    @property
    def chemical_shift_completeness_full_length(self):
        """Gets the chemical_shift_completeness_full_length of this PdbxVrptSummary.  # noqa: E501

        Overall completeness of the chemical shift assignments for the full macromolecule or complex as suggested by the molecular description of an entry (whether some portion of it is modelled or not).  # noqa: E501

        :return: The chemical_shift_completeness_full_length of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._chemical_shift_completeness_full_length

    @chemical_shift_completeness_full_length.setter
    def chemical_shift_completeness_full_length(self, chemical_shift_completeness_full_length):
        """Sets the chemical_shift_completeness_full_length of this PdbxVrptSummary.

        Overall completeness of the chemical shift assignments for the full macromolecule or complex as suggested by the molecular description of an entry (whether some portion of it is modelled or not).  # noqa: E501

        :param chemical_shift_completeness_full_length: The chemical_shift_completeness_full_length of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._chemical_shift_completeness_full_length = chemical_shift_completeness_full_length

    @property
    def chemical_shifts_input_filename(self):
        """Gets the chemical_shifts_input_filename of this PdbxVrptSummary.  # noqa: E501

        The filename for the input chemical shifts file given to the validation pipeline. Not reported for runs at the annotation or release stage.  # noqa: E501

        :return: The chemical_shifts_input_filename of this PdbxVrptSummary.  # noqa: E501
        :rtype: str
        """
        return self._chemical_shifts_input_filename

    @chemical_shifts_input_filename.setter
    def chemical_shifts_input_filename(self, chemical_shifts_input_filename):
        """Sets the chemical_shifts_input_filename of this PdbxVrptSummary.

        The filename for the input chemical shifts file given to the validation pipeline. Not reported for runs at the annotation or release stage.  # noqa: E501

        :param chemical_shifts_input_filename: The chemical_shifts_input_filename of this PdbxVrptSummary.  # noqa: E501
        :type: str
        """

        self._chemical_shifts_input_filename = chemical_shifts_input_filename

    @property
    def clashscore(self):
        """Gets the clashscore of this PdbxVrptSummary.  # noqa: E501

        This score is derived from the number of pairs of atoms in the PDB_model_num that are unusually close to each other. It is calculated by the MolProbity pdbx_vrpt_software and expressed as the number or such clashes per thousand atoms. For structures determined by NMR the clashscore value here will only consider label_atom_id pairs in the well-defined (core) residues from ensemble analysis.  # noqa: E501

        :return: The clashscore of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._clashscore

    @clashscore.setter
    def clashscore(self, clashscore):
        """Sets the clashscore of this PdbxVrptSummary.

        This score is derived from the number of pairs of atoms in the PDB_model_num that are unusually close to each other. It is calculated by the MolProbity pdbx_vrpt_software and expressed as the number or such clashes per thousand atoms. For structures determined by NMR the clashscore value here will only consider label_atom_id pairs in the well-defined (core) residues from ensemble analysis.  # noqa: E501

        :param clashscore: The clashscore of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._clashscore = clashscore

    @property
    def clashscore_full_length(self):
        """Gets the clashscore_full_length of this PdbxVrptSummary.  # noqa: E501

        Only given for structures determined by NMR. The MolProbity pdbx_vrpt_clashes score for all label_atom_id pairs.  # noqa: E501

        :return: The clashscore_full_length of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._clashscore_full_length

    @clashscore_full_length.setter
    def clashscore_full_length(self, clashscore_full_length):
        """Sets the clashscore_full_length of this PdbxVrptSummary.

        Only given for structures determined by NMR. The MolProbity pdbx_vrpt_clashes score for all label_atom_id pairs.  # noqa: E501

        :param clashscore_full_length: The clashscore_full_length of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._clashscore_full_length = clashscore_full_length

    @property
    def contour_level_primary_map(self):
        """Gets the contour_level_primary_map of this PdbxVrptSummary.  # noqa: E501

        The recommended contour level for the primary map of this deposition.  # noqa: E501

        :return: The contour_level_primary_map of this PdbxVrptSummary.  # noqa: E501
        :rtype: str
        """
        return self._contour_level_primary_map

    @contour_level_primary_map.setter
    def contour_level_primary_map(self, contour_level_primary_map):
        """Sets the contour_level_primary_map of this PdbxVrptSummary.

        The recommended contour level for the primary map of this deposition.  # noqa: E501

        :param contour_level_primary_map: The contour_level_primary_map of this PdbxVrptSummary.  # noqa: E501
        :type: str
        """

        self._contour_level_primary_map = contour_level_primary_map

    @property
    def coordinates_input_filename(self):
        """Gets the coordinates_input_filename of this PdbxVrptSummary.  # noqa: E501

        The filename for the input mmCIF coordinate file given to the validation pipeline. Not reported for runs at the annotation or release stage.  # noqa: E501

        :return: The coordinates_input_filename of this PdbxVrptSummary.  # noqa: E501
        :rtype: str
        """
        return self._coordinates_input_filename

    @coordinates_input_filename.setter
    def coordinates_input_filename(self, coordinates_input_filename):
        """Sets the coordinates_input_filename of this PdbxVrptSummary.

        The filename for the input mmCIF coordinate file given to the validation pipeline. Not reported for runs at the annotation or release stage.  # noqa: E501

        :param coordinates_input_filename: The coordinates_input_filename of this PdbxVrptSummary.  # noqa: E501
        :type: str
        """

        self._coordinates_input_filename = coordinates_input_filename

    @property
    def cyrange_error(self):
        """Gets the cyrange_error of this PdbxVrptSummary.  # noqa: E501

        Diagnostic message from the wrapper of Cyrange software which identifies the well-defined cores (domains) of NMR protein structures.  # noqa: E501

        :return: The cyrange_error of this PdbxVrptSummary.  # noqa: E501
        :rtype: str
        """
        return self._cyrange_error

    @cyrange_error.setter
    def cyrange_error(self, cyrange_error):
        """Sets the cyrange_error of this PdbxVrptSummary.

        Diagnostic message from the wrapper of Cyrange software which identifies the well-defined cores (domains) of NMR protein structures.  # noqa: E501

        :param cyrange_error: The cyrange_error of this PdbxVrptSummary.  # noqa: E501
        :type: str
        """

        self._cyrange_error = cyrange_error

    @property
    def cyrange_number_of_domains(self):
        """Gets the cyrange_number_of_domains of this PdbxVrptSummary.  # noqa: E501

        Total number of well-defined cores (domains) identified by Cyrange  # noqa: E501

        :return: The cyrange_number_of_domains of this PdbxVrptSummary.  # noqa: E501
        :rtype: int
        """
        return self._cyrange_number_of_domains

    @cyrange_number_of_domains.setter
    def cyrange_number_of_domains(self, cyrange_number_of_domains):
        """Sets the cyrange_number_of_domains of this PdbxVrptSummary.

        Total number of well-defined cores (domains) identified by Cyrange  # noqa: E501

        :param cyrange_number_of_domains: The cyrange_number_of_domains of this PdbxVrptSummary.  # noqa: E501
        :type: int
        """

        self._cyrange_number_of_domains = cyrange_number_of_domains

    @property
    def cyrange_version(self):
        """Gets the cyrange_version of this PdbxVrptSummary.  # noqa: E501

        Reference for the Cyrange software.  # noqa: E501

        :return: The cyrange_version of this PdbxVrptSummary.  # noqa: E501
        :rtype: str
        """
        return self._cyrange_version

    @cyrange_version.setter
    def cyrange_version(self, cyrange_version):
        """Sets the cyrange_version of this PdbxVrptSummary.

        Reference for the Cyrange software.  # noqa: E501

        :param cyrange_version: The cyrange_version of this PdbxVrptSummary.  # noqa: E501
        :type: str
        """

        self._cyrange_version = cyrange_version

    @property
    def data_anisotropy(self):
        """Gets the data_anisotropy of this PdbxVrptSummary.  # noqa: E501

        The ratio (Bmax &#8209; Bmin) / Bmean where Bmax, Bmin and Bmean are computed from the B-values associated with the principal axes of the anisotropic thermal ellipsoid. This ratio is usually less than 0.5; for only 1% of PDB entries it is more than 1.0 (Read et al., 2011). Example:            X-ray entry specific, obtained from the Xtriage program.  # noqa: E501

        :return: The data_anisotropy of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._data_anisotropy

    @data_anisotropy.setter
    def data_anisotropy(self, data_anisotropy):
        """Sets the data_anisotropy of this PdbxVrptSummary.

        The ratio (Bmax &#8209; Bmin) / Bmean where Bmax, Bmin and Bmean are computed from the B-values associated with the principal axes of the anisotropic thermal ellipsoid. This ratio is usually less than 0.5; for only 1% of PDB entries it is more than 1.0 (Read et al., 2011). Example:            X-ray entry specific, obtained from the Xtriage program.  # noqa: E501

        :param data_anisotropy: The data_anisotropy of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._data_anisotropy = data_anisotropy

    @property
    def data_completeness(self):
        """Gets the data_completeness of this PdbxVrptSummary.  # noqa: E501

        A percentage, Normally percent proportion of the total number. Between 0% and 100%.  # noqa: E501

        :return: The data_completeness of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._data_completeness

    @data_completeness.setter
    def data_completeness(self, data_completeness):
        """Sets the data_completeness of this PdbxVrptSummary.

        A percentage, Normally percent proportion of the total number. Between 0% and 100%.  # noqa: E501

        :param data_completeness: The data_completeness of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._data_completeness = data_completeness

    @property
    def emdb_id(self):
        """Gets the emdb_id of this PdbxVrptSummary.  # noqa: E501

        An identifier for the map For released or annotated structures this will be the EMDB ID EMD-\\d{4-5} eg \"EMD-1001\", \"EMD-12325\"  # noqa: E501

        :return: The emdb_id of this PdbxVrptSummary.  # noqa: E501
        :rtype: str
        """
        return self._emdb_id

    @emdb_id.setter
    def emdb_id(self, emdb_id):
        """Sets the emdb_id of this PdbxVrptSummary.

        An identifier for the map For released or annotated structures this will be the EMDB ID EMD-\\d{4-5} eg \"EMD-1001\", \"EMD-12325\"  # noqa: E501

        :param emdb_id: The emdb_id of this PdbxVrptSummary.  # noqa: E501
        :type: str
        """

        self._emdb_id = emdb_id

    @property
    def high_resol_relative_percentile_dcc_rfree(self):
        """Gets the high_resol_relative_percentile_dcc_rfree of this PdbxVrptSummary.  # noqa: E501

        The resolution bin limit in Angstroms for PDB depositions used in the comparison when calculating the attribute \"relative-percentile-DCC_Rfree\". Note that the \"high_resol_relative_percentile_DCC_Rfree\" value is numerically smaller than the corresponding low-* value. Example:            X-ray entry specific, produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :return: The high_resol_relative_percentile_dcc_rfree of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._high_resol_relative_percentile_dcc_rfree

    @high_resol_relative_percentile_dcc_rfree.setter
    def high_resol_relative_percentile_dcc_rfree(self, high_resol_relative_percentile_dcc_rfree):
        """Sets the high_resol_relative_percentile_dcc_rfree of this PdbxVrptSummary.

        The resolution bin limit in Angstroms for PDB depositions used in the comparison when calculating the attribute \"relative-percentile-DCC_Rfree\". Note that the \"high_resol_relative_percentile_DCC_Rfree\" value is numerically smaller than the corresponding low-* value. Example:            X-ray entry specific, produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :param high_resol_relative_percentile_dcc_rfree: The high_resol_relative_percentile_dcc_rfree of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._high_resol_relative_percentile_dcc_rfree = high_resol_relative_percentile_dcc_rfree

    @property
    def high_resol_relative_percentile_rna_suiteness(self):
        """Gets the high_resol_relative_percentile_rna_suiteness of this PdbxVrptSummary.  # noqa: E501

        The resolution bin limit in Angstroms for PDB depositions used in the comparison when calculating the attribute \"relative-percentile-RNAsuiteness\". Note that the \"high_resol_relative_percentile_RNA_suiteness\" value is numerically smaller than the corresponding low value. Example:            Specific to entries that contain RNA polymers (and have a RNA_suiteness attribute), and have been determined by X-ray crystallography. Produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :return: The high_resol_relative_percentile_rna_suiteness of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._high_resol_relative_percentile_rna_suiteness

    @high_resol_relative_percentile_rna_suiteness.setter
    def high_resol_relative_percentile_rna_suiteness(self, high_resol_relative_percentile_rna_suiteness):
        """Sets the high_resol_relative_percentile_rna_suiteness of this PdbxVrptSummary.

        The resolution bin limit in Angstroms for PDB depositions used in the comparison when calculating the attribute \"relative-percentile-RNAsuiteness\". Note that the \"high_resol_relative_percentile_RNA_suiteness\" value is numerically smaller than the corresponding low value. Example:            Specific to entries that contain RNA polymers (and have a RNA_suiteness attribute), and have been determined by X-ray crystallography. Produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :param high_resol_relative_percentile_rna_suiteness: The high_resol_relative_percentile_rna_suiteness of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._high_resol_relative_percentile_rna_suiteness = high_resol_relative_percentile_rna_suiteness

    @property
    def high_resol_relative_percentile_clashscore(self):
        """Gets the high_resol_relative_percentile_clashscore of this PdbxVrptSummary.  # noqa: E501

        The resolution bin limit in Angstroms for PDB depositions used in the comparison when calculating the attribute \"relative-percentile-clashscore\". Note that the \"high_resol_relative_percentile_clashscore\" value is numerically smaller than the corresponding low value. Example:            Specific to that have a clashscore attribute and have been determined by X-ray crystallography. Produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :return: The high_resol_relative_percentile_clashscore of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._high_resol_relative_percentile_clashscore

    @high_resol_relative_percentile_clashscore.setter
    def high_resol_relative_percentile_clashscore(self, high_resol_relative_percentile_clashscore):
        """Sets the high_resol_relative_percentile_clashscore of this PdbxVrptSummary.

        The resolution bin limit in Angstroms for PDB depositions used in the comparison when calculating the attribute \"relative-percentile-clashscore\". Note that the \"high_resol_relative_percentile_clashscore\" value is numerically smaller than the corresponding low value. Example:            Specific to that have a clashscore attribute and have been determined by X-ray crystallography. Produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :param high_resol_relative_percentile_clashscore: The high_resol_relative_percentile_clashscore of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._high_resol_relative_percentile_clashscore = high_resol_relative_percentile_clashscore

    @property
    def high_resol_relative_percentile_percent_rsrz_outliers(self):
        """Gets the high_resol_relative_percentile_percent_rsrz_outliers of this PdbxVrptSummary.  # noqa: E501

        The resolution bin limit in Angstroms for PDB depositions used in the comparison when calculating the attribute \"relative-percentile-percent-RSRZ-outliers\". Note that the \"high_resol_relative_percentile_percent_RSRZ_outliers\" value is numerically smaller than the corresponding low-* value. Example:            X-ray entry specific, produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :return: The high_resol_relative_percentile_percent_rsrz_outliers of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._high_resol_relative_percentile_percent_rsrz_outliers

    @high_resol_relative_percentile_percent_rsrz_outliers.setter
    def high_resol_relative_percentile_percent_rsrz_outliers(self, high_resol_relative_percentile_percent_rsrz_outliers):
        """Sets the high_resol_relative_percentile_percent_rsrz_outliers of this PdbxVrptSummary.

        The resolution bin limit in Angstroms for PDB depositions used in the comparison when calculating the attribute \"relative-percentile-percent-RSRZ-outliers\". Note that the \"high_resol_relative_percentile_percent_RSRZ_outliers\" value is numerically smaller than the corresponding low-* value. Example:            X-ray entry specific, produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :param high_resol_relative_percentile_percent_rsrz_outliers: The high_resol_relative_percentile_percent_rsrz_outliers of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._high_resol_relative_percentile_percent_rsrz_outliers = high_resol_relative_percentile_percent_rsrz_outliers

    @property
    def high_resol_relative_percentile_percent_ramachandran_outliers(self):
        """Gets the high_resol_relative_percentile_percent_ramachandran_outliers of this PdbxVrptSummary.  # noqa: E501

        The resolution bin limit in Angstroms for PDB depositions used in the comparison when calculating the attribute \"relative-percentile-percent-rama-outliers\". Note that the \"high_resol_relative_percentile_percent_ramachandran_outliers\" value is numerically smaller than the corresponding low value. Example:            Specific to structures that have a percent_ramachandran_outliers attribute and have been determined by X-ray crystallography. Produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :return: The high_resol_relative_percentile_percent_ramachandran_outliers of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._high_resol_relative_percentile_percent_ramachandran_outliers

    @high_resol_relative_percentile_percent_ramachandran_outliers.setter
    def high_resol_relative_percentile_percent_ramachandran_outliers(self, high_resol_relative_percentile_percent_ramachandran_outliers):
        """Sets the high_resol_relative_percentile_percent_ramachandran_outliers of this PdbxVrptSummary.

        The resolution bin limit in Angstroms for PDB depositions used in the comparison when calculating the attribute \"relative-percentile-percent-rama-outliers\". Note that the \"high_resol_relative_percentile_percent_ramachandran_outliers\" value is numerically smaller than the corresponding low value. Example:            Specific to structures that have a percent_ramachandran_outliers attribute and have been determined by X-ray crystallography. Produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :param high_resol_relative_percentile_percent_ramachandran_outliers: The high_resol_relative_percentile_percent_ramachandran_outliers of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._high_resol_relative_percentile_percent_ramachandran_outliers = high_resol_relative_percentile_percent_ramachandran_outliers

    @property
    def high_resol_relative_percentile_percent_rotamer_outliers(self):
        """Gets the high_resol_relative_percentile_percent_rotamer_outliers of this PdbxVrptSummary.  # noqa: E501

        The resolution bin limit in Angstroms for PDB depositions used in the comparison when calculating the attribute \"relative-percentile-percent-rota-outliers\". Note that the \"high_resol_relative_percentile_percent_rotamer_outliers\" value is numerically smaller than the corresponding low value. Example:            Specific to that have a percent_rotamer_outliers attribute and have been determined by X-ray crystallography. Produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :return: The high_resol_relative_percentile_percent_rotamer_outliers of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._high_resol_relative_percentile_percent_rotamer_outliers

    @high_resol_relative_percentile_percent_rotamer_outliers.setter
    def high_resol_relative_percentile_percent_rotamer_outliers(self, high_resol_relative_percentile_percent_rotamer_outliers):
        """Sets the high_resol_relative_percentile_percent_rotamer_outliers of this PdbxVrptSummary.

        The resolution bin limit in Angstroms for PDB depositions used in the comparison when calculating the attribute \"relative-percentile-percent-rota-outliers\". Note that the \"high_resol_relative_percentile_percent_rotamer_outliers\" value is numerically smaller than the corresponding low value. Example:            Specific to that have a percent_rotamer_outliers attribute and have been determined by X-ray crystallography. Produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :param high_resol_relative_percentile_percent_rotamer_outliers: The high_resol_relative_percentile_percent_rotamer_outliers of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._high_resol_relative_percentile_percent_rotamer_outliers = high_resol_relative_percentile_percent_rotamer_outliers

    @property
    def ligands_for_buster_report(self):
        """Gets the ligands_for_buster_report of this PdbxVrptSummary.  # noqa: E501

        The string \"yes\".  # noqa: E501

        :return: The ligands_for_buster_report of this PdbxVrptSummary.  # noqa: E501
        :rtype: str
        """
        return self._ligands_for_buster_report

    @ligands_for_buster_report.setter
    def ligands_for_buster_report(self, ligands_for_buster_report):
        """Sets the ligands_for_buster_report of this PdbxVrptSummary.

        The string \"yes\".  # noqa: E501

        :param ligands_for_buster_report: The ligands_for_buster_report of this PdbxVrptSummary.  # noqa: E501
        :type: str
        """
        allowed_values = ["yes"]  # noqa: E501
        if ligands_for_buster_report not in allowed_values:
            raise ValueError(
                "Invalid value for `ligands_for_buster_report` ({0}), must be one of {1}"  # noqa: E501
                .format(ligands_for_buster_report, allowed_values)
            )

        self._ligands_for_buster_report = ligands_for_buster_report

    @property
    def low_resol_relative_percentile_dcc_rfree(self):
        """Gets the low_resol_relative_percentile_dcc_rfree of this PdbxVrptSummary.  # noqa: E501

        The resolution bin limit in Angstroms for PDB depositions used in the comparison when calculating the attribute \"relative-percentile-DCC_Rfree\". Note that the \"low_resol_relative_percentile_DCC_Rfree\" value is numerically greater than the corresponding high value. Example:            X-ray entry specific, produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :return: The low_resol_relative_percentile_dcc_rfree of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._low_resol_relative_percentile_dcc_rfree

    @low_resol_relative_percentile_dcc_rfree.setter
    def low_resol_relative_percentile_dcc_rfree(self, low_resol_relative_percentile_dcc_rfree):
        """Sets the low_resol_relative_percentile_dcc_rfree of this PdbxVrptSummary.

        The resolution bin limit in Angstroms for PDB depositions used in the comparison when calculating the attribute \"relative-percentile-DCC_Rfree\". Note that the \"low_resol_relative_percentile_DCC_Rfree\" value is numerically greater than the corresponding high value. Example:            X-ray entry specific, produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :param low_resol_relative_percentile_dcc_rfree: The low_resol_relative_percentile_dcc_rfree of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._low_resol_relative_percentile_dcc_rfree = low_resol_relative_percentile_dcc_rfree

    @property
    def low_resol_relative_percentile_rna_suiteness(self):
        """Gets the low_resol_relative_percentile_rna_suiteness of this PdbxVrptSummary.  # noqa: E501

        The resolution bin limit in Angstroms for PDB depositions used in the comparison when calculating the attribute \"relative-percentile-RNAsuiteness\". Note that the \"low_resol_relative_percentile_RNA_suiteness\" value is numerically greater than the corresponding high value. Example:            Specific to entries that contain RNA polymers (and have a RNA_suiteness attribute), and have been determined by X-ray crystallography. Produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :return: The low_resol_relative_percentile_rna_suiteness of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._low_resol_relative_percentile_rna_suiteness

    @low_resol_relative_percentile_rna_suiteness.setter
    def low_resol_relative_percentile_rna_suiteness(self, low_resol_relative_percentile_rna_suiteness):
        """Sets the low_resol_relative_percentile_rna_suiteness of this PdbxVrptSummary.

        The resolution bin limit in Angstroms for PDB depositions used in the comparison when calculating the attribute \"relative-percentile-RNAsuiteness\". Note that the \"low_resol_relative_percentile_RNA_suiteness\" value is numerically greater than the corresponding high value. Example:            Specific to entries that contain RNA polymers (and have a RNA_suiteness attribute), and have been determined by X-ray crystallography. Produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :param low_resol_relative_percentile_rna_suiteness: The low_resol_relative_percentile_rna_suiteness of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._low_resol_relative_percentile_rna_suiteness = low_resol_relative_percentile_rna_suiteness

    @property
    def low_resol_relative_percentile_clashscore(self):
        """Gets the low_resol_relative_percentile_clashscore of this PdbxVrptSummary.  # noqa: E501

        The resolution bin limit in Angstroms for PDB depositions used in the comparison when calculating the attribute \"relative-percentile-clashscore\". Note that the \"low_resol_relative_percentile_clashscore\" value is numerically greater than the corresponding high value. Example:            Specific to that have a clashscore attribute and have been determined by X-ray crystallography. Produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :return: The low_resol_relative_percentile_clashscore of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._low_resol_relative_percentile_clashscore

    @low_resol_relative_percentile_clashscore.setter
    def low_resol_relative_percentile_clashscore(self, low_resol_relative_percentile_clashscore):
        """Sets the low_resol_relative_percentile_clashscore of this PdbxVrptSummary.

        The resolution bin limit in Angstroms for PDB depositions used in the comparison when calculating the attribute \"relative-percentile-clashscore\". Note that the \"low_resol_relative_percentile_clashscore\" value is numerically greater than the corresponding high value. Example:            Specific to that have a clashscore attribute and have been determined by X-ray crystallography. Produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :param low_resol_relative_percentile_clashscore: The low_resol_relative_percentile_clashscore of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._low_resol_relative_percentile_clashscore = low_resol_relative_percentile_clashscore

    @property
    def low_resol_relative_percentile_percent_rsrz_outliers(self):
        """Gets the low_resol_relative_percentile_percent_rsrz_outliers of this PdbxVrptSummary.  # noqa: E501

        The resolution bin limit in Angstroms for PDB depositions used in the comparison when calculating the attribute \"relative-percentile-percent-RSRZ-outliers\". Note that the \"low_resol_relative_percentile_percent_RSRZ_outliers\" value is numerically greater than the corresponding high value. Example:            X-ray entry specific, produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :return: The low_resol_relative_percentile_percent_rsrz_outliers of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._low_resol_relative_percentile_percent_rsrz_outliers

    @low_resol_relative_percentile_percent_rsrz_outliers.setter
    def low_resol_relative_percentile_percent_rsrz_outliers(self, low_resol_relative_percentile_percent_rsrz_outliers):
        """Sets the low_resol_relative_percentile_percent_rsrz_outliers of this PdbxVrptSummary.

        The resolution bin limit in Angstroms for PDB depositions used in the comparison when calculating the attribute \"relative-percentile-percent-RSRZ-outliers\". Note that the \"low_resol_relative_percentile_percent_RSRZ_outliers\" value is numerically greater than the corresponding high value. Example:            X-ray entry specific, produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :param low_resol_relative_percentile_percent_rsrz_outliers: The low_resol_relative_percentile_percent_rsrz_outliers of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._low_resol_relative_percentile_percent_rsrz_outliers = low_resol_relative_percentile_percent_rsrz_outliers

    @property
    def low_resol_relative_percentile_percent_ramachandran_outliers(self):
        """Gets the low_resol_relative_percentile_percent_ramachandran_outliers of this PdbxVrptSummary.  # noqa: E501

        The resolution bin limit in Angstroms for PDB depositions used in the comparison when calculating the attribute \"relative-percentile-percent-rama-outliers\". Note that the \"low_resol_relative_percentile_percent_ramachandran_outliers\" value is numerically greater than the corresponding high value. Example:            Specific to that have a percent_ramachandran_outliers attribute and have been determined by X-ray crystallography. Produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :return: The low_resol_relative_percentile_percent_ramachandran_outliers of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._low_resol_relative_percentile_percent_ramachandran_outliers

    @low_resol_relative_percentile_percent_ramachandran_outliers.setter
    def low_resol_relative_percentile_percent_ramachandran_outliers(self, low_resol_relative_percentile_percent_ramachandran_outliers):
        """Sets the low_resol_relative_percentile_percent_ramachandran_outliers of this PdbxVrptSummary.

        The resolution bin limit in Angstroms for PDB depositions used in the comparison when calculating the attribute \"relative-percentile-percent-rama-outliers\". Note that the \"low_resol_relative_percentile_percent_ramachandran_outliers\" value is numerically greater than the corresponding high value. Example:            Specific to that have a percent_ramachandran_outliers attribute and have been determined by X-ray crystallography. Produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :param low_resol_relative_percentile_percent_ramachandran_outliers: The low_resol_relative_percentile_percent_ramachandran_outliers of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._low_resol_relative_percentile_percent_ramachandran_outliers = low_resol_relative_percentile_percent_ramachandran_outliers

    @property
    def low_resol_relative_percentile_percent_rotamer_outliers(self):
        """Gets the low_resol_relative_percentile_percent_rotamer_outliers of this PdbxVrptSummary.  # noqa: E501

        The resolution bin limit in Angstroms for PDB depositions used in the comparison when calculating the attribute \"relative-percentile-percent-rota-outliers\". Note that the \"low_resol_relative_percentile_percent_rotamer_outliers\" value is numerically greater than the corresponding high value. Example:            Specific to that have a percent_rotamer_outliers attribute and have been determined by X-ray crystallography. Produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :return: The low_resol_relative_percentile_percent_rotamer_outliers of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._low_resol_relative_percentile_percent_rotamer_outliers

    @low_resol_relative_percentile_percent_rotamer_outliers.setter
    def low_resol_relative_percentile_percent_rotamer_outliers(self, low_resol_relative_percentile_percent_rotamer_outliers):
        """Sets the low_resol_relative_percentile_percent_rotamer_outliers of this PdbxVrptSummary.

        The resolution bin limit in Angstroms for PDB depositions used in the comparison when calculating the attribute \"relative-percentile-percent-rota-outliers\". Note that the \"low_resol_relative_percentile_percent_rotamer_outliers\" value is numerically greater than the corresponding high value. Example:            Specific to that have a percent_rotamer_outliers attribute and have been determined by X-ray crystallography. Produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :param low_resol_relative_percentile_percent_rotamer_outliers: The low_resol_relative_percentile_percent_rotamer_outliers of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._low_resol_relative_percentile_percent_rotamer_outliers = low_resol_relative_percentile_percent_rotamer_outliers

    @property
    def medoid_model(self):
        """Gets the medoid_model of this PdbxVrptSummary.  # noqa: E501

        For each Cyrange well-defined core (\"cyrange_domain\") the id of the PDB_model_num which is most similar to other models as measured by pairwise RMSDs over the domain. For the whole entry (\"Entry\"), the medoid PDB_model_num of the largest core is taken as an overall representative of the structure.  # noqa: E501

        :return: The medoid_model of this PdbxVrptSummary.  # noqa: E501
        :rtype: int
        """
        return self._medoid_model

    @medoid_model.setter
    def medoid_model(self, medoid_model):
        """Sets the medoid_model of this PdbxVrptSummary.

        For each Cyrange well-defined core (\"cyrange_domain\") the id of the PDB_model_num which is most similar to other models as measured by pairwise RMSDs over the domain. For the whole entry (\"Entry\"), the medoid PDB_model_num of the largest core is taken as an overall representative of the structure.  # noqa: E501

        :param medoid_model: The medoid_model of this PdbxVrptSummary.  # noqa: E501
        :type: int
        """

        self._medoid_model = medoid_model

    @property
    def nmr_models_consistency_flag(self):
        """Gets the nmr_models_consistency_flag of this PdbxVrptSummary.  # noqa: E501

        A flag indicating if all models in the NMR ensemble contain the exact same atoms (\"True\") or if the models differ in this respect (\"False\").  # noqa: E501

        :return: The nmr_models_consistency_flag of this PdbxVrptSummary.  # noqa: E501
        :rtype: str
        """
        return self._nmr_models_consistency_flag

    @nmr_models_consistency_flag.setter
    def nmr_models_consistency_flag(self, nmr_models_consistency_flag):
        """Sets the nmr_models_consistency_flag of this PdbxVrptSummary.

        A flag indicating if all models in the NMR ensemble contain the exact same atoms (\"True\") or if the models differ in this respect (\"False\").  # noqa: E501

        :param nmr_models_consistency_flag: The nmr_models_consistency_flag of this PdbxVrptSummary.  # noqa: E501
        :type: str
        """

        self._nmr_models_consistency_flag = nmr_models_consistency_flag

    @property
    def nmrclust_error(self):
        """Gets the nmrclust_error of this PdbxVrptSummary.  # noqa: E501

        Diagnostic message from the wrapper of NMRClust software which clusters NMR models.  # noqa: E501

        :return: The nmrclust_error of this PdbxVrptSummary.  # noqa: E501
        :rtype: str
        """
        return self._nmrclust_error

    @nmrclust_error.setter
    def nmrclust_error(self, nmrclust_error):
        """Sets the nmrclust_error of this PdbxVrptSummary.

        Diagnostic message from the wrapper of NMRClust software which clusters NMR models.  # noqa: E501

        :param nmrclust_error: The nmrclust_error of this PdbxVrptSummary.  # noqa: E501
        :type: str
        """

        self._nmrclust_error = nmrclust_error

    @property
    def nmrclust_number_of_clusters(self):
        """Gets the nmrclust_number_of_clusters of this PdbxVrptSummary.  # noqa: E501

        Total number of clusters in the NMR ensemble identified by NMRClust.  # noqa: E501

        :return: The nmrclust_number_of_clusters of this PdbxVrptSummary.  # noqa: E501
        :rtype: int
        """
        return self._nmrclust_number_of_clusters

    @nmrclust_number_of_clusters.setter
    def nmrclust_number_of_clusters(self, nmrclust_number_of_clusters):
        """Sets the nmrclust_number_of_clusters of this PdbxVrptSummary.

        Total number of clusters in the NMR ensemble identified by NMRClust.  # noqa: E501

        :param nmrclust_number_of_clusters: The nmrclust_number_of_clusters of this PdbxVrptSummary.  # noqa: E501
        :type: int
        """

        self._nmrclust_number_of_clusters = nmrclust_number_of_clusters

    @property
    def nmrclust_number_of_models(self):
        """Gets the nmrclust_number_of_models of this PdbxVrptSummary.  # noqa: E501

        Number of models analysed by NMRClust - should in almost all cases be the same as the number of models in the NMR ensemble.  # noqa: E501

        :return: The nmrclust_number_of_models of this PdbxVrptSummary.  # noqa: E501
        :rtype: int
        """
        return self._nmrclust_number_of_models

    @nmrclust_number_of_models.setter
    def nmrclust_number_of_models(self, nmrclust_number_of_models):
        """Sets the nmrclust_number_of_models of this PdbxVrptSummary.

        Number of models analysed by NMRClust - should in almost all cases be the same as the number of models in the NMR ensemble.  # noqa: E501

        :param nmrclust_number_of_models: The nmrclust_number_of_models of this PdbxVrptSummary.  # noqa: E501
        :type: int
        """

        self._nmrclust_number_of_models = nmrclust_number_of_models

    @property
    def nmrclust_number_of_outliers(self):
        """Gets the nmrclust_number_of_outliers of this PdbxVrptSummary.  # noqa: E501

        Number of models that do not belong to any cluster as deemed by NMRClust.  # noqa: E501

        :return: The nmrclust_number_of_outliers of this PdbxVrptSummary.  # noqa: E501
        :rtype: int
        """
        return self._nmrclust_number_of_outliers

    @nmrclust_number_of_outliers.setter
    def nmrclust_number_of_outliers(self, nmrclust_number_of_outliers):
        """Sets the nmrclust_number_of_outliers of this PdbxVrptSummary.

        Number of models that do not belong to any cluster as deemed by NMRClust.  # noqa: E501

        :param nmrclust_number_of_outliers: The nmrclust_number_of_outliers of this PdbxVrptSummary.  # noqa: E501
        :type: int
        """

        self._nmrclust_number_of_outliers = nmrclust_number_of_outliers

    @property
    def nmrclust_representative_model(self):
        """Gets the nmrclust_representative_model of this PdbxVrptSummary.  # noqa: E501

        Overall representative PDB_model_num of the NMR ensemble as identified by NMRClust.  # noqa: E501

        :return: The nmrclust_representative_model of this PdbxVrptSummary.  # noqa: E501
        :rtype: int
        """
        return self._nmrclust_representative_model

    @nmrclust_representative_model.setter
    def nmrclust_representative_model(self, nmrclust_representative_model):
        """Sets the nmrclust_representative_model of this PdbxVrptSummary.

        Overall representative PDB_model_num of the NMR ensemble as identified by NMRClust.  # noqa: E501

        :param nmrclust_representative_model: The nmrclust_representative_model of this PdbxVrptSummary.  # noqa: E501
        :type: int
        """

        self._nmrclust_representative_model = nmrclust_representative_model

    @property
    def nmrclust_version(self):
        """Gets the nmrclust_version of this PdbxVrptSummary.  # noqa: E501

        Reference for the NMRClust software.  # noqa: E501

        :return: The nmrclust_version of this PdbxVrptSummary.  # noqa: E501
        :rtype: str
        """
        return self._nmrclust_version

    @nmrclust_version.setter
    def nmrclust_version(self, nmrclust_version):
        """Sets the nmrclust_version of this PdbxVrptSummary.

        Reference for the NMRClust software.  # noqa: E501

        :param nmrclust_version: The nmrclust_version of this PdbxVrptSummary.  # noqa: E501
        :type: str
        """

        self._nmrclust_version = nmrclust_version

    @property
    def no_ligands_for_buster_report(self):
        """Gets the no_ligands_for_buster_report of this PdbxVrptSummary.  # noqa: E501

        The string \"yes\".  # noqa: E501

        :return: The no_ligands_for_buster_report of this PdbxVrptSummary.  # noqa: E501
        :rtype: str
        """
        return self._no_ligands_for_buster_report

    @no_ligands_for_buster_report.setter
    def no_ligands_for_buster_report(self, no_ligands_for_buster_report):
        """Sets the no_ligands_for_buster_report of this PdbxVrptSummary.

        The string \"yes\".  # noqa: E501

        :param no_ligands_for_buster_report: The no_ligands_for_buster_report of this PdbxVrptSummary.  # noqa: E501
        :type: str
        """
        allowed_values = ["yes"]  # noqa: E501
        if no_ligands_for_buster_report not in allowed_values:
            raise ValueError(
                "Invalid value for `no_ligands_for_buster_report` ({0}), must be one of {1}"  # noqa: E501
                .format(no_ligands_for_buster_report, allowed_values)
            )

        self._no_ligands_for_buster_report = no_ligands_for_buster_report

    @property
    def no_ligands_for_mogul(self):
        """Gets the no_ligands_for_mogul of this PdbxVrptSummary.  # noqa: E501

        The string \"yes\".  # noqa: E501

        :return: The no_ligands_for_mogul of this PdbxVrptSummary.  # noqa: E501
        :rtype: str
        """
        return self._no_ligands_for_mogul

    @no_ligands_for_mogul.setter
    def no_ligands_for_mogul(self, no_ligands_for_mogul):
        """Sets the no_ligands_for_mogul of this PdbxVrptSummary.

        The string \"yes\".  # noqa: E501

        :param no_ligands_for_mogul: The no_ligands_for_mogul of this PdbxVrptSummary.  # noqa: E501
        :type: str
        """
        allowed_values = ["yes"]  # noqa: E501
        if no_ligands_for_mogul not in allowed_values:
            raise ValueError(
                "Invalid value for `no_ligands_for_mogul` ({0}), must be one of {1}"  # noqa: E501
                .format(no_ligands_for_mogul, allowed_values)
            )

        self._no_ligands_for_mogul = no_ligands_for_mogul

    @property
    def no_percentile_property(self):
        """Gets the no_percentile_property of this PdbxVrptSummary.  # noqa: E501

        Will be set to \"true\" if no property was found to do percentile analysis on. Please note that currently due to a bug that this attribute is \"true\" erronously for NMR structures.  # noqa: E501

        :return: The no_percentile_property of this PdbxVrptSummary.  # noqa: E501
        :rtype: str
        """
        return self._no_percentile_property

    @no_percentile_property.setter
    def no_percentile_property(self, no_percentile_property):
        """Sets the no_percentile_property of this PdbxVrptSummary.

        Will be set to \"true\" if no property was found to do percentile analysis on. Please note that currently due to a bug that this attribute is \"true\" erronously for NMR structures.  # noqa: E501

        :param no_percentile_property: The no_percentile_property of this PdbxVrptSummary.  # noqa: E501
        :type: str
        """

        self._no_percentile_property = no_percentile_property

    @property
    def num_h_reduce(self):
        """Gets the num_h_reduce of this PdbxVrptSummary.  # noqa: E501

        This is the number of hydrogen atoms added and optimized by the MolProbity reduce pdbx_vrpt_software as part of the all-atom clashscore.  # noqa: E501

        :return: The num_h_reduce of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._num_h_reduce

    @num_h_reduce.setter
    def num_h_reduce(self, num_h_reduce):
        """Sets the num_h_reduce of this PdbxVrptSummary.

        This is the number of hydrogen atoms added and optimized by the MolProbity reduce pdbx_vrpt_software as part of the all-atom clashscore.  # noqa: E501

        :param num_h_reduce: The num_h_reduce of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._num_h_reduce = num_h_reduce

    @property
    def num_pd_bids_absolute_percentile_dcc_rfree(self):
        """Gets the num_pd_bids_absolute_percentile_dcc_rfree of this PdbxVrptSummary.  # noqa: E501

        The number of PDB depositions used in the comparison when calculating the attribute \"absolute-percentile-DCC_Rfree\". Example:            X-ray entry specific, produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :return: The num_pd_bids_absolute_percentile_dcc_rfree of this PdbxVrptSummary.  # noqa: E501
        :rtype: int
        """
        return self._num_pd_bids_absolute_percentile_dcc_rfree

    @num_pd_bids_absolute_percentile_dcc_rfree.setter
    def num_pd_bids_absolute_percentile_dcc_rfree(self, num_pd_bids_absolute_percentile_dcc_rfree):
        """Sets the num_pd_bids_absolute_percentile_dcc_rfree of this PdbxVrptSummary.

        The number of PDB depositions used in the comparison when calculating the attribute \"absolute-percentile-DCC_Rfree\". Example:            X-ray entry specific, produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :param num_pd_bids_absolute_percentile_dcc_rfree: The num_pd_bids_absolute_percentile_dcc_rfree of this PdbxVrptSummary.  # noqa: E501
        :type: int
        """

        self._num_pd_bids_absolute_percentile_dcc_rfree = num_pd_bids_absolute_percentile_dcc_rfree

    @property
    def num_pd_bids_absolute_percentile_rna_suiteness(self):
        """Gets the num_pd_bids_absolute_percentile_rna_suiteness of this PdbxVrptSummary.  # noqa: E501

        The number of PDB depositions used in the comparison when calculating the attribute \"absolute-percentile-RNAsuiteness\". Example:            Specific to entries that contain RNA polymers (and have a RNA_suiteness attribute). Produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :return: The num_pd_bids_absolute_percentile_rna_suiteness of this PdbxVrptSummary.  # noqa: E501
        :rtype: int
        """
        return self._num_pd_bids_absolute_percentile_rna_suiteness

    @num_pd_bids_absolute_percentile_rna_suiteness.setter
    def num_pd_bids_absolute_percentile_rna_suiteness(self, num_pd_bids_absolute_percentile_rna_suiteness):
        """Sets the num_pd_bids_absolute_percentile_rna_suiteness of this PdbxVrptSummary.

        The number of PDB depositions used in the comparison when calculating the attribute \"absolute-percentile-RNAsuiteness\". Example:            Specific to entries that contain RNA polymers (and have a RNA_suiteness attribute). Produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :param num_pd_bids_absolute_percentile_rna_suiteness: The num_pd_bids_absolute_percentile_rna_suiteness of this PdbxVrptSummary.  # noqa: E501
        :type: int
        """

        self._num_pd_bids_absolute_percentile_rna_suiteness = num_pd_bids_absolute_percentile_rna_suiteness

    @property
    def num_pd_bids_absolute_percentile_clashscore(self):
        """Gets the num_pd_bids_absolute_percentile_clashscore of this PdbxVrptSummary.  # noqa: E501

        The number of PDB depositions used in the comparison when calculating the attribute \"absolute-percentile-clashscore\" Example:             Produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :return: The num_pd_bids_absolute_percentile_clashscore of this PdbxVrptSummary.  # noqa: E501
        :rtype: int
        """
        return self._num_pd_bids_absolute_percentile_clashscore

    @num_pd_bids_absolute_percentile_clashscore.setter
    def num_pd_bids_absolute_percentile_clashscore(self, num_pd_bids_absolute_percentile_clashscore):
        """Sets the num_pd_bids_absolute_percentile_clashscore of this PdbxVrptSummary.

        The number of PDB depositions used in the comparison when calculating the attribute \"absolute-percentile-clashscore\" Example:             Produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :param num_pd_bids_absolute_percentile_clashscore: The num_pd_bids_absolute_percentile_clashscore of this PdbxVrptSummary.  # noqa: E501
        :type: int
        """

        self._num_pd_bids_absolute_percentile_clashscore = num_pd_bids_absolute_percentile_clashscore

    @property
    def num_pd_bids_absolute_percentile_percent_rsrz_outliers(self):
        """Gets the num_pd_bids_absolute_percentile_percent_rsrz_outliers of this PdbxVrptSummary.  # noqa: E501

        The number of PDB depositions used in the comparison when calculating the attribute \"absolute-percentile-percent-RSRZ-outliers\". Example:            X-ray entry specific, produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :return: The num_pd_bids_absolute_percentile_percent_rsrz_outliers of this PdbxVrptSummary.  # noqa: E501
        :rtype: int
        """
        return self._num_pd_bids_absolute_percentile_percent_rsrz_outliers

    @num_pd_bids_absolute_percentile_percent_rsrz_outliers.setter
    def num_pd_bids_absolute_percentile_percent_rsrz_outliers(self, num_pd_bids_absolute_percentile_percent_rsrz_outliers):
        """Sets the num_pd_bids_absolute_percentile_percent_rsrz_outliers of this PdbxVrptSummary.

        The number of PDB depositions used in the comparison when calculating the attribute \"absolute-percentile-percent-RSRZ-outliers\". Example:            X-ray entry specific, produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :param num_pd_bids_absolute_percentile_percent_rsrz_outliers: The num_pd_bids_absolute_percentile_percent_rsrz_outliers of this PdbxVrptSummary.  # noqa: E501
        :type: int
        """

        self._num_pd_bids_absolute_percentile_percent_rsrz_outliers = num_pd_bids_absolute_percentile_percent_rsrz_outliers

    @property
    def num_pd_bids_absolute_percentile_percent_ramachandran_outliers(self):
        """Gets the num_pd_bids_absolute_percentile_percent_ramachandran_outliers of this PdbxVrptSummary.  # noqa: E501

        The number of PDB depositions used in the comparison when calculating the attribute \"absolute-percentile-percent-rama-outliers\" Example:            Produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :return: The num_pd_bids_absolute_percentile_percent_ramachandran_outliers of this PdbxVrptSummary.  # noqa: E501
        :rtype: int
        """
        return self._num_pd_bids_absolute_percentile_percent_ramachandran_outliers

    @num_pd_bids_absolute_percentile_percent_ramachandran_outliers.setter
    def num_pd_bids_absolute_percentile_percent_ramachandran_outliers(self, num_pd_bids_absolute_percentile_percent_ramachandran_outliers):
        """Sets the num_pd_bids_absolute_percentile_percent_ramachandran_outliers of this PdbxVrptSummary.

        The number of PDB depositions used in the comparison when calculating the attribute \"absolute-percentile-percent-rama-outliers\" Example:            Produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :param num_pd_bids_absolute_percentile_percent_ramachandran_outliers: The num_pd_bids_absolute_percentile_percent_ramachandran_outliers of this PdbxVrptSummary.  # noqa: E501
        :type: int
        """

        self._num_pd_bids_absolute_percentile_percent_ramachandran_outliers = num_pd_bids_absolute_percentile_percent_ramachandran_outliers

    @property
    def num_pd_bids_absolute_percentile_percent_rotamer_outliers(self):
        """Gets the num_pd_bids_absolute_percentile_percent_rotamer_outliers of this PdbxVrptSummary.  # noqa: E501

        The number of PDB depositions used in the comparison when calculating the attribute \"absolute-percentile-percent-rota-outliers\" Example:             Produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :return: The num_pd_bids_absolute_percentile_percent_rotamer_outliers of this PdbxVrptSummary.  # noqa: E501
        :rtype: int
        """
        return self._num_pd_bids_absolute_percentile_percent_rotamer_outliers

    @num_pd_bids_absolute_percentile_percent_rotamer_outliers.setter
    def num_pd_bids_absolute_percentile_percent_rotamer_outliers(self, num_pd_bids_absolute_percentile_percent_rotamer_outliers):
        """Sets the num_pd_bids_absolute_percentile_percent_rotamer_outliers of this PdbxVrptSummary.

        The number of PDB depositions used in the comparison when calculating the attribute \"absolute-percentile-percent-rota-outliers\" Example:             Produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :param num_pd_bids_absolute_percentile_percent_rotamer_outliers: The num_pd_bids_absolute_percentile_percent_rotamer_outliers of this PdbxVrptSummary.  # noqa: E501
        :type: int
        """

        self._num_pd_bids_absolute_percentile_percent_rotamer_outliers = num_pd_bids_absolute_percentile_percent_rotamer_outliers

    @property
    def num_pd_bids_relative_percentile_dcc_rfree(self):
        """Gets the num_pd_bids_relative_percentile_dcc_rfree of this PdbxVrptSummary.  # noqa: E501

        The number of PDB depositions used in the comparison when calculating the attribute \"relative-percentile-DCC_Rfree\". Example:            X-ray entry specific, produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :return: The num_pd_bids_relative_percentile_dcc_rfree of this PdbxVrptSummary.  # noqa: E501
        :rtype: int
        """
        return self._num_pd_bids_relative_percentile_dcc_rfree

    @num_pd_bids_relative_percentile_dcc_rfree.setter
    def num_pd_bids_relative_percentile_dcc_rfree(self, num_pd_bids_relative_percentile_dcc_rfree):
        """Sets the num_pd_bids_relative_percentile_dcc_rfree of this PdbxVrptSummary.

        The number of PDB depositions used in the comparison when calculating the attribute \"relative-percentile-DCC_Rfree\". Example:            X-ray entry specific, produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :param num_pd_bids_relative_percentile_dcc_rfree: The num_pd_bids_relative_percentile_dcc_rfree of this PdbxVrptSummary.  # noqa: E501
        :type: int
        """

        self._num_pd_bids_relative_percentile_dcc_rfree = num_pd_bids_relative_percentile_dcc_rfree

    @property
    def num_pd_bids_relative_percentile_rna_suiteness(self):
        """Gets the num_pd_bids_relative_percentile_rna_suiteness of this PdbxVrptSummary.  # noqa: E501

        The number of PDB depositions used in the comparison when calculating the attribute \"relative-percentile-RNAsuiteness\". Example:            Specific to entries that contain RNA polymers (and have a RNA_suiteness attribute). Produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :return: The num_pd_bids_relative_percentile_rna_suiteness of this PdbxVrptSummary.  # noqa: E501
        :rtype: int
        """
        return self._num_pd_bids_relative_percentile_rna_suiteness

    @num_pd_bids_relative_percentile_rna_suiteness.setter
    def num_pd_bids_relative_percentile_rna_suiteness(self, num_pd_bids_relative_percentile_rna_suiteness):
        """Sets the num_pd_bids_relative_percentile_rna_suiteness of this PdbxVrptSummary.

        The number of PDB depositions used in the comparison when calculating the attribute \"relative-percentile-RNAsuiteness\". Example:            Specific to entries that contain RNA polymers (and have a RNA_suiteness attribute). Produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :param num_pd_bids_relative_percentile_rna_suiteness: The num_pd_bids_relative_percentile_rna_suiteness of this PdbxVrptSummary.  # noqa: E501
        :type: int
        """

        self._num_pd_bids_relative_percentile_rna_suiteness = num_pd_bids_relative_percentile_rna_suiteness

    @property
    def num_pd_bids_relative_percentile_clashscore(self):
        """Gets the num_pd_bids_relative_percentile_clashscore of this PdbxVrptSummary.  # noqa: E501

        The number of PDB depositions used in the comparison when calculating the attribute \"relative-percentile-clashscore\" Example:            Produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :return: The num_pd_bids_relative_percentile_clashscore of this PdbxVrptSummary.  # noqa: E501
        :rtype: int
        """
        return self._num_pd_bids_relative_percentile_clashscore

    @num_pd_bids_relative_percentile_clashscore.setter
    def num_pd_bids_relative_percentile_clashscore(self, num_pd_bids_relative_percentile_clashscore):
        """Sets the num_pd_bids_relative_percentile_clashscore of this PdbxVrptSummary.

        The number of PDB depositions used in the comparison when calculating the attribute \"relative-percentile-clashscore\" Example:            Produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :param num_pd_bids_relative_percentile_clashscore: The num_pd_bids_relative_percentile_clashscore of this PdbxVrptSummary.  # noqa: E501
        :type: int
        """

        self._num_pd_bids_relative_percentile_clashscore = num_pd_bids_relative_percentile_clashscore

    @property
    def num_pd_bids_relative_percentile_percent_rsrz_outliers(self):
        """Gets the num_pd_bids_relative_percentile_percent_rsrz_outliers of this PdbxVrptSummary.  # noqa: E501

        The number of PDB depositions used in the comparison when calculating the attribute \"relative-percentile-percent-RSRZ-outliers\". Example:            X-ray entry specific, produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :return: The num_pd_bids_relative_percentile_percent_rsrz_outliers of this PdbxVrptSummary.  # noqa: E501
        :rtype: int
        """
        return self._num_pd_bids_relative_percentile_percent_rsrz_outliers

    @num_pd_bids_relative_percentile_percent_rsrz_outliers.setter
    def num_pd_bids_relative_percentile_percent_rsrz_outliers(self, num_pd_bids_relative_percentile_percent_rsrz_outliers):
        """Sets the num_pd_bids_relative_percentile_percent_rsrz_outliers of this PdbxVrptSummary.

        The number of PDB depositions used in the comparison when calculating the attribute \"relative-percentile-percent-RSRZ-outliers\". Example:            X-ray entry specific, produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :param num_pd_bids_relative_percentile_percent_rsrz_outliers: The num_pd_bids_relative_percentile_percent_rsrz_outliers of this PdbxVrptSummary.  # noqa: E501
        :type: int
        """

        self._num_pd_bids_relative_percentile_percent_rsrz_outliers = num_pd_bids_relative_percentile_percent_rsrz_outliers

    @property
    def num_pd_bids_relative_percentile_percent_ramachandran_outliers(self):
        """Gets the num_pd_bids_relative_percentile_percent_ramachandran_outliers of this PdbxVrptSummary.  # noqa: E501

        The number of PDB depositions used in the comparison when calculating the attribute \"relative-percentile-percent-rama-outliers\" Example:            Produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :return: The num_pd_bids_relative_percentile_percent_ramachandran_outliers of this PdbxVrptSummary.  # noqa: E501
        :rtype: int
        """
        return self._num_pd_bids_relative_percentile_percent_ramachandran_outliers

    @num_pd_bids_relative_percentile_percent_ramachandran_outliers.setter
    def num_pd_bids_relative_percentile_percent_ramachandran_outliers(self, num_pd_bids_relative_percentile_percent_ramachandran_outliers):
        """Sets the num_pd_bids_relative_percentile_percent_ramachandran_outliers of this PdbxVrptSummary.

        The number of PDB depositions used in the comparison when calculating the attribute \"relative-percentile-percent-rama-outliers\" Example:            Produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :param num_pd_bids_relative_percentile_percent_ramachandran_outliers: The num_pd_bids_relative_percentile_percent_ramachandran_outliers of this PdbxVrptSummary.  # noqa: E501
        :type: int
        """

        self._num_pd_bids_relative_percentile_percent_ramachandran_outliers = num_pd_bids_relative_percentile_percent_ramachandran_outliers

    @property
    def num_pd_bids_relative_percentile_percent_rotamer_outliers(self):
        """Gets the num_pd_bids_relative_percentile_percent_rotamer_outliers of this PdbxVrptSummary.  # noqa: E501

        The number of PDB depositions used in the comparison when calculating the attribute \"relative-percentile-percent-rota-outliers\" Example:            Produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :return: The num_pd_bids_relative_percentile_percent_rotamer_outliers of this PdbxVrptSummary.  # noqa: E501
        :rtype: int
        """
        return self._num_pd_bids_relative_percentile_percent_rotamer_outliers

    @num_pd_bids_relative_percentile_percent_rotamer_outliers.setter
    def num_pd_bids_relative_percentile_percent_rotamer_outliers(self, num_pd_bids_relative_percentile_percent_rotamer_outliers):
        """Sets the num_pd_bids_relative_percentile_percent_rotamer_outliers of this PdbxVrptSummary.

        The number of PDB depositions used in the comparison when calculating the attribute \"relative-percentile-percent-rota-outliers\" Example:            Produced by the percentiles step of the validation pipeline software.  # noqa: E501

        :param num_pd_bids_relative_percentile_percent_rotamer_outliers: The num_pd_bids_relative_percentile_percent_rotamer_outliers of this PdbxVrptSummary.  # noqa: E501
        :type: int
        """

        self._num_pd_bids_relative_percentile_percent_rotamer_outliers = num_pd_bids_relative_percentile_percent_rotamer_outliers

    @property
    def num_angles_rmsz(self):
        """Gets the num_angles_rmsz of this PdbxVrptSummary.  # noqa: E501

        The number of bond angless compared to \"standard geometry\" made using the MolProbity dangle program. Standard geometry parameters are taken from Engh and Huber (2001) and Parkinson et al. (1996). This value is for all chains in the structure.  # noqa: E501

        :return: The num_angles_rmsz of this PdbxVrptSummary.  # noqa: E501
        :rtype: int
        """
        return self._num_angles_rmsz

    @num_angles_rmsz.setter
    def num_angles_rmsz(self, num_angles_rmsz):
        """Sets the num_angles_rmsz of this PdbxVrptSummary.

        The number of bond angless compared to \"standard geometry\" made using the MolProbity dangle program. Standard geometry parameters are taken from Engh and Huber (2001) and Parkinson et al. (1996). This value is for all chains in the structure.  # noqa: E501

        :param num_angles_rmsz: The num_angles_rmsz of this PdbxVrptSummary.  # noqa: E501
        :type: int
        """

        self._num_angles_rmsz = num_angles_rmsz

    @property
    def num_bonds_rmsz(self):
        """Gets the num_bonds_rmsz of this PdbxVrptSummary.  # noqa: E501

        The number of bond lengths compared to \"standard geometry\" made using the MolProbity dangle program. Standard geometry parameters are taken from Engh and Huber (2001) and Parkinson et al. (1996). This value is for all chains in the structure.  # noqa: E501

        :return: The num_bonds_rmsz of this PdbxVrptSummary.  # noqa: E501
        :rtype: int
        """
        return self._num_bonds_rmsz

    @num_bonds_rmsz.setter
    def num_bonds_rmsz(self, num_bonds_rmsz):
        """Sets the num_bonds_rmsz of this PdbxVrptSummary.

        The number of bond lengths compared to \"standard geometry\" made using the MolProbity dangle program. Standard geometry parameters are taken from Engh and Huber (2001) and Parkinson et al. (1996). This value is for all chains in the structure.  # noqa: E501

        :param num_bonds_rmsz: The num_bonds_rmsz of this PdbxVrptSummary.  # noqa: E501
        :type: int
        """

        self._num_bonds_rmsz = num_bonds_rmsz

    @property
    def num_free_reflections(self):
        """Gets the num_free_reflections of this PdbxVrptSummary.  # noqa: E501

        The number of reflections in the free set as defined in the input structure factor file supplied to the validation pipeline. example:            X-ray entry specific, obtained from the DCC program.  # noqa: E501

        :return: The num_free_reflections of this PdbxVrptSummary.  # noqa: E501
        :rtype: int
        """
        return self._num_free_reflections

    @num_free_reflections.setter
    def num_free_reflections(self, num_free_reflections):
        """Sets the num_free_reflections of this PdbxVrptSummary.

        The number of reflections in the free set as defined in the input structure factor file supplied to the validation pipeline. example:            X-ray entry specific, obtained from the DCC program.  # noqa: E501

        :param num_free_reflections: The num_free_reflections of this PdbxVrptSummary.  # noqa: E501
        :type: int
        """

        self._num_free_reflections = num_free_reflections

    @property
    def num_miller_indices(self):
        """Gets the num_miller_indices of this PdbxVrptSummary.  # noqa: E501

        The number of Miller Indices reported by the Xtriage program. This should be the same as the number of _refln in the input structure factor file. Example:            X-ray entry specific, calculated by Phenix Xtriage program.  # noqa: E501

        :return: The num_miller_indices of this PdbxVrptSummary.  # noqa: E501
        :rtype: int
        """
        return self._num_miller_indices

    @num_miller_indices.setter
    def num_miller_indices(self, num_miller_indices):
        """Sets the num_miller_indices of this PdbxVrptSummary.

        The number of Miller Indices reported by the Xtriage program. This should be the same as the number of _refln in the input structure factor file. Example:            X-ray entry specific, calculated by Phenix Xtriage program.  # noqa: E501

        :param num_miller_indices: The num_miller_indices of this PdbxVrptSummary.  # noqa: E501
        :type: int
        """

        self._num_miller_indices = num_miller_indices

    @property
    def panav_version(self):
        """Gets the panav_version of this PdbxVrptSummary.  # noqa: E501

        Reference for the PANAV software.  # noqa: E501

        :return: The panav_version of this PdbxVrptSummary.  # noqa: E501
        :rtype: str
        """
        return self._panav_version

    @panav_version.setter
    def panav_version(self, panav_version):
        """Sets the panav_version of this PdbxVrptSummary.

        Reference for the PANAV software.  # noqa: E501

        :param panav_version: The panav_version of this PdbxVrptSummary.  # noqa: E501
        :type: str
        """

        self._panav_version = panav_version

    @property
    def percent_rsrz_outliers(self):
        """Gets the percent_rsrz_outliers of this PdbxVrptSummary.  # noqa: E501

        A percentage, Normally percent proportion of the total number. Between 0% and 100%.  # noqa: E501

        :return: The percent_rsrz_outliers of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._percent_rsrz_outliers

    @percent_rsrz_outliers.setter
    def percent_rsrz_outliers(self, percent_rsrz_outliers):
        """Sets the percent_rsrz_outliers of this PdbxVrptSummary.

        A percentage, Normally percent proportion of the total number. Between 0% and 100%.  # noqa: E501

        :param percent_rsrz_outliers: The percent_rsrz_outliers of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._percent_rsrz_outliers = percent_rsrz_outliers

    @property
    def percent_free_reflections(self):
        """Gets the percent_free_reflections of this PdbxVrptSummary.  # noqa: E501

        A percentage, Normally percent proportion of the total number. Between 0% and 100%.  # noqa: E501

        :return: The percent_free_reflections of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._percent_free_reflections

    @percent_free_reflections.setter
    def percent_free_reflections(self, percent_free_reflections):
        """Sets the percent_free_reflections of this PdbxVrptSummary.

        A percentage, Normally percent proportion of the total number. Between 0% and 100%.  # noqa: E501

        :param percent_free_reflections: The percent_free_reflections of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._percent_free_reflections = percent_free_reflections

    @property
    def percent_ramachandran_outliers(self):
        """Gets the percent_ramachandran_outliers of this PdbxVrptSummary.  # noqa: E501

        A percentage, Normally percent proportion of the total number. Between 0% and 100%.  # noqa: E501

        :return: The percent_ramachandran_outliers of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._percent_ramachandran_outliers

    @percent_ramachandran_outliers.setter
    def percent_ramachandran_outliers(self, percent_ramachandran_outliers):
        """Sets the percent_ramachandran_outliers of this PdbxVrptSummary.

        A percentage, Normally percent proportion of the total number. Between 0% and 100%.  # noqa: E501

        :param percent_ramachandran_outliers: The percent_ramachandran_outliers of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._percent_ramachandran_outliers = percent_ramachandran_outliers

    @property
    def percent_ramachandran_outliers_full_length(self):
        """Gets the percent_ramachandran_outliers_full_length of this PdbxVrptSummary.  # noqa: E501

        A percentage, Normally percent proportion of the total number. Between 0% and 100%.  # noqa: E501

        :return: The percent_ramachandran_outliers_full_length of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._percent_ramachandran_outliers_full_length

    @percent_ramachandran_outliers_full_length.setter
    def percent_ramachandran_outliers_full_length(self, percent_ramachandran_outliers_full_length):
        """Sets the percent_ramachandran_outliers_full_length of this PdbxVrptSummary.

        A percentage, Normally percent proportion of the total number. Between 0% and 100%.  # noqa: E501

        :param percent_ramachandran_outliers_full_length: The percent_ramachandran_outliers_full_length of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._percent_ramachandran_outliers_full_length = percent_ramachandran_outliers_full_length

    @property
    def percent_rotamer_outliers(self):
        """Gets the percent_rotamer_outliers of this PdbxVrptSummary.  # noqa: E501

        A percentage, Normally percent proportion of the total number. Between 0% and 100%.  # noqa: E501

        :return: The percent_rotamer_outliers of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._percent_rotamer_outliers

    @percent_rotamer_outliers.setter
    def percent_rotamer_outliers(self, percent_rotamer_outliers):
        """Sets the percent_rotamer_outliers of this PdbxVrptSummary.

        A percentage, Normally percent proportion of the total number. Between 0% and 100%.  # noqa: E501

        :param percent_rotamer_outliers: The percent_rotamer_outliers of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._percent_rotamer_outliers = percent_rotamer_outliers

    @property
    def percent_rotamer_outliers_full_length(self):
        """Gets the percent_rotamer_outliers_full_length of this PdbxVrptSummary.  # noqa: E501

        A percentage, Normally percent proportion of the total number. Between 0% and 100%.  # noqa: E501

        :return: The percent_rotamer_outliers_full_length of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._percent_rotamer_outliers_full_length

    @percent_rotamer_outliers_full_length.setter
    def percent_rotamer_outliers_full_length(self, percent_rotamer_outliers_full_length):
        """Sets the percent_rotamer_outliers_full_length of this PdbxVrptSummary.

        A percentage, Normally percent proportion of the total number. Between 0% and 100%.  # noqa: E501

        :param percent_rotamer_outliers_full_length: The percent_rotamer_outliers_full_length of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._percent_rotamer_outliers_full_length = percent_rotamer_outliers_full_length

    @property
    def percentilebins(self):
        """Gets the percentilebins of this PdbxVrptSummary.  # noqa: E501

        The percentile bins that this structure would contribute to in a recalculation of percentile. The string is a comma separated list. Example: An X-ray entry with a resolution of 1.8 Angstroms, that would contribute to bins all structures, what ever bin 1.8 Angstrom resolution is in and the all xray bin. Example #2: An EM entry that would contribute to all and em structures bins. Example #3: A NMR entry hat would contribute to all and nmr structures bins.  # noqa: E501

        :return: The percentilebins of this PdbxVrptSummary.  # noqa: E501
        :rtype: list[str]
        """
        return self._percentilebins

    @percentilebins.setter
    def percentilebins(self, percentilebins):
        """Sets the percentilebins of this PdbxVrptSummary.

        The percentile bins that this structure would contribute to in a recalculation of percentile. The string is a comma separated list. Example: An X-ray entry with a resolution of 1.8 Angstroms, that would contribute to bins all structures, what ever bin 1.8 Angstrom resolution is in and the all xray bin. Example #2: An EM entry that would contribute to all and em structures bins. Example #3: A NMR entry hat would contribute to all and nmr structures bins.  # noqa: E501

        :param percentilebins: The percentilebins of this PdbxVrptSummary.  # noqa: E501
        :type: list[str]
        """

        self._percentilebins = percentilebins

    @property
    def protein_dna_rna_entities(self):
        """Gets the protein_dna_rna_entities of this PdbxVrptSummary.  # noqa: E501

        Comma separated list of the _entity.id's for the molecular entities that are present in the structure and have _entity_poly.type indicating that they are protein, RNA or DNA: that is in the list 'polypeptide(L)', 'polypeptide(D)', 'polyribonucleotide, 'polydeoxyribonucleotide'  or 'polydeoxyribonucleotide/polyribonucleotide hybrid'. Normally the entity.id's are integer numbers but not necessarily so. Example  # noqa: E501

        :return: The protein_dna_rna_entities of this PdbxVrptSummary.  # noqa: E501
        :rtype: str
        """
        return self._protein_dna_rna_entities

    @protein_dna_rna_entities.setter
    def protein_dna_rna_entities(self, protein_dna_rna_entities):
        """Sets the protein_dna_rna_entities of this PdbxVrptSummary.

        Comma separated list of the _entity.id's for the molecular entities that are present in the structure and have _entity_poly.type indicating that they are protein, RNA or DNA: that is in the list 'polypeptide(L)', 'polypeptide(D)', 'polyribonucleotide, 'polydeoxyribonucleotide'  or 'polydeoxyribonucleotide/polyribonucleotide hybrid'. Normally the entity.id's are integer numbers but not necessarily so. Example  # noqa: E501

        :param protein_dna_rna_entities: The protein_dna_rna_entities of this PdbxVrptSummary.  # noqa: E501
        :type: str
        """

        self._protein_dna_rna_entities = protein_dna_rna_entities

    @property
    def rci_version(self):
        """Gets the rci_version of this PdbxVrptSummary.  # noqa: E501

        Version and reference of the RCI software  # noqa: E501

        :return: The rci_version of this PdbxVrptSummary.  # noqa: E501
        :rtype: str
        """
        return self._rci_version

    @rci_version.setter
    def rci_version(self, rci_version):
        """Sets the rci_version of this PdbxVrptSummary.

        Version and reference of the RCI software  # noqa: E501

        :param rci_version: The rci_version of this PdbxVrptSummary.  # noqa: E501
        :type: str
        """

        self._rci_version = rci_version

    @property
    def reflections_input_filename(self):
        """Gets the reflections_input_filename of this PdbxVrptSummary.  # noqa: E501

        The filename for the input mmCIF format reflection file given to the validation pipeline. Not reported for runs at the annotation or release stage.  # noqa: E501

        :return: The reflections_input_filename of this PdbxVrptSummary.  # noqa: E501
        :rtype: str
        """
        return self._reflections_input_filename

    @reflections_input_filename.setter
    def reflections_input_filename(self, reflections_input_filename):
        """Sets the reflections_input_filename of this PdbxVrptSummary.

        The filename for the input mmCIF format reflection file given to the validation pipeline. Not reported for runs at the annotation or release stage.  # noqa: E501

        :param reflections_input_filename: The reflections_input_filename of this PdbxVrptSummary.  # noqa: E501
        :type: str
        """

        self._reflections_input_filename = reflections_input_filename

    @property
    def refmac_version(self):
        """Gets the refmac_version of this PdbxVrptSummary.  # noqa: E501

        Version of the REFMAC pdbx_vrpt_software used in the EDS step. Example:           X-ray entry specific, obtained in the eds step from REFMAC calculation.  # noqa: E501

        :return: The refmac_version of this PdbxVrptSummary.  # noqa: E501
        :rtype: str
        """
        return self._refmac_version

    @refmac_version.setter
    def refmac_version(self, refmac_version):
        """Sets the refmac_version of this PdbxVrptSummary.

        Version of the REFMAC pdbx_vrpt_software used in the EDS step. Example:           X-ray entry specific, obtained in the eds step from REFMAC calculation.  # noqa: E501

        :param refmac_version: The refmac_version of this PdbxVrptSummary.  # noqa: E501
        :type: str
        """

        self._refmac_version = refmac_version

    @property
    def relative_percentile_dcc_rfree(self):
        """Gets the relative_percentile_dcc_rfree of this PdbxVrptSummary.  # noqa: E501

        Structures are judged in comparison to previously deposited PDB entries. The comparison is carried out by calculation of the percentile rank, i.e. the percentage of entries that are equal or poorer than this structure in terms of a quality indicator. Percentile ranks range from 0 (the worst) to 100 (the best).  # noqa: E501

        :return: The relative_percentile_dcc_rfree of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._relative_percentile_dcc_rfree

    @relative_percentile_dcc_rfree.setter
    def relative_percentile_dcc_rfree(self, relative_percentile_dcc_rfree):
        """Sets the relative_percentile_dcc_rfree of this PdbxVrptSummary.

        Structures are judged in comparison to previously deposited PDB entries. The comparison is carried out by calculation of the percentile rank, i.e. the percentage of entries that are equal or poorer than this structure in terms of a quality indicator. Percentile ranks range from 0 (the worst) to 100 (the best).  # noqa: E501

        :param relative_percentile_dcc_rfree: The relative_percentile_dcc_rfree of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._relative_percentile_dcc_rfree = relative_percentile_dcc_rfree

    @property
    def relative_percentile_rna_suiteness(self):
        """Gets the relative_percentile_rna_suiteness of this PdbxVrptSummary.  # noqa: E501

        Structures are judged in comparison to previously deposited PDB entries. The comparison is carried out by calculation of the percentile rank, i.e. the percentage of entries that are equal or poorer than this structure in terms of a quality indicator. Percentile ranks range from 0 (the worst) to 100 (the best).  # noqa: E501

        :return: The relative_percentile_rna_suiteness of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._relative_percentile_rna_suiteness

    @relative_percentile_rna_suiteness.setter
    def relative_percentile_rna_suiteness(self, relative_percentile_rna_suiteness):
        """Sets the relative_percentile_rna_suiteness of this PdbxVrptSummary.

        Structures are judged in comparison to previously deposited PDB entries. The comparison is carried out by calculation of the percentile rank, i.e. the percentage of entries that are equal or poorer than this structure in terms of a quality indicator. Percentile ranks range from 0 (the worst) to 100 (the best).  # noqa: E501

        :param relative_percentile_rna_suiteness: The relative_percentile_rna_suiteness of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._relative_percentile_rna_suiteness = relative_percentile_rna_suiteness

    @property
    def relative_percentile_clashscore(self):
        """Gets the relative_percentile_clashscore of this PdbxVrptSummary.  # noqa: E501

        Structures are judged in comparison to previously deposited PDB entries. The comparison is carried out by calculation of the percentile rank, i.e. the percentage of entries that are equal or poorer than this structure in terms of a quality indicator. Percentile ranks range from 0 (the worst) to 100 (the best).  # noqa: E501

        :return: The relative_percentile_clashscore of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._relative_percentile_clashscore

    @relative_percentile_clashscore.setter
    def relative_percentile_clashscore(self, relative_percentile_clashscore):
        """Sets the relative_percentile_clashscore of this PdbxVrptSummary.

        Structures are judged in comparison to previously deposited PDB entries. The comparison is carried out by calculation of the percentile rank, i.e. the percentage of entries that are equal or poorer than this structure in terms of a quality indicator. Percentile ranks range from 0 (the worst) to 100 (the best).  # noqa: E501

        :param relative_percentile_clashscore: The relative_percentile_clashscore of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._relative_percentile_clashscore = relative_percentile_clashscore

    @property
    def relative_percentile_percent_rsrz_outliers(self):
        """Gets the relative_percentile_percent_rsrz_outliers of this PdbxVrptSummary.  # noqa: E501

        Structures are judged in comparison to previously deposited PDB entries. The comparison is carried out by calculation of the percentile rank, i.e. the percentage of entries that are equal or poorer than this structure in terms of a quality indicator. Percentile ranks range from 0 (the worst) to 100 (the best).  # noqa: E501

        :return: The relative_percentile_percent_rsrz_outliers of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._relative_percentile_percent_rsrz_outliers

    @relative_percentile_percent_rsrz_outliers.setter
    def relative_percentile_percent_rsrz_outliers(self, relative_percentile_percent_rsrz_outliers):
        """Sets the relative_percentile_percent_rsrz_outliers of this PdbxVrptSummary.

        Structures are judged in comparison to previously deposited PDB entries. The comparison is carried out by calculation of the percentile rank, i.e. the percentage of entries that are equal or poorer than this structure in terms of a quality indicator. Percentile ranks range from 0 (the worst) to 100 (the best).  # noqa: E501

        :param relative_percentile_percent_rsrz_outliers: The relative_percentile_percent_rsrz_outliers of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._relative_percentile_percent_rsrz_outliers = relative_percentile_percent_rsrz_outliers

    @property
    def relative_percentile_percent_ramachandran_outliers(self):
        """Gets the relative_percentile_percent_ramachandran_outliers of this PdbxVrptSummary.  # noqa: E501

        Structures are judged in comparison to previously deposited PDB entries. The comparison is carried out by calculation of the percentile rank, i.e. the percentage of entries that are equal or poorer than this structure in terms of a quality indicator. Percentile ranks range from 0 (the worst) to 100 (the best).  # noqa: E501

        :return: The relative_percentile_percent_ramachandran_outliers of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._relative_percentile_percent_ramachandran_outliers

    @relative_percentile_percent_ramachandran_outliers.setter
    def relative_percentile_percent_ramachandran_outliers(self, relative_percentile_percent_ramachandran_outliers):
        """Sets the relative_percentile_percent_ramachandran_outliers of this PdbxVrptSummary.

        Structures are judged in comparison to previously deposited PDB entries. The comparison is carried out by calculation of the percentile rank, i.e. the percentage of entries that are equal or poorer than this structure in terms of a quality indicator. Percentile ranks range from 0 (the worst) to 100 (the best).  # noqa: E501

        :param relative_percentile_percent_ramachandran_outliers: The relative_percentile_percent_ramachandran_outliers of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._relative_percentile_percent_ramachandran_outliers = relative_percentile_percent_ramachandran_outliers

    @property
    def relative_percentile_percent_rotamer_outliers(self):
        """Gets the relative_percentile_percent_rotamer_outliers of this PdbxVrptSummary.  # noqa: E501

        Structures are judged in comparison to previously deposited PDB entries. The comparison is carried out by calculation of the percentile rank, i.e. the percentage of entries that are equal or poorer than this structure in terms of a quality indicator. Percentile ranks range from 0 (the worst) to 100 (the best).  # noqa: E501

        :return: The relative_percentile_percent_rotamer_outliers of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._relative_percentile_percent_rotamer_outliers

    @relative_percentile_percent_rotamer_outliers.setter
    def relative_percentile_percent_rotamer_outliers(self, relative_percentile_percent_rotamer_outliers):
        """Sets the relative_percentile_percent_rotamer_outliers of this PdbxVrptSummary.

        Structures are judged in comparison to previously deposited PDB entries. The comparison is carried out by calculation of the percentile rank, i.e. the percentage of entries that are equal or poorer than this structure in terms of a quality indicator. Percentile ranks range from 0 (the worst) to 100 (the best).  # noqa: E501

        :param relative_percentile_percent_rotamer_outliers: The relative_percentile_percent_rotamer_outliers of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._relative_percentile_percent_rotamer_outliers = relative_percentile_percent_rotamer_outliers

    @property
    def report_creation_date(self):
        """Gets the report_creation_date of this PdbxVrptSummary.  # noqa: E501

        The date, time and time-zone that the validation XML file was created. The string will be formatted like \"Feb  7, 2017 -- 12:32 pm GMT\".  # noqa: E501

        :return: The report_creation_date of this PdbxVrptSummary.  # noqa: E501
        :rtype: str
        """
        return self._report_creation_date

    @report_creation_date.setter
    def report_creation_date(self, report_creation_date):
        """Sets the report_creation_date of this PdbxVrptSummary.

        The date, time and time-zone that the validation XML file was created. The string will be formatted like \"Feb  7, 2017 -- 12:32 pm GMT\".  # noqa: E501

        :param report_creation_date: The report_creation_date of this PdbxVrptSummary.  # noqa: E501
        :type: str
        """

        self._report_creation_date = report_creation_date

    @property
    def resol_high_from_reflectionsfile(self):
        """Gets the resol_high_from_reflectionsfile of this PdbxVrptSummary.  # noqa: E501

        The data high resolution diffraction limit, in Angstroms, obtained from cif item _reflns.d_resolution_high. X-ray entry specific.  # noqa: E501

        :return: The resol_high_from_reflectionsfile of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._resol_high_from_reflectionsfile

    @resol_high_from_reflectionsfile.setter
    def resol_high_from_reflectionsfile(self, resol_high_from_reflectionsfile):
        """Sets the resol_high_from_reflectionsfile of this PdbxVrptSummary.

        The data high resolution diffraction limit, in Angstroms, obtained from cif item _reflns.d_resolution_high. X-ray entry specific.  # noqa: E501

        :param resol_high_from_reflectionsfile: The resol_high_from_reflectionsfile of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._resol_high_from_reflectionsfile = resol_high_from_reflectionsfile

    @property
    def resol_low_from_reflectionsfile(self):
        """Gets the resol_low_from_reflectionsfile of this PdbxVrptSummary.  # noqa: E501

        The data low resolution diffraction limit, in Angstroms, obtained from cif item _reflns.d_resolution_low. X-ray entry specific.  # noqa: E501

        :return: The resol_low_from_reflectionsfile of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._resol_low_from_reflectionsfile

    @resol_low_from_reflectionsfile.setter
    def resol_low_from_reflectionsfile(self, resol_low_from_reflectionsfile):
        """Sets the resol_low_from_reflectionsfile of this PdbxVrptSummary.

        The data low resolution diffraction limit, in Angstroms, obtained from cif item _reflns.d_resolution_low. X-ray entry specific.  # noqa: E501

        :param resol_low_from_reflectionsfile: The resol_low_from_reflectionsfile of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._resol_low_from_reflectionsfile = resol_low_from_reflectionsfile

    @property
    def restypes_notchecked_for_bond_angle_geometry(self):
        """Gets the restypes_notchecked_for_bond_angle_geometry of this PdbxVrptSummary.  # noqa: E501

        This is a comma separated list of the residue types whose bond lengths and bond angles have not been checked against \"standard geometry\" using the MolProbity dangle program. Standard geometry parameters are taken from Engh and Huber (2001) and Parkinson et al. (1996)  # noqa: E501

        :return: The restypes_notchecked_for_bond_angle_geometry of this PdbxVrptSummary.  # noqa: E501
        :rtype: list[str]
        """
        return self._restypes_notchecked_for_bond_angle_geometry

    @restypes_notchecked_for_bond_angle_geometry.setter
    def restypes_notchecked_for_bond_angle_geometry(self, restypes_notchecked_for_bond_angle_geometry):
        """Sets the restypes_notchecked_for_bond_angle_geometry of this PdbxVrptSummary.

        This is a comma separated list of the residue types whose bond lengths and bond angles have not been checked against \"standard geometry\" using the MolProbity dangle program. Standard geometry parameters are taken from Engh and Huber (2001) and Parkinson et al. (1996)  # noqa: E501

        :param restypes_notchecked_for_bond_angle_geometry: The restypes_notchecked_for_bond_angle_geometry of this PdbxVrptSummary.  # noqa: E501
        :type: list[str]
        """

        self._restypes_notchecked_for_bond_angle_geometry = restypes_notchecked_for_bond_angle_geometry

    @property
    def shiftchecker_version(self):
        """Gets the shiftchecker_version of this PdbxVrptSummary.  # noqa: E501

        Version of the software for chemical shift outlier detection - currently same as revision number of the validation pipeline.  # noqa: E501

        :return: The shiftchecker_version of this PdbxVrptSummary.  # noqa: E501
        :rtype: str
        """
        return self._shiftchecker_version

    @shiftchecker_version.setter
    def shiftchecker_version(self, shiftchecker_version):
        """Sets the shiftchecker_version of this PdbxVrptSummary.

        Version of the software for chemical shift outlier detection - currently same as revision number of the validation pipeline.  # noqa: E501

        :param shiftchecker_version: The shiftchecker_version of this PdbxVrptSummary.  # noqa: E501
        :type: str
        """

        self._shiftchecker_version = shiftchecker_version

    @property
    def trans_nsc(self):
        """Gets the trans_nsc of this PdbxVrptSummary.  # noqa: E501

        A sentence giving the result of Xtriage&#8217;s analysis on translational NCS. Example: largest off-origin peak in the Patterson function is 8.82% of the height of the origin peak. No significant pseudotranslation is detected.\" X-ray entry specific, obtained from the Xtriage program.  # noqa: E501

        :return: The trans_nsc of this PdbxVrptSummary.  # noqa: E501
        :rtype: str
        """
        return self._trans_nsc

    @trans_nsc.setter
    def trans_nsc(self, trans_nsc):
        """Sets the trans_nsc of this PdbxVrptSummary.

        A sentence giving the result of Xtriage&#8217;s analysis on translational NCS. Example: largest off-origin peak in the Patterson function is 8.82% of the height of the origin peak. No significant pseudotranslation is detected.\" X-ray entry specific, obtained from the Xtriage program.  # noqa: E501

        :param trans_nsc: The trans_nsc of this PdbxVrptSummary.  # noqa: E501
        :type: str
        """

        self._trans_nsc = trans_nsc

    @property
    def twin_l(self):
        """Gets the twin_l of this PdbxVrptSummary.  # noqa: E501

        Padilla and Yeates twinning parameter <|L|>. Theoretical values is 0.5 in the untwinned case, and 0.375 in the perfectly twinned case. Example:            X-ray entry specific, obtained from the Xtriage program.  # noqa: E501

        :return: The twin_l of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._twin_l

    @twin_l.setter
    def twin_l(self, twin_l):
        """Sets the twin_l of this PdbxVrptSummary.

        Padilla and Yeates twinning parameter <|L|>. Theoretical values is 0.5 in the untwinned case, and 0.375 in the perfectly twinned case. Example:            X-ray entry specific, obtained from the Xtriage program.  # noqa: E501

        :param twin_l: The twin_l of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._twin_l = twin_l

    @property
    def twin_l2(self):
        """Gets the twin_l2 of this PdbxVrptSummary.  # noqa: E501

        Padilla and Yeates twinning parameter <|L**2|>. Theoretical values is 0.333 in the untwinned case, and 0.2 in the perfectly twinned case. Example:            X-ray entry specific, obtained from the Xtriage program.  # noqa: E501

        :return: The twin_l2 of this PdbxVrptSummary.  # noqa: E501
        :rtype: float
        """
        return self._twin_l2

    @twin_l2.setter
    def twin_l2(self, twin_l2):
        """Sets the twin_l2 of this PdbxVrptSummary.

        Padilla and Yeates twinning parameter <|L**2|>. Theoretical values is 0.333 in the untwinned case, and 0.2 in the perfectly twinned case. Example:            X-ray entry specific, obtained from the Xtriage program.  # noqa: E501

        :param twin_l2: The twin_l2 of this PdbxVrptSummary.  # noqa: E501
        :type: float
        """

        self._twin_l2 = twin_l2

    @property
    def twin_fraction(self):
        """Gets the twin_fraction of this PdbxVrptSummary.  # noqa: E501

        Estimated twinning fraction for operators as identified by Xtriage. A semicolon separated list of operators with fractions is givens Example:            X-ray entry specific, obtained from the Xtriage program.  # noqa: E501

        :return: The twin_fraction of this PdbxVrptSummary.  # noqa: E501
        :rtype: str
        """
        return self._twin_fraction

    @twin_fraction.setter
    def twin_fraction(self, twin_fraction):
        """Sets the twin_fraction of this PdbxVrptSummary.

        Estimated twinning fraction for operators as identified by Xtriage. A semicolon separated list of operators with fractions is givens Example:            X-ray entry specific, obtained from the Xtriage program.  # noqa: E501

        :param twin_fraction: The twin_fraction of this PdbxVrptSummary.  # noqa: E501
        :type: str
        """

        self._twin_fraction = twin_fraction

    @property
    def xtriage_input_columns(self):
        """Gets the xtriage_input_columns of this PdbxVrptSummary.  # noqa: E501

        The mmCIF item names of the _refln columns used as input to the Xtriage program. Example            X-ray entry specific, calculated by Phenix Xtriage program.  # noqa: E501

        :return: The xtriage_input_columns of this PdbxVrptSummary.  # noqa: E501
        :rtype: str
        """
        return self._xtriage_input_columns

    @xtriage_input_columns.setter
    def xtriage_input_columns(self, xtriage_input_columns):
        """Sets the xtriage_input_columns of this PdbxVrptSummary.

        The mmCIF item names of the _refln columns used as input to the Xtriage program. Example            X-ray entry specific, calculated by Phenix Xtriage program.  # noqa: E501

        :param xtriage_input_columns: The xtriage_input_columns of this PdbxVrptSummary.  # noqa: E501
        :type: str
        """

        self._xtriage_input_columns = xtriage_input_columns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PdbxVrptSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdbxVrptSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
