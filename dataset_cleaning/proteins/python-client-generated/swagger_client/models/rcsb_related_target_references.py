# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RcsbRelatedTargetReferences(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'related_resource_name': 'str',
        'related_resource_version': 'str',
        'related_target_id': 'str',
        'target_taxonomy_id': 'int',
        'aligned_target': 'list[RcsbRelatedTargetReferencesAlignedTarget]'
    }

    attribute_map = {
        'related_resource_name': 'related_resource_name',
        'related_resource_version': 'related_resource_version',
        'related_target_id': 'related_target_id',
        'target_taxonomy_id': 'target_taxonomy_id',
        'aligned_target': 'aligned_target'
    }

    def __init__(self, related_resource_name=None, related_resource_version=None, related_target_id=None, target_taxonomy_id=None, aligned_target=None):  # noqa: E501
        """RcsbRelatedTargetReferences - a model defined in Swagger"""  # noqa: E501
        self._related_resource_name = None
        self._related_resource_version = None
        self._related_target_id = None
        self._target_taxonomy_id = None
        self._aligned_target = None
        self.discriminator = None
        if related_resource_name is not None:
            self.related_resource_name = related_resource_name
        if related_resource_version is not None:
            self.related_resource_version = related_resource_version
        if related_target_id is not None:
            self.related_target_id = related_target_id
        if target_taxonomy_id is not None:
            self.target_taxonomy_id = target_taxonomy_id
        if aligned_target is not None:
            self.aligned_target = aligned_target

    @property
    def related_resource_name(self):
        """Gets the related_resource_name of this RcsbRelatedTargetReferences.  # noqa: E501

        The related target data resource name.  # noqa: E501

        :return: The related_resource_name of this RcsbRelatedTargetReferences.  # noqa: E501
        :rtype: str
        """
        return self._related_resource_name

    @related_resource_name.setter
    def related_resource_name(self, related_resource_name):
        """Sets the related_resource_name of this RcsbRelatedTargetReferences.

        The related target data resource name.  # noqa: E501

        :param related_resource_name: The related_resource_name of this RcsbRelatedTargetReferences.  # noqa: E501
        :type: str
        """
        allowed_values = ["ChEMBL", "DrugBank", "Pharos"]  # noqa: E501
        if related_resource_name not in allowed_values:
            raise ValueError(
                "Invalid value for `related_resource_name` ({0}), must be one of {1}"  # noqa: E501
                .format(related_resource_name, allowed_values)
            )

        self._related_resource_name = related_resource_name

    @property
    def related_resource_version(self):
        """Gets the related_resource_version of this RcsbRelatedTargetReferences.  # noqa: E501

        The version of the target data resource.  # noqa: E501

        :return: The related_resource_version of this RcsbRelatedTargetReferences.  # noqa: E501
        :rtype: str
        """
        return self._related_resource_version

    @related_resource_version.setter
    def related_resource_version(self, related_resource_version):
        """Sets the related_resource_version of this RcsbRelatedTargetReferences.

        The version of the target data resource.  # noqa: E501

        :param related_resource_version: The related_resource_version of this RcsbRelatedTargetReferences.  # noqa: E501
        :type: str
        """

        self._related_resource_version = related_resource_version

    @property
    def related_target_id(self):
        """Gets the related_target_id of this RcsbRelatedTargetReferences.  # noqa: E501

        An identifier for the target sequence in the related data resource.  # noqa: E501

        :return: The related_target_id of this RcsbRelatedTargetReferences.  # noqa: E501
        :rtype: str
        """
        return self._related_target_id

    @related_target_id.setter
    def related_target_id(self, related_target_id):
        """Sets the related_target_id of this RcsbRelatedTargetReferences.

        An identifier for the target sequence in the related data resource.  # noqa: E501

        :param related_target_id: The related_target_id of this RcsbRelatedTargetReferences.  # noqa: E501
        :type: str
        """

        self._related_target_id = related_target_id

    @property
    def target_taxonomy_id(self):
        """Gets the target_taxonomy_id of this RcsbRelatedTargetReferences.  # noqa: E501

        NCBI Taxonomy identifier for the target organism.   Reference:   Wheeler DL, Chappey C, Lash AE, Leipe DD, Madden TL, Schuler GD,  Tatusova TA, Rapp BA (2000). Database resources of the National  Center for Biotechnology Information. Nucleic Acids Res 2000 Jan  1;28(1):10-4   Benson DA, Karsch-Mizrachi I, Lipman DJ, Ostell J, Rapp BA,  Wheeler DL (2000). GenBank. Nucleic Acids Res 2000 Jan 1;28(1):15-18.  # noqa: E501

        :return: The target_taxonomy_id of this RcsbRelatedTargetReferences.  # noqa: E501
        :rtype: int
        """
        return self._target_taxonomy_id

    @target_taxonomy_id.setter
    def target_taxonomy_id(self, target_taxonomy_id):
        """Sets the target_taxonomy_id of this RcsbRelatedTargetReferences.

        NCBI Taxonomy identifier for the target organism.   Reference:   Wheeler DL, Chappey C, Lash AE, Leipe DD, Madden TL, Schuler GD,  Tatusova TA, Rapp BA (2000). Database resources of the National  Center for Biotechnology Information. Nucleic Acids Res 2000 Jan  1;28(1):10-4   Benson DA, Karsch-Mizrachi I, Lipman DJ, Ostell J, Rapp BA,  Wheeler DL (2000). GenBank. Nucleic Acids Res 2000 Jan 1;28(1):15-18.  # noqa: E501

        :param target_taxonomy_id: The target_taxonomy_id of this RcsbRelatedTargetReferences.  # noqa: E501
        :type: int
        """

        self._target_taxonomy_id = target_taxonomy_id

    @property
    def aligned_target(self):
        """Gets the aligned_target of this RcsbRelatedTargetReferences.  # noqa: E501


        :return: The aligned_target of this RcsbRelatedTargetReferences.  # noqa: E501
        :rtype: list[RcsbRelatedTargetReferencesAlignedTarget]
        """
        return self._aligned_target

    @aligned_target.setter
    def aligned_target(self, aligned_target):
        """Sets the aligned_target of this RcsbRelatedTargetReferences.


        :param aligned_target: The aligned_target of this RcsbRelatedTargetReferences.  # noqa: E501
        :type: list[RcsbRelatedTargetReferencesAlignedTarget]
        """

        self._aligned_target = aligned_target

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RcsbRelatedTargetReferences, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RcsbRelatedTargetReferences):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
