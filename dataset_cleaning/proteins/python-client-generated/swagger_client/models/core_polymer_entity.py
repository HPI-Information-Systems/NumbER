# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CorePolymerEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rcsb_cluster_membership': 'list[RcsbClusterMembership]',
        'entity_poly': 'EntityPoly',
        'entity_src_gen': 'list[EntitySrcGen]',
        'entity_src_nat': 'list[EntitySrcNat]',
        'pdbx_entity_src_syn': 'list[PdbxEntitySrcSyn]',
        'rcsb_entity_host_organism': 'list[RcsbEntityHostOrganism]',
        'rcsb_entity_source_organism': 'list[RcsbEntitySourceOrganism]',
        'rcsb_polymer_entity': 'RcsbPolymerEntity',
        'rcsb_polymer_entity_align': 'list[RcsbPolymerEntityAlign]',
        'rcsb_polymer_entity_annotation': 'list[RcsbPolymerEntityAnnotation]',
        'rcsb_polymer_entity_container_identifiers': 'RcsbPolymerEntityContainerIdentifiers',
        'rcsb_polymer_entity_feature': 'list[RcsbPolymerEntityFeature]',
        'rcsb_polymer_entity_feature_summary': 'list[RcsbPolymerEntityFeatureSummary]',
        'rcsb_polymer_entity_keywords': 'RcsbPolymerEntityKeywords',
        'rcsb_polymer_entity_name_com': 'list[RcsbPolymerEntityNameCom]',
        'rcsb_polymer_entity_name_sys': 'list[RcsbPolymerEntityNameSys]',
        'rcsb_related_target_references': 'list[RcsbRelatedTargetReferences]',
        'rcsb_target_cofactors': 'list[RcsbTargetCofactors]',
        'rcsb_id': 'str',
        'rcsb_polymer_entity_group_membership': 'list[RcsbPolymerEntityGroupMembership]',
        'rcsb_genomic_lineage': 'list[RcsbGenomicLineage]',
        'rcsb_membrane_lineage': 'list[RcsbMembraneLineage]',
        'rcsb_membrane_lineage_provenance_code': 'str',
        'rcsb_cluster_flexibility': 'RcsbClusterFlexibility',
        'rcsb_latest_revision': 'RcsbLatestRevision'
    }

    attribute_map = {
        'rcsb_cluster_membership': 'rcsb_cluster_membership',
        'entity_poly': 'entity_poly',
        'entity_src_gen': 'entity_src_gen',
        'entity_src_nat': 'entity_src_nat',
        'pdbx_entity_src_syn': 'pdbx_entity_src_syn',
        'rcsb_entity_host_organism': 'rcsb_entity_host_organism',
        'rcsb_entity_source_organism': 'rcsb_entity_source_organism',
        'rcsb_polymer_entity': 'rcsb_polymer_entity',
        'rcsb_polymer_entity_align': 'rcsb_polymer_entity_align',
        'rcsb_polymer_entity_annotation': 'rcsb_polymer_entity_annotation',
        'rcsb_polymer_entity_container_identifiers': 'rcsb_polymer_entity_container_identifiers',
        'rcsb_polymer_entity_feature': 'rcsb_polymer_entity_feature',
        'rcsb_polymer_entity_feature_summary': 'rcsb_polymer_entity_feature_summary',
        'rcsb_polymer_entity_keywords': 'rcsb_polymer_entity_keywords',
        'rcsb_polymer_entity_name_com': 'rcsb_polymer_entity_name_com',
        'rcsb_polymer_entity_name_sys': 'rcsb_polymer_entity_name_sys',
        'rcsb_related_target_references': 'rcsb_related_target_references',
        'rcsb_target_cofactors': 'rcsb_target_cofactors',
        'rcsb_id': 'rcsb_id',
        'rcsb_polymer_entity_group_membership': 'rcsb_polymer_entity_group_membership',
        'rcsb_genomic_lineage': 'rcsb_genomic_lineage',
        'rcsb_membrane_lineage': 'rcsb_membrane_lineage',
        'rcsb_membrane_lineage_provenance_code': 'rcsb_membrane_lineage_provenance_code',
        'rcsb_cluster_flexibility': 'rcsb_cluster_flexibility',
        'rcsb_latest_revision': 'rcsb_latest_revision'
    }

    def __init__(self, rcsb_cluster_membership=None, entity_poly=None, entity_src_gen=None, entity_src_nat=None, pdbx_entity_src_syn=None, rcsb_entity_host_organism=None, rcsb_entity_source_organism=None, rcsb_polymer_entity=None, rcsb_polymer_entity_align=None, rcsb_polymer_entity_annotation=None, rcsb_polymer_entity_container_identifiers=None, rcsb_polymer_entity_feature=None, rcsb_polymer_entity_feature_summary=None, rcsb_polymer_entity_keywords=None, rcsb_polymer_entity_name_com=None, rcsb_polymer_entity_name_sys=None, rcsb_related_target_references=None, rcsb_target_cofactors=None, rcsb_id=None, rcsb_polymer_entity_group_membership=None, rcsb_genomic_lineage=None, rcsb_membrane_lineage=None, rcsb_membrane_lineage_provenance_code=None, rcsb_cluster_flexibility=None, rcsb_latest_revision=None):  # noqa: E501
        """CorePolymerEntity - a model defined in Swagger"""  # noqa: E501
        self._rcsb_cluster_membership = None
        self._entity_poly = None
        self._entity_src_gen = None
        self._entity_src_nat = None
        self._pdbx_entity_src_syn = None
        self._rcsb_entity_host_organism = None
        self._rcsb_entity_source_organism = None
        self._rcsb_polymer_entity = None
        self._rcsb_polymer_entity_align = None
        self._rcsb_polymer_entity_annotation = None
        self._rcsb_polymer_entity_container_identifiers = None
        self._rcsb_polymer_entity_feature = None
        self._rcsb_polymer_entity_feature_summary = None
        self._rcsb_polymer_entity_keywords = None
        self._rcsb_polymer_entity_name_com = None
        self._rcsb_polymer_entity_name_sys = None
        self._rcsb_related_target_references = None
        self._rcsb_target_cofactors = None
        self._rcsb_id = None
        self._rcsb_polymer_entity_group_membership = None
        self._rcsb_genomic_lineage = None
        self._rcsb_membrane_lineage = None
        self._rcsb_membrane_lineage_provenance_code = None
        self._rcsb_cluster_flexibility = None
        self._rcsb_latest_revision = None
        self.discriminator = None
        if rcsb_cluster_membership is not None:
            self.rcsb_cluster_membership = rcsb_cluster_membership
        if entity_poly is not None:
            self.entity_poly = entity_poly
        if entity_src_gen is not None:
            self.entity_src_gen = entity_src_gen
        if entity_src_nat is not None:
            self.entity_src_nat = entity_src_nat
        if pdbx_entity_src_syn is not None:
            self.pdbx_entity_src_syn = pdbx_entity_src_syn
        if rcsb_entity_host_organism is not None:
            self.rcsb_entity_host_organism = rcsb_entity_host_organism
        if rcsb_entity_source_organism is not None:
            self.rcsb_entity_source_organism = rcsb_entity_source_organism
        if rcsb_polymer_entity is not None:
            self.rcsb_polymer_entity = rcsb_polymer_entity
        if rcsb_polymer_entity_align is not None:
            self.rcsb_polymer_entity_align = rcsb_polymer_entity_align
        if rcsb_polymer_entity_annotation is not None:
            self.rcsb_polymer_entity_annotation = rcsb_polymer_entity_annotation
        self.rcsb_polymer_entity_container_identifiers = rcsb_polymer_entity_container_identifiers
        if rcsb_polymer_entity_feature is not None:
            self.rcsb_polymer_entity_feature = rcsb_polymer_entity_feature
        if rcsb_polymer_entity_feature_summary is not None:
            self.rcsb_polymer_entity_feature_summary = rcsb_polymer_entity_feature_summary
        if rcsb_polymer_entity_keywords is not None:
            self.rcsb_polymer_entity_keywords = rcsb_polymer_entity_keywords
        if rcsb_polymer_entity_name_com is not None:
            self.rcsb_polymer_entity_name_com = rcsb_polymer_entity_name_com
        if rcsb_polymer_entity_name_sys is not None:
            self.rcsb_polymer_entity_name_sys = rcsb_polymer_entity_name_sys
        if rcsb_related_target_references is not None:
            self.rcsb_related_target_references = rcsb_related_target_references
        if rcsb_target_cofactors is not None:
            self.rcsb_target_cofactors = rcsb_target_cofactors
        self.rcsb_id = rcsb_id
        if rcsb_polymer_entity_group_membership is not None:
            self.rcsb_polymer_entity_group_membership = rcsb_polymer_entity_group_membership
        if rcsb_genomic_lineage is not None:
            self.rcsb_genomic_lineage = rcsb_genomic_lineage
        if rcsb_membrane_lineage is not None:
            self.rcsb_membrane_lineage = rcsb_membrane_lineage
        if rcsb_membrane_lineage_provenance_code is not None:
            self.rcsb_membrane_lineage_provenance_code = rcsb_membrane_lineage_provenance_code
        if rcsb_cluster_flexibility is not None:
            self.rcsb_cluster_flexibility = rcsb_cluster_flexibility
        if rcsb_latest_revision is not None:
            self.rcsb_latest_revision = rcsb_latest_revision

    @property
    def rcsb_cluster_membership(self):
        """Gets the rcsb_cluster_membership of this CorePolymerEntity.  # noqa: E501


        :return: The rcsb_cluster_membership of this CorePolymerEntity.  # noqa: E501
        :rtype: list[RcsbClusterMembership]
        """
        return self._rcsb_cluster_membership

    @rcsb_cluster_membership.setter
    def rcsb_cluster_membership(self, rcsb_cluster_membership):
        """Sets the rcsb_cluster_membership of this CorePolymerEntity.


        :param rcsb_cluster_membership: The rcsb_cluster_membership of this CorePolymerEntity.  # noqa: E501
        :type: list[RcsbClusterMembership]
        """

        self._rcsb_cluster_membership = rcsb_cluster_membership

    @property
    def entity_poly(self):
        """Gets the entity_poly of this CorePolymerEntity.  # noqa: E501


        :return: The entity_poly of this CorePolymerEntity.  # noqa: E501
        :rtype: EntityPoly
        """
        return self._entity_poly

    @entity_poly.setter
    def entity_poly(self, entity_poly):
        """Sets the entity_poly of this CorePolymerEntity.


        :param entity_poly: The entity_poly of this CorePolymerEntity.  # noqa: E501
        :type: EntityPoly
        """

        self._entity_poly = entity_poly

    @property
    def entity_src_gen(self):
        """Gets the entity_src_gen of this CorePolymerEntity.  # noqa: E501


        :return: The entity_src_gen of this CorePolymerEntity.  # noqa: E501
        :rtype: list[EntitySrcGen]
        """
        return self._entity_src_gen

    @entity_src_gen.setter
    def entity_src_gen(self, entity_src_gen):
        """Sets the entity_src_gen of this CorePolymerEntity.


        :param entity_src_gen: The entity_src_gen of this CorePolymerEntity.  # noqa: E501
        :type: list[EntitySrcGen]
        """

        self._entity_src_gen = entity_src_gen

    @property
    def entity_src_nat(self):
        """Gets the entity_src_nat of this CorePolymerEntity.  # noqa: E501


        :return: The entity_src_nat of this CorePolymerEntity.  # noqa: E501
        :rtype: list[EntitySrcNat]
        """
        return self._entity_src_nat

    @entity_src_nat.setter
    def entity_src_nat(self, entity_src_nat):
        """Sets the entity_src_nat of this CorePolymerEntity.


        :param entity_src_nat: The entity_src_nat of this CorePolymerEntity.  # noqa: E501
        :type: list[EntitySrcNat]
        """

        self._entity_src_nat = entity_src_nat

    @property
    def pdbx_entity_src_syn(self):
        """Gets the pdbx_entity_src_syn of this CorePolymerEntity.  # noqa: E501


        :return: The pdbx_entity_src_syn of this CorePolymerEntity.  # noqa: E501
        :rtype: list[PdbxEntitySrcSyn]
        """
        return self._pdbx_entity_src_syn

    @pdbx_entity_src_syn.setter
    def pdbx_entity_src_syn(self, pdbx_entity_src_syn):
        """Sets the pdbx_entity_src_syn of this CorePolymerEntity.


        :param pdbx_entity_src_syn: The pdbx_entity_src_syn of this CorePolymerEntity.  # noqa: E501
        :type: list[PdbxEntitySrcSyn]
        """

        self._pdbx_entity_src_syn = pdbx_entity_src_syn

    @property
    def rcsb_entity_host_organism(self):
        """Gets the rcsb_entity_host_organism of this CorePolymerEntity.  # noqa: E501


        :return: The rcsb_entity_host_organism of this CorePolymerEntity.  # noqa: E501
        :rtype: list[RcsbEntityHostOrganism]
        """
        return self._rcsb_entity_host_organism

    @rcsb_entity_host_organism.setter
    def rcsb_entity_host_organism(self, rcsb_entity_host_organism):
        """Sets the rcsb_entity_host_organism of this CorePolymerEntity.


        :param rcsb_entity_host_organism: The rcsb_entity_host_organism of this CorePolymerEntity.  # noqa: E501
        :type: list[RcsbEntityHostOrganism]
        """

        self._rcsb_entity_host_organism = rcsb_entity_host_organism

    @property
    def rcsb_entity_source_organism(self):
        """Gets the rcsb_entity_source_organism of this CorePolymerEntity.  # noqa: E501


        :return: The rcsb_entity_source_organism of this CorePolymerEntity.  # noqa: E501
        :rtype: list[RcsbEntitySourceOrganism]
        """
        return self._rcsb_entity_source_organism

    @rcsb_entity_source_organism.setter
    def rcsb_entity_source_organism(self, rcsb_entity_source_organism):
        """Sets the rcsb_entity_source_organism of this CorePolymerEntity.


        :param rcsb_entity_source_organism: The rcsb_entity_source_organism of this CorePolymerEntity.  # noqa: E501
        :type: list[RcsbEntitySourceOrganism]
        """

        self._rcsb_entity_source_organism = rcsb_entity_source_organism

    @property
    def rcsb_polymer_entity(self):
        """Gets the rcsb_polymer_entity of this CorePolymerEntity.  # noqa: E501


        :return: The rcsb_polymer_entity of this CorePolymerEntity.  # noqa: E501
        :rtype: RcsbPolymerEntity
        """
        return self._rcsb_polymer_entity

    @rcsb_polymer_entity.setter
    def rcsb_polymer_entity(self, rcsb_polymer_entity):
        """Sets the rcsb_polymer_entity of this CorePolymerEntity.


        :param rcsb_polymer_entity: The rcsb_polymer_entity of this CorePolymerEntity.  # noqa: E501
        :type: RcsbPolymerEntity
        """

        self._rcsb_polymer_entity = rcsb_polymer_entity

    @property
    def rcsb_polymer_entity_align(self):
        """Gets the rcsb_polymer_entity_align of this CorePolymerEntity.  # noqa: E501


        :return: The rcsb_polymer_entity_align of this CorePolymerEntity.  # noqa: E501
        :rtype: list[RcsbPolymerEntityAlign]
        """
        return self._rcsb_polymer_entity_align

    @rcsb_polymer_entity_align.setter
    def rcsb_polymer_entity_align(self, rcsb_polymer_entity_align):
        """Sets the rcsb_polymer_entity_align of this CorePolymerEntity.


        :param rcsb_polymer_entity_align: The rcsb_polymer_entity_align of this CorePolymerEntity.  # noqa: E501
        :type: list[RcsbPolymerEntityAlign]
        """

        self._rcsb_polymer_entity_align = rcsb_polymer_entity_align

    @property
    def rcsb_polymer_entity_annotation(self):
        """Gets the rcsb_polymer_entity_annotation of this CorePolymerEntity.  # noqa: E501


        :return: The rcsb_polymer_entity_annotation of this CorePolymerEntity.  # noqa: E501
        :rtype: list[RcsbPolymerEntityAnnotation]
        """
        return self._rcsb_polymer_entity_annotation

    @rcsb_polymer_entity_annotation.setter
    def rcsb_polymer_entity_annotation(self, rcsb_polymer_entity_annotation):
        """Sets the rcsb_polymer_entity_annotation of this CorePolymerEntity.


        :param rcsb_polymer_entity_annotation: The rcsb_polymer_entity_annotation of this CorePolymerEntity.  # noqa: E501
        :type: list[RcsbPolymerEntityAnnotation]
        """

        self._rcsb_polymer_entity_annotation = rcsb_polymer_entity_annotation

    @property
    def rcsb_polymer_entity_container_identifiers(self):
        """Gets the rcsb_polymer_entity_container_identifiers of this CorePolymerEntity.  # noqa: E501


        :return: The rcsb_polymer_entity_container_identifiers of this CorePolymerEntity.  # noqa: E501
        :rtype: RcsbPolymerEntityContainerIdentifiers
        """
        return self._rcsb_polymer_entity_container_identifiers

    @rcsb_polymer_entity_container_identifiers.setter
    def rcsb_polymer_entity_container_identifiers(self, rcsb_polymer_entity_container_identifiers):
        """Sets the rcsb_polymer_entity_container_identifiers of this CorePolymerEntity.


        :param rcsb_polymer_entity_container_identifiers: The rcsb_polymer_entity_container_identifiers of this CorePolymerEntity.  # noqa: E501
        :type: RcsbPolymerEntityContainerIdentifiers
        """
        if rcsb_polymer_entity_container_identifiers is None:
            raise ValueError("Invalid value for `rcsb_polymer_entity_container_identifiers`, must not be `None`")  # noqa: E501

        self._rcsb_polymer_entity_container_identifiers = rcsb_polymer_entity_container_identifiers

    @property
    def rcsb_polymer_entity_feature(self):
        """Gets the rcsb_polymer_entity_feature of this CorePolymerEntity.  # noqa: E501


        :return: The rcsb_polymer_entity_feature of this CorePolymerEntity.  # noqa: E501
        :rtype: list[RcsbPolymerEntityFeature]
        """
        return self._rcsb_polymer_entity_feature

    @rcsb_polymer_entity_feature.setter
    def rcsb_polymer_entity_feature(self, rcsb_polymer_entity_feature):
        """Sets the rcsb_polymer_entity_feature of this CorePolymerEntity.


        :param rcsb_polymer_entity_feature: The rcsb_polymer_entity_feature of this CorePolymerEntity.  # noqa: E501
        :type: list[RcsbPolymerEntityFeature]
        """

        self._rcsb_polymer_entity_feature = rcsb_polymer_entity_feature

    @property
    def rcsb_polymer_entity_feature_summary(self):
        """Gets the rcsb_polymer_entity_feature_summary of this CorePolymerEntity.  # noqa: E501


        :return: The rcsb_polymer_entity_feature_summary of this CorePolymerEntity.  # noqa: E501
        :rtype: list[RcsbPolymerEntityFeatureSummary]
        """
        return self._rcsb_polymer_entity_feature_summary

    @rcsb_polymer_entity_feature_summary.setter
    def rcsb_polymer_entity_feature_summary(self, rcsb_polymer_entity_feature_summary):
        """Sets the rcsb_polymer_entity_feature_summary of this CorePolymerEntity.


        :param rcsb_polymer_entity_feature_summary: The rcsb_polymer_entity_feature_summary of this CorePolymerEntity.  # noqa: E501
        :type: list[RcsbPolymerEntityFeatureSummary]
        """

        self._rcsb_polymer_entity_feature_summary = rcsb_polymer_entity_feature_summary

    @property
    def rcsb_polymer_entity_keywords(self):
        """Gets the rcsb_polymer_entity_keywords of this CorePolymerEntity.  # noqa: E501


        :return: The rcsb_polymer_entity_keywords of this CorePolymerEntity.  # noqa: E501
        :rtype: RcsbPolymerEntityKeywords
        """
        return self._rcsb_polymer_entity_keywords

    @rcsb_polymer_entity_keywords.setter
    def rcsb_polymer_entity_keywords(self, rcsb_polymer_entity_keywords):
        """Sets the rcsb_polymer_entity_keywords of this CorePolymerEntity.


        :param rcsb_polymer_entity_keywords: The rcsb_polymer_entity_keywords of this CorePolymerEntity.  # noqa: E501
        :type: RcsbPolymerEntityKeywords
        """

        self._rcsb_polymer_entity_keywords = rcsb_polymer_entity_keywords

    @property
    def rcsb_polymer_entity_name_com(self):
        """Gets the rcsb_polymer_entity_name_com of this CorePolymerEntity.  # noqa: E501


        :return: The rcsb_polymer_entity_name_com of this CorePolymerEntity.  # noqa: E501
        :rtype: list[RcsbPolymerEntityNameCom]
        """
        return self._rcsb_polymer_entity_name_com

    @rcsb_polymer_entity_name_com.setter
    def rcsb_polymer_entity_name_com(self, rcsb_polymer_entity_name_com):
        """Sets the rcsb_polymer_entity_name_com of this CorePolymerEntity.


        :param rcsb_polymer_entity_name_com: The rcsb_polymer_entity_name_com of this CorePolymerEntity.  # noqa: E501
        :type: list[RcsbPolymerEntityNameCom]
        """

        self._rcsb_polymer_entity_name_com = rcsb_polymer_entity_name_com

    @property
    def rcsb_polymer_entity_name_sys(self):
        """Gets the rcsb_polymer_entity_name_sys of this CorePolymerEntity.  # noqa: E501


        :return: The rcsb_polymer_entity_name_sys of this CorePolymerEntity.  # noqa: E501
        :rtype: list[RcsbPolymerEntityNameSys]
        """
        return self._rcsb_polymer_entity_name_sys

    @rcsb_polymer_entity_name_sys.setter
    def rcsb_polymer_entity_name_sys(self, rcsb_polymer_entity_name_sys):
        """Sets the rcsb_polymer_entity_name_sys of this CorePolymerEntity.


        :param rcsb_polymer_entity_name_sys: The rcsb_polymer_entity_name_sys of this CorePolymerEntity.  # noqa: E501
        :type: list[RcsbPolymerEntityNameSys]
        """

        self._rcsb_polymer_entity_name_sys = rcsb_polymer_entity_name_sys

    @property
    def rcsb_related_target_references(self):
        """Gets the rcsb_related_target_references of this CorePolymerEntity.  # noqa: E501


        :return: The rcsb_related_target_references of this CorePolymerEntity.  # noqa: E501
        :rtype: list[RcsbRelatedTargetReferences]
        """
        return self._rcsb_related_target_references

    @rcsb_related_target_references.setter
    def rcsb_related_target_references(self, rcsb_related_target_references):
        """Sets the rcsb_related_target_references of this CorePolymerEntity.


        :param rcsb_related_target_references: The rcsb_related_target_references of this CorePolymerEntity.  # noqa: E501
        :type: list[RcsbRelatedTargetReferences]
        """

        self._rcsb_related_target_references = rcsb_related_target_references

    @property
    def rcsb_target_cofactors(self):
        """Gets the rcsb_target_cofactors of this CorePolymerEntity.  # noqa: E501


        :return: The rcsb_target_cofactors of this CorePolymerEntity.  # noqa: E501
        :rtype: list[RcsbTargetCofactors]
        """
        return self._rcsb_target_cofactors

    @rcsb_target_cofactors.setter
    def rcsb_target_cofactors(self, rcsb_target_cofactors):
        """Sets the rcsb_target_cofactors of this CorePolymerEntity.


        :param rcsb_target_cofactors: The rcsb_target_cofactors of this CorePolymerEntity.  # noqa: E501
        :type: list[RcsbTargetCofactors]
        """

        self._rcsb_target_cofactors = rcsb_target_cofactors

    @property
    def rcsb_id(self):
        """Gets the rcsb_id of this CorePolymerEntity.  # noqa: E501

        A unique identifier for each object in this entity container formed by  an underscore separated concatenation of entry and entity identifiers.  # noqa: E501

        :return: The rcsb_id of this CorePolymerEntity.  # noqa: E501
        :rtype: str
        """
        return self._rcsb_id

    @rcsb_id.setter
    def rcsb_id(self, rcsb_id):
        """Sets the rcsb_id of this CorePolymerEntity.

        A unique identifier for each object in this entity container formed by  an underscore separated concatenation of entry and entity identifiers.  # noqa: E501

        :param rcsb_id: The rcsb_id of this CorePolymerEntity.  # noqa: E501
        :type: str
        """
        if rcsb_id is None:
            raise ValueError("Invalid value for `rcsb_id`, must not be `None`")  # noqa: E501

        self._rcsb_id = rcsb_id

    @property
    def rcsb_polymer_entity_group_membership(self):
        """Gets the rcsb_polymer_entity_group_membership of this CorePolymerEntity.  # noqa: E501


        :return: The rcsb_polymer_entity_group_membership of this CorePolymerEntity.  # noqa: E501
        :rtype: list[RcsbPolymerEntityGroupMembership]
        """
        return self._rcsb_polymer_entity_group_membership

    @rcsb_polymer_entity_group_membership.setter
    def rcsb_polymer_entity_group_membership(self, rcsb_polymer_entity_group_membership):
        """Sets the rcsb_polymer_entity_group_membership of this CorePolymerEntity.


        :param rcsb_polymer_entity_group_membership: The rcsb_polymer_entity_group_membership of this CorePolymerEntity.  # noqa: E501
        :type: list[RcsbPolymerEntityGroupMembership]
        """

        self._rcsb_polymer_entity_group_membership = rcsb_polymer_entity_group_membership

    @property
    def rcsb_genomic_lineage(self):
        """Gets the rcsb_genomic_lineage of this CorePolymerEntity.  # noqa: E501


        :return: The rcsb_genomic_lineage of this CorePolymerEntity.  # noqa: E501
        :rtype: list[RcsbGenomicLineage]
        """
        return self._rcsb_genomic_lineage

    @rcsb_genomic_lineage.setter
    def rcsb_genomic_lineage(self, rcsb_genomic_lineage):
        """Sets the rcsb_genomic_lineage of this CorePolymerEntity.


        :param rcsb_genomic_lineage: The rcsb_genomic_lineage of this CorePolymerEntity.  # noqa: E501
        :type: list[RcsbGenomicLineage]
        """

        self._rcsb_genomic_lineage = rcsb_genomic_lineage

    @property
    def rcsb_membrane_lineage(self):
        """Gets the rcsb_membrane_lineage of this CorePolymerEntity.  # noqa: E501

        Members of the membrane protein classification lineage.  # noqa: E501

        :return: The rcsb_membrane_lineage of this CorePolymerEntity.  # noqa: E501
        :rtype: list[RcsbMembraneLineage]
        """
        return self._rcsb_membrane_lineage

    @rcsb_membrane_lineage.setter
    def rcsb_membrane_lineage(self, rcsb_membrane_lineage):
        """Sets the rcsb_membrane_lineage of this CorePolymerEntity.

        Members of the membrane protein classification lineage.  # noqa: E501

        :param rcsb_membrane_lineage: The rcsb_membrane_lineage of this CorePolymerEntity.  # noqa: E501
        :type: list[RcsbMembraneLineage]
        """

        self._rcsb_membrane_lineage = rcsb_membrane_lineage

    @property
    def rcsb_membrane_lineage_provenance_code(self):
        """Gets the rcsb_membrane_lineage_provenance_code of this CorePolymerEntity.  # noqa: E501

        Mpstruc keyword denotes original annotation, Homology keyword denotes annotation inferred by homology.  # noqa: E501

        :return: The rcsb_membrane_lineage_provenance_code of this CorePolymerEntity.  # noqa: E501
        :rtype: str
        """
        return self._rcsb_membrane_lineage_provenance_code

    @rcsb_membrane_lineage_provenance_code.setter
    def rcsb_membrane_lineage_provenance_code(self, rcsb_membrane_lineage_provenance_code):
        """Sets the rcsb_membrane_lineage_provenance_code of this CorePolymerEntity.

        Mpstruc keyword denotes original annotation, Homology keyword denotes annotation inferred by homology.  # noqa: E501

        :param rcsb_membrane_lineage_provenance_code: The rcsb_membrane_lineage_provenance_code of this CorePolymerEntity.  # noqa: E501
        :type: str
        """
        allowed_values = ["Mpstruc", "Homology"]  # noqa: E501
        if rcsb_membrane_lineage_provenance_code not in allowed_values:
            raise ValueError(
                "Invalid value for `rcsb_membrane_lineage_provenance_code` ({0}), must be one of {1}"  # noqa: E501
                .format(rcsb_membrane_lineage_provenance_code, allowed_values)
            )

        self._rcsb_membrane_lineage_provenance_code = rcsb_membrane_lineage_provenance_code

    @property
    def rcsb_cluster_flexibility(self):
        """Gets the rcsb_cluster_flexibility of this CorePolymerEntity.  # noqa: E501


        :return: The rcsb_cluster_flexibility of this CorePolymerEntity.  # noqa: E501
        :rtype: RcsbClusterFlexibility
        """
        return self._rcsb_cluster_flexibility

    @rcsb_cluster_flexibility.setter
    def rcsb_cluster_flexibility(self, rcsb_cluster_flexibility):
        """Sets the rcsb_cluster_flexibility of this CorePolymerEntity.


        :param rcsb_cluster_flexibility: The rcsb_cluster_flexibility of this CorePolymerEntity.  # noqa: E501
        :type: RcsbClusterFlexibility
        """

        self._rcsb_cluster_flexibility = rcsb_cluster_flexibility

    @property
    def rcsb_latest_revision(self):
        """Gets the rcsb_latest_revision of this CorePolymerEntity.  # noqa: E501


        :return: The rcsb_latest_revision of this CorePolymerEntity.  # noqa: E501
        :rtype: RcsbLatestRevision
        """
        return self._rcsb_latest_revision

    @rcsb_latest_revision.setter
    def rcsb_latest_revision(self, rcsb_latest_revision):
        """Sets the rcsb_latest_revision of this CorePolymerEntity.


        :param rcsb_latest_revision: The rcsb_latest_revision of this CorePolymerEntity.  # noqa: E501
        :type: RcsbLatestRevision
        """

        self._rcsb_latest_revision = rcsb_latest_revision

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CorePolymerEntity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CorePolymerEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
