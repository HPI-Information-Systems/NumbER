# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EntitySrcGen(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expression_system_id': 'str',
        'gene_src_common_name': 'str',
        'gene_src_details': 'str',
        'gene_src_genus': 'str',
        'gene_src_species': 'str',
        'gene_src_strain': 'str',
        'gene_src_tissue': 'str',
        'gene_src_tissue_fraction': 'str',
        'host_org_common_name': 'str',
        'host_org_details': 'str',
        'host_org_genus': 'str',
        'host_org_species': 'str',
        'pdbx_alt_source_flag': 'str',
        'pdbx_beg_seq_num': 'int',
        'pdbx_description': 'str',
        'pdbx_end_seq_num': 'int',
        'pdbx_gene_src_atcc': 'str',
        'pdbx_gene_src_cell': 'str',
        'pdbx_gene_src_cell_line': 'str',
        'pdbx_gene_src_cellular_location': 'str',
        'pdbx_gene_src_fragment': 'str',
        'pdbx_gene_src_gene': 'str',
        'pdbx_gene_src_ncbi_taxonomy_id': 'str',
        'pdbx_gene_src_organ': 'str',
        'pdbx_gene_src_organelle': 'str',
        'pdbx_gene_src_scientific_name': 'str',
        'pdbx_gene_src_variant': 'str',
        'pdbx_host_org_atcc': 'str',
        'pdbx_host_org_cell': 'str',
        'pdbx_host_org_cell_line': 'str',
        'pdbx_host_org_cellular_location': 'str',
        'pdbx_host_org_culture_collection': 'str',
        'pdbx_host_org_gene': 'str',
        'pdbx_host_org_ncbi_taxonomy_id': 'str',
        'pdbx_host_org_organ': 'str',
        'pdbx_host_org_organelle': 'str',
        'pdbx_host_org_scientific_name': 'str',
        'pdbx_host_org_strain': 'str',
        'pdbx_host_org_tissue': 'str',
        'pdbx_host_org_tissue_fraction': 'str',
        'pdbx_host_org_variant': 'str',
        'pdbx_host_org_vector': 'str',
        'pdbx_host_org_vector_type': 'str',
        'pdbx_seq_type': 'str',
        'pdbx_src_id': 'int',
        'plasmid_details': 'str',
        'plasmid_name': 'str'
    }

    attribute_map = {
        'expression_system_id': 'expression_system_id',
        'gene_src_common_name': 'gene_src_common_name',
        'gene_src_details': 'gene_src_details',
        'gene_src_genus': 'gene_src_genus',
        'gene_src_species': 'gene_src_species',
        'gene_src_strain': 'gene_src_strain',
        'gene_src_tissue': 'gene_src_tissue',
        'gene_src_tissue_fraction': 'gene_src_tissue_fraction',
        'host_org_common_name': 'host_org_common_name',
        'host_org_details': 'host_org_details',
        'host_org_genus': 'host_org_genus',
        'host_org_species': 'host_org_species',
        'pdbx_alt_source_flag': 'pdbx_alt_source_flag',
        'pdbx_beg_seq_num': 'pdbx_beg_seq_num',
        'pdbx_description': 'pdbx_description',
        'pdbx_end_seq_num': 'pdbx_end_seq_num',
        'pdbx_gene_src_atcc': 'pdbx_gene_src_atcc',
        'pdbx_gene_src_cell': 'pdbx_gene_src_cell',
        'pdbx_gene_src_cell_line': 'pdbx_gene_src_cell_line',
        'pdbx_gene_src_cellular_location': 'pdbx_gene_src_cellular_location',
        'pdbx_gene_src_fragment': 'pdbx_gene_src_fragment',
        'pdbx_gene_src_gene': 'pdbx_gene_src_gene',
        'pdbx_gene_src_ncbi_taxonomy_id': 'pdbx_gene_src_ncbi_taxonomy_id',
        'pdbx_gene_src_organ': 'pdbx_gene_src_organ',
        'pdbx_gene_src_organelle': 'pdbx_gene_src_organelle',
        'pdbx_gene_src_scientific_name': 'pdbx_gene_src_scientific_name',
        'pdbx_gene_src_variant': 'pdbx_gene_src_variant',
        'pdbx_host_org_atcc': 'pdbx_host_org_atcc',
        'pdbx_host_org_cell': 'pdbx_host_org_cell',
        'pdbx_host_org_cell_line': 'pdbx_host_org_cell_line',
        'pdbx_host_org_cellular_location': 'pdbx_host_org_cellular_location',
        'pdbx_host_org_culture_collection': 'pdbx_host_org_culture_collection',
        'pdbx_host_org_gene': 'pdbx_host_org_gene',
        'pdbx_host_org_ncbi_taxonomy_id': 'pdbx_host_org_ncbi_taxonomy_id',
        'pdbx_host_org_organ': 'pdbx_host_org_organ',
        'pdbx_host_org_organelle': 'pdbx_host_org_organelle',
        'pdbx_host_org_scientific_name': 'pdbx_host_org_scientific_name',
        'pdbx_host_org_strain': 'pdbx_host_org_strain',
        'pdbx_host_org_tissue': 'pdbx_host_org_tissue',
        'pdbx_host_org_tissue_fraction': 'pdbx_host_org_tissue_fraction',
        'pdbx_host_org_variant': 'pdbx_host_org_variant',
        'pdbx_host_org_vector': 'pdbx_host_org_vector',
        'pdbx_host_org_vector_type': 'pdbx_host_org_vector_type',
        'pdbx_seq_type': 'pdbx_seq_type',
        'pdbx_src_id': 'pdbx_src_id',
        'plasmid_details': 'plasmid_details',
        'plasmid_name': 'plasmid_name'
    }

    def __init__(self, expression_system_id=None, gene_src_common_name=None, gene_src_details=None, gene_src_genus=None, gene_src_species=None, gene_src_strain=None, gene_src_tissue=None, gene_src_tissue_fraction=None, host_org_common_name=None, host_org_details=None, host_org_genus=None, host_org_species=None, pdbx_alt_source_flag=None, pdbx_beg_seq_num=None, pdbx_description=None, pdbx_end_seq_num=None, pdbx_gene_src_atcc=None, pdbx_gene_src_cell=None, pdbx_gene_src_cell_line=None, pdbx_gene_src_cellular_location=None, pdbx_gene_src_fragment=None, pdbx_gene_src_gene=None, pdbx_gene_src_ncbi_taxonomy_id=None, pdbx_gene_src_organ=None, pdbx_gene_src_organelle=None, pdbx_gene_src_scientific_name=None, pdbx_gene_src_variant=None, pdbx_host_org_atcc=None, pdbx_host_org_cell=None, pdbx_host_org_cell_line=None, pdbx_host_org_cellular_location=None, pdbx_host_org_culture_collection=None, pdbx_host_org_gene=None, pdbx_host_org_ncbi_taxonomy_id=None, pdbx_host_org_organ=None, pdbx_host_org_organelle=None, pdbx_host_org_scientific_name=None, pdbx_host_org_strain=None, pdbx_host_org_tissue=None, pdbx_host_org_tissue_fraction=None, pdbx_host_org_variant=None, pdbx_host_org_vector=None, pdbx_host_org_vector_type=None, pdbx_seq_type=None, pdbx_src_id=None, plasmid_details=None, plasmid_name=None):  # noqa: E501
        """EntitySrcGen - a model defined in Swagger"""  # noqa: E501
        self._expression_system_id = None
        self._gene_src_common_name = None
        self._gene_src_details = None
        self._gene_src_genus = None
        self._gene_src_species = None
        self._gene_src_strain = None
        self._gene_src_tissue = None
        self._gene_src_tissue_fraction = None
        self._host_org_common_name = None
        self._host_org_details = None
        self._host_org_genus = None
        self._host_org_species = None
        self._pdbx_alt_source_flag = None
        self._pdbx_beg_seq_num = None
        self._pdbx_description = None
        self._pdbx_end_seq_num = None
        self._pdbx_gene_src_atcc = None
        self._pdbx_gene_src_cell = None
        self._pdbx_gene_src_cell_line = None
        self._pdbx_gene_src_cellular_location = None
        self._pdbx_gene_src_fragment = None
        self._pdbx_gene_src_gene = None
        self._pdbx_gene_src_ncbi_taxonomy_id = None
        self._pdbx_gene_src_organ = None
        self._pdbx_gene_src_organelle = None
        self._pdbx_gene_src_scientific_name = None
        self._pdbx_gene_src_variant = None
        self._pdbx_host_org_atcc = None
        self._pdbx_host_org_cell = None
        self._pdbx_host_org_cell_line = None
        self._pdbx_host_org_cellular_location = None
        self._pdbx_host_org_culture_collection = None
        self._pdbx_host_org_gene = None
        self._pdbx_host_org_ncbi_taxonomy_id = None
        self._pdbx_host_org_organ = None
        self._pdbx_host_org_organelle = None
        self._pdbx_host_org_scientific_name = None
        self._pdbx_host_org_strain = None
        self._pdbx_host_org_tissue = None
        self._pdbx_host_org_tissue_fraction = None
        self._pdbx_host_org_variant = None
        self._pdbx_host_org_vector = None
        self._pdbx_host_org_vector_type = None
        self._pdbx_seq_type = None
        self._pdbx_src_id = None
        self._plasmid_details = None
        self._plasmid_name = None
        self.discriminator = None
        if expression_system_id is not None:
            self.expression_system_id = expression_system_id
        if gene_src_common_name is not None:
            self.gene_src_common_name = gene_src_common_name
        if gene_src_details is not None:
            self.gene_src_details = gene_src_details
        if gene_src_genus is not None:
            self.gene_src_genus = gene_src_genus
        if gene_src_species is not None:
            self.gene_src_species = gene_src_species
        if gene_src_strain is not None:
            self.gene_src_strain = gene_src_strain
        if gene_src_tissue is not None:
            self.gene_src_tissue = gene_src_tissue
        if gene_src_tissue_fraction is not None:
            self.gene_src_tissue_fraction = gene_src_tissue_fraction
        if host_org_common_name is not None:
            self.host_org_common_name = host_org_common_name
        if host_org_details is not None:
            self.host_org_details = host_org_details
        if host_org_genus is not None:
            self.host_org_genus = host_org_genus
        if host_org_species is not None:
            self.host_org_species = host_org_species
        if pdbx_alt_source_flag is not None:
            self.pdbx_alt_source_flag = pdbx_alt_source_flag
        if pdbx_beg_seq_num is not None:
            self.pdbx_beg_seq_num = pdbx_beg_seq_num
        if pdbx_description is not None:
            self.pdbx_description = pdbx_description
        if pdbx_end_seq_num is not None:
            self.pdbx_end_seq_num = pdbx_end_seq_num
        if pdbx_gene_src_atcc is not None:
            self.pdbx_gene_src_atcc = pdbx_gene_src_atcc
        if pdbx_gene_src_cell is not None:
            self.pdbx_gene_src_cell = pdbx_gene_src_cell
        if pdbx_gene_src_cell_line is not None:
            self.pdbx_gene_src_cell_line = pdbx_gene_src_cell_line
        if pdbx_gene_src_cellular_location is not None:
            self.pdbx_gene_src_cellular_location = pdbx_gene_src_cellular_location
        if pdbx_gene_src_fragment is not None:
            self.pdbx_gene_src_fragment = pdbx_gene_src_fragment
        if pdbx_gene_src_gene is not None:
            self.pdbx_gene_src_gene = pdbx_gene_src_gene
        if pdbx_gene_src_ncbi_taxonomy_id is not None:
            self.pdbx_gene_src_ncbi_taxonomy_id = pdbx_gene_src_ncbi_taxonomy_id
        if pdbx_gene_src_organ is not None:
            self.pdbx_gene_src_organ = pdbx_gene_src_organ
        if pdbx_gene_src_organelle is not None:
            self.pdbx_gene_src_organelle = pdbx_gene_src_organelle
        if pdbx_gene_src_scientific_name is not None:
            self.pdbx_gene_src_scientific_name = pdbx_gene_src_scientific_name
        if pdbx_gene_src_variant is not None:
            self.pdbx_gene_src_variant = pdbx_gene_src_variant
        if pdbx_host_org_atcc is not None:
            self.pdbx_host_org_atcc = pdbx_host_org_atcc
        if pdbx_host_org_cell is not None:
            self.pdbx_host_org_cell = pdbx_host_org_cell
        if pdbx_host_org_cell_line is not None:
            self.pdbx_host_org_cell_line = pdbx_host_org_cell_line
        if pdbx_host_org_cellular_location is not None:
            self.pdbx_host_org_cellular_location = pdbx_host_org_cellular_location
        if pdbx_host_org_culture_collection is not None:
            self.pdbx_host_org_culture_collection = pdbx_host_org_culture_collection
        if pdbx_host_org_gene is not None:
            self.pdbx_host_org_gene = pdbx_host_org_gene
        if pdbx_host_org_ncbi_taxonomy_id is not None:
            self.pdbx_host_org_ncbi_taxonomy_id = pdbx_host_org_ncbi_taxonomy_id
        if pdbx_host_org_organ is not None:
            self.pdbx_host_org_organ = pdbx_host_org_organ
        if pdbx_host_org_organelle is not None:
            self.pdbx_host_org_organelle = pdbx_host_org_organelle
        if pdbx_host_org_scientific_name is not None:
            self.pdbx_host_org_scientific_name = pdbx_host_org_scientific_name
        if pdbx_host_org_strain is not None:
            self.pdbx_host_org_strain = pdbx_host_org_strain
        if pdbx_host_org_tissue is not None:
            self.pdbx_host_org_tissue = pdbx_host_org_tissue
        if pdbx_host_org_tissue_fraction is not None:
            self.pdbx_host_org_tissue_fraction = pdbx_host_org_tissue_fraction
        if pdbx_host_org_variant is not None:
            self.pdbx_host_org_variant = pdbx_host_org_variant
        if pdbx_host_org_vector is not None:
            self.pdbx_host_org_vector = pdbx_host_org_vector
        if pdbx_host_org_vector_type is not None:
            self.pdbx_host_org_vector_type = pdbx_host_org_vector_type
        if pdbx_seq_type is not None:
            self.pdbx_seq_type = pdbx_seq_type
        self.pdbx_src_id = pdbx_src_id
        if plasmid_details is not None:
            self.plasmid_details = plasmid_details
        if plasmid_name is not None:
            self.plasmid_name = plasmid_name

    @property
    def expression_system_id(self):
        """Gets the expression_system_id of this EntitySrcGen.  # noqa: E501

        A unique identifier for the expression system. This  should be extracted from a local list of expression  systems.  # noqa: E501

        :return: The expression_system_id of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._expression_system_id

    @expression_system_id.setter
    def expression_system_id(self, expression_system_id):
        """Sets the expression_system_id of this EntitySrcGen.

        A unique identifier for the expression system. This  should be extracted from a local list of expression  systems.  # noqa: E501

        :param expression_system_id: The expression_system_id of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._expression_system_id = expression_system_id

    @property
    def gene_src_common_name(self):
        """Gets the gene_src_common_name of this EntitySrcGen.  # noqa: E501

        The common name of the natural organism from which the gene was  obtained.  # noqa: E501

        :return: The gene_src_common_name of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._gene_src_common_name

    @gene_src_common_name.setter
    def gene_src_common_name(self, gene_src_common_name):
        """Sets the gene_src_common_name of this EntitySrcGen.

        The common name of the natural organism from which the gene was  obtained.  # noqa: E501

        :param gene_src_common_name: The gene_src_common_name of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._gene_src_common_name = gene_src_common_name

    @property
    def gene_src_details(self):
        """Gets the gene_src_details of this EntitySrcGen.  # noqa: E501

        A description of special aspects of the natural organism from  which the gene was obtained.  # noqa: E501

        :return: The gene_src_details of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._gene_src_details

    @gene_src_details.setter
    def gene_src_details(self, gene_src_details):
        """Sets the gene_src_details of this EntitySrcGen.

        A description of special aspects of the natural organism from  which the gene was obtained.  # noqa: E501

        :param gene_src_details: The gene_src_details of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._gene_src_details = gene_src_details

    @property
    def gene_src_genus(self):
        """Gets the gene_src_genus of this EntitySrcGen.  # noqa: E501

        The genus of the natural organism from which the gene was  obtained.  # noqa: E501

        :return: The gene_src_genus of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._gene_src_genus

    @gene_src_genus.setter
    def gene_src_genus(self, gene_src_genus):
        """Sets the gene_src_genus of this EntitySrcGen.

        The genus of the natural organism from which the gene was  obtained.  # noqa: E501

        :param gene_src_genus: The gene_src_genus of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._gene_src_genus = gene_src_genus

    @property
    def gene_src_species(self):
        """Gets the gene_src_species of this EntitySrcGen.  # noqa: E501

        The species of the natural organism from which the gene was  obtained.  # noqa: E501

        :return: The gene_src_species of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._gene_src_species

    @gene_src_species.setter
    def gene_src_species(self, gene_src_species):
        """Sets the gene_src_species of this EntitySrcGen.

        The species of the natural organism from which the gene was  obtained.  # noqa: E501

        :param gene_src_species: The gene_src_species of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._gene_src_species = gene_src_species

    @property
    def gene_src_strain(self):
        """Gets the gene_src_strain of this EntitySrcGen.  # noqa: E501

        The strain of the natural organism from which the gene was  obtained, if relevant.  # noqa: E501

        :return: The gene_src_strain of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._gene_src_strain

    @gene_src_strain.setter
    def gene_src_strain(self, gene_src_strain):
        """Sets the gene_src_strain of this EntitySrcGen.

        The strain of the natural organism from which the gene was  obtained, if relevant.  # noqa: E501

        :param gene_src_strain: The gene_src_strain of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._gene_src_strain = gene_src_strain

    @property
    def gene_src_tissue(self):
        """Gets the gene_src_tissue of this EntitySrcGen.  # noqa: E501

        The tissue of the natural organism from which the gene was  obtained.  # noqa: E501

        :return: The gene_src_tissue of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._gene_src_tissue

    @gene_src_tissue.setter
    def gene_src_tissue(self, gene_src_tissue):
        """Sets the gene_src_tissue of this EntitySrcGen.

        The tissue of the natural organism from which the gene was  obtained.  # noqa: E501

        :param gene_src_tissue: The gene_src_tissue of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._gene_src_tissue = gene_src_tissue

    @property
    def gene_src_tissue_fraction(self):
        """Gets the gene_src_tissue_fraction of this EntitySrcGen.  # noqa: E501

        The subcellular fraction of the tissue of the natural organism  from which the gene was obtained.  # noqa: E501

        :return: The gene_src_tissue_fraction of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._gene_src_tissue_fraction

    @gene_src_tissue_fraction.setter
    def gene_src_tissue_fraction(self, gene_src_tissue_fraction):
        """Sets the gene_src_tissue_fraction of this EntitySrcGen.

        The subcellular fraction of the tissue of the natural organism  from which the gene was obtained.  # noqa: E501

        :param gene_src_tissue_fraction: The gene_src_tissue_fraction of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._gene_src_tissue_fraction = gene_src_tissue_fraction

    @property
    def host_org_common_name(self):
        """Gets the host_org_common_name of this EntitySrcGen.  # noqa: E501

        The common name of the organism that served as host for the  production of the entity.  Where full details of the protein  production are available it would be expected that this item  be derived from _entity_src_gen_express.host_org_common_name  or via _entity_src_gen_express.host_org_tax_id  # noqa: E501

        :return: The host_org_common_name of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._host_org_common_name

    @host_org_common_name.setter
    def host_org_common_name(self, host_org_common_name):
        """Sets the host_org_common_name of this EntitySrcGen.

        The common name of the organism that served as host for the  production of the entity.  Where full details of the protein  production are available it would be expected that this item  be derived from _entity_src_gen_express.host_org_common_name  or via _entity_src_gen_express.host_org_tax_id  # noqa: E501

        :param host_org_common_name: The host_org_common_name of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._host_org_common_name = host_org_common_name

    @property
    def host_org_details(self):
        """Gets the host_org_details of this EntitySrcGen.  # noqa: E501

        A description of special aspects of the organism that served as  host for the production of the entity. Where full details of  the protein production are available it would be expected that  this item would derived from _entity_src_gen_express.host_org_details  # noqa: E501

        :return: The host_org_details of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._host_org_details

    @host_org_details.setter
    def host_org_details(self, host_org_details):
        """Sets the host_org_details of this EntitySrcGen.

        A description of special aspects of the organism that served as  host for the production of the entity. Where full details of  the protein production are available it would be expected that  this item would derived from _entity_src_gen_express.host_org_details  # noqa: E501

        :param host_org_details: The host_org_details of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._host_org_details = host_org_details

    @property
    def host_org_genus(self):
        """Gets the host_org_genus of this EntitySrcGen.  # noqa: E501

        The genus of the organism that served as host for the production  of the entity.  # noqa: E501

        :return: The host_org_genus of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._host_org_genus

    @host_org_genus.setter
    def host_org_genus(self, host_org_genus):
        """Sets the host_org_genus of this EntitySrcGen.

        The genus of the organism that served as host for the production  of the entity.  # noqa: E501

        :param host_org_genus: The host_org_genus of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._host_org_genus = host_org_genus

    @property
    def host_org_species(self):
        """Gets the host_org_species of this EntitySrcGen.  # noqa: E501

        The species of the organism that served as host for the  production of the entity.  # noqa: E501

        :return: The host_org_species of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._host_org_species

    @host_org_species.setter
    def host_org_species(self, host_org_species):
        """Sets the host_org_species of this EntitySrcGen.

        The species of the organism that served as host for the  production of the entity.  # noqa: E501

        :param host_org_species: The host_org_species of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._host_org_species = host_org_species

    @property
    def pdbx_alt_source_flag(self):
        """Gets the pdbx_alt_source_flag of this EntitySrcGen.  # noqa: E501

        This data item identifies cases in which an alternative source  modeled.  # noqa: E501

        :return: The pdbx_alt_source_flag of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_alt_source_flag

    @pdbx_alt_source_flag.setter
    def pdbx_alt_source_flag(self, pdbx_alt_source_flag):
        """Sets the pdbx_alt_source_flag of this EntitySrcGen.

        This data item identifies cases in which an alternative source  modeled.  # noqa: E501

        :param pdbx_alt_source_flag: The pdbx_alt_source_flag of this EntitySrcGen.  # noqa: E501
        :type: str
        """
        allowed_values = ["model", "sample"]  # noqa: E501
        if pdbx_alt_source_flag not in allowed_values:
            raise ValueError(
                "Invalid value for `pdbx_alt_source_flag` ({0}), must be one of {1}"  # noqa: E501
                .format(pdbx_alt_source_flag, allowed_values)
            )

        self._pdbx_alt_source_flag = pdbx_alt_source_flag

    @property
    def pdbx_beg_seq_num(self):
        """Gets the pdbx_beg_seq_num of this EntitySrcGen.  # noqa: E501

        The beginning polymer sequence position for the polymer section corresponding  to this source.   A reference to the sequence position in the entity_poly category.  # noqa: E501

        :return: The pdbx_beg_seq_num of this EntitySrcGen.  # noqa: E501
        :rtype: int
        """
        return self._pdbx_beg_seq_num

    @pdbx_beg_seq_num.setter
    def pdbx_beg_seq_num(self, pdbx_beg_seq_num):
        """Sets the pdbx_beg_seq_num of this EntitySrcGen.

        The beginning polymer sequence position for the polymer section corresponding  to this source.   A reference to the sequence position in the entity_poly category.  # noqa: E501

        :param pdbx_beg_seq_num: The pdbx_beg_seq_num of this EntitySrcGen.  # noqa: E501
        :type: int
        """

        self._pdbx_beg_seq_num = pdbx_beg_seq_num

    @property
    def pdbx_description(self):
        """Gets the pdbx_description of this EntitySrcGen.  # noqa: E501

        Information on the source which is not given elsewhere.  # noqa: E501

        :return: The pdbx_description of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_description

    @pdbx_description.setter
    def pdbx_description(self, pdbx_description):
        """Sets the pdbx_description of this EntitySrcGen.

        Information on the source which is not given elsewhere.  # noqa: E501

        :param pdbx_description: The pdbx_description of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._pdbx_description = pdbx_description

    @property
    def pdbx_end_seq_num(self):
        """Gets the pdbx_end_seq_num of this EntitySrcGen.  # noqa: E501

        The ending polymer sequence position for the polymer section corresponding  to this source.   A reference to the sequence position in the entity_poly category.  # noqa: E501

        :return: The pdbx_end_seq_num of this EntitySrcGen.  # noqa: E501
        :rtype: int
        """
        return self._pdbx_end_seq_num

    @pdbx_end_seq_num.setter
    def pdbx_end_seq_num(self, pdbx_end_seq_num):
        """Sets the pdbx_end_seq_num of this EntitySrcGen.

        The ending polymer sequence position for the polymer section corresponding  to this source.   A reference to the sequence position in the entity_poly category.  # noqa: E501

        :param pdbx_end_seq_num: The pdbx_end_seq_num of this EntitySrcGen.  # noqa: E501
        :type: int
        """

        self._pdbx_end_seq_num = pdbx_end_seq_num

    @property
    def pdbx_gene_src_atcc(self):
        """Gets the pdbx_gene_src_atcc of this EntitySrcGen.  # noqa: E501

        American Type Culture Collection tissue culture number.  # noqa: E501

        :return: The pdbx_gene_src_atcc of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_gene_src_atcc

    @pdbx_gene_src_atcc.setter
    def pdbx_gene_src_atcc(self, pdbx_gene_src_atcc):
        """Sets the pdbx_gene_src_atcc of this EntitySrcGen.

        American Type Culture Collection tissue culture number.  # noqa: E501

        :param pdbx_gene_src_atcc: The pdbx_gene_src_atcc of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._pdbx_gene_src_atcc = pdbx_gene_src_atcc

    @property
    def pdbx_gene_src_cell(self):
        """Gets the pdbx_gene_src_cell of this EntitySrcGen.  # noqa: E501

        Cell type.  # noqa: E501

        :return: The pdbx_gene_src_cell of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_gene_src_cell

    @pdbx_gene_src_cell.setter
    def pdbx_gene_src_cell(self, pdbx_gene_src_cell):
        """Sets the pdbx_gene_src_cell of this EntitySrcGen.

        Cell type.  # noqa: E501

        :param pdbx_gene_src_cell: The pdbx_gene_src_cell of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._pdbx_gene_src_cell = pdbx_gene_src_cell

    @property
    def pdbx_gene_src_cell_line(self):
        """Gets the pdbx_gene_src_cell_line of this EntitySrcGen.  # noqa: E501

        The specific line of cells.  # noqa: E501

        :return: The pdbx_gene_src_cell_line of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_gene_src_cell_line

    @pdbx_gene_src_cell_line.setter
    def pdbx_gene_src_cell_line(self, pdbx_gene_src_cell_line):
        """Sets the pdbx_gene_src_cell_line of this EntitySrcGen.

        The specific line of cells.  # noqa: E501

        :param pdbx_gene_src_cell_line: The pdbx_gene_src_cell_line of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._pdbx_gene_src_cell_line = pdbx_gene_src_cell_line

    @property
    def pdbx_gene_src_cellular_location(self):
        """Gets the pdbx_gene_src_cellular_location of this EntitySrcGen.  # noqa: E501

        Identifies the location inside (or outside) the cell.  # noqa: E501

        :return: The pdbx_gene_src_cellular_location of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_gene_src_cellular_location

    @pdbx_gene_src_cellular_location.setter
    def pdbx_gene_src_cellular_location(self, pdbx_gene_src_cellular_location):
        """Sets the pdbx_gene_src_cellular_location of this EntitySrcGen.

        Identifies the location inside (or outside) the cell.  # noqa: E501

        :param pdbx_gene_src_cellular_location: The pdbx_gene_src_cellular_location of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._pdbx_gene_src_cellular_location = pdbx_gene_src_cellular_location

    @property
    def pdbx_gene_src_fragment(self):
        """Gets the pdbx_gene_src_fragment of this EntitySrcGen.  # noqa: E501

        A domain or fragment of the molecule.  # noqa: E501

        :return: The pdbx_gene_src_fragment of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_gene_src_fragment

    @pdbx_gene_src_fragment.setter
    def pdbx_gene_src_fragment(self, pdbx_gene_src_fragment):
        """Sets the pdbx_gene_src_fragment of this EntitySrcGen.

        A domain or fragment of the molecule.  # noqa: E501

        :param pdbx_gene_src_fragment: The pdbx_gene_src_fragment of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._pdbx_gene_src_fragment = pdbx_gene_src_fragment

    @property
    def pdbx_gene_src_gene(self):
        """Gets the pdbx_gene_src_gene of this EntitySrcGen.  # noqa: E501

        Identifies the gene.  # noqa: E501

        :return: The pdbx_gene_src_gene of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_gene_src_gene

    @pdbx_gene_src_gene.setter
    def pdbx_gene_src_gene(self, pdbx_gene_src_gene):
        """Sets the pdbx_gene_src_gene of this EntitySrcGen.

        Identifies the gene.  # noqa: E501

        :param pdbx_gene_src_gene: The pdbx_gene_src_gene of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._pdbx_gene_src_gene = pdbx_gene_src_gene

    @property
    def pdbx_gene_src_ncbi_taxonomy_id(self):
        """Gets the pdbx_gene_src_ncbi_taxonomy_id of this EntitySrcGen.  # noqa: E501

        NCBI Taxonomy identifier for the gene source organism.   Reference:   Wheeler DL, Chappey C, Lash AE, Leipe DD, Madden TL, Schuler GD,  Tatusova TA, Rapp BA (2000). Database resources of the National  Center for Biotechnology Information. Nucleic Acids Res 2000 Jan  1;28(1):10-4   Benson DA, Karsch-Mizrachi I, Lipman DJ, Ostell J, Rapp BA,  Wheeler DL (2000). GenBank. Nucleic Acids Res 2000 Jan 1;28(1):15-18.  # noqa: E501

        :return: The pdbx_gene_src_ncbi_taxonomy_id of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_gene_src_ncbi_taxonomy_id

    @pdbx_gene_src_ncbi_taxonomy_id.setter
    def pdbx_gene_src_ncbi_taxonomy_id(self, pdbx_gene_src_ncbi_taxonomy_id):
        """Sets the pdbx_gene_src_ncbi_taxonomy_id of this EntitySrcGen.

        NCBI Taxonomy identifier for the gene source organism.   Reference:   Wheeler DL, Chappey C, Lash AE, Leipe DD, Madden TL, Schuler GD,  Tatusova TA, Rapp BA (2000). Database resources of the National  Center for Biotechnology Information. Nucleic Acids Res 2000 Jan  1;28(1):10-4   Benson DA, Karsch-Mizrachi I, Lipman DJ, Ostell J, Rapp BA,  Wheeler DL (2000). GenBank. Nucleic Acids Res 2000 Jan 1;28(1):15-18.  # noqa: E501

        :param pdbx_gene_src_ncbi_taxonomy_id: The pdbx_gene_src_ncbi_taxonomy_id of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._pdbx_gene_src_ncbi_taxonomy_id = pdbx_gene_src_ncbi_taxonomy_id

    @property
    def pdbx_gene_src_organ(self):
        """Gets the pdbx_gene_src_organ of this EntitySrcGen.  # noqa: E501

        Organized group of tissues that carries on a specialized function.  # noqa: E501

        :return: The pdbx_gene_src_organ of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_gene_src_organ

    @pdbx_gene_src_organ.setter
    def pdbx_gene_src_organ(self, pdbx_gene_src_organ):
        """Sets the pdbx_gene_src_organ of this EntitySrcGen.

        Organized group of tissues that carries on a specialized function.  # noqa: E501

        :param pdbx_gene_src_organ: The pdbx_gene_src_organ of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._pdbx_gene_src_organ = pdbx_gene_src_organ

    @property
    def pdbx_gene_src_organelle(self):
        """Gets the pdbx_gene_src_organelle of this EntitySrcGen.  # noqa: E501

        Organized structure within cell.  # noqa: E501

        :return: The pdbx_gene_src_organelle of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_gene_src_organelle

    @pdbx_gene_src_organelle.setter
    def pdbx_gene_src_organelle(self, pdbx_gene_src_organelle):
        """Sets the pdbx_gene_src_organelle of this EntitySrcGen.

        Organized structure within cell.  # noqa: E501

        :param pdbx_gene_src_organelle: The pdbx_gene_src_organelle of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._pdbx_gene_src_organelle = pdbx_gene_src_organelle

    @property
    def pdbx_gene_src_scientific_name(self):
        """Gets the pdbx_gene_src_scientific_name of this EntitySrcGen.  # noqa: E501

        Scientific name of the organism.  # noqa: E501

        :return: The pdbx_gene_src_scientific_name of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_gene_src_scientific_name

    @pdbx_gene_src_scientific_name.setter
    def pdbx_gene_src_scientific_name(self, pdbx_gene_src_scientific_name):
        """Sets the pdbx_gene_src_scientific_name of this EntitySrcGen.

        Scientific name of the organism.  # noqa: E501

        :param pdbx_gene_src_scientific_name: The pdbx_gene_src_scientific_name of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._pdbx_gene_src_scientific_name = pdbx_gene_src_scientific_name

    @property
    def pdbx_gene_src_variant(self):
        """Gets the pdbx_gene_src_variant of this EntitySrcGen.  # noqa: E501

        Identifies the variant.  # noqa: E501

        :return: The pdbx_gene_src_variant of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_gene_src_variant

    @pdbx_gene_src_variant.setter
    def pdbx_gene_src_variant(self, pdbx_gene_src_variant):
        """Sets the pdbx_gene_src_variant of this EntitySrcGen.

        Identifies the variant.  # noqa: E501

        :param pdbx_gene_src_variant: The pdbx_gene_src_variant of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._pdbx_gene_src_variant = pdbx_gene_src_variant

    @property
    def pdbx_host_org_atcc(self):
        """Gets the pdbx_host_org_atcc of this EntitySrcGen.  # noqa: E501

        Americal Tissue Culture Collection of the expression system. Where  full details of the protein production are available it would  be expected that this item  would be derived from  _entity_src_gen_express.host_org_culture_collection  # noqa: E501

        :return: The pdbx_host_org_atcc of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_host_org_atcc

    @pdbx_host_org_atcc.setter
    def pdbx_host_org_atcc(self, pdbx_host_org_atcc):
        """Sets the pdbx_host_org_atcc of this EntitySrcGen.

        Americal Tissue Culture Collection of the expression system. Where  full details of the protein production are available it would  be expected that this item  would be derived from  _entity_src_gen_express.host_org_culture_collection  # noqa: E501

        :param pdbx_host_org_atcc: The pdbx_host_org_atcc of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._pdbx_host_org_atcc = pdbx_host_org_atcc

    @property
    def pdbx_host_org_cell(self):
        """Gets the pdbx_host_org_cell of this EntitySrcGen.  # noqa: E501

        Cell type from which the gene is derived. Where  entity.target_id is provided this should be derived from  details of the target.  # noqa: E501

        :return: The pdbx_host_org_cell of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_host_org_cell

    @pdbx_host_org_cell.setter
    def pdbx_host_org_cell(self, pdbx_host_org_cell):
        """Sets the pdbx_host_org_cell of this EntitySrcGen.

        Cell type from which the gene is derived. Where  entity.target_id is provided this should be derived from  details of the target.  # noqa: E501

        :param pdbx_host_org_cell: The pdbx_host_org_cell of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._pdbx_host_org_cell = pdbx_host_org_cell

    @property
    def pdbx_host_org_cell_line(self):
        """Gets the pdbx_host_org_cell_line of this EntitySrcGen.  # noqa: E501

        A specific line of cells used as the expression system. Where  full details of the protein production are available it would  be expected that this item would be derived from  entity_src_gen_express.host_org_cell_line  # noqa: E501

        :return: The pdbx_host_org_cell_line of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_host_org_cell_line

    @pdbx_host_org_cell_line.setter
    def pdbx_host_org_cell_line(self, pdbx_host_org_cell_line):
        """Sets the pdbx_host_org_cell_line of this EntitySrcGen.

        A specific line of cells used as the expression system. Where  full details of the protein production are available it would  be expected that this item would be derived from  entity_src_gen_express.host_org_cell_line  # noqa: E501

        :param pdbx_host_org_cell_line: The pdbx_host_org_cell_line of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._pdbx_host_org_cell_line = pdbx_host_org_cell_line

    @property
    def pdbx_host_org_cellular_location(self):
        """Gets the pdbx_host_org_cellular_location of this EntitySrcGen.  # noqa: E501

        Identifies the location inside (or outside) the cell which  expressed the molecule.  # noqa: E501

        :return: The pdbx_host_org_cellular_location of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_host_org_cellular_location

    @pdbx_host_org_cellular_location.setter
    def pdbx_host_org_cellular_location(self, pdbx_host_org_cellular_location):
        """Sets the pdbx_host_org_cellular_location of this EntitySrcGen.

        Identifies the location inside (or outside) the cell which  expressed the molecule.  # noqa: E501

        :param pdbx_host_org_cellular_location: The pdbx_host_org_cellular_location of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._pdbx_host_org_cellular_location = pdbx_host_org_cellular_location

    @property
    def pdbx_host_org_culture_collection(self):
        """Gets the pdbx_host_org_culture_collection of this EntitySrcGen.  # noqa: E501

        Culture collection of the expression system. Where  full details of the protein production are available it would  be expected that this item  would be derived somehwere, but  exactly where is not clear.  # noqa: E501

        :return: The pdbx_host_org_culture_collection of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_host_org_culture_collection

    @pdbx_host_org_culture_collection.setter
    def pdbx_host_org_culture_collection(self, pdbx_host_org_culture_collection):
        """Sets the pdbx_host_org_culture_collection of this EntitySrcGen.

        Culture collection of the expression system. Where  full details of the protein production are available it would  be expected that this item  would be derived somehwere, but  exactly where is not clear.  # noqa: E501

        :param pdbx_host_org_culture_collection: The pdbx_host_org_culture_collection of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._pdbx_host_org_culture_collection = pdbx_host_org_culture_collection

    @property
    def pdbx_host_org_gene(self):
        """Gets the pdbx_host_org_gene of this EntitySrcGen.  # noqa: E501

        Specific gene which expressed the molecule.  # noqa: E501

        :return: The pdbx_host_org_gene of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_host_org_gene

    @pdbx_host_org_gene.setter
    def pdbx_host_org_gene(self, pdbx_host_org_gene):
        """Sets the pdbx_host_org_gene of this EntitySrcGen.

        Specific gene which expressed the molecule.  # noqa: E501

        :param pdbx_host_org_gene: The pdbx_host_org_gene of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._pdbx_host_org_gene = pdbx_host_org_gene

    @property
    def pdbx_host_org_ncbi_taxonomy_id(self):
        """Gets the pdbx_host_org_ncbi_taxonomy_id of this EntitySrcGen.  # noqa: E501

        NCBI Taxonomy identifier for the expression system organism.   Reference:   Wheeler DL, Chappey C, Lash AE, Leipe DD, Madden TL, Schuler GD,  Tatusova TA, Rapp BA (2000). Database resources of the National  Center for Biotechnology Information. Nucleic Acids Res 2000 Jan  1;28(1):10-4   Benson DA, Karsch-Mizrachi I, Lipman DJ, Ostell J, Rapp BA,  Wheeler DL (2000). GenBank. Nucleic Acids Res 2000 Jan 1;28(1):15-18.  # noqa: E501

        :return: The pdbx_host_org_ncbi_taxonomy_id of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_host_org_ncbi_taxonomy_id

    @pdbx_host_org_ncbi_taxonomy_id.setter
    def pdbx_host_org_ncbi_taxonomy_id(self, pdbx_host_org_ncbi_taxonomy_id):
        """Sets the pdbx_host_org_ncbi_taxonomy_id of this EntitySrcGen.

        NCBI Taxonomy identifier for the expression system organism.   Reference:   Wheeler DL, Chappey C, Lash AE, Leipe DD, Madden TL, Schuler GD,  Tatusova TA, Rapp BA (2000). Database resources of the National  Center for Biotechnology Information. Nucleic Acids Res 2000 Jan  1;28(1):10-4   Benson DA, Karsch-Mizrachi I, Lipman DJ, Ostell J, Rapp BA,  Wheeler DL (2000). GenBank. Nucleic Acids Res 2000 Jan 1;28(1):15-18.  # noqa: E501

        :param pdbx_host_org_ncbi_taxonomy_id: The pdbx_host_org_ncbi_taxonomy_id of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._pdbx_host_org_ncbi_taxonomy_id = pdbx_host_org_ncbi_taxonomy_id

    @property
    def pdbx_host_org_organ(self):
        """Gets the pdbx_host_org_organ of this EntitySrcGen.  # noqa: E501

        Specific organ which expressed the molecule.  # noqa: E501

        :return: The pdbx_host_org_organ of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_host_org_organ

    @pdbx_host_org_organ.setter
    def pdbx_host_org_organ(self, pdbx_host_org_organ):
        """Sets the pdbx_host_org_organ of this EntitySrcGen.

        Specific organ which expressed the molecule.  # noqa: E501

        :param pdbx_host_org_organ: The pdbx_host_org_organ of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._pdbx_host_org_organ = pdbx_host_org_organ

    @property
    def pdbx_host_org_organelle(self):
        """Gets the pdbx_host_org_organelle of this EntitySrcGen.  # noqa: E501

        Specific organelle which expressed the molecule.  # noqa: E501

        :return: The pdbx_host_org_organelle of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_host_org_organelle

    @pdbx_host_org_organelle.setter
    def pdbx_host_org_organelle(self, pdbx_host_org_organelle):
        """Sets the pdbx_host_org_organelle of this EntitySrcGen.

        Specific organelle which expressed the molecule.  # noqa: E501

        :param pdbx_host_org_organelle: The pdbx_host_org_organelle of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._pdbx_host_org_organelle = pdbx_host_org_organelle

    @property
    def pdbx_host_org_scientific_name(self):
        """Gets the pdbx_host_org_scientific_name of this EntitySrcGen.  # noqa: E501

        The scientific name of the organism that served as host for the  production of the entity. Where full details of the protein  production are available it would be expected that this item  would be derived from _entity_src_gen_express.host_org_scientific_name  or via _entity_src_gen_express.host_org_tax_id  # noqa: E501

        :return: The pdbx_host_org_scientific_name of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_host_org_scientific_name

    @pdbx_host_org_scientific_name.setter
    def pdbx_host_org_scientific_name(self, pdbx_host_org_scientific_name):
        """Sets the pdbx_host_org_scientific_name of this EntitySrcGen.

        The scientific name of the organism that served as host for the  production of the entity. Where full details of the protein  production are available it would be expected that this item  would be derived from _entity_src_gen_express.host_org_scientific_name  or via _entity_src_gen_express.host_org_tax_id  # noqa: E501

        :param pdbx_host_org_scientific_name: The pdbx_host_org_scientific_name of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._pdbx_host_org_scientific_name = pdbx_host_org_scientific_name

    @property
    def pdbx_host_org_strain(self):
        """Gets the pdbx_host_org_strain of this EntitySrcGen.  # noqa: E501

        The strain of the organism in which the entity was expressed.  # noqa: E501

        :return: The pdbx_host_org_strain of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_host_org_strain

    @pdbx_host_org_strain.setter
    def pdbx_host_org_strain(self, pdbx_host_org_strain):
        """Sets the pdbx_host_org_strain of this EntitySrcGen.

        The strain of the organism in which the entity was expressed.  # noqa: E501

        :param pdbx_host_org_strain: The pdbx_host_org_strain of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._pdbx_host_org_strain = pdbx_host_org_strain

    @property
    def pdbx_host_org_tissue(self):
        """Gets the pdbx_host_org_tissue of this EntitySrcGen.  # noqa: E501

        The specific tissue which expressed the molecule. Where full details  of the protein production are available it would be expected that this  item would be derived from _entity_src_gen_express.host_org_tissue  # noqa: E501

        :return: The pdbx_host_org_tissue of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_host_org_tissue

    @pdbx_host_org_tissue.setter
    def pdbx_host_org_tissue(self, pdbx_host_org_tissue):
        """Sets the pdbx_host_org_tissue of this EntitySrcGen.

        The specific tissue which expressed the molecule. Where full details  of the protein production are available it would be expected that this  item would be derived from _entity_src_gen_express.host_org_tissue  # noqa: E501

        :param pdbx_host_org_tissue: The pdbx_host_org_tissue of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._pdbx_host_org_tissue = pdbx_host_org_tissue

    @property
    def pdbx_host_org_tissue_fraction(self):
        """Gets the pdbx_host_org_tissue_fraction of this EntitySrcGen.  # noqa: E501

        The fraction of the tissue which expressed the molecule.  # noqa: E501

        :return: The pdbx_host_org_tissue_fraction of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_host_org_tissue_fraction

    @pdbx_host_org_tissue_fraction.setter
    def pdbx_host_org_tissue_fraction(self, pdbx_host_org_tissue_fraction):
        """Sets the pdbx_host_org_tissue_fraction of this EntitySrcGen.

        The fraction of the tissue which expressed the molecule.  # noqa: E501

        :param pdbx_host_org_tissue_fraction: The pdbx_host_org_tissue_fraction of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._pdbx_host_org_tissue_fraction = pdbx_host_org_tissue_fraction

    @property
    def pdbx_host_org_variant(self):
        """Gets the pdbx_host_org_variant of this EntitySrcGen.  # noqa: E501

        Variant of the organism used as the expression system. Where  full details of the protein production are available it would  be expected that this item be derived from  entity_src_gen_express.host_org_variant or via  _entity_src_gen_express.host_org_tax_id  # noqa: E501

        :return: The pdbx_host_org_variant of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_host_org_variant

    @pdbx_host_org_variant.setter
    def pdbx_host_org_variant(self, pdbx_host_org_variant):
        """Sets the pdbx_host_org_variant of this EntitySrcGen.

        Variant of the organism used as the expression system. Where  full details of the protein production are available it would  be expected that this item be derived from  entity_src_gen_express.host_org_variant or via  _entity_src_gen_express.host_org_tax_id  # noqa: E501

        :param pdbx_host_org_variant: The pdbx_host_org_variant of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._pdbx_host_org_variant = pdbx_host_org_variant

    @property
    def pdbx_host_org_vector(self):
        """Gets the pdbx_host_org_vector of this EntitySrcGen.  # noqa: E501

        Identifies the vector used. Where full details of the protein  production are available it would be expected that this item  would be derived from _entity_src_gen_clone.vector_name.  # noqa: E501

        :return: The pdbx_host_org_vector of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_host_org_vector

    @pdbx_host_org_vector.setter
    def pdbx_host_org_vector(self, pdbx_host_org_vector):
        """Sets the pdbx_host_org_vector of this EntitySrcGen.

        Identifies the vector used. Where full details of the protein  production are available it would be expected that this item  would be derived from _entity_src_gen_clone.vector_name.  # noqa: E501

        :param pdbx_host_org_vector: The pdbx_host_org_vector of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._pdbx_host_org_vector = pdbx_host_org_vector

    @property
    def pdbx_host_org_vector_type(self):
        """Gets the pdbx_host_org_vector_type of this EntitySrcGen.  # noqa: E501

        Identifies the type of vector used (plasmid, virus, or cosmid).  Where full details of the protein production are available it  would be expected that this item would be derived from  _entity_src_gen_express.vector_type.  # noqa: E501

        :return: The pdbx_host_org_vector_type of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_host_org_vector_type

    @pdbx_host_org_vector_type.setter
    def pdbx_host_org_vector_type(self, pdbx_host_org_vector_type):
        """Sets the pdbx_host_org_vector_type of this EntitySrcGen.

        Identifies the type of vector used (plasmid, virus, or cosmid).  Where full details of the protein production are available it  would be expected that this item would be derived from  _entity_src_gen_express.vector_type.  # noqa: E501

        :param pdbx_host_org_vector_type: The pdbx_host_org_vector_type of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._pdbx_host_org_vector_type = pdbx_host_org_vector_type

    @property
    def pdbx_seq_type(self):
        """Gets the pdbx_seq_type of this EntitySrcGen.  # noqa: E501

        This data item povides additional information about the sequence type.  # noqa: E501

        :return: The pdbx_seq_type of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_seq_type

    @pdbx_seq_type.setter
    def pdbx_seq_type(self, pdbx_seq_type):
        """Sets the pdbx_seq_type of this EntitySrcGen.

        This data item povides additional information about the sequence type.  # noqa: E501

        :param pdbx_seq_type: The pdbx_seq_type of this EntitySrcGen.  # noqa: E501
        :type: str
        """
        allowed_values = ["Biological sequence", "C-terminal tag", "Linker", "N-terminal tag"]  # noqa: E501
        if pdbx_seq_type not in allowed_values:
            raise ValueError(
                "Invalid value for `pdbx_seq_type` ({0}), must be one of {1}"  # noqa: E501
                .format(pdbx_seq_type, allowed_values)
            )

        self._pdbx_seq_type = pdbx_seq_type

    @property
    def pdbx_src_id(self):
        """Gets the pdbx_src_id of this EntitySrcGen.  # noqa: E501

        This data item is an ordinal identifier for entity_src_gen data records.  # noqa: E501

        :return: The pdbx_src_id of this EntitySrcGen.  # noqa: E501
        :rtype: int
        """
        return self._pdbx_src_id

    @pdbx_src_id.setter
    def pdbx_src_id(self, pdbx_src_id):
        """Sets the pdbx_src_id of this EntitySrcGen.

        This data item is an ordinal identifier for entity_src_gen data records.  # noqa: E501

        :param pdbx_src_id: The pdbx_src_id of this EntitySrcGen.  # noqa: E501
        :type: int
        """
        if pdbx_src_id is None:
            raise ValueError("Invalid value for `pdbx_src_id`, must not be `None`")  # noqa: E501

        self._pdbx_src_id = pdbx_src_id

    @property
    def plasmid_details(self):
        """Gets the plasmid_details of this EntitySrcGen.  # noqa: E501

        A description of special aspects of the plasmid that produced the  entity in the host organism. Where full details of the protein  production are available it would be expected that this item  would be derived from _pdbx_construct.details of the construct  pointed to from _entity_src_gen_express.plasmid_id.  # noqa: E501

        :return: The plasmid_details of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._plasmid_details

    @plasmid_details.setter
    def plasmid_details(self, plasmid_details):
        """Sets the plasmid_details of this EntitySrcGen.

        A description of special aspects of the plasmid that produced the  entity in the host organism. Where full details of the protein  production are available it would be expected that this item  would be derived from _pdbx_construct.details of the construct  pointed to from _entity_src_gen_express.plasmid_id.  # noqa: E501

        :param plasmid_details: The plasmid_details of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._plasmid_details = plasmid_details

    @property
    def plasmid_name(self):
        """Gets the plasmid_name of this EntitySrcGen.  # noqa: E501

        The name of the plasmid that produced the entity in the host  organism. Where full details of the protein production are available  it would be expected that this item would be derived from  _pdbx_construct.name of the construct pointed to from  _entity_src_gen_express.plasmid_id.  # noqa: E501

        :return: The plasmid_name of this EntitySrcGen.  # noqa: E501
        :rtype: str
        """
        return self._plasmid_name

    @plasmid_name.setter
    def plasmid_name(self, plasmid_name):
        """Sets the plasmid_name of this EntitySrcGen.

        The name of the plasmid that produced the entity in the host  organism. Where full details of the protein production are available  it would be expected that this item would be derived from  _pdbx_construct.name of the construct pointed to from  _entity_src_gen_express.plasmid_id.  # noqa: E501

        :param plasmid_name: The plasmid_name of this EntitySrcGen.  # noqa: E501
        :type: str
        """

        self._plasmid_name = plasmid_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EntitySrcGen, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntitySrcGen):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
