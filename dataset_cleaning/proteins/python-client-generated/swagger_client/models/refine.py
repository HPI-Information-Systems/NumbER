# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Refine(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'b_iso_max': 'float',
        'b_iso_mean': 'float',
        'b_iso_min': 'float',
        'aniso_b_1_1': 'float',
        'aniso_b_1_2': 'float',
        'aniso_b_1_3': 'float',
        'aniso_b_2_2': 'float',
        'aniso_b_2_3': 'float',
        'aniso_b_3_3': 'float',
        'correlation_coeff_fo_to_fc': 'float',
        'correlation_coeff_fo_to_fc_free': 'float',
        'details': 'str',
        'ls_r_factor_r_free': 'float',
        'ls_r_factor_r_free_error': 'float',
        'ls_r_factor_r_free_error_details': 'str',
        'ls_r_factor_r_work': 'float',
        'ls_r_factor_all': 'float',
        'ls_r_factor_obs': 'float',
        'ls_d_res_high': 'float',
        'ls_d_res_low': 'float',
        'ls_matrix_type': 'str',
        'ls_number_parameters': 'int',
        'ls_number_reflns_r_free': 'int',
        'ls_number_reflns_r_work': 'int',
        'ls_number_reflns_all': 'int',
        'ls_number_reflns_obs': 'int',
        'ls_number_restraints': 'int',
        'ls_percent_reflns_r_free': 'float',
        'ls_percent_reflns_obs': 'float',
        'ls_redundancy_reflns_all': 'float',
        'ls_redundancy_reflns_obs': 'float',
        'ls_w_r_factor_r_free': 'float',
        'ls_w_r_factor_r_work': 'float',
        'occupancy_max': 'float',
        'occupancy_min': 'float',
        'overall_fom_free_r_set': 'float',
        'overall_fom_work_r_set': 'float',
        'overall_su_b': 'float',
        'overall_su_ml': 'float',
        'overall_su_r_cruickshank_dpi': 'float',
        'overall_su_r_free': 'float',
        'pdbx_r_free_selection_details': 'str',
        'pdbx_tls_residual_adp_flag': 'str',
        'pdbx_average_fsc_free': 'float',
        'pdbx_average_fsc_overall': 'float',
        'pdbx_average_fsc_work': 'float',
        'pdbx_data_cutoff_high_abs_f': 'float',
        'pdbx_data_cutoff_high_rms_abs_f': 'float',
        'pdbx_data_cutoff_low_abs_f': 'float',
        'pdbx_diffrn_id': 'list[str]',
        'pdbx_isotropic_thermal_model': 'str',
        'pdbx_ls_cross_valid_method': 'str',
        'pdbx_ls_sigma_f': 'float',
        'pdbx_ls_sigma_fsqd': 'float',
        'pdbx_ls_sigma_i': 'float',
        'pdbx_method_to_determine_struct': 'str',
        'pdbx_overall_esu_r': 'float',
        'pdbx_overall_esu_r_free': 'float',
        'pdbx_overall_su_r_blow_dpi': 'float',
        'pdbx_overall_su_r_free_blow_dpi': 'float',
        'pdbx_overall_su_r_free_cruickshank_dpi': 'float',
        'pdbx_overall_phase_error': 'float',
        'pdbx_refine_id': 'str',
        'pdbx_solvent_ion_probe_radii': 'float',
        'pdbx_solvent_shrinkage_radii': 'float',
        'pdbx_solvent_vdw_probe_radii': 'float',
        'pdbx_starting_model': 'str',
        'pdbx_stereochem_target_val_spec_case': 'str',
        'pdbx_stereochemistry_target_values': 'str',
        'solvent_model_details': 'str',
        'solvent_model_param_bsol': 'float',
        'solvent_model_param_ksol': 'float'
    }

    attribute_map = {
        'b_iso_max': 'B_iso_max',
        'b_iso_mean': 'B_iso_mean',
        'b_iso_min': 'B_iso_min',
        'aniso_b_1_1': 'aniso_B_1_1',
        'aniso_b_1_2': 'aniso_B_1_2',
        'aniso_b_1_3': 'aniso_B_1_3',
        'aniso_b_2_2': 'aniso_B_2_2',
        'aniso_b_2_3': 'aniso_B_2_3',
        'aniso_b_3_3': 'aniso_B_3_3',
        'correlation_coeff_fo_to_fc': 'correlation_coeff_Fo_to_Fc',
        'correlation_coeff_fo_to_fc_free': 'correlation_coeff_Fo_to_Fc_free',
        'details': 'details',
        'ls_r_factor_r_free': 'ls_R_factor_R_free',
        'ls_r_factor_r_free_error': 'ls_R_factor_R_free_error',
        'ls_r_factor_r_free_error_details': 'ls_R_factor_R_free_error_details',
        'ls_r_factor_r_work': 'ls_R_factor_R_work',
        'ls_r_factor_all': 'ls_R_factor_all',
        'ls_r_factor_obs': 'ls_R_factor_obs',
        'ls_d_res_high': 'ls_d_res_high',
        'ls_d_res_low': 'ls_d_res_low',
        'ls_matrix_type': 'ls_matrix_type',
        'ls_number_parameters': 'ls_number_parameters',
        'ls_number_reflns_r_free': 'ls_number_reflns_R_free',
        'ls_number_reflns_r_work': 'ls_number_reflns_R_work',
        'ls_number_reflns_all': 'ls_number_reflns_all',
        'ls_number_reflns_obs': 'ls_number_reflns_obs',
        'ls_number_restraints': 'ls_number_restraints',
        'ls_percent_reflns_r_free': 'ls_percent_reflns_R_free',
        'ls_percent_reflns_obs': 'ls_percent_reflns_obs',
        'ls_redundancy_reflns_all': 'ls_redundancy_reflns_all',
        'ls_redundancy_reflns_obs': 'ls_redundancy_reflns_obs',
        'ls_w_r_factor_r_free': 'ls_wR_factor_R_free',
        'ls_w_r_factor_r_work': 'ls_wR_factor_R_work',
        'occupancy_max': 'occupancy_max',
        'occupancy_min': 'occupancy_min',
        'overall_fom_free_r_set': 'overall_FOM_free_R_set',
        'overall_fom_work_r_set': 'overall_FOM_work_R_set',
        'overall_su_b': 'overall_SU_B',
        'overall_su_ml': 'overall_SU_ML',
        'overall_su_r_cruickshank_dpi': 'overall_SU_R_Cruickshank_DPI',
        'overall_su_r_free': 'overall_SU_R_free',
        'pdbx_r_free_selection_details': 'pdbx_R_Free_selection_details',
        'pdbx_tls_residual_adp_flag': 'pdbx_TLS_residual_ADP_flag',
        'pdbx_average_fsc_free': 'pdbx_average_fsc_free',
        'pdbx_average_fsc_overall': 'pdbx_average_fsc_overall',
        'pdbx_average_fsc_work': 'pdbx_average_fsc_work',
        'pdbx_data_cutoff_high_abs_f': 'pdbx_data_cutoff_high_absF',
        'pdbx_data_cutoff_high_rms_abs_f': 'pdbx_data_cutoff_high_rms_absF',
        'pdbx_data_cutoff_low_abs_f': 'pdbx_data_cutoff_low_absF',
        'pdbx_diffrn_id': 'pdbx_diffrn_id',
        'pdbx_isotropic_thermal_model': 'pdbx_isotropic_thermal_model',
        'pdbx_ls_cross_valid_method': 'pdbx_ls_cross_valid_method',
        'pdbx_ls_sigma_f': 'pdbx_ls_sigma_F',
        'pdbx_ls_sigma_fsqd': 'pdbx_ls_sigma_Fsqd',
        'pdbx_ls_sigma_i': 'pdbx_ls_sigma_I',
        'pdbx_method_to_determine_struct': 'pdbx_method_to_determine_struct',
        'pdbx_overall_esu_r': 'pdbx_overall_ESU_R',
        'pdbx_overall_esu_r_free': 'pdbx_overall_ESU_R_Free',
        'pdbx_overall_su_r_blow_dpi': 'pdbx_overall_SU_R_Blow_DPI',
        'pdbx_overall_su_r_free_blow_dpi': 'pdbx_overall_SU_R_free_Blow_DPI',
        'pdbx_overall_su_r_free_cruickshank_dpi': 'pdbx_overall_SU_R_free_Cruickshank_DPI',
        'pdbx_overall_phase_error': 'pdbx_overall_phase_error',
        'pdbx_refine_id': 'pdbx_refine_id',
        'pdbx_solvent_ion_probe_radii': 'pdbx_solvent_ion_probe_radii',
        'pdbx_solvent_shrinkage_radii': 'pdbx_solvent_shrinkage_radii',
        'pdbx_solvent_vdw_probe_radii': 'pdbx_solvent_vdw_probe_radii',
        'pdbx_starting_model': 'pdbx_starting_model',
        'pdbx_stereochem_target_val_spec_case': 'pdbx_stereochem_target_val_spec_case',
        'pdbx_stereochemistry_target_values': 'pdbx_stereochemistry_target_values',
        'solvent_model_details': 'solvent_model_details',
        'solvent_model_param_bsol': 'solvent_model_param_bsol',
        'solvent_model_param_ksol': 'solvent_model_param_ksol'
    }

    def __init__(self, b_iso_max=None, b_iso_mean=None, b_iso_min=None, aniso_b_1_1=None, aniso_b_1_2=None, aniso_b_1_3=None, aniso_b_2_2=None, aniso_b_2_3=None, aniso_b_3_3=None, correlation_coeff_fo_to_fc=None, correlation_coeff_fo_to_fc_free=None, details=None, ls_r_factor_r_free=None, ls_r_factor_r_free_error=None, ls_r_factor_r_free_error_details=None, ls_r_factor_r_work=None, ls_r_factor_all=None, ls_r_factor_obs=None, ls_d_res_high=None, ls_d_res_low=None, ls_matrix_type=None, ls_number_parameters=None, ls_number_reflns_r_free=None, ls_number_reflns_r_work=None, ls_number_reflns_all=None, ls_number_reflns_obs=None, ls_number_restraints=None, ls_percent_reflns_r_free=None, ls_percent_reflns_obs=None, ls_redundancy_reflns_all=None, ls_redundancy_reflns_obs=None, ls_w_r_factor_r_free=None, ls_w_r_factor_r_work=None, occupancy_max=None, occupancy_min=None, overall_fom_free_r_set=None, overall_fom_work_r_set=None, overall_su_b=None, overall_su_ml=None, overall_su_r_cruickshank_dpi=None, overall_su_r_free=None, pdbx_r_free_selection_details=None, pdbx_tls_residual_adp_flag=None, pdbx_average_fsc_free=None, pdbx_average_fsc_overall=None, pdbx_average_fsc_work=None, pdbx_data_cutoff_high_abs_f=None, pdbx_data_cutoff_high_rms_abs_f=None, pdbx_data_cutoff_low_abs_f=None, pdbx_diffrn_id=None, pdbx_isotropic_thermal_model=None, pdbx_ls_cross_valid_method=None, pdbx_ls_sigma_f=None, pdbx_ls_sigma_fsqd=None, pdbx_ls_sigma_i=None, pdbx_method_to_determine_struct=None, pdbx_overall_esu_r=None, pdbx_overall_esu_r_free=None, pdbx_overall_su_r_blow_dpi=None, pdbx_overall_su_r_free_blow_dpi=None, pdbx_overall_su_r_free_cruickshank_dpi=None, pdbx_overall_phase_error=None, pdbx_refine_id=None, pdbx_solvent_ion_probe_radii=None, pdbx_solvent_shrinkage_radii=None, pdbx_solvent_vdw_probe_radii=None, pdbx_starting_model=None, pdbx_stereochem_target_val_spec_case=None, pdbx_stereochemistry_target_values=None, solvent_model_details=None, solvent_model_param_bsol=None, solvent_model_param_ksol=None):  # noqa: E501
        """Refine - a model defined in Swagger"""  # noqa: E501
        self._b_iso_max = None
        self._b_iso_mean = None
        self._b_iso_min = None
        self._aniso_b_1_1 = None
        self._aniso_b_1_2 = None
        self._aniso_b_1_3 = None
        self._aniso_b_2_2 = None
        self._aniso_b_2_3 = None
        self._aniso_b_3_3 = None
        self._correlation_coeff_fo_to_fc = None
        self._correlation_coeff_fo_to_fc_free = None
        self._details = None
        self._ls_r_factor_r_free = None
        self._ls_r_factor_r_free_error = None
        self._ls_r_factor_r_free_error_details = None
        self._ls_r_factor_r_work = None
        self._ls_r_factor_all = None
        self._ls_r_factor_obs = None
        self._ls_d_res_high = None
        self._ls_d_res_low = None
        self._ls_matrix_type = None
        self._ls_number_parameters = None
        self._ls_number_reflns_r_free = None
        self._ls_number_reflns_r_work = None
        self._ls_number_reflns_all = None
        self._ls_number_reflns_obs = None
        self._ls_number_restraints = None
        self._ls_percent_reflns_r_free = None
        self._ls_percent_reflns_obs = None
        self._ls_redundancy_reflns_all = None
        self._ls_redundancy_reflns_obs = None
        self._ls_w_r_factor_r_free = None
        self._ls_w_r_factor_r_work = None
        self._occupancy_max = None
        self._occupancy_min = None
        self._overall_fom_free_r_set = None
        self._overall_fom_work_r_set = None
        self._overall_su_b = None
        self._overall_su_ml = None
        self._overall_su_r_cruickshank_dpi = None
        self._overall_su_r_free = None
        self._pdbx_r_free_selection_details = None
        self._pdbx_tls_residual_adp_flag = None
        self._pdbx_average_fsc_free = None
        self._pdbx_average_fsc_overall = None
        self._pdbx_average_fsc_work = None
        self._pdbx_data_cutoff_high_abs_f = None
        self._pdbx_data_cutoff_high_rms_abs_f = None
        self._pdbx_data_cutoff_low_abs_f = None
        self._pdbx_diffrn_id = None
        self._pdbx_isotropic_thermal_model = None
        self._pdbx_ls_cross_valid_method = None
        self._pdbx_ls_sigma_f = None
        self._pdbx_ls_sigma_fsqd = None
        self._pdbx_ls_sigma_i = None
        self._pdbx_method_to_determine_struct = None
        self._pdbx_overall_esu_r = None
        self._pdbx_overall_esu_r_free = None
        self._pdbx_overall_su_r_blow_dpi = None
        self._pdbx_overall_su_r_free_blow_dpi = None
        self._pdbx_overall_su_r_free_cruickshank_dpi = None
        self._pdbx_overall_phase_error = None
        self._pdbx_refine_id = None
        self._pdbx_solvent_ion_probe_radii = None
        self._pdbx_solvent_shrinkage_radii = None
        self._pdbx_solvent_vdw_probe_radii = None
        self._pdbx_starting_model = None
        self._pdbx_stereochem_target_val_spec_case = None
        self._pdbx_stereochemistry_target_values = None
        self._solvent_model_details = None
        self._solvent_model_param_bsol = None
        self._solvent_model_param_ksol = None
        self.discriminator = None
        if b_iso_max is not None:
            self.b_iso_max = b_iso_max
        if b_iso_mean is not None:
            self.b_iso_mean = b_iso_mean
        if b_iso_min is not None:
            self.b_iso_min = b_iso_min
        if aniso_b_1_1 is not None:
            self.aniso_b_1_1 = aniso_b_1_1
        if aniso_b_1_2 is not None:
            self.aniso_b_1_2 = aniso_b_1_2
        if aniso_b_1_3 is not None:
            self.aniso_b_1_3 = aniso_b_1_3
        if aniso_b_2_2 is not None:
            self.aniso_b_2_2 = aniso_b_2_2
        if aniso_b_2_3 is not None:
            self.aniso_b_2_3 = aniso_b_2_3
        if aniso_b_3_3 is not None:
            self.aniso_b_3_3 = aniso_b_3_3
        if correlation_coeff_fo_to_fc is not None:
            self.correlation_coeff_fo_to_fc = correlation_coeff_fo_to_fc
        if correlation_coeff_fo_to_fc_free is not None:
            self.correlation_coeff_fo_to_fc_free = correlation_coeff_fo_to_fc_free
        if details is not None:
            self.details = details
        if ls_r_factor_r_free is not None:
            self.ls_r_factor_r_free = ls_r_factor_r_free
        if ls_r_factor_r_free_error is not None:
            self.ls_r_factor_r_free_error = ls_r_factor_r_free_error
        if ls_r_factor_r_free_error_details is not None:
            self.ls_r_factor_r_free_error_details = ls_r_factor_r_free_error_details
        if ls_r_factor_r_work is not None:
            self.ls_r_factor_r_work = ls_r_factor_r_work
        if ls_r_factor_all is not None:
            self.ls_r_factor_all = ls_r_factor_all
        if ls_r_factor_obs is not None:
            self.ls_r_factor_obs = ls_r_factor_obs
        if ls_d_res_high is not None:
            self.ls_d_res_high = ls_d_res_high
        if ls_d_res_low is not None:
            self.ls_d_res_low = ls_d_res_low
        if ls_matrix_type is not None:
            self.ls_matrix_type = ls_matrix_type
        if ls_number_parameters is not None:
            self.ls_number_parameters = ls_number_parameters
        if ls_number_reflns_r_free is not None:
            self.ls_number_reflns_r_free = ls_number_reflns_r_free
        if ls_number_reflns_r_work is not None:
            self.ls_number_reflns_r_work = ls_number_reflns_r_work
        if ls_number_reflns_all is not None:
            self.ls_number_reflns_all = ls_number_reflns_all
        if ls_number_reflns_obs is not None:
            self.ls_number_reflns_obs = ls_number_reflns_obs
        if ls_number_restraints is not None:
            self.ls_number_restraints = ls_number_restraints
        if ls_percent_reflns_r_free is not None:
            self.ls_percent_reflns_r_free = ls_percent_reflns_r_free
        if ls_percent_reflns_obs is not None:
            self.ls_percent_reflns_obs = ls_percent_reflns_obs
        if ls_redundancy_reflns_all is not None:
            self.ls_redundancy_reflns_all = ls_redundancy_reflns_all
        if ls_redundancy_reflns_obs is not None:
            self.ls_redundancy_reflns_obs = ls_redundancy_reflns_obs
        if ls_w_r_factor_r_free is not None:
            self.ls_w_r_factor_r_free = ls_w_r_factor_r_free
        if ls_w_r_factor_r_work is not None:
            self.ls_w_r_factor_r_work = ls_w_r_factor_r_work
        if occupancy_max is not None:
            self.occupancy_max = occupancy_max
        if occupancy_min is not None:
            self.occupancy_min = occupancy_min
        if overall_fom_free_r_set is not None:
            self.overall_fom_free_r_set = overall_fom_free_r_set
        if overall_fom_work_r_set is not None:
            self.overall_fom_work_r_set = overall_fom_work_r_set
        if overall_su_b is not None:
            self.overall_su_b = overall_su_b
        if overall_su_ml is not None:
            self.overall_su_ml = overall_su_ml
        if overall_su_r_cruickshank_dpi is not None:
            self.overall_su_r_cruickshank_dpi = overall_su_r_cruickshank_dpi
        if overall_su_r_free is not None:
            self.overall_su_r_free = overall_su_r_free
        if pdbx_r_free_selection_details is not None:
            self.pdbx_r_free_selection_details = pdbx_r_free_selection_details
        if pdbx_tls_residual_adp_flag is not None:
            self.pdbx_tls_residual_adp_flag = pdbx_tls_residual_adp_flag
        if pdbx_average_fsc_free is not None:
            self.pdbx_average_fsc_free = pdbx_average_fsc_free
        if pdbx_average_fsc_overall is not None:
            self.pdbx_average_fsc_overall = pdbx_average_fsc_overall
        if pdbx_average_fsc_work is not None:
            self.pdbx_average_fsc_work = pdbx_average_fsc_work
        if pdbx_data_cutoff_high_abs_f is not None:
            self.pdbx_data_cutoff_high_abs_f = pdbx_data_cutoff_high_abs_f
        if pdbx_data_cutoff_high_rms_abs_f is not None:
            self.pdbx_data_cutoff_high_rms_abs_f = pdbx_data_cutoff_high_rms_abs_f
        if pdbx_data_cutoff_low_abs_f is not None:
            self.pdbx_data_cutoff_low_abs_f = pdbx_data_cutoff_low_abs_f
        if pdbx_diffrn_id is not None:
            self.pdbx_diffrn_id = pdbx_diffrn_id
        if pdbx_isotropic_thermal_model is not None:
            self.pdbx_isotropic_thermal_model = pdbx_isotropic_thermal_model
        if pdbx_ls_cross_valid_method is not None:
            self.pdbx_ls_cross_valid_method = pdbx_ls_cross_valid_method
        if pdbx_ls_sigma_f is not None:
            self.pdbx_ls_sigma_f = pdbx_ls_sigma_f
        if pdbx_ls_sigma_fsqd is not None:
            self.pdbx_ls_sigma_fsqd = pdbx_ls_sigma_fsqd
        if pdbx_ls_sigma_i is not None:
            self.pdbx_ls_sigma_i = pdbx_ls_sigma_i
        if pdbx_method_to_determine_struct is not None:
            self.pdbx_method_to_determine_struct = pdbx_method_to_determine_struct
        if pdbx_overall_esu_r is not None:
            self.pdbx_overall_esu_r = pdbx_overall_esu_r
        if pdbx_overall_esu_r_free is not None:
            self.pdbx_overall_esu_r_free = pdbx_overall_esu_r_free
        if pdbx_overall_su_r_blow_dpi is not None:
            self.pdbx_overall_su_r_blow_dpi = pdbx_overall_su_r_blow_dpi
        if pdbx_overall_su_r_free_blow_dpi is not None:
            self.pdbx_overall_su_r_free_blow_dpi = pdbx_overall_su_r_free_blow_dpi
        if pdbx_overall_su_r_free_cruickshank_dpi is not None:
            self.pdbx_overall_su_r_free_cruickshank_dpi = pdbx_overall_su_r_free_cruickshank_dpi
        if pdbx_overall_phase_error is not None:
            self.pdbx_overall_phase_error = pdbx_overall_phase_error
        self.pdbx_refine_id = pdbx_refine_id
        if pdbx_solvent_ion_probe_radii is not None:
            self.pdbx_solvent_ion_probe_radii = pdbx_solvent_ion_probe_radii
        if pdbx_solvent_shrinkage_radii is not None:
            self.pdbx_solvent_shrinkage_radii = pdbx_solvent_shrinkage_radii
        if pdbx_solvent_vdw_probe_radii is not None:
            self.pdbx_solvent_vdw_probe_radii = pdbx_solvent_vdw_probe_radii
        if pdbx_starting_model is not None:
            self.pdbx_starting_model = pdbx_starting_model
        if pdbx_stereochem_target_val_spec_case is not None:
            self.pdbx_stereochem_target_val_spec_case = pdbx_stereochem_target_val_spec_case
        if pdbx_stereochemistry_target_values is not None:
            self.pdbx_stereochemistry_target_values = pdbx_stereochemistry_target_values
        if solvent_model_details is not None:
            self.solvent_model_details = solvent_model_details
        if solvent_model_param_bsol is not None:
            self.solvent_model_param_bsol = solvent_model_param_bsol
        if solvent_model_param_ksol is not None:
            self.solvent_model_param_ksol = solvent_model_param_ksol

    @property
    def b_iso_max(self):
        """Gets the b_iso_max of this Refine.  # noqa: E501

        The maximum isotropic displacement parameter (B value)  found in the coordinate set.  # noqa: E501

        :return: The b_iso_max of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._b_iso_max

    @b_iso_max.setter
    def b_iso_max(self, b_iso_max):
        """Sets the b_iso_max of this Refine.

        The maximum isotropic displacement parameter (B value)  found in the coordinate set.  # noqa: E501

        :param b_iso_max: The b_iso_max of this Refine.  # noqa: E501
        :type: float
        """

        self._b_iso_max = b_iso_max

    @property
    def b_iso_mean(self):
        """Gets the b_iso_mean of this Refine.  # noqa: E501

        The mean isotropic displacement parameter (B value)  for the coordinate set.  # noqa: E501

        :return: The b_iso_mean of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._b_iso_mean

    @b_iso_mean.setter
    def b_iso_mean(self, b_iso_mean):
        """Sets the b_iso_mean of this Refine.

        The mean isotropic displacement parameter (B value)  for the coordinate set.  # noqa: E501

        :param b_iso_mean: The b_iso_mean of this Refine.  # noqa: E501
        :type: float
        """

        self._b_iso_mean = b_iso_mean

    @property
    def b_iso_min(self):
        """Gets the b_iso_min of this Refine.  # noqa: E501

        The minimum isotropic displacement parameter (B value)  found in the coordinate set.  # noqa: E501

        :return: The b_iso_min of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._b_iso_min

    @b_iso_min.setter
    def b_iso_min(self, b_iso_min):
        """Sets the b_iso_min of this Refine.

        The minimum isotropic displacement parameter (B value)  found in the coordinate set.  # noqa: E501

        :param b_iso_min: The b_iso_min of this Refine.  # noqa: E501
        :type: float
        """

        self._b_iso_min = b_iso_min

    @property
    def aniso_b_1_1(self):
        """Gets the aniso_b_1_1 of this Refine.  # noqa: E501

        The [1][1] element of the matrix that defines the overall  anisotropic displacement model if one was refined for this  structure.  # noqa: E501

        :return: The aniso_b_1_1 of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._aniso_b_1_1

    @aniso_b_1_1.setter
    def aniso_b_1_1(self, aniso_b_1_1):
        """Sets the aniso_b_1_1 of this Refine.

        The [1][1] element of the matrix that defines the overall  anisotropic displacement model if one was refined for this  structure.  # noqa: E501

        :param aniso_b_1_1: The aniso_b_1_1 of this Refine.  # noqa: E501
        :type: float
        """

        self._aniso_b_1_1 = aniso_b_1_1

    @property
    def aniso_b_1_2(self):
        """Gets the aniso_b_1_2 of this Refine.  # noqa: E501

        The [1][2] element of the matrix that defines the overall  anisotropic displacement model if one was refined for this  structure.  # noqa: E501

        :return: The aniso_b_1_2 of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._aniso_b_1_2

    @aniso_b_1_2.setter
    def aniso_b_1_2(self, aniso_b_1_2):
        """Sets the aniso_b_1_2 of this Refine.

        The [1][2] element of the matrix that defines the overall  anisotropic displacement model if one was refined for this  structure.  # noqa: E501

        :param aniso_b_1_2: The aniso_b_1_2 of this Refine.  # noqa: E501
        :type: float
        """

        self._aniso_b_1_2 = aniso_b_1_2

    @property
    def aniso_b_1_3(self):
        """Gets the aniso_b_1_3 of this Refine.  # noqa: E501

        The [1][3] element of the matrix that defines the overall  anisotropic displacement model if one was refined for this  structure.  # noqa: E501

        :return: The aniso_b_1_3 of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._aniso_b_1_3

    @aniso_b_1_3.setter
    def aniso_b_1_3(self, aniso_b_1_3):
        """Sets the aniso_b_1_3 of this Refine.

        The [1][3] element of the matrix that defines the overall  anisotropic displacement model if one was refined for this  structure.  # noqa: E501

        :param aniso_b_1_3: The aniso_b_1_3 of this Refine.  # noqa: E501
        :type: float
        """

        self._aniso_b_1_3 = aniso_b_1_3

    @property
    def aniso_b_2_2(self):
        """Gets the aniso_b_2_2 of this Refine.  # noqa: E501

        The [2][2] element of the matrix that defines the overall  anisotropic displacement model if one was refined for this  structure.  # noqa: E501

        :return: The aniso_b_2_2 of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._aniso_b_2_2

    @aniso_b_2_2.setter
    def aniso_b_2_2(self, aniso_b_2_2):
        """Sets the aniso_b_2_2 of this Refine.

        The [2][2] element of the matrix that defines the overall  anisotropic displacement model if one was refined for this  structure.  # noqa: E501

        :param aniso_b_2_2: The aniso_b_2_2 of this Refine.  # noqa: E501
        :type: float
        """

        self._aniso_b_2_2 = aniso_b_2_2

    @property
    def aniso_b_2_3(self):
        """Gets the aniso_b_2_3 of this Refine.  # noqa: E501

        The [2][3] element of the matrix that defines the overall  anisotropic displacement model if one was refined for this  structure.  # noqa: E501

        :return: The aniso_b_2_3 of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._aniso_b_2_3

    @aniso_b_2_3.setter
    def aniso_b_2_3(self, aniso_b_2_3):
        """Sets the aniso_b_2_3 of this Refine.

        The [2][3] element of the matrix that defines the overall  anisotropic displacement model if one was refined for this  structure.  # noqa: E501

        :param aniso_b_2_3: The aniso_b_2_3 of this Refine.  # noqa: E501
        :type: float
        """

        self._aniso_b_2_3 = aniso_b_2_3

    @property
    def aniso_b_3_3(self):
        """Gets the aniso_b_3_3 of this Refine.  # noqa: E501

        The [3][3] element of the matrix that defines the overall  anisotropic displacement model if one was refined for this  structure.  # noqa: E501

        :return: The aniso_b_3_3 of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._aniso_b_3_3

    @aniso_b_3_3.setter
    def aniso_b_3_3(self, aniso_b_3_3):
        """Sets the aniso_b_3_3 of this Refine.

        The [3][3] element of the matrix that defines the overall  anisotropic displacement model if one was refined for this  structure.  # noqa: E501

        :param aniso_b_3_3: The aniso_b_3_3 of this Refine.  # noqa: E501
        :type: float
        """

        self._aniso_b_3_3 = aniso_b_3_3

    @property
    def correlation_coeff_fo_to_fc(self):
        """Gets the correlation_coeff_fo_to_fc of this Refine.  # noqa: E501

        The correlation coefficient between the observed and              calculated structure factors for reflections included in              the refinement.               The correlation coefficient is scale-independent and gives              an idea of the quality of the refined model.                            sum~i~(Fo~i~ Fc~i~ - <Fo><Fc>) R~corr~ = ------------------------------------------------------------           SQRT{sum~i~(Fo~i~)^2^-<Fo>^2^} SQRT{sum~i~(Fc~i~)^2^-<Fc>^2^}               Fo = observed structure factors              Fc = calculated structure factors              <>   denotes average value               summation is over reflections included in the refinement  # noqa: E501

        :return: The correlation_coeff_fo_to_fc of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._correlation_coeff_fo_to_fc

    @correlation_coeff_fo_to_fc.setter
    def correlation_coeff_fo_to_fc(self, correlation_coeff_fo_to_fc):
        """Sets the correlation_coeff_fo_to_fc of this Refine.

        The correlation coefficient between the observed and              calculated structure factors for reflections included in              the refinement.               The correlation coefficient is scale-independent and gives              an idea of the quality of the refined model.                            sum~i~(Fo~i~ Fc~i~ - <Fo><Fc>) R~corr~ = ------------------------------------------------------------           SQRT{sum~i~(Fo~i~)^2^-<Fo>^2^} SQRT{sum~i~(Fc~i~)^2^-<Fc>^2^}               Fo = observed structure factors              Fc = calculated structure factors              <>   denotes average value               summation is over reflections included in the refinement  # noqa: E501

        :param correlation_coeff_fo_to_fc: The correlation_coeff_fo_to_fc of this Refine.  # noqa: E501
        :type: float
        """

        self._correlation_coeff_fo_to_fc = correlation_coeff_fo_to_fc

    @property
    def correlation_coeff_fo_to_fc_free(self):
        """Gets the correlation_coeff_fo_to_fc_free of this Refine.  # noqa: E501

        The correlation coefficient between the observed and              calculated structure factors for reflections not included              in the refinement (free reflections).                The correlation coefficient is scale-independent and gives               an idea of the quality of the refined model.                            sum~i~(Fo~i~ Fc~i~ - <Fo><Fc>) R~corr~ = ------------------------------------------------------------           SQRT{sum~i~(Fo~i~)^2^-<Fo>^2^} SQRT{sum~i~(Fc~i~)^2^-<Fc>^2^}                Fo  = observed structure factors               Fc  = calculated structure factors               <>    denotes average value                summation is over reflections not included               in the refinement (free reflections)  # noqa: E501

        :return: The correlation_coeff_fo_to_fc_free of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._correlation_coeff_fo_to_fc_free

    @correlation_coeff_fo_to_fc_free.setter
    def correlation_coeff_fo_to_fc_free(self, correlation_coeff_fo_to_fc_free):
        """Sets the correlation_coeff_fo_to_fc_free of this Refine.

        The correlation coefficient between the observed and              calculated structure factors for reflections not included              in the refinement (free reflections).                The correlation coefficient is scale-independent and gives               an idea of the quality of the refined model.                            sum~i~(Fo~i~ Fc~i~ - <Fo><Fc>) R~corr~ = ------------------------------------------------------------           SQRT{sum~i~(Fo~i~)^2^-<Fo>^2^} SQRT{sum~i~(Fc~i~)^2^-<Fc>^2^}                Fo  = observed structure factors               Fc  = calculated structure factors               <>    denotes average value                summation is over reflections not included               in the refinement (free reflections)  # noqa: E501

        :param correlation_coeff_fo_to_fc_free: The correlation_coeff_fo_to_fc_free of this Refine.  # noqa: E501
        :type: float
        """

        self._correlation_coeff_fo_to_fc_free = correlation_coeff_fo_to_fc_free

    @property
    def details(self):
        """Gets the details of this Refine.  # noqa: E501

        Description of special aspects of the refinement process.  # noqa: E501

        :return: The details of this Refine.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Refine.

        Description of special aspects of the refinement process.  # noqa: E501

        :param details: The details of this Refine.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def ls_r_factor_r_free(self):
        """Gets the ls_r_factor_r_free of this Refine.  # noqa: E501

        Residual factor R for reflections that satisfy the resolution  limits established by _refine.ls_d_res_high and  _refine.ls_d_res_low and the observation limit established by  _reflns.observed_criterion, and that were used as the test  reflections (i.e. were excluded from the refinement) when the  refinement included the calculation of a 'free' R factor.  Details of how reflections were assigned to the working and  test sets are given in _reflns.R_free_details.       sum|F~obs~ - F~calc~|  R = ---------------------           sum|F~obs~|   F~obs~  = the observed structure-factor amplitudes  F~calc~ = the calculated structure-factor amplitudes   sum is taken over the specified reflections  # noqa: E501

        :return: The ls_r_factor_r_free of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._ls_r_factor_r_free

    @ls_r_factor_r_free.setter
    def ls_r_factor_r_free(self, ls_r_factor_r_free):
        """Sets the ls_r_factor_r_free of this Refine.

        Residual factor R for reflections that satisfy the resolution  limits established by _refine.ls_d_res_high and  _refine.ls_d_res_low and the observation limit established by  _reflns.observed_criterion, and that were used as the test  reflections (i.e. were excluded from the refinement) when the  refinement included the calculation of a 'free' R factor.  Details of how reflections were assigned to the working and  test sets are given in _reflns.R_free_details.       sum|F~obs~ - F~calc~|  R = ---------------------           sum|F~obs~|   F~obs~  = the observed structure-factor amplitudes  F~calc~ = the calculated structure-factor amplitudes   sum is taken over the specified reflections  # noqa: E501

        :param ls_r_factor_r_free: The ls_r_factor_r_free of this Refine.  # noqa: E501
        :type: float
        """

        self._ls_r_factor_r_free = ls_r_factor_r_free

    @property
    def ls_r_factor_r_free_error(self):
        """Gets the ls_r_factor_r_free_error of this Refine.  # noqa: E501

        The estimated error in _refine.ls_R_factor_R_free.  The method used to estimate the error is described in the  item _refine.ls_R_factor_R_free_error_details.  # noqa: E501

        :return: The ls_r_factor_r_free_error of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._ls_r_factor_r_free_error

    @ls_r_factor_r_free_error.setter
    def ls_r_factor_r_free_error(self, ls_r_factor_r_free_error):
        """Sets the ls_r_factor_r_free_error of this Refine.

        The estimated error in _refine.ls_R_factor_R_free.  The method used to estimate the error is described in the  item _refine.ls_R_factor_R_free_error_details.  # noqa: E501

        :param ls_r_factor_r_free_error: The ls_r_factor_r_free_error of this Refine.  # noqa: E501
        :type: float
        """

        self._ls_r_factor_r_free_error = ls_r_factor_r_free_error

    @property
    def ls_r_factor_r_free_error_details(self):
        """Gets the ls_r_factor_r_free_error_details of this Refine.  # noqa: E501

        Special aspects of the method used to estimated the error in  _refine.ls_R_factor_R_free.  # noqa: E501

        :return: The ls_r_factor_r_free_error_details of this Refine.  # noqa: E501
        :rtype: str
        """
        return self._ls_r_factor_r_free_error_details

    @ls_r_factor_r_free_error_details.setter
    def ls_r_factor_r_free_error_details(self, ls_r_factor_r_free_error_details):
        """Sets the ls_r_factor_r_free_error_details of this Refine.

        Special aspects of the method used to estimated the error in  _refine.ls_R_factor_R_free.  # noqa: E501

        :param ls_r_factor_r_free_error_details: The ls_r_factor_r_free_error_details of this Refine.  # noqa: E501
        :type: str
        """

        self._ls_r_factor_r_free_error_details = ls_r_factor_r_free_error_details

    @property
    def ls_r_factor_r_work(self):
        """Gets the ls_r_factor_r_work of this Refine.  # noqa: E501

        Residual factor R for reflections that satisfy the resolution  limits established by _refine.ls_d_res_high and  _refine.ls_d_res_low and the observation limit established by  _reflns.observed_criterion, and that were used as the working  reflections (i.e. were included in the refinement)  when the  refinement included the calculation of a 'free' R factor.  Details of how reflections were assigned to the working and  test sets are given in _reflns.R_free_details.   _refine.ls_R_factor_obs should not be confused with  _refine.ls_R_factor_R_work; the former reports the results of a  refinement in which all observed reflections were used, the  latter a refinement in which a subset of the observed  reflections were excluded from refinement for the calculation  of a 'free' R factor. However, it would be meaningful to quote  both values if a 'free' R factor were calculated for most of  the refinement, but all of the observed reflections were used  in the final rounds of refinement; such a protocol should be  explained in _refine.details.       sum|F~obs~ - F~calc~|  R = ---------------------           sum|F~obs~|   F~obs~  = the observed structure-factor amplitudes  F~calc~ = the calculated structure-factor amplitudes   sum is taken over the specified reflections  # noqa: E501

        :return: The ls_r_factor_r_work of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._ls_r_factor_r_work

    @ls_r_factor_r_work.setter
    def ls_r_factor_r_work(self, ls_r_factor_r_work):
        """Sets the ls_r_factor_r_work of this Refine.

        Residual factor R for reflections that satisfy the resolution  limits established by _refine.ls_d_res_high and  _refine.ls_d_res_low and the observation limit established by  _reflns.observed_criterion, and that were used as the working  reflections (i.e. were included in the refinement)  when the  refinement included the calculation of a 'free' R factor.  Details of how reflections were assigned to the working and  test sets are given in _reflns.R_free_details.   _refine.ls_R_factor_obs should not be confused with  _refine.ls_R_factor_R_work; the former reports the results of a  refinement in which all observed reflections were used, the  latter a refinement in which a subset of the observed  reflections were excluded from refinement for the calculation  of a 'free' R factor. However, it would be meaningful to quote  both values if a 'free' R factor were calculated for most of  the refinement, but all of the observed reflections were used  in the final rounds of refinement; such a protocol should be  explained in _refine.details.       sum|F~obs~ - F~calc~|  R = ---------------------           sum|F~obs~|   F~obs~  = the observed structure-factor amplitudes  F~calc~ = the calculated structure-factor amplitudes   sum is taken over the specified reflections  # noqa: E501

        :param ls_r_factor_r_work: The ls_r_factor_r_work of this Refine.  # noqa: E501
        :type: float
        """

        self._ls_r_factor_r_work = ls_r_factor_r_work

    @property
    def ls_r_factor_all(self):
        """Gets the ls_r_factor_all of this Refine.  # noqa: E501

        Residual factor R for all reflections that satisfy the resolution  limits established by _refine.ls_d_res_high and  _refine.ls_d_res_low.       sum|F~obs~ - F~calc~|  R = ---------------------           sum|F~obs~|   F~obs~  = the observed structure-factor amplitudes  F~calc~ = the calculated structure-factor amplitudes   sum is taken over the specified reflections  # noqa: E501

        :return: The ls_r_factor_all of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._ls_r_factor_all

    @ls_r_factor_all.setter
    def ls_r_factor_all(self, ls_r_factor_all):
        """Sets the ls_r_factor_all of this Refine.

        Residual factor R for all reflections that satisfy the resolution  limits established by _refine.ls_d_res_high and  _refine.ls_d_res_low.       sum|F~obs~ - F~calc~|  R = ---------------------           sum|F~obs~|   F~obs~  = the observed structure-factor amplitudes  F~calc~ = the calculated structure-factor amplitudes   sum is taken over the specified reflections  # noqa: E501

        :param ls_r_factor_all: The ls_r_factor_all of this Refine.  # noqa: E501
        :type: float
        """

        self._ls_r_factor_all = ls_r_factor_all

    @property
    def ls_r_factor_obs(self):
        """Gets the ls_r_factor_obs of this Refine.  # noqa: E501

        Residual factor R for reflections that satisfy the resolution  limits established by _refine.ls_d_res_high and  _refine.ls_d_res_low and the observation limit established by  _reflns.observed_criterion.   _refine.ls_R_factor_obs should not be confused with  _refine.ls_R_factor_R_work; the former reports the results of a  refinement in which all observed reflections were used, the  latter a refinement in which a subset of the observed  reflections were excluded from refinement for the calculation  of a 'free' R factor. However, it would be meaningful to quote  both values if a 'free' R factor were calculated for most of  the refinement, but all of the observed reflections were used  in the final rounds of refinement; such a protocol should be  explained in _refine.details.       sum|F~obs~ - F~calc~|  R = ---------------------           sum|F~obs~|   F~obs~  = the observed structure-factor amplitudes  F~calc~ = the calculated structure-factor amplitudes   sum is taken over the specified reflections  # noqa: E501

        :return: The ls_r_factor_obs of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._ls_r_factor_obs

    @ls_r_factor_obs.setter
    def ls_r_factor_obs(self, ls_r_factor_obs):
        """Sets the ls_r_factor_obs of this Refine.

        Residual factor R for reflections that satisfy the resolution  limits established by _refine.ls_d_res_high and  _refine.ls_d_res_low and the observation limit established by  _reflns.observed_criterion.   _refine.ls_R_factor_obs should not be confused with  _refine.ls_R_factor_R_work; the former reports the results of a  refinement in which all observed reflections were used, the  latter a refinement in which a subset of the observed  reflections were excluded from refinement for the calculation  of a 'free' R factor. However, it would be meaningful to quote  both values if a 'free' R factor were calculated for most of  the refinement, but all of the observed reflections were used  in the final rounds of refinement; such a protocol should be  explained in _refine.details.       sum|F~obs~ - F~calc~|  R = ---------------------           sum|F~obs~|   F~obs~  = the observed structure-factor amplitudes  F~calc~ = the calculated structure-factor amplitudes   sum is taken over the specified reflections  # noqa: E501

        :param ls_r_factor_obs: The ls_r_factor_obs of this Refine.  # noqa: E501
        :type: float
        """

        self._ls_r_factor_obs = ls_r_factor_obs

    @property
    def ls_d_res_high(self):
        """Gets the ls_d_res_high of this Refine.  # noqa: E501

        The smallest value for the interplanar spacings for the  reflection data used in the refinement in angstroms. This is  called the highest resolution.  # noqa: E501

        :return: The ls_d_res_high of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._ls_d_res_high

    @ls_d_res_high.setter
    def ls_d_res_high(self, ls_d_res_high):
        """Sets the ls_d_res_high of this Refine.

        The smallest value for the interplanar spacings for the  reflection data used in the refinement in angstroms. This is  called the highest resolution.  # noqa: E501

        :param ls_d_res_high: The ls_d_res_high of this Refine.  # noqa: E501
        :type: float
        """

        self._ls_d_res_high = ls_d_res_high

    @property
    def ls_d_res_low(self):
        """Gets the ls_d_res_low of this Refine.  # noqa: E501

        The largest value for the interplanar spacings for  the reflection data used in the refinement in angstroms.  This is called the lowest resolution.  # noqa: E501

        :return: The ls_d_res_low of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._ls_d_res_low

    @ls_d_res_low.setter
    def ls_d_res_low(self, ls_d_res_low):
        """Sets the ls_d_res_low of this Refine.

        The largest value for the interplanar spacings for  the reflection data used in the refinement in angstroms.  This is called the lowest resolution.  # noqa: E501

        :param ls_d_res_low: The ls_d_res_low of this Refine.  # noqa: E501
        :type: float
        """

        self._ls_d_res_low = ls_d_res_low

    @property
    def ls_matrix_type(self):
        """Gets the ls_matrix_type of this Refine.  # noqa: E501

        Type of matrix used to accumulate the least-squares derivatives.  # noqa: E501

        :return: The ls_matrix_type of this Refine.  # noqa: E501
        :rtype: str
        """
        return self._ls_matrix_type

    @ls_matrix_type.setter
    def ls_matrix_type(self, ls_matrix_type):
        """Sets the ls_matrix_type of this Refine.

        Type of matrix used to accumulate the least-squares derivatives.  # noqa: E501

        :param ls_matrix_type: The ls_matrix_type of this Refine.  # noqa: E501
        :type: str
        """
        allowed_values = ["atomblock", "diagonal", "full", "fullcycle", "sparse", "userblock"]  # noqa: E501
        if ls_matrix_type not in allowed_values:
            raise ValueError(
                "Invalid value for `ls_matrix_type` ({0}), must be one of {1}"  # noqa: E501
                .format(ls_matrix_type, allowed_values)
            )

        self._ls_matrix_type = ls_matrix_type

    @property
    def ls_number_parameters(self):
        """Gets the ls_number_parameters of this Refine.  # noqa: E501

        The number of parameters refined in the least-squares process.  If possible, this number should include some contribution from  the restrained parameters. The restrained parameters are  distinct from the constrained parameters (where one or more  parameters are linearly dependent on the refined value of  another). Least-squares restraints often depend on geometry or  energy considerations and this makes their direct contribution  to this number, and to the goodness-of-fit calculation,  difficult to assess.  # noqa: E501

        :return: The ls_number_parameters of this Refine.  # noqa: E501
        :rtype: int
        """
        return self._ls_number_parameters

    @ls_number_parameters.setter
    def ls_number_parameters(self, ls_number_parameters):
        """Sets the ls_number_parameters of this Refine.

        The number of parameters refined in the least-squares process.  If possible, this number should include some contribution from  the restrained parameters. The restrained parameters are  distinct from the constrained parameters (where one or more  parameters are linearly dependent on the refined value of  another). Least-squares restraints often depend on geometry or  energy considerations and this makes their direct contribution  to this number, and to the goodness-of-fit calculation,  difficult to assess.  # noqa: E501

        :param ls_number_parameters: The ls_number_parameters of this Refine.  # noqa: E501
        :type: int
        """

        self._ls_number_parameters = ls_number_parameters

    @property
    def ls_number_reflns_r_free(self):
        """Gets the ls_number_reflns_r_free of this Refine.  # noqa: E501

        The number of reflections that satisfy the resolution limits  established by _refine.ls_d_res_high and _refine.ls_d_res_low  and the observation limit established by  _reflns.observed_criterion, and that were used as the test  reflections (i.e. were excluded from the refinement) when the  refinement included the calculation of a 'free' R factor.  Details of how reflections were assigned to the working and  test sets are given in _reflns.R_free_details.  # noqa: E501

        :return: The ls_number_reflns_r_free of this Refine.  # noqa: E501
        :rtype: int
        """
        return self._ls_number_reflns_r_free

    @ls_number_reflns_r_free.setter
    def ls_number_reflns_r_free(self, ls_number_reflns_r_free):
        """Sets the ls_number_reflns_r_free of this Refine.

        The number of reflections that satisfy the resolution limits  established by _refine.ls_d_res_high and _refine.ls_d_res_low  and the observation limit established by  _reflns.observed_criterion, and that were used as the test  reflections (i.e. were excluded from the refinement) when the  refinement included the calculation of a 'free' R factor.  Details of how reflections were assigned to the working and  test sets are given in _reflns.R_free_details.  # noqa: E501

        :param ls_number_reflns_r_free: The ls_number_reflns_r_free of this Refine.  # noqa: E501
        :type: int
        """

        self._ls_number_reflns_r_free = ls_number_reflns_r_free

    @property
    def ls_number_reflns_r_work(self):
        """Gets the ls_number_reflns_r_work of this Refine.  # noqa: E501

        The number of reflections that satisfy the resolution limits  established by _refine.ls_d_res_high and _refine.ls_d_res_low  and the observation limit established by  _reflns.observed_criterion, and that were used as the working  reflections (i.e. were included in the refinement) when the  refinement included the calculation of a 'free' R factor.  Details of how reflections were assigned to the working and  test sets are given in _reflns.R_free_details.  # noqa: E501

        :return: The ls_number_reflns_r_work of this Refine.  # noqa: E501
        :rtype: int
        """
        return self._ls_number_reflns_r_work

    @ls_number_reflns_r_work.setter
    def ls_number_reflns_r_work(self, ls_number_reflns_r_work):
        """Sets the ls_number_reflns_r_work of this Refine.

        The number of reflections that satisfy the resolution limits  established by _refine.ls_d_res_high and _refine.ls_d_res_low  and the observation limit established by  _reflns.observed_criterion, and that were used as the working  reflections (i.e. were included in the refinement) when the  refinement included the calculation of a 'free' R factor.  Details of how reflections were assigned to the working and  test sets are given in _reflns.R_free_details.  # noqa: E501

        :param ls_number_reflns_r_work: The ls_number_reflns_r_work of this Refine.  # noqa: E501
        :type: int
        """

        self._ls_number_reflns_r_work = ls_number_reflns_r_work

    @property
    def ls_number_reflns_all(self):
        """Gets the ls_number_reflns_all of this Refine.  # noqa: E501

        The number of reflections that satisfy the resolution limits  established by _refine.ls_d_res_high and _refine.ls_d_res_low.  # noqa: E501

        :return: The ls_number_reflns_all of this Refine.  # noqa: E501
        :rtype: int
        """
        return self._ls_number_reflns_all

    @ls_number_reflns_all.setter
    def ls_number_reflns_all(self, ls_number_reflns_all):
        """Sets the ls_number_reflns_all of this Refine.

        The number of reflections that satisfy the resolution limits  established by _refine.ls_d_res_high and _refine.ls_d_res_low.  # noqa: E501

        :param ls_number_reflns_all: The ls_number_reflns_all of this Refine.  # noqa: E501
        :type: int
        """

        self._ls_number_reflns_all = ls_number_reflns_all

    @property
    def ls_number_reflns_obs(self):
        """Gets the ls_number_reflns_obs of this Refine.  # noqa: E501

        The number of reflections that satisfy the resolution limits  established by _refine.ls_d_res_high and _refine.ls_d_res_low  and the observation limit established by  _reflns.observed_criterion.  # noqa: E501

        :return: The ls_number_reflns_obs of this Refine.  # noqa: E501
        :rtype: int
        """
        return self._ls_number_reflns_obs

    @ls_number_reflns_obs.setter
    def ls_number_reflns_obs(self, ls_number_reflns_obs):
        """Sets the ls_number_reflns_obs of this Refine.

        The number of reflections that satisfy the resolution limits  established by _refine.ls_d_res_high and _refine.ls_d_res_low  and the observation limit established by  _reflns.observed_criterion.  # noqa: E501

        :param ls_number_reflns_obs: The ls_number_reflns_obs of this Refine.  # noqa: E501
        :type: int
        """

        self._ls_number_reflns_obs = ls_number_reflns_obs

    @property
    def ls_number_restraints(self):
        """Gets the ls_number_restraints of this Refine.  # noqa: E501

        The number of restrained parameters. These are parameters which  are not directly dependent on another refined parameter.  Restrained parameters often involve geometry or energy  dependencies.  See also _atom_site.constraints and _atom_site.refinement_flags.  A general description of refinement constraints may appear in  _refine.details.  # noqa: E501

        :return: The ls_number_restraints of this Refine.  # noqa: E501
        :rtype: int
        """
        return self._ls_number_restraints

    @ls_number_restraints.setter
    def ls_number_restraints(self, ls_number_restraints):
        """Sets the ls_number_restraints of this Refine.

        The number of restrained parameters. These are parameters which  are not directly dependent on another refined parameter.  Restrained parameters often involve geometry or energy  dependencies.  See also _atom_site.constraints and _atom_site.refinement_flags.  A general description of refinement constraints may appear in  _refine.details.  # noqa: E501

        :param ls_number_restraints: The ls_number_restraints of this Refine.  # noqa: E501
        :type: int
        """

        self._ls_number_restraints = ls_number_restraints

    @property
    def ls_percent_reflns_r_free(self):
        """Gets the ls_percent_reflns_r_free of this Refine.  # noqa: E501

        The number of reflections that satisfy the resolution limits  established by _refine.ls_d_res_high and _refine.ls_d_res_low  and the observation limit established by  _reflns.observed_criterion, and that were used as the test  reflections (i.e. were excluded from the refinement) when the  refinement included the calculation of a 'free' R factor,  expressed as a percentage of the number of geometrically  observable reflections that satisfy the resolution limits.  # noqa: E501

        :return: The ls_percent_reflns_r_free of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._ls_percent_reflns_r_free

    @ls_percent_reflns_r_free.setter
    def ls_percent_reflns_r_free(self, ls_percent_reflns_r_free):
        """Sets the ls_percent_reflns_r_free of this Refine.

        The number of reflections that satisfy the resolution limits  established by _refine.ls_d_res_high and _refine.ls_d_res_low  and the observation limit established by  _reflns.observed_criterion, and that were used as the test  reflections (i.e. were excluded from the refinement) when the  refinement included the calculation of a 'free' R factor,  expressed as a percentage of the number of geometrically  observable reflections that satisfy the resolution limits.  # noqa: E501

        :param ls_percent_reflns_r_free: The ls_percent_reflns_r_free of this Refine.  # noqa: E501
        :type: float
        """

        self._ls_percent_reflns_r_free = ls_percent_reflns_r_free

    @property
    def ls_percent_reflns_obs(self):
        """Gets the ls_percent_reflns_obs of this Refine.  # noqa: E501

        The number of reflections that satisfy the resolution limits  established by _refine.ls_d_res_high and _refine.ls_d_res_low  and the observation limit established by  _reflns.observed_criterion, expressed as a percentage of the  number of geometrically observable reflections that satisfy  the resolution limits.  # noqa: E501

        :return: The ls_percent_reflns_obs of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._ls_percent_reflns_obs

    @ls_percent_reflns_obs.setter
    def ls_percent_reflns_obs(self, ls_percent_reflns_obs):
        """Sets the ls_percent_reflns_obs of this Refine.

        The number of reflections that satisfy the resolution limits  established by _refine.ls_d_res_high and _refine.ls_d_res_low  and the observation limit established by  _reflns.observed_criterion, expressed as a percentage of the  number of geometrically observable reflections that satisfy  the resolution limits.  # noqa: E501

        :param ls_percent_reflns_obs: The ls_percent_reflns_obs of this Refine.  # noqa: E501
        :type: float
        """

        self._ls_percent_reflns_obs = ls_percent_reflns_obs

    @property
    def ls_redundancy_reflns_all(self):
        """Gets the ls_redundancy_reflns_all of this Refine.  # noqa: E501

        The ratio of the total number of observations of the  reflections that satisfy the resolution limits established by  _refine.ls_d_res_high and _refine.ls_d_res_low to the number  of crystallographically unique reflections that satisfy the  same limits.  # noqa: E501

        :return: The ls_redundancy_reflns_all of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._ls_redundancy_reflns_all

    @ls_redundancy_reflns_all.setter
    def ls_redundancy_reflns_all(self, ls_redundancy_reflns_all):
        """Sets the ls_redundancy_reflns_all of this Refine.

        The ratio of the total number of observations of the  reflections that satisfy the resolution limits established by  _refine.ls_d_res_high and _refine.ls_d_res_low to the number  of crystallographically unique reflections that satisfy the  same limits.  # noqa: E501

        :param ls_redundancy_reflns_all: The ls_redundancy_reflns_all of this Refine.  # noqa: E501
        :type: float
        """

        self._ls_redundancy_reflns_all = ls_redundancy_reflns_all

    @property
    def ls_redundancy_reflns_obs(self):
        """Gets the ls_redundancy_reflns_obs of this Refine.  # noqa: E501

        The ratio of the total number of observations of the  reflections that satisfy the resolution limits established by  _refine.ls_d_res_high and _refine.ls_d_res_low and the  observation limit established by _reflns.observed_criterion to  the number of crystallographically unique reflections that  satisfy the same limits.  # noqa: E501

        :return: The ls_redundancy_reflns_obs of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._ls_redundancy_reflns_obs

    @ls_redundancy_reflns_obs.setter
    def ls_redundancy_reflns_obs(self, ls_redundancy_reflns_obs):
        """Sets the ls_redundancy_reflns_obs of this Refine.

        The ratio of the total number of observations of the  reflections that satisfy the resolution limits established by  _refine.ls_d_res_high and _refine.ls_d_res_low and the  observation limit established by _reflns.observed_criterion to  the number of crystallographically unique reflections that  satisfy the same limits.  # noqa: E501

        :param ls_redundancy_reflns_obs: The ls_redundancy_reflns_obs of this Refine.  # noqa: E501
        :type: float
        """

        self._ls_redundancy_reflns_obs = ls_redundancy_reflns_obs

    @property
    def ls_w_r_factor_r_free(self):
        """Gets the ls_w_r_factor_r_free of this Refine.  # noqa: E501

        Weighted residual factor wR for reflections that satisfy the  resolution limits established by _refine.ls_d_res_high and  _refine.ls_d_res_low and the observation limit established by  _reflns.observed_criterion, and that were used as the test  reflections (i.e. were excluded from the refinement) when the  refinement included the calculation of a 'free' R factor.  Details of how reflections were assigned to the working and  test sets are given in _reflns.R_free_details.        ( sum|w |Y~obs~ - Y~calc~|^2^| )^1/2^  wR = ( ---------------------------- )       (        sum|w Y~obs~^2^|      )   Y~obs~  = the observed amplitude specified by            _refine.ls_structure_factor_coef  Y~calc~ = the calculated amplitude specified by            _refine.ls_structure_factor_coef  w       = the least-squares weight   sum is taken over the specified reflections  # noqa: E501

        :return: The ls_w_r_factor_r_free of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._ls_w_r_factor_r_free

    @ls_w_r_factor_r_free.setter
    def ls_w_r_factor_r_free(self, ls_w_r_factor_r_free):
        """Sets the ls_w_r_factor_r_free of this Refine.

        Weighted residual factor wR for reflections that satisfy the  resolution limits established by _refine.ls_d_res_high and  _refine.ls_d_res_low and the observation limit established by  _reflns.observed_criterion, and that were used as the test  reflections (i.e. were excluded from the refinement) when the  refinement included the calculation of a 'free' R factor.  Details of how reflections were assigned to the working and  test sets are given in _reflns.R_free_details.        ( sum|w |Y~obs~ - Y~calc~|^2^| )^1/2^  wR = ( ---------------------------- )       (        sum|w Y~obs~^2^|      )   Y~obs~  = the observed amplitude specified by            _refine.ls_structure_factor_coef  Y~calc~ = the calculated amplitude specified by            _refine.ls_structure_factor_coef  w       = the least-squares weight   sum is taken over the specified reflections  # noqa: E501

        :param ls_w_r_factor_r_free: The ls_w_r_factor_r_free of this Refine.  # noqa: E501
        :type: float
        """

        self._ls_w_r_factor_r_free = ls_w_r_factor_r_free

    @property
    def ls_w_r_factor_r_work(self):
        """Gets the ls_w_r_factor_r_work of this Refine.  # noqa: E501

        Weighted residual factor wR for reflections that satisfy the  resolution limits established by _refine.ls_d_res_high and  _refine.ls_d_res_low and the observation limit established by  _reflns.observed_criterion, and that were used as the working  reflections (i.e. were included in the refinement) when the  refinement included the calculation of a 'free' R factor.  Details of how reflections were assigned to the working and  test sets are given in _reflns.R_free_details.        ( sum|w |Y~obs~ - Y~calc~|^2^| )^1/2^  wR = ( ---------------------------- )       (        sum|w Y~obs~^2^|      )   Y~obs~  = the observed amplitude specified by            _refine.ls_structure_factor_coef  Y~calc~ = the calculated amplitude specified by            _refine.ls_structure_factor_coef  w       = the least-squares weight   sum is taken over the specified reflections  # noqa: E501

        :return: The ls_w_r_factor_r_work of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._ls_w_r_factor_r_work

    @ls_w_r_factor_r_work.setter
    def ls_w_r_factor_r_work(self, ls_w_r_factor_r_work):
        """Sets the ls_w_r_factor_r_work of this Refine.

        Weighted residual factor wR for reflections that satisfy the  resolution limits established by _refine.ls_d_res_high and  _refine.ls_d_res_low and the observation limit established by  _reflns.observed_criterion, and that were used as the working  reflections (i.e. were included in the refinement) when the  refinement included the calculation of a 'free' R factor.  Details of how reflections were assigned to the working and  test sets are given in _reflns.R_free_details.        ( sum|w |Y~obs~ - Y~calc~|^2^| )^1/2^  wR = ( ---------------------------- )       (        sum|w Y~obs~^2^|      )   Y~obs~  = the observed amplitude specified by            _refine.ls_structure_factor_coef  Y~calc~ = the calculated amplitude specified by            _refine.ls_structure_factor_coef  w       = the least-squares weight   sum is taken over the specified reflections  # noqa: E501

        :param ls_w_r_factor_r_work: The ls_w_r_factor_r_work of this Refine.  # noqa: E501
        :type: float
        """

        self._ls_w_r_factor_r_work = ls_w_r_factor_r_work

    @property
    def occupancy_max(self):
        """Gets the occupancy_max of this Refine.  # noqa: E501

        The maximum value for occupancy found in the coordinate set.  # noqa: E501

        :return: The occupancy_max of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._occupancy_max

    @occupancy_max.setter
    def occupancy_max(self, occupancy_max):
        """Sets the occupancy_max of this Refine.

        The maximum value for occupancy found in the coordinate set.  # noqa: E501

        :param occupancy_max: The occupancy_max of this Refine.  # noqa: E501
        :type: float
        """

        self._occupancy_max = occupancy_max

    @property
    def occupancy_min(self):
        """Gets the occupancy_min of this Refine.  # noqa: E501

        The minimum value for occupancy found in the coordinate set.  # noqa: E501

        :return: The occupancy_min of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._occupancy_min

    @occupancy_min.setter
    def occupancy_min(self, occupancy_min):
        """Sets the occupancy_min of this Refine.

        The minimum value for occupancy found in the coordinate set.  # noqa: E501

        :param occupancy_min: The occupancy_min of this Refine.  # noqa: E501
        :type: float
        """

        self._occupancy_min = occupancy_min

    @property
    def overall_fom_free_r_set(self):
        """Gets the overall_fom_free_r_set of this Refine.  # noqa: E501

        Average figure of merit of phases of reflections not included  in the refinement.   This value is derived from the likelihood function.   FOM           = I~1~(X)/I~0~(X)   I~0~, I~1~     = zero- and first-order modified Bessel functions                  of the first kind  X              = sigma~A~ |E~o~| |E~c~|/SIGMA  E~o~, E~c~     = normalized observed and calculated structure                  factors  sigma~A~       = <cos 2 pi s delta~x~> SQRT(Sigma~P~/Sigma~N~)                  estimated using maximum likelihood  Sigma~P~       = sum~{atoms in model}~ f^2^  Sigma~N~       = sum~{atoms in crystal}~ f^2^  f              = form factor of atoms  delta~x~       = expected error  SIGMA          = (sigma~{E;exp}~)^2^ + epsilon [1-(sigma~A~)^2^]  sigma~{E;exp}~ = uncertainties of normalized observed                  structure factors  epsilon       = multiplicity of the diffracting plane   Ref: Murshudov, G. N., Vagin, A. A. & Dodson, E. J. (1997).       Acta Cryst. D53, 240-255.  # noqa: E501

        :return: The overall_fom_free_r_set of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._overall_fom_free_r_set

    @overall_fom_free_r_set.setter
    def overall_fom_free_r_set(self, overall_fom_free_r_set):
        """Sets the overall_fom_free_r_set of this Refine.

        Average figure of merit of phases of reflections not included  in the refinement.   This value is derived from the likelihood function.   FOM           = I~1~(X)/I~0~(X)   I~0~, I~1~     = zero- and first-order modified Bessel functions                  of the first kind  X              = sigma~A~ |E~o~| |E~c~|/SIGMA  E~o~, E~c~     = normalized observed and calculated structure                  factors  sigma~A~       = <cos 2 pi s delta~x~> SQRT(Sigma~P~/Sigma~N~)                  estimated using maximum likelihood  Sigma~P~       = sum~{atoms in model}~ f^2^  Sigma~N~       = sum~{atoms in crystal}~ f^2^  f              = form factor of atoms  delta~x~       = expected error  SIGMA          = (sigma~{E;exp}~)^2^ + epsilon [1-(sigma~A~)^2^]  sigma~{E;exp}~ = uncertainties of normalized observed                  structure factors  epsilon       = multiplicity of the diffracting plane   Ref: Murshudov, G. N., Vagin, A. A. & Dodson, E. J. (1997).       Acta Cryst. D53, 240-255.  # noqa: E501

        :param overall_fom_free_r_set: The overall_fom_free_r_set of this Refine.  # noqa: E501
        :type: float
        """

        self._overall_fom_free_r_set = overall_fom_free_r_set

    @property
    def overall_fom_work_r_set(self):
        """Gets the overall_fom_work_r_set of this Refine.  # noqa: E501

        Average figure of merit of phases of reflections included in  the refinement.   This value is derived from the likelihood function.   FOM           = I~1~(X)/I~0~(X)   I~0~, I~1~     = zero- and first-order modified Bessel functions                  of the first kind  X              = sigma~A~ |E~o~| |E~c~|/SIGMA  E~o~, E~c~     = normalized observed and calculated structure                  factors  sigma~A~       = <cos 2 pi s delta~x~> SQRT(Sigma~P~/Sigma~N~)                  estimated using maximum likelihood  Sigma~P~       = sum~{atoms in model}~ f^2^  Sigma~N~       = sum~{atoms in crystal}~ f^2^  f              = form factor of atoms  delta~x~       = expected error  SIGMA          = (sigma~{E;exp}~)^2^ + epsilon [1-(sigma~A~)^2^]  sigma~{E;exp}~ = uncertainties of normalized observed                  structure factors  epsilon       = multiplicity of the diffracting plane   Ref: Murshudov, G. N., Vagin, A. A. & Dodson, E. J. (1997).       Acta Cryst. D53, 240-255.  # noqa: E501

        :return: The overall_fom_work_r_set of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._overall_fom_work_r_set

    @overall_fom_work_r_set.setter
    def overall_fom_work_r_set(self, overall_fom_work_r_set):
        """Sets the overall_fom_work_r_set of this Refine.

        Average figure of merit of phases of reflections included in  the refinement.   This value is derived from the likelihood function.   FOM           = I~1~(X)/I~0~(X)   I~0~, I~1~     = zero- and first-order modified Bessel functions                  of the first kind  X              = sigma~A~ |E~o~| |E~c~|/SIGMA  E~o~, E~c~     = normalized observed and calculated structure                  factors  sigma~A~       = <cos 2 pi s delta~x~> SQRT(Sigma~P~/Sigma~N~)                  estimated using maximum likelihood  Sigma~P~       = sum~{atoms in model}~ f^2^  Sigma~N~       = sum~{atoms in crystal}~ f^2^  f              = form factor of atoms  delta~x~       = expected error  SIGMA          = (sigma~{E;exp}~)^2^ + epsilon [1-(sigma~A~)^2^]  sigma~{E;exp}~ = uncertainties of normalized observed                  structure factors  epsilon       = multiplicity of the diffracting plane   Ref: Murshudov, G. N., Vagin, A. A. & Dodson, E. J. (1997).       Acta Cryst. D53, 240-255.  # noqa: E501

        :param overall_fom_work_r_set: The overall_fom_work_r_set of this Refine.  # noqa: E501
        :type: float
        """

        self._overall_fom_work_r_set = overall_fom_work_r_set

    @property
    def overall_su_b(self):
        """Gets the overall_su_b of this Refine.  # noqa: E501

        The overall standard uncertainty (estimated standard deviation)            of the displacement parameters based on a maximum-likelihood            residual.             The overall standard uncertainty (sigma~B~)^2^ gives an idea            of the uncertainty in the B values of averagely defined            atoms (atoms with B values equal to the average B value).                                           N~a~ (sigma~B~)^2^ = 8 ----------------------------------------------                   sum~i~ {[1/Sigma - (E~o~)^2^ (1-m^2^)](SUM_AS)s^4^}             N~a~           = number of atoms            E~o~           = normalized structure factors            m              = figure of merit of phases of reflections                             included in the summation            s              = reciprocal-space vector             SUM_AS         = (sigma~A~)^2^/Sigma^2^            Sigma          = (sigma~{E;exp}~)^2^ + epsilon [1-(sigma~A~)^2^]            sigma~{E;exp}~  = experimental uncertainties of normalized                             structure factors            sigma~A~        = <cos 2 pi s delta~x~> SQRT(Sigma~P~/Sigma~N~)                             estimated using maximum likelihood            Sigma~P~        = sum~{atoms in model}~ f^2^            Sigma~N~        = sum~{atoms in crystal}~ f^2^            f               = atom form factor            delta~x~        = expected error            epsilon         = multiplicity of diffracting plane             summation is over all reflections included in refinement             Ref: (sigma~A~ estimation) \"Refinement of macromolecular                 structures by the maximum-likelihood method\",                 Murshudov, G. N., Vagin, A. A. & Dodson, E. J. (1997).                 Acta Cryst. D53, 240-255.                  (SU B estimation) Murshudov, G. N. & Dodson,                 E. J. (1997). Simplified error estimation a la                 Cruickshank in macromolecular crystallography.                 CCP4 Newsletter on Protein Crystallography, No. 33,                 January 1997, pp. 31-39.                 http://www.ccp4.ac.uk/newsletters/newsletter33/murshudov.html  # noqa: E501

        :return: The overall_su_b of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._overall_su_b

    @overall_su_b.setter
    def overall_su_b(self, overall_su_b):
        """Sets the overall_su_b of this Refine.

        The overall standard uncertainty (estimated standard deviation)            of the displacement parameters based on a maximum-likelihood            residual.             The overall standard uncertainty (sigma~B~)^2^ gives an idea            of the uncertainty in the B values of averagely defined            atoms (atoms with B values equal to the average B value).                                           N~a~ (sigma~B~)^2^ = 8 ----------------------------------------------                   sum~i~ {[1/Sigma - (E~o~)^2^ (1-m^2^)](SUM_AS)s^4^}             N~a~           = number of atoms            E~o~           = normalized structure factors            m              = figure of merit of phases of reflections                             included in the summation            s              = reciprocal-space vector             SUM_AS         = (sigma~A~)^2^/Sigma^2^            Sigma          = (sigma~{E;exp}~)^2^ + epsilon [1-(sigma~A~)^2^]            sigma~{E;exp}~  = experimental uncertainties of normalized                             structure factors            sigma~A~        = <cos 2 pi s delta~x~> SQRT(Sigma~P~/Sigma~N~)                             estimated using maximum likelihood            Sigma~P~        = sum~{atoms in model}~ f^2^            Sigma~N~        = sum~{atoms in crystal}~ f^2^            f               = atom form factor            delta~x~        = expected error            epsilon         = multiplicity of diffracting plane             summation is over all reflections included in refinement             Ref: (sigma~A~ estimation) \"Refinement of macromolecular                 structures by the maximum-likelihood method\",                 Murshudov, G. N., Vagin, A. A. & Dodson, E. J. (1997).                 Acta Cryst. D53, 240-255.                  (SU B estimation) Murshudov, G. N. & Dodson,                 E. J. (1997). Simplified error estimation a la                 Cruickshank in macromolecular crystallography.                 CCP4 Newsletter on Protein Crystallography, No. 33,                 January 1997, pp. 31-39.                 http://www.ccp4.ac.uk/newsletters/newsletter33/murshudov.html  # noqa: E501

        :param overall_su_b: The overall_su_b of this Refine.  # noqa: E501
        :type: float
        """

        self._overall_su_b = overall_su_b

    @property
    def overall_su_ml(self):
        """Gets the overall_su_ml of this Refine.  # noqa: E501

        The overall standard uncertainty (estimated standard deviation)            of the positional parameters based on a maximum likelihood            residual.             The overall standard uncertainty (sigma~X~)^2^ gives an            idea of the uncertainty in the position of averagely            defined atoms (atoms with B values equal to average B value)                   3                         N~a~ (sigma~X~)^2^  = ---------------------------------------------------------                  8 pi^2^ sum~i~ {[1/Sigma - (E~o~)^2^ (1-m^2^)](SUM_AS)s^2^}             N~a~           = number of atoms            E~o~           = normalized structure factors            m              = figure of merit of phases of reflections                             included in the summation            s              = reciprocal-space vector             SUM_AS         = (sigma~A~)^2^/Sigma^2^            Sigma          = (sigma~{E;exp}~)^2^ + epsilon [1-(sigma~A~)^2^]            sigma~{E;exp}~  = experimental uncertainties of normalized                             structure factors            sigma~A~        = <cos 2 pi s delta~x~> SQRT(Sigma~P~/Sigma~N~)                             estimated using maximum likelihood            Sigma~P~        = sum~{atoms in model}~ f^2^            Sigma~N~        = sum~{atoms in crystal}~ f^2^            f               = atom form factor            delta~x~        = expected error            epsilon         = multiplicity of diffracting plane             summation is over all reflections included in refinement             Ref: (sigma_A estimation) \"Refinement of macromolecular                 structures by the maximum-likelihood method\",                 Murshudov, G. N., Vagin, A. A. & Dodson, E. J. (1997).                 Acta Cryst. D53, 240-255.                  (SU ML estimation) Murshudov, G. N. & Dodson,                 E. J. (1997). Simplified error estimation a la                 Cruickshank in macromolecular crystallography.                 CCP4 Newsletter on Protein Crystallography, No. 33,                 January 1997, pp. 31-39.                 http://www.ccp4.ac.uk/newsletters/newsletter33/murshudov.html  # noqa: E501

        :return: The overall_su_ml of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._overall_su_ml

    @overall_su_ml.setter
    def overall_su_ml(self, overall_su_ml):
        """Sets the overall_su_ml of this Refine.

        The overall standard uncertainty (estimated standard deviation)            of the positional parameters based on a maximum likelihood            residual.             The overall standard uncertainty (sigma~X~)^2^ gives an            idea of the uncertainty in the position of averagely            defined atoms (atoms with B values equal to average B value)                   3                         N~a~ (sigma~X~)^2^  = ---------------------------------------------------------                  8 pi^2^ sum~i~ {[1/Sigma - (E~o~)^2^ (1-m^2^)](SUM_AS)s^2^}             N~a~           = number of atoms            E~o~           = normalized structure factors            m              = figure of merit of phases of reflections                             included in the summation            s              = reciprocal-space vector             SUM_AS         = (sigma~A~)^2^/Sigma^2^            Sigma          = (sigma~{E;exp}~)^2^ + epsilon [1-(sigma~A~)^2^]            sigma~{E;exp}~  = experimental uncertainties of normalized                             structure factors            sigma~A~        = <cos 2 pi s delta~x~> SQRT(Sigma~P~/Sigma~N~)                             estimated using maximum likelihood            Sigma~P~        = sum~{atoms in model}~ f^2^            Sigma~N~        = sum~{atoms in crystal}~ f^2^            f               = atom form factor            delta~x~        = expected error            epsilon         = multiplicity of diffracting plane             summation is over all reflections included in refinement             Ref: (sigma_A estimation) \"Refinement of macromolecular                 structures by the maximum-likelihood method\",                 Murshudov, G. N., Vagin, A. A. & Dodson, E. J. (1997).                 Acta Cryst. D53, 240-255.                  (SU ML estimation) Murshudov, G. N. & Dodson,                 E. J. (1997). Simplified error estimation a la                 Cruickshank in macromolecular crystallography.                 CCP4 Newsletter on Protein Crystallography, No. 33,                 January 1997, pp. 31-39.                 http://www.ccp4.ac.uk/newsletters/newsletter33/murshudov.html  # noqa: E501

        :param overall_su_ml: The overall_su_ml of this Refine.  # noqa: E501
        :type: float
        """

        self._overall_su_ml = overall_su_ml

    @property
    def overall_su_r_cruickshank_dpi(self):
        """Gets the overall_su_r_cruickshank_dpi of this Refine.  # noqa: E501

        The overall standard uncertainty (estimated standard deviation)  of the displacement parameters based on the crystallographic  R value, expressed in a formalism known as the dispersion  precision indicator (DPI).   The overall standard uncertainty (sigma~B~) gives an idea  of the uncertainty in the B values of averagely defined  atoms (atoms with B values equal to the average B value).                          N~a~  (sigma~B~)^2^ = 0.65 ---------- (R~value~)^2^ (D~min~)^2^ C^-2/3^                       (N~o~-N~p~)    N~a~     = number of atoms included in refinement  N~o~     = number of observations  N~p~     = number of parameters refined  R~value~ = conventional crystallographic R value  D~min~   = maximum resolution  C        = completeness of data   Ref: Cruickshank, D. W. J. (1999). Acta Cryst. D55, 583-601.        Murshudov, G. N. & Dodson,       E. J. (1997). Simplified error estimation a la       Cruickshank in macromolecular crystallography.       CCP4 Newsletter on Protein Crystallography, No. 33,       January 1997, pp. 31-39.       http://www.ccp4.ac.uk/newsletters/newsletter33/murshudov.html  # noqa: E501

        :return: The overall_su_r_cruickshank_dpi of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._overall_su_r_cruickshank_dpi

    @overall_su_r_cruickshank_dpi.setter
    def overall_su_r_cruickshank_dpi(self, overall_su_r_cruickshank_dpi):
        """Sets the overall_su_r_cruickshank_dpi of this Refine.

        The overall standard uncertainty (estimated standard deviation)  of the displacement parameters based on the crystallographic  R value, expressed in a formalism known as the dispersion  precision indicator (DPI).   The overall standard uncertainty (sigma~B~) gives an idea  of the uncertainty in the B values of averagely defined  atoms (atoms with B values equal to the average B value).                          N~a~  (sigma~B~)^2^ = 0.65 ---------- (R~value~)^2^ (D~min~)^2^ C^-2/3^                       (N~o~-N~p~)    N~a~     = number of atoms included in refinement  N~o~     = number of observations  N~p~     = number of parameters refined  R~value~ = conventional crystallographic R value  D~min~   = maximum resolution  C        = completeness of data   Ref: Cruickshank, D. W. J. (1999). Acta Cryst. D55, 583-601.        Murshudov, G. N. & Dodson,       E. J. (1997). Simplified error estimation a la       Cruickshank in macromolecular crystallography.       CCP4 Newsletter on Protein Crystallography, No. 33,       January 1997, pp. 31-39.       http://www.ccp4.ac.uk/newsletters/newsletter33/murshudov.html  # noqa: E501

        :param overall_su_r_cruickshank_dpi: The overall_su_r_cruickshank_dpi of this Refine.  # noqa: E501
        :type: float
        """

        self._overall_su_r_cruickshank_dpi = overall_su_r_cruickshank_dpi

    @property
    def overall_su_r_free(self):
        """Gets the overall_su_r_free of this Refine.  # noqa: E501

        The overall standard uncertainty (estimated standard deviation)  of the displacement parameters based on the free R value.   The overall standard uncertainty (sigma~B~) gives an idea  of the uncertainty in the B values of averagely defined  atoms (atoms with B values equal to the average B value).                          N~a~  (sigma~B~)^2^ = 0.65 ---------- (R~free~)^2^ (D~min~)^2^ C^-2/3^                       (N~o~-N~p~)    N~a~     = number of atoms included in refinement  N~o~     = number of observations  N~p~     = number of parameters refined  R~free~  = conventional free crystallographic R value calculated           using reflections not included in refinement  D~min~   = maximum resolution  C        = completeness of data   Ref: Cruickshank, D. W. J. (1999). Acta Cryst. D55, 583-601.        Murshudov, G. N. & Dodson,       E. J. (1997). Simplified error estimation a la       Cruickshank in macromolecular crystallography.       CCP4 Newsletter on Protein Crystallography, No. 33,       January 1997, pp. 31-39.       http://www.ccp4.ac.uk/newsletters/newsletter33/murshudov.html  # noqa: E501

        :return: The overall_su_r_free of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._overall_su_r_free

    @overall_su_r_free.setter
    def overall_su_r_free(self, overall_su_r_free):
        """Sets the overall_su_r_free of this Refine.

        The overall standard uncertainty (estimated standard deviation)  of the displacement parameters based on the free R value.   The overall standard uncertainty (sigma~B~) gives an idea  of the uncertainty in the B values of averagely defined  atoms (atoms with B values equal to the average B value).                          N~a~  (sigma~B~)^2^ = 0.65 ---------- (R~free~)^2^ (D~min~)^2^ C^-2/3^                       (N~o~-N~p~)    N~a~     = number of atoms included in refinement  N~o~     = number of observations  N~p~     = number of parameters refined  R~free~  = conventional free crystallographic R value calculated           using reflections not included in refinement  D~min~   = maximum resolution  C        = completeness of data   Ref: Cruickshank, D. W. J. (1999). Acta Cryst. D55, 583-601.        Murshudov, G. N. & Dodson,       E. J. (1997). Simplified error estimation a la       Cruickshank in macromolecular crystallography.       CCP4 Newsletter on Protein Crystallography, No. 33,       January 1997, pp. 31-39.       http://www.ccp4.ac.uk/newsletters/newsletter33/murshudov.html  # noqa: E501

        :param overall_su_r_free: The overall_su_r_free of this Refine.  # noqa: E501
        :type: float
        """

        self._overall_su_r_free = overall_su_r_free

    @property
    def pdbx_r_free_selection_details(self):
        """Gets the pdbx_r_free_selection_details of this Refine.  # noqa: E501

        Details of the manner in which the cross validation  reflections were selected.  # noqa: E501

        :return: The pdbx_r_free_selection_details of this Refine.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_r_free_selection_details

    @pdbx_r_free_selection_details.setter
    def pdbx_r_free_selection_details(self, pdbx_r_free_selection_details):
        """Sets the pdbx_r_free_selection_details of this Refine.

        Details of the manner in which the cross validation  reflections were selected.  # noqa: E501

        :param pdbx_r_free_selection_details: The pdbx_r_free_selection_details of this Refine.  # noqa: E501
        :type: str
        """

        self._pdbx_r_free_selection_details = pdbx_r_free_selection_details

    @property
    def pdbx_tls_residual_adp_flag(self):
        """Gets the pdbx_tls_residual_adp_flag of this Refine.  # noqa: E501

        A flag for TLS refinements identifying the type of atomic displacement parameters stored  in _atom_site.B_iso_or_equiv.  # noqa: E501

        :return: The pdbx_tls_residual_adp_flag of this Refine.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_tls_residual_adp_flag

    @pdbx_tls_residual_adp_flag.setter
    def pdbx_tls_residual_adp_flag(self, pdbx_tls_residual_adp_flag):
        """Sets the pdbx_tls_residual_adp_flag of this Refine.

        A flag for TLS refinements identifying the type of atomic displacement parameters stored  in _atom_site.B_iso_or_equiv.  # noqa: E501

        :param pdbx_tls_residual_adp_flag: The pdbx_tls_residual_adp_flag of this Refine.  # noqa: E501
        :type: str
        """
        allowed_values = ["LIKELY RESIDUAL", "UNVERIFIED"]  # noqa: E501
        if pdbx_tls_residual_adp_flag not in allowed_values:
            raise ValueError(
                "Invalid value for `pdbx_tls_residual_adp_flag` ({0}), must be one of {1}"  # noqa: E501
                .format(pdbx_tls_residual_adp_flag, allowed_values)
            )

        self._pdbx_tls_residual_adp_flag = pdbx_tls_residual_adp_flag

    @property
    def pdbx_average_fsc_free(self):
        """Gets the pdbx_average_fsc_free of this Refine.  # noqa: E501

        Average Fourier Shell Correlation (avgFSC) between model and  observed structure factors for reflections not included in refinement.   The average FSC is a measure of the agreement between observed  and calculated structure factors.                    sum(N~i~ FSC~free-i~)  avgFSC~free~   = ---------------------                   sum(N~i~)    N~i~          = the number of free reflections in the resolution shell i  FSC~free-i~   = FSC for free reflections in the i-th resolution shell calculated as:                  (sum(|F~o~| |F~c~| fom cos(phi~c~-phi~o~)))  FSC~free-i~  = -------------------------------------------                 (sum(|F~o~|^2^) (sum(|F~c~|^2^)))^1/2^   |F~o~|   = amplitude of observed structure factor  |F~c~|   = amplitude of calculated structure factor  phi~o~   = phase of observed structure factor  phi~c~   = phase of calculated structure factor  fom      = figure of merit of the experimental phases.   Summation of FSC~free-i~ is carried over all free reflections in the resolution shell.   Summation of avgFSC~free~ is carried over all resolution shells.    Ref:  Rosenthal P.B., Henderson R.        \"Optimal determination of particle orientation, absolute hand,        and contrast loss in single-particle electron cryomicroscopy.        Journal of Molecular Biology. 2003;333(4):721-745, equation (A6).  # noqa: E501

        :return: The pdbx_average_fsc_free of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._pdbx_average_fsc_free

    @pdbx_average_fsc_free.setter
    def pdbx_average_fsc_free(self, pdbx_average_fsc_free):
        """Sets the pdbx_average_fsc_free of this Refine.

        Average Fourier Shell Correlation (avgFSC) between model and  observed structure factors for reflections not included in refinement.   The average FSC is a measure of the agreement between observed  and calculated structure factors.                    sum(N~i~ FSC~free-i~)  avgFSC~free~   = ---------------------                   sum(N~i~)    N~i~          = the number of free reflections in the resolution shell i  FSC~free-i~   = FSC for free reflections in the i-th resolution shell calculated as:                  (sum(|F~o~| |F~c~| fom cos(phi~c~-phi~o~)))  FSC~free-i~  = -------------------------------------------                 (sum(|F~o~|^2^) (sum(|F~c~|^2^)))^1/2^   |F~o~|   = amplitude of observed structure factor  |F~c~|   = amplitude of calculated structure factor  phi~o~   = phase of observed structure factor  phi~c~   = phase of calculated structure factor  fom      = figure of merit of the experimental phases.   Summation of FSC~free-i~ is carried over all free reflections in the resolution shell.   Summation of avgFSC~free~ is carried over all resolution shells.    Ref:  Rosenthal P.B., Henderson R.        \"Optimal determination of particle orientation, absolute hand,        and contrast loss in single-particle electron cryomicroscopy.        Journal of Molecular Biology. 2003;333(4):721-745, equation (A6).  # noqa: E501

        :param pdbx_average_fsc_free: The pdbx_average_fsc_free of this Refine.  # noqa: E501
        :type: float
        """

        self._pdbx_average_fsc_free = pdbx_average_fsc_free

    @property
    def pdbx_average_fsc_overall(self):
        """Gets the pdbx_average_fsc_overall of this Refine.  # noqa: E501

        Overall average Fourier Shell Correlation (avgFSC) between model and  observed structure factors for all reflections.   The average FSC is a measure of the agreement between observed  and calculated structure factors.              sum(N~i~ FSC~i~)  avgFSC   = ----------------             sum(N~i~)    N~i~     = the number of all reflections in the resolution shell i  FSC~i~   = FSC for all reflections in the i-th resolution shell calculated as:             (sum(|F~o~| |F~c~| fom cos(phi~c~-phi~o~)))  FSC~i~  = -------------------------------------------            (sum(|F~o~|^2^) (sum(|F~c~|^2^)))^1/2^   |F~o~|   = amplitude of observed structure factor  |F~c~|   = amplitude of calculated structure factor  phi~o~   = phase of observed structure factor  phi~c~   = phase of calculated structure factor  fom      = figure of merit of the experimental phases.   Summation of FSC~i~ is carried over all reflections in the resolution shell.   Summation of avgFSC is carried over all resolution shells.    Ref:  Rosenthal P.B., Henderson R.        \"Optimal determination of particle orientation, absolute hand,        and contrast loss in single-particle electron cryomicroscopy.        Journal of Molecular Biology. 2003;333(4):721-745, equation (A6).  # noqa: E501

        :return: The pdbx_average_fsc_overall of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._pdbx_average_fsc_overall

    @pdbx_average_fsc_overall.setter
    def pdbx_average_fsc_overall(self, pdbx_average_fsc_overall):
        """Sets the pdbx_average_fsc_overall of this Refine.

        Overall average Fourier Shell Correlation (avgFSC) between model and  observed structure factors for all reflections.   The average FSC is a measure of the agreement between observed  and calculated structure factors.              sum(N~i~ FSC~i~)  avgFSC   = ----------------             sum(N~i~)    N~i~     = the number of all reflections in the resolution shell i  FSC~i~   = FSC for all reflections in the i-th resolution shell calculated as:             (sum(|F~o~| |F~c~| fom cos(phi~c~-phi~o~)))  FSC~i~  = -------------------------------------------            (sum(|F~o~|^2^) (sum(|F~c~|^2^)))^1/2^   |F~o~|   = amplitude of observed structure factor  |F~c~|   = amplitude of calculated structure factor  phi~o~   = phase of observed structure factor  phi~c~   = phase of calculated structure factor  fom      = figure of merit of the experimental phases.   Summation of FSC~i~ is carried over all reflections in the resolution shell.   Summation of avgFSC is carried over all resolution shells.    Ref:  Rosenthal P.B., Henderson R.        \"Optimal determination of particle orientation, absolute hand,        and contrast loss in single-particle electron cryomicroscopy.        Journal of Molecular Biology. 2003;333(4):721-745, equation (A6).  # noqa: E501

        :param pdbx_average_fsc_overall: The pdbx_average_fsc_overall of this Refine.  # noqa: E501
        :type: float
        """

        self._pdbx_average_fsc_overall = pdbx_average_fsc_overall

    @property
    def pdbx_average_fsc_work(self):
        """Gets the pdbx_average_fsc_work of this Refine.  # noqa: E501

        Average Fourier Shell Correlation (avgFSC) between model and  observed structure factors for reflections included in refinement.   The average FSC is a measure of the agreement between observed  and calculated structure factors.                    sum(N~i~ FSC~work-i~)  avgFSC~work~   = ---------------------                   sum(N~i~)    N~i~          = the number of working reflections in the resolution shell i  FSC~work-i~   = FSC for working reflections in the i-th resolution shell calculated as:                  (sum(|F~o~| |F~c~| fom cos(phi~c~-phi~o~)))  FSC~work-i~  = -------------------------------------------                 (sum(|F~o~|^2^) (sum(|F~c~|^2^)))^1/2^   |F~o~|   = amplitude of observed structure factor  |F~c~|   = amplitude of calculated structure factor  phi~o~   = phase of observed structure factor  phi~c~   = phase of calculated structure factor  fom      = figure of merit of the experimental phases.   Summation of FSC~work-i~ is carried over all working reflections in the resolution shell.   Summation of avgFSC~work~ is carried over all resolution shells.    Ref:  Rosenthal P.B., Henderson R.        \"Optimal determination of particle orientation, absolute hand,        and contrast loss in single-particle electron cryomicroscopy.        Journal of Molecular Biology. 2003;333(4):721-745, equation (A6).  # noqa: E501

        :return: The pdbx_average_fsc_work of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._pdbx_average_fsc_work

    @pdbx_average_fsc_work.setter
    def pdbx_average_fsc_work(self, pdbx_average_fsc_work):
        """Sets the pdbx_average_fsc_work of this Refine.

        Average Fourier Shell Correlation (avgFSC) between model and  observed structure factors for reflections included in refinement.   The average FSC is a measure of the agreement between observed  and calculated structure factors.                    sum(N~i~ FSC~work-i~)  avgFSC~work~   = ---------------------                   sum(N~i~)    N~i~          = the number of working reflections in the resolution shell i  FSC~work-i~   = FSC for working reflections in the i-th resolution shell calculated as:                  (sum(|F~o~| |F~c~| fom cos(phi~c~-phi~o~)))  FSC~work-i~  = -------------------------------------------                 (sum(|F~o~|^2^) (sum(|F~c~|^2^)))^1/2^   |F~o~|   = amplitude of observed structure factor  |F~c~|   = amplitude of calculated structure factor  phi~o~   = phase of observed structure factor  phi~c~   = phase of calculated structure factor  fom      = figure of merit of the experimental phases.   Summation of FSC~work-i~ is carried over all working reflections in the resolution shell.   Summation of avgFSC~work~ is carried over all resolution shells.    Ref:  Rosenthal P.B., Henderson R.        \"Optimal determination of particle orientation, absolute hand,        and contrast loss in single-particle electron cryomicroscopy.        Journal of Molecular Biology. 2003;333(4):721-745, equation (A6).  # noqa: E501

        :param pdbx_average_fsc_work: The pdbx_average_fsc_work of this Refine.  # noqa: E501
        :type: float
        """

        self._pdbx_average_fsc_work = pdbx_average_fsc_work

    @property
    def pdbx_data_cutoff_high_abs_f(self):
        """Gets the pdbx_data_cutoff_high_abs_f of this Refine.  # noqa: E501

        Value of F at \"high end\" of data cutoff.  # noqa: E501

        :return: The pdbx_data_cutoff_high_abs_f of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._pdbx_data_cutoff_high_abs_f

    @pdbx_data_cutoff_high_abs_f.setter
    def pdbx_data_cutoff_high_abs_f(self, pdbx_data_cutoff_high_abs_f):
        """Sets the pdbx_data_cutoff_high_abs_f of this Refine.

        Value of F at \"high end\" of data cutoff.  # noqa: E501

        :param pdbx_data_cutoff_high_abs_f: The pdbx_data_cutoff_high_abs_f of this Refine.  # noqa: E501
        :type: float
        """

        self._pdbx_data_cutoff_high_abs_f = pdbx_data_cutoff_high_abs_f

    @property
    def pdbx_data_cutoff_high_rms_abs_f(self):
        """Gets the pdbx_data_cutoff_high_rms_abs_f of this Refine.  # noqa: E501

        Value of RMS |F| used as high data cutoff.  # noqa: E501

        :return: The pdbx_data_cutoff_high_rms_abs_f of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._pdbx_data_cutoff_high_rms_abs_f

    @pdbx_data_cutoff_high_rms_abs_f.setter
    def pdbx_data_cutoff_high_rms_abs_f(self, pdbx_data_cutoff_high_rms_abs_f):
        """Sets the pdbx_data_cutoff_high_rms_abs_f of this Refine.

        Value of RMS |F| used as high data cutoff.  # noqa: E501

        :param pdbx_data_cutoff_high_rms_abs_f: The pdbx_data_cutoff_high_rms_abs_f of this Refine.  # noqa: E501
        :type: float
        """

        self._pdbx_data_cutoff_high_rms_abs_f = pdbx_data_cutoff_high_rms_abs_f

    @property
    def pdbx_data_cutoff_low_abs_f(self):
        """Gets the pdbx_data_cutoff_low_abs_f of this Refine.  # noqa: E501

        Value of F at \"low end\" of data cutoff.  # noqa: E501

        :return: The pdbx_data_cutoff_low_abs_f of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._pdbx_data_cutoff_low_abs_f

    @pdbx_data_cutoff_low_abs_f.setter
    def pdbx_data_cutoff_low_abs_f(self, pdbx_data_cutoff_low_abs_f):
        """Sets the pdbx_data_cutoff_low_abs_f of this Refine.

        Value of F at \"low end\" of data cutoff.  # noqa: E501

        :param pdbx_data_cutoff_low_abs_f: The pdbx_data_cutoff_low_abs_f of this Refine.  # noqa: E501
        :type: float
        """

        self._pdbx_data_cutoff_low_abs_f = pdbx_data_cutoff_low_abs_f

    @property
    def pdbx_diffrn_id(self):
        """Gets the pdbx_diffrn_id of this Refine.  # noqa: E501

        An identifier for the diffraction data set used in this refinement.   Multiple diffraction data sets specified as a comma separated list.  # noqa: E501

        :return: The pdbx_diffrn_id of this Refine.  # noqa: E501
        :rtype: list[str]
        """
        return self._pdbx_diffrn_id

    @pdbx_diffrn_id.setter
    def pdbx_diffrn_id(self, pdbx_diffrn_id):
        """Sets the pdbx_diffrn_id of this Refine.

        An identifier for the diffraction data set used in this refinement.   Multiple diffraction data sets specified as a comma separated list.  # noqa: E501

        :param pdbx_diffrn_id: The pdbx_diffrn_id of this Refine.  # noqa: E501
        :type: list[str]
        """

        self._pdbx_diffrn_id = pdbx_diffrn_id

    @property
    def pdbx_isotropic_thermal_model(self):
        """Gets the pdbx_isotropic_thermal_model of this Refine.  # noqa: E501

        Whether the structure was refined with indvidual isotropic, anisotropic or overall temperature factor.  # noqa: E501

        :return: The pdbx_isotropic_thermal_model of this Refine.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_isotropic_thermal_model

    @pdbx_isotropic_thermal_model.setter
    def pdbx_isotropic_thermal_model(self, pdbx_isotropic_thermal_model):
        """Sets the pdbx_isotropic_thermal_model of this Refine.

        Whether the structure was refined with indvidual isotropic, anisotropic or overall temperature factor.  # noqa: E501

        :param pdbx_isotropic_thermal_model: The pdbx_isotropic_thermal_model of this Refine.  # noqa: E501
        :type: str
        """

        self._pdbx_isotropic_thermal_model = pdbx_isotropic_thermal_model

    @property
    def pdbx_ls_cross_valid_method(self):
        """Gets the pdbx_ls_cross_valid_method of this Refine.  # noqa: E501

        Whether the cross validataion method was used through out or only at the end.  # noqa: E501

        :return: The pdbx_ls_cross_valid_method of this Refine.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_ls_cross_valid_method

    @pdbx_ls_cross_valid_method.setter
    def pdbx_ls_cross_valid_method(self, pdbx_ls_cross_valid_method):
        """Sets the pdbx_ls_cross_valid_method of this Refine.

        Whether the cross validataion method was used through out or only at the end.  # noqa: E501

        :param pdbx_ls_cross_valid_method: The pdbx_ls_cross_valid_method of this Refine.  # noqa: E501
        :type: str
        """

        self._pdbx_ls_cross_valid_method = pdbx_ls_cross_valid_method

    @property
    def pdbx_ls_sigma_f(self):
        """Gets the pdbx_ls_sigma_f of this Refine.  # noqa: E501

        Data cutoff (SIGMA(F))  # noqa: E501

        :return: The pdbx_ls_sigma_f of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._pdbx_ls_sigma_f

    @pdbx_ls_sigma_f.setter
    def pdbx_ls_sigma_f(self, pdbx_ls_sigma_f):
        """Sets the pdbx_ls_sigma_f of this Refine.

        Data cutoff (SIGMA(F))  # noqa: E501

        :param pdbx_ls_sigma_f: The pdbx_ls_sigma_f of this Refine.  # noqa: E501
        :type: float
        """

        self._pdbx_ls_sigma_f = pdbx_ls_sigma_f

    @property
    def pdbx_ls_sigma_fsqd(self):
        """Gets the pdbx_ls_sigma_fsqd of this Refine.  # noqa: E501

        Data cutoff (SIGMA(F^2))  # noqa: E501

        :return: The pdbx_ls_sigma_fsqd of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._pdbx_ls_sigma_fsqd

    @pdbx_ls_sigma_fsqd.setter
    def pdbx_ls_sigma_fsqd(self, pdbx_ls_sigma_fsqd):
        """Sets the pdbx_ls_sigma_fsqd of this Refine.

        Data cutoff (SIGMA(F^2))  # noqa: E501

        :param pdbx_ls_sigma_fsqd: The pdbx_ls_sigma_fsqd of this Refine.  # noqa: E501
        :type: float
        """

        self._pdbx_ls_sigma_fsqd = pdbx_ls_sigma_fsqd

    @property
    def pdbx_ls_sigma_i(self):
        """Gets the pdbx_ls_sigma_i of this Refine.  # noqa: E501

        Data cutoff (SIGMA(I))  # noqa: E501

        :return: The pdbx_ls_sigma_i of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._pdbx_ls_sigma_i

    @pdbx_ls_sigma_i.setter
    def pdbx_ls_sigma_i(self, pdbx_ls_sigma_i):
        """Sets the pdbx_ls_sigma_i of this Refine.

        Data cutoff (SIGMA(I))  # noqa: E501

        :param pdbx_ls_sigma_i: The pdbx_ls_sigma_i of this Refine.  # noqa: E501
        :type: float
        """

        self._pdbx_ls_sigma_i = pdbx_ls_sigma_i

    @property
    def pdbx_method_to_determine_struct(self):
        """Gets the pdbx_method_to_determine_struct of this Refine.  # noqa: E501

        Method(s) used to determine the structure.  # noqa: E501

        :return: The pdbx_method_to_determine_struct of this Refine.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_method_to_determine_struct

    @pdbx_method_to_determine_struct.setter
    def pdbx_method_to_determine_struct(self, pdbx_method_to_determine_struct):
        """Sets the pdbx_method_to_determine_struct of this Refine.

        Method(s) used to determine the structure.  # noqa: E501

        :param pdbx_method_to_determine_struct: The pdbx_method_to_determine_struct of this Refine.  # noqa: E501
        :type: str
        """

        self._pdbx_method_to_determine_struct = pdbx_method_to_determine_struct

    @property
    def pdbx_overall_esu_r(self):
        """Gets the pdbx_overall_esu_r of this Refine.  # noqa: E501

        Overall estimated standard uncertainties of positional  parameters based on R value.  # noqa: E501

        :return: The pdbx_overall_esu_r of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._pdbx_overall_esu_r

    @pdbx_overall_esu_r.setter
    def pdbx_overall_esu_r(self, pdbx_overall_esu_r):
        """Sets the pdbx_overall_esu_r of this Refine.

        Overall estimated standard uncertainties of positional  parameters based on R value.  # noqa: E501

        :param pdbx_overall_esu_r: The pdbx_overall_esu_r of this Refine.  # noqa: E501
        :type: float
        """

        self._pdbx_overall_esu_r = pdbx_overall_esu_r

    @property
    def pdbx_overall_esu_r_free(self):
        """Gets the pdbx_overall_esu_r_free of this Refine.  # noqa: E501

        Overall estimated standard uncertainties of positional parameters based on R free value.  # noqa: E501

        :return: The pdbx_overall_esu_r_free of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._pdbx_overall_esu_r_free

    @pdbx_overall_esu_r_free.setter
    def pdbx_overall_esu_r_free(self, pdbx_overall_esu_r_free):
        """Sets the pdbx_overall_esu_r_free of this Refine.

        Overall estimated standard uncertainties of positional parameters based on R free value.  # noqa: E501

        :param pdbx_overall_esu_r_free: The pdbx_overall_esu_r_free of this Refine.  # noqa: E501
        :type: float
        """

        self._pdbx_overall_esu_r_free = pdbx_overall_esu_r_free

    @property
    def pdbx_overall_su_r_blow_dpi(self):
        """Gets the pdbx_overall_su_r_blow_dpi of this Refine.  # noqa: E501

        The overall standard uncertainty (estimated standard deviation)  of the displacement parameters based on the crystallographic  R value, expressed in a formalism known as the dispersion  precision indicator (DPI).   Ref: Blow, D (2002) Acta Cryst. D58, 792-797  # noqa: E501

        :return: The pdbx_overall_su_r_blow_dpi of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._pdbx_overall_su_r_blow_dpi

    @pdbx_overall_su_r_blow_dpi.setter
    def pdbx_overall_su_r_blow_dpi(self, pdbx_overall_su_r_blow_dpi):
        """Sets the pdbx_overall_su_r_blow_dpi of this Refine.

        The overall standard uncertainty (estimated standard deviation)  of the displacement parameters based on the crystallographic  R value, expressed in a formalism known as the dispersion  precision indicator (DPI).   Ref: Blow, D (2002) Acta Cryst. D58, 792-797  # noqa: E501

        :param pdbx_overall_su_r_blow_dpi: The pdbx_overall_su_r_blow_dpi of this Refine.  # noqa: E501
        :type: float
        """

        self._pdbx_overall_su_r_blow_dpi = pdbx_overall_su_r_blow_dpi

    @property
    def pdbx_overall_su_r_free_blow_dpi(self):
        """Gets the pdbx_overall_su_r_free_blow_dpi of this Refine.  # noqa: E501

        The overall standard uncertainty (estimated standard deviation)  of the displacement parameters based on the crystallographic  R-free value, expressed in a formalism known as the dispersion  precision indicator (DPI).   Ref: Blow, D (2002) Acta Cryst. D58, 792-797  # noqa: E501

        :return: The pdbx_overall_su_r_free_blow_dpi of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._pdbx_overall_su_r_free_blow_dpi

    @pdbx_overall_su_r_free_blow_dpi.setter
    def pdbx_overall_su_r_free_blow_dpi(self, pdbx_overall_su_r_free_blow_dpi):
        """Sets the pdbx_overall_su_r_free_blow_dpi of this Refine.

        The overall standard uncertainty (estimated standard deviation)  of the displacement parameters based on the crystallographic  R-free value, expressed in a formalism known as the dispersion  precision indicator (DPI).   Ref: Blow, D (2002) Acta Cryst. D58, 792-797  # noqa: E501

        :param pdbx_overall_su_r_free_blow_dpi: The pdbx_overall_su_r_free_blow_dpi of this Refine.  # noqa: E501
        :type: float
        """

        self._pdbx_overall_su_r_free_blow_dpi = pdbx_overall_su_r_free_blow_dpi

    @property
    def pdbx_overall_su_r_free_cruickshank_dpi(self):
        """Gets the pdbx_overall_su_r_free_cruickshank_dpi of this Refine.  # noqa: E501

        The overall standard uncertainty (estimated standard deviation)  of the displacement parameters based on the crystallographic  R-free value, expressed in a formalism known as the dispersion  precision indicator (DPI).   Ref: Cruickshank, D. W. J. (1999). Acta Cryst. D55, 583-601.  # noqa: E501

        :return: The pdbx_overall_su_r_free_cruickshank_dpi of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._pdbx_overall_su_r_free_cruickshank_dpi

    @pdbx_overall_su_r_free_cruickshank_dpi.setter
    def pdbx_overall_su_r_free_cruickshank_dpi(self, pdbx_overall_su_r_free_cruickshank_dpi):
        """Sets the pdbx_overall_su_r_free_cruickshank_dpi of this Refine.

        The overall standard uncertainty (estimated standard deviation)  of the displacement parameters based on the crystallographic  R-free value, expressed in a formalism known as the dispersion  precision indicator (DPI).   Ref: Cruickshank, D. W. J. (1999). Acta Cryst. D55, 583-601.  # noqa: E501

        :param pdbx_overall_su_r_free_cruickshank_dpi: The pdbx_overall_su_r_free_cruickshank_dpi of this Refine.  # noqa: E501
        :type: float
        """

        self._pdbx_overall_su_r_free_cruickshank_dpi = pdbx_overall_su_r_free_cruickshank_dpi

    @property
    def pdbx_overall_phase_error(self):
        """Gets the pdbx_overall_phase_error of this Refine.  # noqa: E501

        The overall phase error for all reflections after refinement using  the current refinement target.  # noqa: E501

        :return: The pdbx_overall_phase_error of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._pdbx_overall_phase_error

    @pdbx_overall_phase_error.setter
    def pdbx_overall_phase_error(self, pdbx_overall_phase_error):
        """Sets the pdbx_overall_phase_error of this Refine.

        The overall phase error for all reflections after refinement using  the current refinement target.  # noqa: E501

        :param pdbx_overall_phase_error: The pdbx_overall_phase_error of this Refine.  # noqa: E501
        :type: float
        """

        self._pdbx_overall_phase_error = pdbx_overall_phase_error

    @property
    def pdbx_refine_id(self):
        """Gets the pdbx_refine_id of this Refine.  # noqa: E501

        This data item uniquely identifies a refinement within an entry.  _refine.pdbx_refine_id can be used to distinguish the results of  joint refinements.  # noqa: E501

        :return: The pdbx_refine_id of this Refine.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_refine_id

    @pdbx_refine_id.setter
    def pdbx_refine_id(self, pdbx_refine_id):
        """Sets the pdbx_refine_id of this Refine.

        This data item uniquely identifies a refinement within an entry.  _refine.pdbx_refine_id can be used to distinguish the results of  joint refinements.  # noqa: E501

        :param pdbx_refine_id: The pdbx_refine_id of this Refine.  # noqa: E501
        :type: str
        """
        if pdbx_refine_id is None:
            raise ValueError("Invalid value for `pdbx_refine_id`, must not be `None`")  # noqa: E501

        self._pdbx_refine_id = pdbx_refine_id

    @property
    def pdbx_solvent_ion_probe_radii(self):
        """Gets the pdbx_solvent_ion_probe_radii of this Refine.  # noqa: E501

        For bulk solvent mask calculation, the amount that the ionic radii of atoms, which can be ions, are increased used.  # noqa: E501

        :return: The pdbx_solvent_ion_probe_radii of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._pdbx_solvent_ion_probe_radii

    @pdbx_solvent_ion_probe_radii.setter
    def pdbx_solvent_ion_probe_radii(self, pdbx_solvent_ion_probe_radii):
        """Sets the pdbx_solvent_ion_probe_radii of this Refine.

        For bulk solvent mask calculation, the amount that the ionic radii of atoms, which can be ions, are increased used.  # noqa: E501

        :param pdbx_solvent_ion_probe_radii: The pdbx_solvent_ion_probe_radii of this Refine.  # noqa: E501
        :type: float
        """

        self._pdbx_solvent_ion_probe_radii = pdbx_solvent_ion_probe_radii

    @property
    def pdbx_solvent_shrinkage_radii(self):
        """Gets the pdbx_solvent_shrinkage_radii of this Refine.  # noqa: E501

        For bulk solvent mask calculation, amount mask is shrunk after taking away atoms with new radii and a constant value assigned to this new region.  # noqa: E501

        :return: The pdbx_solvent_shrinkage_radii of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._pdbx_solvent_shrinkage_radii

    @pdbx_solvent_shrinkage_radii.setter
    def pdbx_solvent_shrinkage_radii(self, pdbx_solvent_shrinkage_radii):
        """Sets the pdbx_solvent_shrinkage_radii of this Refine.

        For bulk solvent mask calculation, amount mask is shrunk after taking away atoms with new radii and a constant value assigned to this new region.  # noqa: E501

        :param pdbx_solvent_shrinkage_radii: The pdbx_solvent_shrinkage_radii of this Refine.  # noqa: E501
        :type: float
        """

        self._pdbx_solvent_shrinkage_radii = pdbx_solvent_shrinkage_radii

    @property
    def pdbx_solvent_vdw_probe_radii(self):
        """Gets the pdbx_solvent_vdw_probe_radii of this Refine.  # noqa: E501

        For bulk solvent mask calculation, the value by which the vdw radii of non-ion atoms (like carbon) are increased and used.  # noqa: E501

        :return: The pdbx_solvent_vdw_probe_radii of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._pdbx_solvent_vdw_probe_radii

    @pdbx_solvent_vdw_probe_radii.setter
    def pdbx_solvent_vdw_probe_radii(self, pdbx_solvent_vdw_probe_radii):
        """Sets the pdbx_solvent_vdw_probe_radii of this Refine.

        For bulk solvent mask calculation, the value by which the vdw radii of non-ion atoms (like carbon) are increased and used.  # noqa: E501

        :param pdbx_solvent_vdw_probe_radii: The pdbx_solvent_vdw_probe_radii of this Refine.  # noqa: E501
        :type: float
        """

        self._pdbx_solvent_vdw_probe_radii = pdbx_solvent_vdw_probe_radii

    @property
    def pdbx_starting_model(self):
        """Gets the pdbx_starting_model of this Refine.  # noqa: E501

        Starting model for refinement.  Starting model for  molecular replacement should refer to a previous  structure or experiment.  # noqa: E501

        :return: The pdbx_starting_model of this Refine.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_starting_model

    @pdbx_starting_model.setter
    def pdbx_starting_model(self, pdbx_starting_model):
        """Sets the pdbx_starting_model of this Refine.

        Starting model for refinement.  Starting model for  molecular replacement should refer to a previous  structure or experiment.  # noqa: E501

        :param pdbx_starting_model: The pdbx_starting_model of this Refine.  # noqa: E501
        :type: str
        """

        self._pdbx_starting_model = pdbx_starting_model

    @property
    def pdbx_stereochem_target_val_spec_case(self):
        """Gets the pdbx_stereochem_target_val_spec_case of this Refine.  # noqa: E501

        Special case of stereochemistry target values used in SHELXL refinement.  # noqa: E501

        :return: The pdbx_stereochem_target_val_spec_case of this Refine.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_stereochem_target_val_spec_case

    @pdbx_stereochem_target_val_spec_case.setter
    def pdbx_stereochem_target_val_spec_case(self, pdbx_stereochem_target_val_spec_case):
        """Sets the pdbx_stereochem_target_val_spec_case of this Refine.

        Special case of stereochemistry target values used in SHELXL refinement.  # noqa: E501

        :param pdbx_stereochem_target_val_spec_case: The pdbx_stereochem_target_val_spec_case of this Refine.  # noqa: E501
        :type: str
        """

        self._pdbx_stereochem_target_val_spec_case = pdbx_stereochem_target_val_spec_case

    @property
    def pdbx_stereochemistry_target_values(self):
        """Gets the pdbx_stereochemistry_target_values of this Refine.  # noqa: E501

        Stereochemistry target values used in refinement.  # noqa: E501

        :return: The pdbx_stereochemistry_target_values of this Refine.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_stereochemistry_target_values

    @pdbx_stereochemistry_target_values.setter
    def pdbx_stereochemistry_target_values(self, pdbx_stereochemistry_target_values):
        """Sets the pdbx_stereochemistry_target_values of this Refine.

        Stereochemistry target values used in refinement.  # noqa: E501

        :param pdbx_stereochemistry_target_values: The pdbx_stereochemistry_target_values of this Refine.  # noqa: E501
        :type: str
        """

        self._pdbx_stereochemistry_target_values = pdbx_stereochemistry_target_values

    @property
    def solvent_model_details(self):
        """Gets the solvent_model_details of this Refine.  # noqa: E501

        Special aspects of the solvent model used during refinement.  # noqa: E501

        :return: The solvent_model_details of this Refine.  # noqa: E501
        :rtype: str
        """
        return self._solvent_model_details

    @solvent_model_details.setter
    def solvent_model_details(self, solvent_model_details):
        """Sets the solvent_model_details of this Refine.

        Special aspects of the solvent model used during refinement.  # noqa: E501

        :param solvent_model_details: The solvent_model_details of this Refine.  # noqa: E501
        :type: str
        """

        self._solvent_model_details = solvent_model_details

    @property
    def solvent_model_param_bsol(self):
        """Gets the solvent_model_param_bsol of this Refine.  # noqa: E501

        The value of the BSOL solvent-model parameter describing  the average isotropic displacement parameter of disordered  solvent atoms.   This is one of the two parameters (the other is  _refine.solvent_model_param_ksol) in Tronrud's method of  modelling the contribution of bulk solvent to the  scattering. The standard scale factor is modified according  to the expression       k0 exp(-B0 * s^2^)[1-KSOL * exp(-BSOL * s^2^)]   where k0 and B0 are the scale factors for the protein.   Ref: Tronrud, D. E. (1997). Methods Enzymol. 277, 243-268.  # noqa: E501

        :return: The solvent_model_param_bsol of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._solvent_model_param_bsol

    @solvent_model_param_bsol.setter
    def solvent_model_param_bsol(self, solvent_model_param_bsol):
        """Sets the solvent_model_param_bsol of this Refine.

        The value of the BSOL solvent-model parameter describing  the average isotropic displacement parameter of disordered  solvent atoms.   This is one of the two parameters (the other is  _refine.solvent_model_param_ksol) in Tronrud's method of  modelling the contribution of bulk solvent to the  scattering. The standard scale factor is modified according  to the expression       k0 exp(-B0 * s^2^)[1-KSOL * exp(-BSOL * s^2^)]   where k0 and B0 are the scale factors for the protein.   Ref: Tronrud, D. E. (1997). Methods Enzymol. 277, 243-268.  # noqa: E501

        :param solvent_model_param_bsol: The solvent_model_param_bsol of this Refine.  # noqa: E501
        :type: float
        """

        self._solvent_model_param_bsol = solvent_model_param_bsol

    @property
    def solvent_model_param_ksol(self):
        """Gets the solvent_model_param_ksol of this Refine.  # noqa: E501

        The value of the KSOL solvent-model parameter describing  the ratio of the electron density in the bulk solvent to the  electron density in the molecular solute.   This is one of the two parameters (the other is  _refine.solvent_model_param_bsol) in Tronrud's method of  modelling the contribution of bulk solvent to the  scattering. The standard scale factor is modified according  to the expression       k0 exp(-B0 * s^2^)[1-KSOL * exp(-BSOL * s^2^)]   where k0 and B0 are the scale factors for the protein.   Ref: Tronrud, D. E. (1997). Methods Enzymol. 277, 243-268.  # noqa: E501

        :return: The solvent_model_param_ksol of this Refine.  # noqa: E501
        :rtype: float
        """
        return self._solvent_model_param_ksol

    @solvent_model_param_ksol.setter
    def solvent_model_param_ksol(self, solvent_model_param_ksol):
        """Sets the solvent_model_param_ksol of this Refine.

        The value of the KSOL solvent-model parameter describing  the ratio of the electron density in the bulk solvent to the  electron density in the molecular solute.   This is one of the two parameters (the other is  _refine.solvent_model_param_bsol) in Tronrud's method of  modelling the contribution of bulk solvent to the  scattering. The standard scale factor is modified according  to the expression       k0 exp(-B0 * s^2^)[1-KSOL * exp(-BSOL * s^2^)]   where k0 and B0 are the scale factors for the protein.   Ref: Tronrud, D. E. (1997). Methods Enzymol. 277, 243-268.  # noqa: E501

        :param solvent_model_param_ksol: The solvent_model_param_ksol of this Refine.  # noqa: E501
        :type: float
        """

        self._solvent_model_param_ksol = solvent_model_param_ksol

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Refine, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Refine):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
