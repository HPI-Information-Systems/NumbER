# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PdbxReferenceMoleculeDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'family_prd_id': 'str',
        'ordinal': 'int',
        'source': 'str',
        'source_id': 'str',
        'text': 'str'
    }

    attribute_map = {
        'family_prd_id': 'family_prd_id',
        'ordinal': 'ordinal',
        'source': 'source',
        'source_id': 'source_id',
        'text': 'text'
    }

    def __init__(self, family_prd_id=None, ordinal=None, source=None, source_id=None, text=None):  # noqa: E501
        """PdbxReferenceMoleculeDetails - a model defined in Swagger"""  # noqa: E501
        self._family_prd_id = None
        self._ordinal = None
        self._source = None
        self._source_id = None
        self._text = None
        self.discriminator = None
        self.family_prd_id = family_prd_id
        self.ordinal = ordinal
        if source is not None:
            self.source = source
        if source_id is not None:
            self.source_id = source_id
        if text is not None:
            self.text = text

    @property
    def family_prd_id(self):
        """Gets the family_prd_id of this PdbxReferenceMoleculeDetails.  # noqa: E501

        The value of _pdbx_reference_molecule_details.family_prd_id is a reference to  _pdbx_reference_molecule_list.family_prd_id' in category PDBX_REFERENCE_MOLECULE_FAMILY.  # noqa: E501

        :return: The family_prd_id of this PdbxReferenceMoleculeDetails.  # noqa: E501
        :rtype: str
        """
        return self._family_prd_id

    @family_prd_id.setter
    def family_prd_id(self, family_prd_id):
        """Sets the family_prd_id of this PdbxReferenceMoleculeDetails.

        The value of _pdbx_reference_molecule_details.family_prd_id is a reference to  _pdbx_reference_molecule_list.family_prd_id' in category PDBX_REFERENCE_MOLECULE_FAMILY.  # noqa: E501

        :param family_prd_id: The family_prd_id of this PdbxReferenceMoleculeDetails.  # noqa: E501
        :type: str
        """
        if family_prd_id is None:
            raise ValueError("Invalid value for `family_prd_id`, must not be `None`")  # noqa: E501

        self._family_prd_id = family_prd_id

    @property
    def ordinal(self):
        """Gets the ordinal of this PdbxReferenceMoleculeDetails.  # noqa: E501

        The value of _pdbx_reference_molecule_details.ordinal is an ordinal that  distinguishes each descriptive text for this entity.  # noqa: E501

        :return: The ordinal of this PdbxReferenceMoleculeDetails.  # noqa: E501
        :rtype: int
        """
        return self._ordinal

    @ordinal.setter
    def ordinal(self, ordinal):
        """Sets the ordinal of this PdbxReferenceMoleculeDetails.

        The value of _pdbx_reference_molecule_details.ordinal is an ordinal that  distinguishes each descriptive text for this entity.  # noqa: E501

        :param ordinal: The ordinal of this PdbxReferenceMoleculeDetails.  # noqa: E501
        :type: int
        """
        if ordinal is None:
            raise ValueError("Invalid value for `ordinal`, must not be `None`")  # noqa: E501

        self._ordinal = ordinal

    @property
    def source(self):
        """Gets the source of this PdbxReferenceMoleculeDetails.  # noqa: E501

        A data source of this information (e.g. PubMed, Merck Index)  # noqa: E501

        :return: The source of this PdbxReferenceMoleculeDetails.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this PdbxReferenceMoleculeDetails.

        A data source of this information (e.g. PubMed, Merck Index)  # noqa: E501

        :param source: The source of this PdbxReferenceMoleculeDetails.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def source_id(self):
        """Gets the source_id of this PdbxReferenceMoleculeDetails.  # noqa: E501

        A identifier within the data source for this information.  # noqa: E501

        :return: The source_id of this PdbxReferenceMoleculeDetails.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this PdbxReferenceMoleculeDetails.

        A identifier within the data source for this information.  # noqa: E501

        :param source_id: The source_id of this PdbxReferenceMoleculeDetails.  # noqa: E501
        :type: str
        """

        self._source_id = source_id

    @property
    def text(self):
        """Gets the text of this PdbxReferenceMoleculeDetails.  # noqa: E501

        The text of the description of special aspects of the entity.  # noqa: E501

        :return: The text of this PdbxReferenceMoleculeDetails.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this PdbxReferenceMoleculeDetails.

        The text of the description of special aspects of the entity.  # noqa: E501

        :param text: The text of this PdbxReferenceMoleculeDetails.  # noqa: E501
        :type: str
        """

        self._text = text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PdbxReferenceMoleculeDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdbxReferenceMoleculeDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
