# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RcsbRepositoryHoldingsInsilicoModels(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'audit_authors': 'list[str]',
        'deposit_date': 'datetime',
        'id_codes_replaced_by': 'list[str]',
        'release_date': 'datetime',
        'remove_date': 'datetime',
        'status_code': 'str',
        'title': 'str'
    }

    attribute_map = {
        'audit_authors': 'audit_authors',
        'deposit_date': 'deposit_date',
        'id_codes_replaced_by': 'id_codes_replaced_by',
        'release_date': 'release_date',
        'remove_date': 'remove_date',
        'status_code': 'status_code',
        'title': 'title'
    }

    def __init__(self, audit_authors=None, deposit_date=None, id_codes_replaced_by=None, release_date=None, remove_date=None, status_code=None, title=None):  # noqa: E501
        """RcsbRepositoryHoldingsInsilicoModels - a model defined in Swagger"""  # noqa: E501
        self._audit_authors = None
        self._deposit_date = None
        self._id_codes_replaced_by = None
        self._release_date = None
        self._remove_date = None
        self._status_code = None
        self._title = None
        self.discriminator = None
        if audit_authors is not None:
            self.audit_authors = audit_authors
        if deposit_date is not None:
            self.deposit_date = deposit_date
        if id_codes_replaced_by is not None:
            self.id_codes_replaced_by = id_codes_replaced_by
        if release_date is not None:
            self.release_date = release_date
        if remove_date is not None:
            self.remove_date = remove_date
        if status_code is not None:
            self.status_code = status_code
        if title is not None:
            self.title = title

    @property
    def audit_authors(self):
        """Gets the audit_authors of this RcsbRepositoryHoldingsInsilicoModels.  # noqa: E501

        Names of the authors of the entry.  # noqa: E501

        :return: The audit_authors of this RcsbRepositoryHoldingsInsilicoModels.  # noqa: E501
        :rtype: list[str]
        """
        return self._audit_authors

    @audit_authors.setter
    def audit_authors(self, audit_authors):
        """Sets the audit_authors of this RcsbRepositoryHoldingsInsilicoModels.

        Names of the authors of the entry.  # noqa: E501

        :param audit_authors: The audit_authors of this RcsbRepositoryHoldingsInsilicoModels.  # noqa: E501
        :type: list[str]
        """

        self._audit_authors = audit_authors

    @property
    def deposit_date(self):
        """Gets the deposit_date of this RcsbRepositoryHoldingsInsilicoModels.  # noqa: E501

        The entry deposition date.  # noqa: E501

        :return: The deposit_date of this RcsbRepositoryHoldingsInsilicoModels.  # noqa: E501
        :rtype: datetime
        """
        return self._deposit_date

    @deposit_date.setter
    def deposit_date(self, deposit_date):
        """Sets the deposit_date of this RcsbRepositoryHoldingsInsilicoModels.

        The entry deposition date.  # noqa: E501

        :param deposit_date: The deposit_date of this RcsbRepositoryHoldingsInsilicoModels.  # noqa: E501
        :type: datetime
        """

        self._deposit_date = deposit_date

    @property
    def id_codes_replaced_by(self):
        """Gets the id_codes_replaced_by of this RcsbRepositoryHoldingsInsilicoModels.  # noqa: E501

        The list of superseding PDB accession codes for the removed insilico model entry.  # noqa: E501

        :return: The id_codes_replaced_by of this RcsbRepositoryHoldingsInsilicoModels.  # noqa: E501
        :rtype: list[str]
        """
        return self._id_codes_replaced_by

    @id_codes_replaced_by.setter
    def id_codes_replaced_by(self, id_codes_replaced_by):
        """Sets the id_codes_replaced_by of this RcsbRepositoryHoldingsInsilicoModels.

        The list of superseding PDB accession codes for the removed insilico model entry.  # noqa: E501

        :param id_codes_replaced_by: The id_codes_replaced_by of this RcsbRepositoryHoldingsInsilicoModels.  # noqa: E501
        :type: list[str]
        """

        self._id_codes_replaced_by = id_codes_replaced_by

    @property
    def release_date(self):
        """Gets the release_date of this RcsbRepositoryHoldingsInsilicoModels.  # noqa: E501

        The release date for the entry.  # noqa: E501

        :return: The release_date of this RcsbRepositoryHoldingsInsilicoModels.  # noqa: E501
        :rtype: datetime
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this RcsbRepositoryHoldingsInsilicoModels.

        The release date for the entry.  # noqa: E501

        :param release_date: The release_date of this RcsbRepositoryHoldingsInsilicoModels.  # noqa: E501
        :type: datetime
        """

        self._release_date = release_date

    @property
    def remove_date(self):
        """Gets the remove_date of this RcsbRepositoryHoldingsInsilicoModels.  # noqa: E501

        The removal date for the entry.  # noqa: E501

        :return: The remove_date of this RcsbRepositoryHoldingsInsilicoModels.  # noqa: E501
        :rtype: datetime
        """
        return self._remove_date

    @remove_date.setter
    def remove_date(self, remove_date):
        """Sets the remove_date of this RcsbRepositoryHoldingsInsilicoModels.

        The removal date for the entry.  # noqa: E501

        :param remove_date: The remove_date of this RcsbRepositoryHoldingsInsilicoModels.  # noqa: E501
        :type: datetime
        """

        self._remove_date = remove_date

    @property
    def status_code(self):
        """Gets the status_code of this RcsbRepositoryHoldingsInsilicoModels.  # noqa: E501

        The release status for the entry.  # noqa: E501

        :return: The status_code of this RcsbRepositoryHoldingsInsilicoModels.  # noqa: E501
        :rtype: str
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this RcsbRepositoryHoldingsInsilicoModels.

        The release status for the entry.  # noqa: E501

        :param status_code: The status_code of this RcsbRepositoryHoldingsInsilicoModels.  # noqa: E501
        :type: str
        """
        allowed_values = ["OBS", "TRSF", "WDRN"]  # noqa: E501
        if status_code not in allowed_values:
            raise ValueError(
                "Invalid value for `status_code` ({0}), must be one of {1}"  # noqa: E501
                .format(status_code, allowed_values)
            )

        self._status_code = status_code

    @property
    def title(self):
        """Gets the title of this RcsbRepositoryHoldingsInsilicoModels.  # noqa: E501

        The entry title.  # noqa: E501

        :return: The title of this RcsbRepositoryHoldingsInsilicoModels.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this RcsbRepositoryHoldingsInsilicoModels.

        The entry title.  # noqa: E501

        :param title: The title of this RcsbRepositoryHoldingsInsilicoModels.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RcsbRepositoryHoldingsInsilicoModels, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RcsbRepositoryHoldingsInsilicoModels):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
