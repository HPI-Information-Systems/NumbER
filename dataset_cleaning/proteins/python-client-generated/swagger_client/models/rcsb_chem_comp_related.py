# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RcsbChemCompRelated(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comp_id': 'str',
        'ordinal': 'int',
        'related_mapping_method': 'str',
        'resource_accession_code': 'str',
        'resource_name': 'str'
    }

    attribute_map = {
        'comp_id': 'comp_id',
        'ordinal': 'ordinal',
        'related_mapping_method': 'related_mapping_method',
        'resource_accession_code': 'resource_accession_code',
        'resource_name': 'resource_name'
    }

    def __init__(self, comp_id=None, ordinal=None, related_mapping_method=None, resource_accession_code=None, resource_name=None):  # noqa: E501
        """RcsbChemCompRelated - a model defined in Swagger"""  # noqa: E501
        self._comp_id = None
        self._ordinal = None
        self._related_mapping_method = None
        self._resource_accession_code = None
        self._resource_name = None
        self.discriminator = None
        self.comp_id = comp_id
        self.ordinal = ordinal
        if related_mapping_method is not None:
            self.related_mapping_method = related_mapping_method
        if resource_accession_code is not None:
            self.resource_accession_code = resource_accession_code
        if resource_name is not None:
            self.resource_name = resource_name

    @property
    def comp_id(self):
        """Gets the comp_id of this RcsbChemCompRelated.  # noqa: E501

        The value of _rcsb_chem_comp_related.comp_id is a reference to  a chemical component definition.  # noqa: E501

        :return: The comp_id of this RcsbChemCompRelated.  # noqa: E501
        :rtype: str
        """
        return self._comp_id

    @comp_id.setter
    def comp_id(self, comp_id):
        """Sets the comp_id of this RcsbChemCompRelated.

        The value of _rcsb_chem_comp_related.comp_id is a reference to  a chemical component definition.  # noqa: E501

        :param comp_id: The comp_id of this RcsbChemCompRelated.  # noqa: E501
        :type: str
        """
        if comp_id is None:
            raise ValueError("Invalid value for `comp_id`, must not be `None`")  # noqa: E501

        self._comp_id = comp_id

    @property
    def ordinal(self):
        """Gets the ordinal of this RcsbChemCompRelated.  # noqa: E501

        The value of _rcsb_chem_comp_related.ordinal distinguishes  related examples for each chemical component.  # noqa: E501

        :return: The ordinal of this RcsbChemCompRelated.  # noqa: E501
        :rtype: int
        """
        return self._ordinal

    @ordinal.setter
    def ordinal(self, ordinal):
        """Sets the ordinal of this RcsbChemCompRelated.

        The value of _rcsb_chem_comp_related.ordinal distinguishes  related examples for each chemical component.  # noqa: E501

        :param ordinal: The ordinal of this RcsbChemCompRelated.  # noqa: E501
        :type: int
        """
        if ordinal is None:
            raise ValueError("Invalid value for `ordinal`, must not be `None`")  # noqa: E501

        self._ordinal = ordinal

    @property
    def related_mapping_method(self):
        """Gets the related_mapping_method of this RcsbChemCompRelated.  # noqa: E501

        The method used to establish the resource correspondence.  # noqa: E501

        :return: The related_mapping_method of this RcsbChemCompRelated.  # noqa: E501
        :rtype: str
        """
        return self._related_mapping_method

    @related_mapping_method.setter
    def related_mapping_method(self, related_mapping_method):
        """Sets the related_mapping_method of this RcsbChemCompRelated.

        The method used to establish the resource correspondence.  # noqa: E501

        :param related_mapping_method: The related_mapping_method of this RcsbChemCompRelated.  # noqa: E501
        :type: str
        """
        allowed_values = ["assigned by DrugBank resource", "assigned by PDB", "assigned by PubChem resource", "matching ChEMBL ID in Pharos", "matching InChIKey in DrugBank", "matching InChIKey in PubChem", "matching InChIKey-prefix in DrugBank", "matching by RESID resource"]  # noqa: E501
        if related_mapping_method not in allowed_values:
            raise ValueError(
                "Invalid value for `related_mapping_method` ({0}), must be one of {1}"  # noqa: E501
                .format(related_mapping_method, allowed_values)
            )

        self._related_mapping_method = related_mapping_method

    @property
    def resource_accession_code(self):
        """Gets the resource_accession_code of this RcsbChemCompRelated.  # noqa: E501

        The resource identifier code for the related chemical reference.  # noqa: E501

        :return: The resource_accession_code of this RcsbChemCompRelated.  # noqa: E501
        :rtype: str
        """
        return self._resource_accession_code

    @resource_accession_code.setter
    def resource_accession_code(self, resource_accession_code):
        """Sets the resource_accession_code of this RcsbChemCompRelated.

        The resource identifier code for the related chemical reference.  # noqa: E501

        :param resource_accession_code: The resource_accession_code of this RcsbChemCompRelated.  # noqa: E501
        :type: str
        """

        self._resource_accession_code = resource_accession_code

    @property
    def resource_name(self):
        """Gets the resource_name of this RcsbChemCompRelated.  # noqa: E501

        The resource name for the related chemical reference.  # noqa: E501

        :return: The resource_name of this RcsbChemCompRelated.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this RcsbChemCompRelated.

        The resource name for the related chemical reference.  # noqa: E501

        :param resource_name: The resource_name of this RcsbChemCompRelated.  # noqa: E501
        :type: str
        """
        allowed_values = ["CAS", "CCDC/CSD", "ChEBI", "ChEMBL", "DrugBank", "Pharos", "PubChem", "RESID"]  # noqa: E501
        if resource_name not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_name` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_name, allowed_values)
            )

        self._resource_name = resource_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RcsbChemCompRelated, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RcsbChemCompRelated):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
