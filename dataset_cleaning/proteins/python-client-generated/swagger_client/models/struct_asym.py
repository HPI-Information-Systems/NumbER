# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StructAsym(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pdbx_pdb_id': 'str',
        'pdbx_alt_id': 'str',
        'pdbx_order': 'int',
        'pdbx_type': 'str'
    }

    attribute_map = {
        'pdbx_pdb_id': 'pdbx_PDB_id',
        'pdbx_alt_id': 'pdbx_alt_id',
        'pdbx_order': 'pdbx_order',
        'pdbx_type': 'pdbx_type'
    }

    def __init__(self, pdbx_pdb_id=None, pdbx_alt_id=None, pdbx_order=None, pdbx_type=None):  # noqa: E501
        """StructAsym - a model defined in Swagger"""  # noqa: E501
        self._pdbx_pdb_id = None
        self._pdbx_alt_id = None
        self._pdbx_order = None
        self._pdbx_type = None
        self.discriminator = None
        if pdbx_pdb_id is not None:
            self.pdbx_pdb_id = pdbx_pdb_id
        if pdbx_alt_id is not None:
            self.pdbx_alt_id = pdbx_alt_id
        if pdbx_order is not None:
            self.pdbx_order = pdbx_order
        if pdbx_type is not None:
            self.pdbx_type = pdbx_type

    @property
    def pdbx_pdb_id(self):
        """Gets the pdbx_pdb_id of this StructAsym.  # noqa: E501

        This data item is a pointer to _atom_site.pdbx_PDB_strand_id the  ATOM_SITE category.  # noqa: E501

        :return: The pdbx_pdb_id of this StructAsym.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_pdb_id

    @pdbx_pdb_id.setter
    def pdbx_pdb_id(self, pdbx_pdb_id):
        """Sets the pdbx_pdb_id of this StructAsym.

        This data item is a pointer to _atom_site.pdbx_PDB_strand_id the  ATOM_SITE category.  # noqa: E501

        :param pdbx_pdb_id: The pdbx_pdb_id of this StructAsym.  # noqa: E501
        :type: str
        """

        self._pdbx_pdb_id = pdbx_pdb_id

    @property
    def pdbx_alt_id(self):
        """Gets the pdbx_alt_id of this StructAsym.  # noqa: E501

        This data item is a pointer to _atom_site.ndb_alias_strand_id the  ATOM_SITE category.  # noqa: E501

        :return: The pdbx_alt_id of this StructAsym.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_alt_id

    @pdbx_alt_id.setter
    def pdbx_alt_id(self, pdbx_alt_id):
        """Sets the pdbx_alt_id of this StructAsym.

        This data item is a pointer to _atom_site.ndb_alias_strand_id the  ATOM_SITE category.  # noqa: E501

        :param pdbx_alt_id: The pdbx_alt_id of this StructAsym.  # noqa: E501
        :type: str
        """

        self._pdbx_alt_id = pdbx_alt_id

    @property
    def pdbx_order(self):
        """Gets the pdbx_order of this StructAsym.  # noqa: E501

        This data item gives the order of the structural elements in the  ATOM_SITE category.  # noqa: E501

        :return: The pdbx_order of this StructAsym.  # noqa: E501
        :rtype: int
        """
        return self._pdbx_order

    @pdbx_order.setter
    def pdbx_order(self, pdbx_order):
        """Sets the pdbx_order of this StructAsym.

        This data item gives the order of the structural elements in the  ATOM_SITE category.  # noqa: E501

        :param pdbx_order: The pdbx_order of this StructAsym.  # noqa: E501
        :type: int
        """

        self._pdbx_order = pdbx_order

    @property
    def pdbx_type(self):
        """Gets the pdbx_type of this StructAsym.  # noqa: E501

        This data item describes the general type of the structural elements  in the ATOM_SITE category.  # noqa: E501

        :return: The pdbx_type of this StructAsym.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_type

    @pdbx_type.setter
    def pdbx_type(self, pdbx_type):
        """Sets the pdbx_type of this StructAsym.

        This data item describes the general type of the structural elements  in the ATOM_SITE category.  # noqa: E501

        :param pdbx_type: The pdbx_type of this StructAsym.  # noqa: E501
        :type: str
        """
        allowed_values = ["ATOMN", "ATOMP", "ATOMS", "HETAC", "HETAD", "HETAI", "HETAIN", "HETAS", "HETIC"]  # noqa: E501
        if pdbx_type not in allowed_values:
            raise ValueError(
                "Invalid value for `pdbx_type` ({0}), must be one of {1}"  # noqa: E501
                .format(pdbx_type, allowed_values)
            )

        self._pdbx_type = pdbx_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StructAsym, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StructAsym):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
