# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EmCtfCorrection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'details': 'str',
        'em_image_processing_id': 'str',
        'id': 'str',
        'type': 'str'
    }

    attribute_map = {
        'details': 'details',
        'em_image_processing_id': 'em_image_processing_id',
        'id': 'id',
        'type': 'type'
    }

    def __init__(self, details=None, em_image_processing_id=None, id=None, type=None):  # noqa: E501
        """EmCtfCorrection - a model defined in Swagger"""  # noqa: E501
        self._details = None
        self._em_image_processing_id = None
        self._id = None
        self._type = None
        self.discriminator = None
        if details is not None:
            self.details = details
        if em_image_processing_id is not None:
            self.em_image_processing_id = em_image_processing_id
        self.id = id
        if type is not None:
            self.type = type

    @property
    def details(self):
        """Gets the details of this EmCtfCorrection.  # noqa: E501

        Any additional details about CTF correction  # noqa: E501

        :return: The details of this EmCtfCorrection.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this EmCtfCorrection.

        Any additional details about CTF correction  # noqa: E501

        :param details: The details of this EmCtfCorrection.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def em_image_processing_id(self):
        """Gets the em_image_processing_id of this EmCtfCorrection.  # noqa: E501

        Foreign key to the EM_IMAGE_PROCESSING category  # noqa: E501

        :return: The em_image_processing_id of this EmCtfCorrection.  # noqa: E501
        :rtype: str
        """
        return self._em_image_processing_id

    @em_image_processing_id.setter
    def em_image_processing_id(self, em_image_processing_id):
        """Sets the em_image_processing_id of this EmCtfCorrection.

        Foreign key to the EM_IMAGE_PROCESSING category  # noqa: E501

        :param em_image_processing_id: The em_image_processing_id of this EmCtfCorrection.  # noqa: E501
        :type: str
        """

        self._em_image_processing_id = em_image_processing_id

    @property
    def id(self):
        """Gets the id of this EmCtfCorrection.  # noqa: E501

        PRIMARY KEY  # noqa: E501

        :return: The id of this EmCtfCorrection.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EmCtfCorrection.

        PRIMARY KEY  # noqa: E501

        :param id: The id of this EmCtfCorrection.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def type(self):
        """Gets the type of this EmCtfCorrection.  # noqa: E501

        Type of CTF correction applied  # noqa: E501

        :return: The type of this EmCtfCorrection.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EmCtfCorrection.

        Type of CTF correction applied  # noqa: E501

        :param type: The type of this EmCtfCorrection.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmCtfCorrection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmCtfCorrection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
