# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExptlCrystalGrow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'crystal_id': 'str',
        'details': 'str',
        'method': 'str',
        'p_h': 'float',
        'pdbx_details': 'str',
        'pdbx_p_h_range': 'str',
        'temp': 'float',
        'temp_details': 'str'
    }

    attribute_map = {
        'crystal_id': 'crystal_id',
        'details': 'details',
        'method': 'method',
        'p_h': 'pH',
        'pdbx_details': 'pdbx_details',
        'pdbx_p_h_range': 'pdbx_pH_range',
        'temp': 'temp',
        'temp_details': 'temp_details'
    }

    def __init__(self, crystal_id=None, details=None, method=None, p_h=None, pdbx_details=None, pdbx_p_h_range=None, temp=None, temp_details=None):  # noqa: E501
        """ExptlCrystalGrow - a model defined in Swagger"""  # noqa: E501
        self._crystal_id = None
        self._details = None
        self._method = None
        self._p_h = None
        self._pdbx_details = None
        self._pdbx_p_h_range = None
        self._temp = None
        self._temp_details = None
        self.discriminator = None
        self.crystal_id = crystal_id
        if details is not None:
            self.details = details
        if method is not None:
            self.method = method
        if p_h is not None:
            self.p_h = p_h
        if pdbx_details is not None:
            self.pdbx_details = pdbx_details
        if pdbx_p_h_range is not None:
            self.pdbx_p_h_range = pdbx_p_h_range
        if temp is not None:
            self.temp = temp
        if temp_details is not None:
            self.temp_details = temp_details

    @property
    def crystal_id(self):
        """Gets the crystal_id of this ExptlCrystalGrow.  # noqa: E501

        This data item is a pointer to _exptl_crystal.id in the  EXPTL_CRYSTAL category.  # noqa: E501

        :return: The crystal_id of this ExptlCrystalGrow.  # noqa: E501
        :rtype: str
        """
        return self._crystal_id

    @crystal_id.setter
    def crystal_id(self, crystal_id):
        """Sets the crystal_id of this ExptlCrystalGrow.

        This data item is a pointer to _exptl_crystal.id in the  EXPTL_CRYSTAL category.  # noqa: E501

        :param crystal_id: The crystal_id of this ExptlCrystalGrow.  # noqa: E501
        :type: str
        """
        if crystal_id is None:
            raise ValueError("Invalid value for `crystal_id`, must not be `None`")  # noqa: E501

        self._crystal_id = crystal_id

    @property
    def details(self):
        """Gets the details of this ExptlCrystalGrow.  # noqa: E501

        A description of special aspects of the crystal growth.  # noqa: E501

        :return: The details of this ExptlCrystalGrow.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this ExptlCrystalGrow.

        A description of special aspects of the crystal growth.  # noqa: E501

        :param details: The details of this ExptlCrystalGrow.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def method(self):
        """Gets the method of this ExptlCrystalGrow.  # noqa: E501

        The method used to grow the crystals.  # noqa: E501

        :return: The method of this ExptlCrystalGrow.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this ExptlCrystalGrow.

        The method used to grow the crystals.  # noqa: E501

        :param method: The method of this ExptlCrystalGrow.  # noqa: E501
        :type: str
        """

        self._method = method

    @property
    def p_h(self):
        """Gets the p_h of this ExptlCrystalGrow.  # noqa: E501

        The pH at which the crystal was grown. If more than one pH was  employed during the crystallization process, the final pH should  be noted here and the protocol involving multiple pH values  should be described in _exptl_crystal_grow.details.  # noqa: E501

        :return: The p_h of this ExptlCrystalGrow.  # noqa: E501
        :rtype: float
        """
        return self._p_h

    @p_h.setter
    def p_h(self, p_h):
        """Sets the p_h of this ExptlCrystalGrow.

        The pH at which the crystal was grown. If more than one pH was  employed during the crystallization process, the final pH should  be noted here and the protocol involving multiple pH values  should be described in _exptl_crystal_grow.details.  # noqa: E501

        :param p_h: The p_h of this ExptlCrystalGrow.  # noqa: E501
        :type: float
        """

        self._p_h = p_h

    @property
    def pdbx_details(self):
        """Gets the pdbx_details of this ExptlCrystalGrow.  # noqa: E501

        Text description of crystal growth procedure.  # noqa: E501

        :return: The pdbx_details of this ExptlCrystalGrow.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_details

    @pdbx_details.setter
    def pdbx_details(self, pdbx_details):
        """Sets the pdbx_details of this ExptlCrystalGrow.

        Text description of crystal growth procedure.  # noqa: E501

        :param pdbx_details: The pdbx_details of this ExptlCrystalGrow.  # noqa: E501
        :type: str
        """

        self._pdbx_details = pdbx_details

    @property
    def pdbx_p_h_range(self):
        """Gets the pdbx_p_h_range of this ExptlCrystalGrow.  # noqa: E501

        The range of pH values at which the crystal was grown.   Used when  a point estimate of pH is not appropriate.  # noqa: E501

        :return: The pdbx_p_h_range of this ExptlCrystalGrow.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_p_h_range

    @pdbx_p_h_range.setter
    def pdbx_p_h_range(self, pdbx_p_h_range):
        """Sets the pdbx_p_h_range of this ExptlCrystalGrow.

        The range of pH values at which the crystal was grown.   Used when  a point estimate of pH is not appropriate.  # noqa: E501

        :param pdbx_p_h_range: The pdbx_p_h_range of this ExptlCrystalGrow.  # noqa: E501
        :type: str
        """

        self._pdbx_p_h_range = pdbx_p_h_range

    @property
    def temp(self):
        """Gets the temp of this ExptlCrystalGrow.  # noqa: E501

        The temperature in kelvins at which the crystal was grown.  If more than one temperature was employed during the  crystallization process, the final temperature should be noted  here and the protocol  involving multiple temperatures should be  described in _exptl_crystal_grow.details.  # noqa: E501

        :return: The temp of this ExptlCrystalGrow.  # noqa: E501
        :rtype: float
        """
        return self._temp

    @temp.setter
    def temp(self, temp):
        """Sets the temp of this ExptlCrystalGrow.

        The temperature in kelvins at which the crystal was grown.  If more than one temperature was employed during the  crystallization process, the final temperature should be noted  here and the protocol  involving multiple temperatures should be  described in _exptl_crystal_grow.details.  # noqa: E501

        :param temp: The temp of this ExptlCrystalGrow.  # noqa: E501
        :type: float
        """

        self._temp = temp

    @property
    def temp_details(self):
        """Gets the temp_details of this ExptlCrystalGrow.  # noqa: E501

        A description of special aspects of temperature control during  crystal growth.  # noqa: E501

        :return: The temp_details of this ExptlCrystalGrow.  # noqa: E501
        :rtype: str
        """
        return self._temp_details

    @temp_details.setter
    def temp_details(self, temp_details):
        """Sets the temp_details of this ExptlCrystalGrow.

        A description of special aspects of temperature control during  crystal growth.  # noqa: E501

        :param temp_details: The temp_details of this ExptlCrystalGrow.  # noqa: E501
        :type: str
        """

        self._temp_details = temp_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExptlCrystalGrow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExptlCrystalGrow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
