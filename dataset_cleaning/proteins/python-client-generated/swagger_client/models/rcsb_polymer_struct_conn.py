# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RcsbPolymerStructConn(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connect_type': 'str',
        'description': 'str',
        'dist_value': 'float',
        'id': 'str',
        'ordinal_id': 'int',
        'role': 'str',
        'value_order': 'str',
        'connect_target': 'RcsbPolymerStructConnConnectTarget',
        'connect_partner': 'RcsbPolymerStructConnConnectPartner'
    }

    attribute_map = {
        'connect_type': 'connect_type',
        'description': 'description',
        'dist_value': 'dist_value',
        'id': 'id',
        'ordinal_id': 'ordinal_id',
        'role': 'role',
        'value_order': 'value_order',
        'connect_target': 'connect_target',
        'connect_partner': 'connect_partner'
    }

    def __init__(self, connect_type=None, description=None, dist_value=None, id=None, ordinal_id=None, role=None, value_order=None, connect_target=None, connect_partner=None):  # noqa: E501
        """RcsbPolymerStructConn - a model defined in Swagger"""  # noqa: E501
        self._connect_type = None
        self._description = None
        self._dist_value = None
        self._id = None
        self._ordinal_id = None
        self._role = None
        self._value_order = None
        self._connect_target = None
        self._connect_partner = None
        self.discriminator = None
        if connect_type is not None:
            self.connect_type = connect_type
        if description is not None:
            self.description = description
        if dist_value is not None:
            self.dist_value = dist_value
        if id is not None:
            self.id = id
        self.ordinal_id = ordinal_id
        if role is not None:
            self.role = role
        if value_order is not None:
            self.value_order = value_order
        if connect_target is not None:
            self.connect_target = connect_target
        if connect_partner is not None:
            self.connect_partner = connect_partner

    @property
    def connect_type(self):
        """Gets the connect_type of this RcsbPolymerStructConn.  # noqa: E501

        The connection type.  # noqa: E501

        :return: The connect_type of this RcsbPolymerStructConn.  # noqa: E501
        :rtype: str
        """
        return self._connect_type

    @connect_type.setter
    def connect_type(self, connect_type):
        """Sets the connect_type of this RcsbPolymerStructConn.

        The connection type.  # noqa: E501

        :param connect_type: The connect_type of this RcsbPolymerStructConn.  # noqa: E501
        :type: str
        """
        allowed_values = ["covalent bond", "covalent modification of a nucleotide base", "covalent modification of a nucleotide phosphate", "covalent modification of a nucleotide sugar", "covalent residue modification", "disulfide bridge", "hydrogen bond", "ionic interaction", "metal coordination", "mismatched base pairs"]  # noqa: E501
        if connect_type not in allowed_values:
            raise ValueError(
                "Invalid value for `connect_type` ({0}), must be one of {1}"  # noqa: E501
                .format(connect_type, allowed_values)
            )

        self._connect_type = connect_type

    @property
    def description(self):
        """Gets the description of this RcsbPolymerStructConn.  # noqa: E501

        A description of special details of the connection.  # noqa: E501

        :return: The description of this RcsbPolymerStructConn.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RcsbPolymerStructConn.

        A description of special details of the connection.  # noqa: E501

        :param description: The description of this RcsbPolymerStructConn.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def dist_value(self):
        """Gets the dist_value of this RcsbPolymerStructConn.  # noqa: E501

        Distance value for this contact.  # noqa: E501

        :return: The dist_value of this RcsbPolymerStructConn.  # noqa: E501
        :rtype: float
        """
        return self._dist_value

    @dist_value.setter
    def dist_value(self, dist_value):
        """Sets the dist_value of this RcsbPolymerStructConn.

        Distance value for this contact.  # noqa: E501

        :param dist_value: The dist_value of this RcsbPolymerStructConn.  # noqa: E501
        :type: float
        """

        self._dist_value = dist_value

    @property
    def id(self):
        """Gets the id of this RcsbPolymerStructConn.  # noqa: E501

        The value of _rcsb_polymer_struct_conn.id is an identifier for connection.   Note that this item need not be a number; it can be any unique  identifier.  # noqa: E501

        :return: The id of this RcsbPolymerStructConn.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RcsbPolymerStructConn.

        The value of _rcsb_polymer_struct_conn.id is an identifier for connection.   Note that this item need not be a number; it can be any unique  identifier.  # noqa: E501

        :param id: The id of this RcsbPolymerStructConn.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def ordinal_id(self):
        """Gets the ordinal_id of this RcsbPolymerStructConn.  # noqa: E501

        The value of _rcsb_polymer_struct_conn.id must uniquely identify a record in  the rcsb_polymer_struct_conn list.  # noqa: E501

        :return: The ordinal_id of this RcsbPolymerStructConn.  # noqa: E501
        :rtype: int
        """
        return self._ordinal_id

    @ordinal_id.setter
    def ordinal_id(self, ordinal_id):
        """Sets the ordinal_id of this RcsbPolymerStructConn.

        The value of _rcsb_polymer_struct_conn.id must uniquely identify a record in  the rcsb_polymer_struct_conn list.  # noqa: E501

        :param ordinal_id: The ordinal_id of this RcsbPolymerStructConn.  # noqa: E501
        :type: int
        """
        if ordinal_id is None:
            raise ValueError("Invalid value for `ordinal_id`, must not be `None`")  # noqa: E501

        self._ordinal_id = ordinal_id

    @property
    def role(self):
        """Gets the role of this RcsbPolymerStructConn.  # noqa: E501

        The chemical or structural role of the interaction  # noqa: E501

        :return: The role of this RcsbPolymerStructConn.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this RcsbPolymerStructConn.

        The chemical or structural role of the interaction  # noqa: E501

        :param role: The role of this RcsbPolymerStructConn.  # noqa: E501
        :type: str
        """
        allowed_values = ["C-Mannosylation", "N-Glycosylation", "O-Glycosylation", "S-Glycosylation"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def value_order(self):
        """Gets the value_order of this RcsbPolymerStructConn.  # noqa: E501

        The chemical bond order associated with the specified atoms in  this contact.  # noqa: E501

        :return: The value_order of this RcsbPolymerStructConn.  # noqa: E501
        :rtype: str
        """
        return self._value_order

    @value_order.setter
    def value_order(self, value_order):
        """Sets the value_order of this RcsbPolymerStructConn.

        The chemical bond order associated with the specified atoms in  this contact.  # noqa: E501

        :param value_order: The value_order of this RcsbPolymerStructConn.  # noqa: E501
        :type: str
        """
        allowed_values = ["doub", "quad", "sing", "trip"]  # noqa: E501
        if value_order not in allowed_values:
            raise ValueError(
                "Invalid value for `value_order` ({0}), must be one of {1}"  # noqa: E501
                .format(value_order, allowed_values)
            )

        self._value_order = value_order

    @property
    def connect_target(self):
        """Gets the connect_target of this RcsbPolymerStructConn.  # noqa: E501


        :return: The connect_target of this RcsbPolymerStructConn.  # noqa: E501
        :rtype: RcsbPolymerStructConnConnectTarget
        """
        return self._connect_target

    @connect_target.setter
    def connect_target(self, connect_target):
        """Sets the connect_target of this RcsbPolymerStructConn.


        :param connect_target: The connect_target of this RcsbPolymerStructConn.  # noqa: E501
        :type: RcsbPolymerStructConnConnectTarget
        """

        self._connect_target = connect_target

    @property
    def connect_partner(self):
        """Gets the connect_partner of this RcsbPolymerStructConn.  # noqa: E501


        :return: The connect_partner of this RcsbPolymerStructConn.  # noqa: E501
        :rtype: RcsbPolymerStructConnConnectPartner
        """
        return self._connect_partner

    @connect_partner.setter
    def connect_partner(self, connect_partner):
        """Sets the connect_partner of this RcsbPolymerStructConn.


        :param connect_partner: The connect_partner of this RcsbPolymerStructConn.  # noqa: E501
        :type: RcsbPolymerStructConnConnectPartner
        """

        self._connect_partner = connect_partner

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RcsbPolymerStructConn, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RcsbPolymerStructConn):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
