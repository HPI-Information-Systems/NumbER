# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RcsbNonpolymerEntityAnnotation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'annotation_id': 'str',
        'assignment_version': 'str',
        'comp_id': 'str',
        'description': 'str',
        'name': 'str',
        'provenance_source': 'str',
        'type': 'str',
        'annotation_lineage': 'list[RcsbNonpolymerEntityAnnotationAnnotationLineage]'
    }

    attribute_map = {
        'annotation_id': 'annotation_id',
        'assignment_version': 'assignment_version',
        'comp_id': 'comp_id',
        'description': 'description',
        'name': 'name',
        'provenance_source': 'provenance_source',
        'type': 'type',
        'annotation_lineage': 'annotation_lineage'
    }

    def __init__(self, annotation_id=None, assignment_version=None, comp_id=None, description=None, name=None, provenance_source=None, type=None, annotation_lineage=None):  # noqa: E501
        """RcsbNonpolymerEntityAnnotation - a model defined in Swagger"""  # noqa: E501
        self._annotation_id = None
        self._assignment_version = None
        self._comp_id = None
        self._description = None
        self._name = None
        self._provenance_source = None
        self._type = None
        self._annotation_lineage = None
        self.discriminator = None
        if annotation_id is not None:
            self.annotation_id = annotation_id
        if assignment_version is not None:
            self.assignment_version = assignment_version
        if comp_id is not None:
            self.comp_id = comp_id
        if description is not None:
            self.description = description
        if name is not None:
            self.name = name
        if provenance_source is not None:
            self.provenance_source = provenance_source
        if type is not None:
            self.type = type
        if annotation_lineage is not None:
            self.annotation_lineage = annotation_lineage

    @property
    def annotation_id(self):
        """Gets the annotation_id of this RcsbNonpolymerEntityAnnotation.  # noqa: E501

        An identifier for the annotation.  # noqa: E501

        :return: The annotation_id of this RcsbNonpolymerEntityAnnotation.  # noqa: E501
        :rtype: str
        """
        return self._annotation_id

    @annotation_id.setter
    def annotation_id(self, annotation_id):
        """Sets the annotation_id of this RcsbNonpolymerEntityAnnotation.

        An identifier for the annotation.  # noqa: E501

        :param annotation_id: The annotation_id of this RcsbNonpolymerEntityAnnotation.  # noqa: E501
        :type: str
        """

        self._annotation_id = annotation_id

    @property
    def assignment_version(self):
        """Gets the assignment_version of this RcsbNonpolymerEntityAnnotation.  # noqa: E501

        Identifies the version of the annotation assignment.  # noqa: E501

        :return: The assignment_version of this RcsbNonpolymerEntityAnnotation.  # noqa: E501
        :rtype: str
        """
        return self._assignment_version

    @assignment_version.setter
    def assignment_version(self, assignment_version):
        """Sets the assignment_version of this RcsbNonpolymerEntityAnnotation.

        Identifies the version of the annotation assignment.  # noqa: E501

        :param assignment_version: The assignment_version of this RcsbNonpolymerEntityAnnotation.  # noqa: E501
        :type: str
        """

        self._assignment_version = assignment_version

    @property
    def comp_id(self):
        """Gets the comp_id of this RcsbNonpolymerEntityAnnotation.  # noqa: E501

        Non-polymer(ligand) chemical component identifier for the entity.  # noqa: E501

        :return: The comp_id of this RcsbNonpolymerEntityAnnotation.  # noqa: E501
        :rtype: str
        """
        return self._comp_id

    @comp_id.setter
    def comp_id(self, comp_id):
        """Sets the comp_id of this RcsbNonpolymerEntityAnnotation.

        Non-polymer(ligand) chemical component identifier for the entity.  # noqa: E501

        :param comp_id: The comp_id of this RcsbNonpolymerEntityAnnotation.  # noqa: E501
        :type: str
        """

        self._comp_id = comp_id

    @property
    def description(self):
        """Gets the description of this RcsbNonpolymerEntityAnnotation.  # noqa: E501

        A description for the annotation.  # noqa: E501

        :return: The description of this RcsbNonpolymerEntityAnnotation.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RcsbNonpolymerEntityAnnotation.

        A description for the annotation.  # noqa: E501

        :param description: The description of this RcsbNonpolymerEntityAnnotation.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this RcsbNonpolymerEntityAnnotation.  # noqa: E501

        A name for the annotation.  # noqa: E501

        :return: The name of this RcsbNonpolymerEntityAnnotation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RcsbNonpolymerEntityAnnotation.

        A name for the annotation.  # noqa: E501

        :param name: The name of this RcsbNonpolymerEntityAnnotation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def provenance_source(self):
        """Gets the provenance_source of this RcsbNonpolymerEntityAnnotation.  # noqa: E501

        Code identifying the individual, organization or program that  assigned the annotation.  # noqa: E501

        :return: The provenance_source of this RcsbNonpolymerEntityAnnotation.  # noqa: E501
        :rtype: str
        """
        return self._provenance_source

    @provenance_source.setter
    def provenance_source(self, provenance_source):
        """Sets the provenance_source of this RcsbNonpolymerEntityAnnotation.

        Code identifying the individual, organization or program that  assigned the annotation.  # noqa: E501

        :param provenance_source: The provenance_source of this RcsbNonpolymerEntityAnnotation.  # noqa: E501
        :type: str
        """

        self._provenance_source = provenance_source

    @property
    def type(self):
        """Gets the type of this RcsbNonpolymerEntityAnnotation.  # noqa: E501

        A type or category of the annotation.  # noqa: E501

        :return: The type of this RcsbNonpolymerEntityAnnotation.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RcsbNonpolymerEntityAnnotation.

        A type or category of the annotation.  # noqa: E501

        :param type: The type of this RcsbNonpolymerEntityAnnotation.  # noqa: E501
        :type: str
        """
        allowed_values = ["SUBJECT_OF_INVESTIGATION"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def annotation_lineage(self):
        """Gets the annotation_lineage of this RcsbNonpolymerEntityAnnotation.  # noqa: E501


        :return: The annotation_lineage of this RcsbNonpolymerEntityAnnotation.  # noqa: E501
        :rtype: list[RcsbNonpolymerEntityAnnotationAnnotationLineage]
        """
        return self._annotation_lineage

    @annotation_lineage.setter
    def annotation_lineage(self, annotation_lineage):
        """Sets the annotation_lineage of this RcsbNonpolymerEntityAnnotation.


        :param annotation_lineage: The annotation_lineage of this RcsbNonpolymerEntityAnnotation.  # noqa: E501
        :type: list[RcsbNonpolymerEntityAnnotationAnnotationLineage]
        """

        self._annotation_lineage = annotation_lineage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RcsbNonpolymerEntityAnnotation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RcsbNonpolymerEntityAnnotation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
