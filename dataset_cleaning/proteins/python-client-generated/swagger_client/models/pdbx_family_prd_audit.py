# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PdbxFamilyPrdAudit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_type': 'str',
        'annotator': 'str',
        '_date': 'datetime',
        'details': 'str',
        'family_prd_id': 'str',
        'processing_site': 'str'
    }

    attribute_map = {
        'action_type': 'action_type',
        'annotator': 'annotator',
        '_date': 'date',
        'details': 'details',
        'family_prd_id': 'family_prd_id',
        'processing_site': 'processing_site'
    }

    def __init__(self, action_type=None, annotator=None, _date=None, details=None, family_prd_id=None, processing_site=None):  # noqa: E501
        """PdbxFamilyPrdAudit - a model defined in Swagger"""  # noqa: E501
        self._action_type = None
        self._annotator = None
        self.__date = None
        self._details = None
        self._family_prd_id = None
        self._processing_site = None
        self.discriminator = None
        self.action_type = action_type
        if annotator is not None:
            self.annotator = annotator
        self._date = _date
        if details is not None:
            self.details = details
        self.family_prd_id = family_prd_id
        if processing_site is not None:
            self.processing_site = processing_site

    @property
    def action_type(self):
        """Gets the action_type of this PdbxFamilyPrdAudit.  # noqa: E501

        The action associated with this audit record.  # noqa: E501

        :return: The action_type of this PdbxFamilyPrdAudit.  # noqa: E501
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this PdbxFamilyPrdAudit.

        The action associated with this audit record.  # noqa: E501

        :param action_type: The action_type of this PdbxFamilyPrdAudit.  # noqa: E501
        :type: str
        """
        if action_type is None:
            raise ValueError("Invalid value for `action_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Add PRD", "Create family", "Initial release", "Modify annotation", "Modify citation", "Modify family classification", "Modify family name", "Modify feature", "Modify molecule details", "Modify related structures", "Modify sequence", "Modify synonyms", "Obsolete family", "Obsolete familyt", "Other modification", "Remove PRD"]  # noqa: E501
        if action_type not in allowed_values:
            raise ValueError(
                "Invalid value for `action_type` ({0}), must be one of {1}"  # noqa: E501
                .format(action_type, allowed_values)
            )

        self._action_type = action_type

    @property
    def annotator(self):
        """Gets the annotator of this PdbxFamilyPrdAudit.  # noqa: E501

        The initials of the annotator creating of modifying the family.  # noqa: E501

        :return: The annotator of this PdbxFamilyPrdAudit.  # noqa: E501
        :rtype: str
        """
        return self._annotator

    @annotator.setter
    def annotator(self, annotator):
        """Sets the annotator of this PdbxFamilyPrdAudit.

        The initials of the annotator creating of modifying the family.  # noqa: E501

        :param annotator: The annotator of this PdbxFamilyPrdAudit.  # noqa: E501
        :type: str
        """

        self._annotator = annotator

    @property
    def _date(self):
        """Gets the _date of this PdbxFamilyPrdAudit.  # noqa: E501

        The date associated with this audit record.  # noqa: E501

        :return: The _date of this PdbxFamilyPrdAudit.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this PdbxFamilyPrdAudit.

        The date associated with this audit record.  # noqa: E501

        :param _date: The _date of this PdbxFamilyPrdAudit.  # noqa: E501
        :type: datetime
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def details(self):
        """Gets the details of this PdbxFamilyPrdAudit.  # noqa: E501

        Additional details decribing this change.  # noqa: E501

        :return: The details of this PdbxFamilyPrdAudit.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this PdbxFamilyPrdAudit.

        Additional details decribing this change.  # noqa: E501

        :param details: The details of this PdbxFamilyPrdAudit.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def family_prd_id(self):
        """Gets the family_prd_id of this PdbxFamilyPrdAudit.  # noqa: E501

        This data item is a pointer to _pdbx_reference_molecule_family.family_prd_id in the         pdbx_reference_molecule category.  # noqa: E501

        :return: The family_prd_id of this PdbxFamilyPrdAudit.  # noqa: E501
        :rtype: str
        """
        return self._family_prd_id

    @family_prd_id.setter
    def family_prd_id(self, family_prd_id):
        """Sets the family_prd_id of this PdbxFamilyPrdAudit.

        This data item is a pointer to _pdbx_reference_molecule_family.family_prd_id in the         pdbx_reference_molecule category.  # noqa: E501

        :param family_prd_id: The family_prd_id of this PdbxFamilyPrdAudit.  # noqa: E501
        :type: str
        """
        if family_prd_id is None:
            raise ValueError("Invalid value for `family_prd_id`, must not be `None`")  # noqa: E501

        self._family_prd_id = family_prd_id

    @property
    def processing_site(self):
        """Gets the processing_site of this PdbxFamilyPrdAudit.  # noqa: E501

        An identifier for the wwPDB site creating or modifying the family.  # noqa: E501

        :return: The processing_site of this PdbxFamilyPrdAudit.  # noqa: E501
        :rtype: str
        """
        return self._processing_site

    @processing_site.setter
    def processing_site(self, processing_site):
        """Sets the processing_site of this PdbxFamilyPrdAudit.

        An identifier for the wwPDB site creating or modifying the family.  # noqa: E501

        :param processing_site: The processing_site of this PdbxFamilyPrdAudit.  # noqa: E501
        :type: str
        """

        self._processing_site = processing_site

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PdbxFamilyPrdAudit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdbxFamilyPrdAudit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
