# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RcsbMaQaMetricGlobal(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model_id': 'int',
        'ma_qa_metric_global': 'list[RcsbMaQaMetricGlobalMaQaMetricGlobal]'
    }

    attribute_map = {
        'model_id': 'model_id',
        'ma_qa_metric_global': 'ma_qa_metric_global'
    }

    def __init__(self, model_id=None, ma_qa_metric_global=None):  # noqa: E501
        """RcsbMaQaMetricGlobal - a model defined in Swagger"""  # noqa: E501
        self._model_id = None
        self._ma_qa_metric_global = None
        self.discriminator = None
        self.model_id = model_id
        if ma_qa_metric_global is not None:
            self.ma_qa_metric_global = ma_qa_metric_global

    @property
    def model_id(self):
        """Gets the model_id of this RcsbMaQaMetricGlobal.  # noqa: E501

        The model identifier.  # noqa: E501

        :return: The model_id of this RcsbMaQaMetricGlobal.  # noqa: E501
        :rtype: int
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this RcsbMaQaMetricGlobal.

        The model identifier.  # noqa: E501

        :param model_id: The model_id of this RcsbMaQaMetricGlobal.  # noqa: E501
        :type: int
        """
        if model_id is None:
            raise ValueError("Invalid value for `model_id`, must not be `None`")  # noqa: E501

        self._model_id = model_id

    @property
    def ma_qa_metric_global(self):
        """Gets the ma_qa_metric_global of this RcsbMaQaMetricGlobal.  # noqa: E501


        :return: The ma_qa_metric_global of this RcsbMaQaMetricGlobal.  # noqa: E501
        :rtype: list[RcsbMaQaMetricGlobalMaQaMetricGlobal]
        """
        return self._ma_qa_metric_global

    @ma_qa_metric_global.setter
    def ma_qa_metric_global(self, ma_qa_metric_global):
        """Sets the ma_qa_metric_global of this RcsbMaQaMetricGlobal.


        :param ma_qa_metric_global: The ma_qa_metric_global of this RcsbMaQaMetricGlobal.  # noqa: E501
        :type: list[RcsbMaQaMetricGlobalMaQaMetricGlobal]
        """

        self._ma_qa_metric_global = ma_qa_metric_global

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RcsbMaQaMetricGlobal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RcsbMaQaMetricGlobal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
