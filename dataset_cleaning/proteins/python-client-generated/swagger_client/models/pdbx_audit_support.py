# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PdbxAuditSupport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'country': 'str',
        'funding_organization': 'str',
        'grant_number': 'str',
        'ordinal': 'int'
    }

    attribute_map = {
        'country': 'country',
        'funding_organization': 'funding_organization',
        'grant_number': 'grant_number',
        'ordinal': 'ordinal'
    }

    def __init__(self, country=None, funding_organization=None, grant_number=None, ordinal=None):  # noqa: E501
        """PdbxAuditSupport - a model defined in Swagger"""  # noqa: E501
        self._country = None
        self._funding_organization = None
        self._grant_number = None
        self._ordinal = None
        self.discriminator = None
        if country is not None:
            self.country = country
        if funding_organization is not None:
            self.funding_organization = funding_organization
        if grant_number is not None:
            self.grant_number = grant_number
        self.ordinal = ordinal

    @property
    def country(self):
        """Gets the country of this PdbxAuditSupport.  # noqa: E501

        The country/region providing the funding support for the entry.  Funding information is optionally provided for entries after June 2016.  # noqa: E501

        :return: The country of this PdbxAuditSupport.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this PdbxAuditSupport.

        The country/region providing the funding support for the entry.  Funding information is optionally provided for entries after June 2016.  # noqa: E501

        :param country: The country of this PdbxAuditSupport.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def funding_organization(self):
        """Gets the funding_organization of this PdbxAuditSupport.  # noqa: E501

        The name of the organization providing funding support for the  entry. Funding information is optionally provided for entries  after June 2016.  # noqa: E501

        :return: The funding_organization of this PdbxAuditSupport.  # noqa: E501
        :rtype: str
        """
        return self._funding_organization

    @funding_organization.setter
    def funding_organization(self, funding_organization):
        """Sets the funding_organization of this PdbxAuditSupport.

        The name of the organization providing funding support for the  entry. Funding information is optionally provided for entries  after June 2016.  # noqa: E501

        :param funding_organization: The funding_organization of this PdbxAuditSupport.  # noqa: E501
        :type: str
        """

        self._funding_organization = funding_organization

    @property
    def grant_number(self):
        """Gets the grant_number of this PdbxAuditSupport.  # noqa: E501

        The grant number associated with this source of support.  # noqa: E501

        :return: The grant_number of this PdbxAuditSupport.  # noqa: E501
        :rtype: str
        """
        return self._grant_number

    @grant_number.setter
    def grant_number(self, grant_number):
        """Sets the grant_number of this PdbxAuditSupport.

        The grant number associated with this source of support.  # noqa: E501

        :param grant_number: The grant_number of this PdbxAuditSupport.  # noqa: E501
        :type: str
        """

        self._grant_number = grant_number

    @property
    def ordinal(self):
        """Gets the ordinal of this PdbxAuditSupport.  # noqa: E501

        A unique sequential integer identifier for each source of support for this entry.  # noqa: E501

        :return: The ordinal of this PdbxAuditSupport.  # noqa: E501
        :rtype: int
        """
        return self._ordinal

    @ordinal.setter
    def ordinal(self, ordinal):
        """Sets the ordinal of this PdbxAuditSupport.

        A unique sequential integer identifier for each source of support for this entry.  # noqa: E501

        :param ordinal: The ordinal of this PdbxAuditSupport.  # noqa: E501
        :type: int
        """
        if ordinal is None:
            raise ValueError("Invalid value for `ordinal`, must not be `None`")  # noqa: E501

        self._ordinal = ordinal

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PdbxAuditSupport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdbxAuditSupport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
