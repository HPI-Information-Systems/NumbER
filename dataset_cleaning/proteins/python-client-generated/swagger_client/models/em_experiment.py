# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EmExperiment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aggregation_state': 'str',
        'entity_assembly_id': 'str',
        'id': 'str',
        'reconstruction_method': 'str'
    }

    attribute_map = {
        'aggregation_state': 'aggregation_state',
        'entity_assembly_id': 'entity_assembly_id',
        'id': 'id',
        'reconstruction_method': 'reconstruction_method'
    }

    def __init__(self, aggregation_state=None, entity_assembly_id=None, id=None, reconstruction_method=None):  # noqa: E501
        """EmExperiment - a model defined in Swagger"""  # noqa: E501
        self._aggregation_state = None
        self._entity_assembly_id = None
        self._id = None
        self._reconstruction_method = None
        self.discriminator = None
        if aggregation_state is not None:
            self.aggregation_state = aggregation_state
        if entity_assembly_id is not None:
            self.entity_assembly_id = entity_assembly_id
        if id is not None:
            self.id = id
        if reconstruction_method is not None:
            self.reconstruction_method = reconstruction_method

    @property
    def aggregation_state(self):
        """Gets the aggregation_state of this EmExperiment.  # noqa: E501

        The aggregation/assembly state of the imaged specimen.  # noqa: E501

        :return: The aggregation_state of this EmExperiment.  # noqa: E501
        :rtype: str
        """
        return self._aggregation_state

    @aggregation_state.setter
    def aggregation_state(self, aggregation_state):
        """Sets the aggregation_state of this EmExperiment.

        The aggregation/assembly state of the imaged specimen.  # noqa: E501

        :param aggregation_state: The aggregation_state of this EmExperiment.  # noqa: E501
        :type: str
        """
        allowed_values = ["2D ARRAY", "3D ARRAY", "CELL", "FILAMENT", "HELICAL ARRAY", "PARTICLE", "TISSUE"]  # noqa: E501
        if aggregation_state not in allowed_values:
            raise ValueError(
                "Invalid value for `aggregation_state` ({0}), must be one of {1}"  # noqa: E501
                .format(aggregation_state, allowed_values)
            )

        self._aggregation_state = aggregation_state

    @property
    def entity_assembly_id(self):
        """Gets the entity_assembly_id of this EmExperiment.  # noqa: E501

        Foreign key to the EM_ENTITY_ASSEMBLY category  # noqa: E501

        :return: The entity_assembly_id of this EmExperiment.  # noqa: E501
        :rtype: str
        """
        return self._entity_assembly_id

    @entity_assembly_id.setter
    def entity_assembly_id(self, entity_assembly_id):
        """Sets the entity_assembly_id of this EmExperiment.

        Foreign key to the EM_ENTITY_ASSEMBLY category  # noqa: E501

        :param entity_assembly_id: The entity_assembly_id of this EmExperiment.  # noqa: E501
        :type: str
        """

        self._entity_assembly_id = entity_assembly_id

    @property
    def id(self):
        """Gets the id of this EmExperiment.  # noqa: E501

        PRIMARY KEY  # noqa: E501

        :return: The id of this EmExperiment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EmExperiment.

        PRIMARY KEY  # noqa: E501

        :param id: The id of this EmExperiment.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def reconstruction_method(self):
        """Gets the reconstruction_method of this EmExperiment.  # noqa: E501

        The reconstruction method used in the EM experiment.  # noqa: E501

        :return: The reconstruction_method of this EmExperiment.  # noqa: E501
        :rtype: str
        """
        return self._reconstruction_method

    @reconstruction_method.setter
    def reconstruction_method(self, reconstruction_method):
        """Sets the reconstruction_method of this EmExperiment.

        The reconstruction method used in the EM experiment.  # noqa: E501

        :param reconstruction_method: The reconstruction_method of this EmExperiment.  # noqa: E501
        :type: str
        """
        allowed_values = ["CRYSTALLOGRAPHY", "HELICAL", "SINGLE PARTICLE", "SUBTOMOGRAM AVERAGING", "TOMOGRAPHY"]  # noqa: E501
        if reconstruction_method not in allowed_values:
            raise ValueError(
                "Invalid value for `reconstruction_method` ({0}), must be one of {1}"  # noqa: E501
                .format(reconstruction_method, allowed_values)
            )

        self._reconstruction_method = reconstruction_method

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmExperiment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmExperiment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
