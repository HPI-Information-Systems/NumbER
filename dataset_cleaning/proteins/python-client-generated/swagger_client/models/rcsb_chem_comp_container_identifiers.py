# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RcsbChemCompContainerIdentifiers(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'atc_codes': 'list[str]',
        'comp_id': 'str',
        'drugbank_id': 'str',
        'prd_id': 'str',
        'rcsb_id': 'str',
        'subcomponent_ids': 'list[str]'
    }

    attribute_map = {
        'atc_codes': 'atc_codes',
        'comp_id': 'comp_id',
        'drugbank_id': 'drugbank_id',
        'prd_id': 'prd_id',
        'rcsb_id': 'rcsb_id',
        'subcomponent_ids': 'subcomponent_ids'
    }

    def __init__(self, atc_codes=None, comp_id=None, drugbank_id=None, prd_id=None, rcsb_id=None, subcomponent_ids=None):  # noqa: E501
        """RcsbChemCompContainerIdentifiers - a model defined in Swagger"""  # noqa: E501
        self._atc_codes = None
        self._comp_id = None
        self._drugbank_id = None
        self._prd_id = None
        self._rcsb_id = None
        self._subcomponent_ids = None
        self.discriminator = None
        if atc_codes is not None:
            self.atc_codes = atc_codes
        self.comp_id = comp_id
        if drugbank_id is not None:
            self.drugbank_id = drugbank_id
        if prd_id is not None:
            self.prd_id = prd_id
        if rcsb_id is not None:
            self.rcsb_id = rcsb_id
        if subcomponent_ids is not None:
            self.subcomponent_ids = subcomponent_ids

    @property
    def atc_codes(self):
        """Gets the atc_codes of this RcsbChemCompContainerIdentifiers.  # noqa: E501

        The Anatomical Therapeutic Chemical (ATC) Classification System identifiers corresponding  to the chemical component.  # noqa: E501

        :return: The atc_codes of this RcsbChemCompContainerIdentifiers.  # noqa: E501
        :rtype: list[str]
        """
        return self._atc_codes

    @atc_codes.setter
    def atc_codes(self, atc_codes):
        """Sets the atc_codes of this RcsbChemCompContainerIdentifiers.

        The Anatomical Therapeutic Chemical (ATC) Classification System identifiers corresponding  to the chemical component.  # noqa: E501

        :param atc_codes: The atc_codes of this RcsbChemCompContainerIdentifiers.  # noqa: E501
        :type: list[str]
        """

        self._atc_codes = atc_codes

    @property
    def comp_id(self):
        """Gets the comp_id of this RcsbChemCompContainerIdentifiers.  # noqa: E501

        The chemical component identifier.  # noqa: E501

        :return: The comp_id of this RcsbChemCompContainerIdentifiers.  # noqa: E501
        :rtype: str
        """
        return self._comp_id

    @comp_id.setter
    def comp_id(self, comp_id):
        """Sets the comp_id of this RcsbChemCompContainerIdentifiers.

        The chemical component identifier.  # noqa: E501

        :param comp_id: The comp_id of this RcsbChemCompContainerIdentifiers.  # noqa: E501
        :type: str
        """
        if comp_id is None:
            raise ValueError("Invalid value for `comp_id`, must not be `None`")  # noqa: E501

        self._comp_id = comp_id

    @property
    def drugbank_id(self):
        """Gets the drugbank_id of this RcsbChemCompContainerIdentifiers.  # noqa: E501

        The DrugBank identifier corresponding to the chemical component.  # noqa: E501

        :return: The drugbank_id of this RcsbChemCompContainerIdentifiers.  # noqa: E501
        :rtype: str
        """
        return self._drugbank_id

    @drugbank_id.setter
    def drugbank_id(self, drugbank_id):
        """Sets the drugbank_id of this RcsbChemCompContainerIdentifiers.

        The DrugBank identifier corresponding to the chemical component.  # noqa: E501

        :param drugbank_id: The drugbank_id of this RcsbChemCompContainerIdentifiers.  # noqa: E501
        :type: str
        """

        self._drugbank_id = drugbank_id

    @property
    def prd_id(self):
        """Gets the prd_id of this RcsbChemCompContainerIdentifiers.  # noqa: E501

        The BIRD definition identifier.  # noqa: E501

        :return: The prd_id of this RcsbChemCompContainerIdentifiers.  # noqa: E501
        :rtype: str
        """
        return self._prd_id

    @prd_id.setter
    def prd_id(self, prd_id):
        """Sets the prd_id of this RcsbChemCompContainerIdentifiers.

        The BIRD definition identifier.  # noqa: E501

        :param prd_id: The prd_id of this RcsbChemCompContainerIdentifiers.  # noqa: E501
        :type: str
        """

        self._prd_id = prd_id

    @property
    def rcsb_id(self):
        """Gets the rcsb_id of this RcsbChemCompContainerIdentifiers.  # noqa: E501

        A unique identifier for the chemical definition in this container.  # noqa: E501

        :return: The rcsb_id of this RcsbChemCompContainerIdentifiers.  # noqa: E501
        :rtype: str
        """
        return self._rcsb_id

    @rcsb_id.setter
    def rcsb_id(self, rcsb_id):
        """Sets the rcsb_id of this RcsbChemCompContainerIdentifiers.

        A unique identifier for the chemical definition in this container.  # noqa: E501

        :param rcsb_id: The rcsb_id of this RcsbChemCompContainerIdentifiers.  # noqa: E501
        :type: str
        """

        self._rcsb_id = rcsb_id

    @property
    def subcomponent_ids(self):
        """Gets the subcomponent_ids of this RcsbChemCompContainerIdentifiers.  # noqa: E501

        The list of subcomponents contained in this component.  # noqa: E501

        :return: The subcomponent_ids of this RcsbChemCompContainerIdentifiers.  # noqa: E501
        :rtype: list[str]
        """
        return self._subcomponent_ids

    @subcomponent_ids.setter
    def subcomponent_ids(self, subcomponent_ids):
        """Sets the subcomponent_ids of this RcsbChemCompContainerIdentifiers.

        The list of subcomponents contained in this component.  # noqa: E501

        :param subcomponent_ids: The subcomponent_ids of this RcsbChemCompContainerIdentifiers.  # noqa: E501
        :type: list[str]
        """

        self._subcomponent_ids = subcomponent_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RcsbChemCompContainerIdentifiers, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RcsbChemCompContainerIdentifiers):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
