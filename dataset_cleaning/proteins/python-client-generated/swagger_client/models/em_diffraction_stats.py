# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EmDiffractionStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'details': 'str',
        'fourier_space_coverage': 'float',
        'high_resolution': 'float',
        'id': 'str',
        'image_processing_id': 'str',
        'num_intensities_measured': 'int',
        'num_structure_factors': 'int',
        'overall_phase_error': 'float',
        'overall_phase_residual': 'float',
        'phase_error_rejection_criteria': 'str',
        'r_merge': 'float',
        'r_sym': 'float'
    }

    attribute_map = {
        'details': 'details',
        'fourier_space_coverage': 'fourier_space_coverage',
        'high_resolution': 'high_resolution',
        'id': 'id',
        'image_processing_id': 'image_processing_id',
        'num_intensities_measured': 'num_intensities_measured',
        'num_structure_factors': 'num_structure_factors',
        'overall_phase_error': 'overall_phase_error',
        'overall_phase_residual': 'overall_phase_residual',
        'phase_error_rejection_criteria': 'phase_error_rejection_criteria',
        'r_merge': 'r_merge',
        'r_sym': 'r_sym'
    }

    def __init__(self, details=None, fourier_space_coverage=None, high_resolution=None, id=None, image_processing_id=None, num_intensities_measured=None, num_structure_factors=None, overall_phase_error=None, overall_phase_residual=None, phase_error_rejection_criteria=None, r_merge=None, r_sym=None):  # noqa: E501
        """EmDiffractionStats - a model defined in Swagger"""  # noqa: E501
        self._details = None
        self._fourier_space_coverage = None
        self._high_resolution = None
        self._id = None
        self._image_processing_id = None
        self._num_intensities_measured = None
        self._num_structure_factors = None
        self._overall_phase_error = None
        self._overall_phase_residual = None
        self._phase_error_rejection_criteria = None
        self._r_merge = None
        self._r_sym = None
        self.discriminator = None
        if details is not None:
            self.details = details
        if fourier_space_coverage is not None:
            self.fourier_space_coverage = fourier_space_coverage
        if high_resolution is not None:
            self.high_resolution = high_resolution
        self.id = id
        if image_processing_id is not None:
            self.image_processing_id = image_processing_id
        if num_intensities_measured is not None:
            self.num_intensities_measured = num_intensities_measured
        if num_structure_factors is not None:
            self.num_structure_factors = num_structure_factors
        if overall_phase_error is not None:
            self.overall_phase_error = overall_phase_error
        if overall_phase_residual is not None:
            self.overall_phase_residual = overall_phase_residual
        if phase_error_rejection_criteria is not None:
            self.phase_error_rejection_criteria = phase_error_rejection_criteria
        if r_merge is not None:
            self.r_merge = r_merge
        if r_sym is not None:
            self.r_sym = r_sym

    @property
    def details(self):
        """Gets the details of this EmDiffractionStats.  # noqa: E501

        Any addition details about the structure factor measurements  # noqa: E501

        :return: The details of this EmDiffractionStats.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this EmDiffractionStats.

        Any addition details about the structure factor measurements  # noqa: E501

        :param details: The details of this EmDiffractionStats.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def fourier_space_coverage(self):
        """Gets the fourier_space_coverage of this EmDiffractionStats.  # noqa: E501

        Completeness of the structure factor data within the defined space group  at the reported resolution (percent).  # noqa: E501

        :return: The fourier_space_coverage of this EmDiffractionStats.  # noqa: E501
        :rtype: float
        """
        return self._fourier_space_coverage

    @fourier_space_coverage.setter
    def fourier_space_coverage(self, fourier_space_coverage):
        """Sets the fourier_space_coverage of this EmDiffractionStats.

        Completeness of the structure factor data within the defined space group  at the reported resolution (percent).  # noqa: E501

        :param fourier_space_coverage: The fourier_space_coverage of this EmDiffractionStats.  # noqa: E501
        :type: float
        """

        self._fourier_space_coverage = fourier_space_coverage

    @property
    def high_resolution(self):
        """Gets the high_resolution of this EmDiffractionStats.  # noqa: E501

        High resolution limit of the structure factor data, in angstroms  # noqa: E501

        :return: The high_resolution of this EmDiffractionStats.  # noqa: E501
        :rtype: float
        """
        return self._high_resolution

    @high_resolution.setter
    def high_resolution(self, high_resolution):
        """Sets the high_resolution of this EmDiffractionStats.

        High resolution limit of the structure factor data, in angstroms  # noqa: E501

        :param high_resolution: The high_resolution of this EmDiffractionStats.  # noqa: E501
        :type: float
        """

        self._high_resolution = high_resolution

    @property
    def id(self):
        """Gets the id of this EmDiffractionStats.  # noqa: E501

        PRIMARY KEY  # noqa: E501

        :return: The id of this EmDiffractionStats.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EmDiffractionStats.

        PRIMARY KEY  # noqa: E501

        :param id: The id of this EmDiffractionStats.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def image_processing_id(self):
        """Gets the image_processing_id of this EmDiffractionStats.  # noqa: E501

        Pointer to _em_image_processing.id  # noqa: E501

        :return: The image_processing_id of this EmDiffractionStats.  # noqa: E501
        :rtype: str
        """
        return self._image_processing_id

    @image_processing_id.setter
    def image_processing_id(self, image_processing_id):
        """Sets the image_processing_id of this EmDiffractionStats.

        Pointer to _em_image_processing.id  # noqa: E501

        :param image_processing_id: The image_processing_id of this EmDiffractionStats.  # noqa: E501
        :type: str
        """

        self._image_processing_id = image_processing_id

    @property
    def num_intensities_measured(self):
        """Gets the num_intensities_measured of this EmDiffractionStats.  # noqa: E501

        Total number of diffraction intensities measured (before averaging)  # noqa: E501

        :return: The num_intensities_measured of this EmDiffractionStats.  # noqa: E501
        :rtype: int
        """
        return self._num_intensities_measured

    @num_intensities_measured.setter
    def num_intensities_measured(self, num_intensities_measured):
        """Sets the num_intensities_measured of this EmDiffractionStats.

        Total number of diffraction intensities measured (before averaging)  # noqa: E501

        :param num_intensities_measured: The num_intensities_measured of this EmDiffractionStats.  # noqa: E501
        :type: int
        """

        self._num_intensities_measured = num_intensities_measured

    @property
    def num_structure_factors(self):
        """Gets the num_structure_factors of this EmDiffractionStats.  # noqa: E501

        Number of structure factors obtained (merged amplitudes + phases)  # noqa: E501

        :return: The num_structure_factors of this EmDiffractionStats.  # noqa: E501
        :rtype: int
        """
        return self._num_structure_factors

    @num_structure_factors.setter
    def num_structure_factors(self, num_structure_factors):
        """Sets the num_structure_factors of this EmDiffractionStats.

        Number of structure factors obtained (merged amplitudes + phases)  # noqa: E501

        :param num_structure_factors: The num_structure_factors of this EmDiffractionStats.  # noqa: E501
        :type: int
        """

        self._num_structure_factors = num_structure_factors

    @property
    def overall_phase_error(self):
        """Gets the overall_phase_error of this EmDiffractionStats.  # noqa: E501

        Overall phase error in degrees  # noqa: E501

        :return: The overall_phase_error of this EmDiffractionStats.  # noqa: E501
        :rtype: float
        """
        return self._overall_phase_error

    @overall_phase_error.setter
    def overall_phase_error(self, overall_phase_error):
        """Sets the overall_phase_error of this EmDiffractionStats.

        Overall phase error in degrees  # noqa: E501

        :param overall_phase_error: The overall_phase_error of this EmDiffractionStats.  # noqa: E501
        :type: float
        """

        self._overall_phase_error = overall_phase_error

    @property
    def overall_phase_residual(self):
        """Gets the overall_phase_residual of this EmDiffractionStats.  # noqa: E501

        Overall phase residual in degrees  # noqa: E501

        :return: The overall_phase_residual of this EmDiffractionStats.  # noqa: E501
        :rtype: float
        """
        return self._overall_phase_residual

    @overall_phase_residual.setter
    def overall_phase_residual(self, overall_phase_residual):
        """Sets the overall_phase_residual of this EmDiffractionStats.

        Overall phase residual in degrees  # noqa: E501

        :param overall_phase_residual: The overall_phase_residual of this EmDiffractionStats.  # noqa: E501
        :type: float
        """

        self._overall_phase_residual = overall_phase_residual

    @property
    def phase_error_rejection_criteria(self):
        """Gets the phase_error_rejection_criteria of this EmDiffractionStats.  # noqa: E501

        Criteria used to reject phases  # noqa: E501

        :return: The phase_error_rejection_criteria of this EmDiffractionStats.  # noqa: E501
        :rtype: str
        """
        return self._phase_error_rejection_criteria

    @phase_error_rejection_criteria.setter
    def phase_error_rejection_criteria(self, phase_error_rejection_criteria):
        """Sets the phase_error_rejection_criteria of this EmDiffractionStats.

        Criteria used to reject phases  # noqa: E501

        :param phase_error_rejection_criteria: The phase_error_rejection_criteria of this EmDiffractionStats.  # noqa: E501
        :type: str
        """

        self._phase_error_rejection_criteria = phase_error_rejection_criteria

    @property
    def r_merge(self):
        """Gets the r_merge of this EmDiffractionStats.  # noqa: E501

        Rmerge value (percent)  # noqa: E501

        :return: The r_merge of this EmDiffractionStats.  # noqa: E501
        :rtype: float
        """
        return self._r_merge

    @r_merge.setter
    def r_merge(self, r_merge):
        """Sets the r_merge of this EmDiffractionStats.

        Rmerge value (percent)  # noqa: E501

        :param r_merge: The r_merge of this EmDiffractionStats.  # noqa: E501
        :type: float
        """

        self._r_merge = r_merge

    @property
    def r_sym(self):
        """Gets the r_sym of this EmDiffractionStats.  # noqa: E501

        Rsym value (percent)  # noqa: E501

        :return: The r_sym of this EmDiffractionStats.  # noqa: E501
        :rtype: float
        """
        return self._r_sym

    @r_sym.setter
    def r_sym(self, r_sym):
        """Sets the r_sym of this EmDiffractionStats.

        Rsym value (percent)  # noqa: E501

        :param r_sym: The r_sym of this EmDiffractionStats.  # noqa: E501
        :type: float
        """

        self._r_sym = r_sym

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmDiffractionStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmDiffractionStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
