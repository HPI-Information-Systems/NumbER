# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Em3dFitting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'details': 'str',
        'id': 'str',
        'method': 'str',
        'overall_b_value': 'float',
        'ref_protocol': 'str',
        'ref_space': 'str',
        'target_criteria': 'str'
    }

    attribute_map = {
        'details': 'details',
        'id': 'id',
        'method': 'method',
        'overall_b_value': 'overall_b_value',
        'ref_protocol': 'ref_protocol',
        'ref_space': 'ref_space',
        'target_criteria': 'target_criteria'
    }

    def __init__(self, details=None, id=None, method=None, overall_b_value=None, ref_protocol=None, ref_space=None, target_criteria=None):  # noqa: E501
        """Em3dFitting - a model defined in Swagger"""  # noqa: E501
        self._details = None
        self._id = None
        self._method = None
        self._overall_b_value = None
        self._ref_protocol = None
        self._ref_space = None
        self._target_criteria = None
        self.discriminator = None
        if details is not None:
            self.details = details
        self.id = id
        if method is not None:
            self.method = method
        if overall_b_value is not None:
            self.overall_b_value = overall_b_value
        if ref_protocol is not None:
            self.ref_protocol = ref_protocol
        if ref_space is not None:
            self.ref_space = ref_space
        if target_criteria is not None:
            self.target_criteria = target_criteria

    @property
    def details(self):
        """Gets the details of this Em3dFitting.  # noqa: E501

        Any additional details regarding fitting of atomic coordinates into  the 3DEM volume, including data and considerations from other  methods used in computation of the model.  # noqa: E501

        :return: The details of this Em3dFitting.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Em3dFitting.

        Any additional details regarding fitting of atomic coordinates into  the 3DEM volume, including data and considerations from other  methods used in computation of the model.  # noqa: E501

        :param details: The details of this Em3dFitting.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def id(self):
        """Gets the id of this Em3dFitting.  # noqa: E501

        The value of _em_3d_fitting.id must uniquely identify  a fitting procedure of atomic coordinates  into 3dem reconstructed map volume.  # noqa: E501

        :return: The id of this Em3dFitting.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Em3dFitting.

        The value of _em_3d_fitting.id must uniquely identify  a fitting procedure of atomic coordinates  into 3dem reconstructed map volume.  # noqa: E501

        :param id: The id of this Em3dFitting.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def method(self):
        """Gets the method of this Em3dFitting.  # noqa: E501

        The method used to fit atomic coordinates  into the 3dem reconstructed map.  # noqa: E501

        :return: The method of this Em3dFitting.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this Em3dFitting.

        The method used to fit atomic coordinates  into the 3dem reconstructed map.  # noqa: E501

        :param method: The method of this Em3dFitting.  # noqa: E501
        :type: str
        """

        self._method = method

    @property
    def overall_b_value(self):
        """Gets the overall_b_value of this Em3dFitting.  # noqa: E501

        The overall B (temperature factor) value for the 3d-em volume.  # noqa: E501

        :return: The overall_b_value of this Em3dFitting.  # noqa: E501
        :rtype: float
        """
        return self._overall_b_value

    @overall_b_value.setter
    def overall_b_value(self, overall_b_value):
        """Sets the overall_b_value of this Em3dFitting.

        The overall B (temperature factor) value for the 3d-em volume.  # noqa: E501

        :param overall_b_value: The overall_b_value of this Em3dFitting.  # noqa: E501
        :type: float
        """

        self._overall_b_value = overall_b_value

    @property
    def ref_protocol(self):
        """Gets the ref_protocol of this Em3dFitting.  # noqa: E501

        The refinement protocol used.  # noqa: E501

        :return: The ref_protocol of this Em3dFitting.  # noqa: E501
        :rtype: str
        """
        return self._ref_protocol

    @ref_protocol.setter
    def ref_protocol(self, ref_protocol):
        """Sets the ref_protocol of this Em3dFitting.

        The refinement protocol used.  # noqa: E501

        :param ref_protocol: The ref_protocol of this Em3dFitting.  # noqa: E501
        :type: str
        """
        allowed_values = ["AB INITIO MODEL", "BACKBONE TRACE", "FLEXIBLE FIT", "OTHER", "RIGID BODY FIT"]  # noqa: E501
        if ref_protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `ref_protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(ref_protocol, allowed_values)
            )

        self._ref_protocol = ref_protocol

    @property
    def ref_space(self):
        """Gets the ref_space of this Em3dFitting.  # noqa: E501

        A flag to indicate whether fitting was carried out in real  or reciprocal refinement space.  # noqa: E501

        :return: The ref_space of this Em3dFitting.  # noqa: E501
        :rtype: str
        """
        return self._ref_space

    @ref_space.setter
    def ref_space(self, ref_space):
        """Sets the ref_space of this Em3dFitting.

        A flag to indicate whether fitting was carried out in real  or reciprocal refinement space.  # noqa: E501

        :param ref_space: The ref_space of this Em3dFitting.  # noqa: E501
        :type: str
        """
        allowed_values = ["REAL", "RECIPROCAL"]  # noqa: E501
        if ref_space not in allowed_values:
            raise ValueError(
                "Invalid value for `ref_space` ({0}), must be one of {1}"  # noqa: E501
                .format(ref_space, allowed_values)
            )

        self._ref_space = ref_space

    @property
    def target_criteria(self):
        """Gets the target_criteria of this Em3dFitting.  # noqa: E501

        The measure used to assess quality of fit of the atomic coordinates in the  3DEM map volume.  # noqa: E501

        :return: The target_criteria of this Em3dFitting.  # noqa: E501
        :rtype: str
        """
        return self._target_criteria

    @target_criteria.setter
    def target_criteria(self, target_criteria):
        """Sets the target_criteria of this Em3dFitting.

        The measure used to assess quality of fit of the atomic coordinates in the  3DEM map volume.  # noqa: E501

        :param target_criteria: The target_criteria of this Em3dFitting.  # noqa: E501
        :type: str
        """

        self._target_criteria = target_criteria

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Em3dFitting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Em3dFitting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
