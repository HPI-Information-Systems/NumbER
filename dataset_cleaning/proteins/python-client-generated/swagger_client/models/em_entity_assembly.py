# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EmEntityAssembly(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'details': 'str',
        'entity_id_list': 'list[str]',
        'id': 'str',
        'name': 'str',
        'oligomeric_details': 'str',
        'parent_id': 'int',
        'source': 'str',
        'synonym': 'str',
        'type': 'str'
    }

    attribute_map = {
        'details': 'details',
        'entity_id_list': 'entity_id_list',
        'id': 'id',
        'name': 'name',
        'oligomeric_details': 'oligomeric_details',
        'parent_id': 'parent_id',
        'source': 'source',
        'synonym': 'synonym',
        'type': 'type'
    }

    def __init__(self, details=None, entity_id_list=None, id=None, name=None, oligomeric_details=None, parent_id=None, source=None, synonym=None, type=None):  # noqa: E501
        """EmEntityAssembly - a model defined in Swagger"""  # noqa: E501
        self._details = None
        self._entity_id_list = None
        self._id = None
        self._name = None
        self._oligomeric_details = None
        self._parent_id = None
        self._source = None
        self._synonym = None
        self._type = None
        self.discriminator = None
        if details is not None:
            self.details = details
        if entity_id_list is not None:
            self.entity_id_list = entity_id_list
        self.id = id
        if name is not None:
            self.name = name
        if oligomeric_details is not None:
            self.oligomeric_details = oligomeric_details
        if parent_id is not None:
            self.parent_id = parent_id
        if source is not None:
            self.source = source
        if synonym is not None:
            self.synonym = synonym
        if type is not None:
            self.type = type

    @property
    def details(self):
        """Gets the details of this EmEntityAssembly.  # noqa: E501

        Additional details about the sample or sample subcomponent.  # noqa: E501

        :return: The details of this EmEntityAssembly.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this EmEntityAssembly.

        Additional details about the sample or sample subcomponent.  # noqa: E501

        :param details: The details of this EmEntityAssembly.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def entity_id_list(self):
        """Gets the entity_id_list of this EmEntityAssembly.  # noqa: E501

        macromolecules associated with this component, if defined  as comma separated list of entity ids (integers).  # noqa: E501

        :return: The entity_id_list of this EmEntityAssembly.  # noqa: E501
        :rtype: list[str]
        """
        return self._entity_id_list

    @entity_id_list.setter
    def entity_id_list(self, entity_id_list):
        """Sets the entity_id_list of this EmEntityAssembly.

        macromolecules associated with this component, if defined  as comma separated list of entity ids (integers).  # noqa: E501

        :param entity_id_list: The entity_id_list of this EmEntityAssembly.  # noqa: E501
        :type: list[str]
        """

        self._entity_id_list = entity_id_list

    @property
    def id(self):
        """Gets the id of this EmEntityAssembly.  # noqa: E501

        PRIMARY KEY  # noqa: E501

        :return: The id of this EmEntityAssembly.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EmEntityAssembly.

        PRIMARY KEY  # noqa: E501

        :param id: The id of this EmEntityAssembly.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this EmEntityAssembly.  # noqa: E501

        The name of the sample or sample subcomponent.  # noqa: E501

        :return: The name of this EmEntityAssembly.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EmEntityAssembly.

        The name of the sample or sample subcomponent.  # noqa: E501

        :param name: The name of this EmEntityAssembly.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def oligomeric_details(self):
        """Gets the oligomeric_details of this EmEntityAssembly.  # noqa: E501

        oligomeric details  # noqa: E501

        :return: The oligomeric_details of this EmEntityAssembly.  # noqa: E501
        :rtype: str
        """
        return self._oligomeric_details

    @oligomeric_details.setter
    def oligomeric_details(self, oligomeric_details):
        """Sets the oligomeric_details of this EmEntityAssembly.

        oligomeric details  # noqa: E501

        :param oligomeric_details: The oligomeric_details of this EmEntityAssembly.  # noqa: E501
        :type: str
        """

        self._oligomeric_details = oligomeric_details

    @property
    def parent_id(self):
        """Gets the parent_id of this EmEntityAssembly.  # noqa: E501

        The parent of this assembly.  This data item is an internal category pointer to _em_entity_assembly.id.  By convention, the full assembly (top of hierarchy) is assigned parent id 0 (zero).  # noqa: E501

        :return: The parent_id of this EmEntityAssembly.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this EmEntityAssembly.

        The parent of this assembly.  This data item is an internal category pointer to _em_entity_assembly.id.  By convention, the full assembly (top of hierarchy) is assigned parent id 0 (zero).  # noqa: E501

        :param parent_id: The parent_id of this EmEntityAssembly.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    @property
    def source(self):
        """Gets the source of this EmEntityAssembly.  # noqa: E501

        The type of source (e.g., natural source) for the component (sample or sample subcomponent)  # noqa: E501

        :return: The source of this EmEntityAssembly.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this EmEntityAssembly.

        The type of source (e.g., natural source) for the component (sample or sample subcomponent)  # noqa: E501

        :param source: The source of this EmEntityAssembly.  # noqa: E501
        :type: str
        """
        allowed_values = ["MULTIPLE SOURCES", "NATURAL", "RECOMBINANT", "SYNTHETIC"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"  # noqa: E501
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def synonym(self):
        """Gets the synonym of this EmEntityAssembly.  # noqa: E501

        Alternative name of the component.  # noqa: E501

        :return: The synonym of this EmEntityAssembly.  # noqa: E501
        :rtype: str
        """
        return self._synonym

    @synonym.setter
    def synonym(self, synonym):
        """Sets the synonym of this EmEntityAssembly.

        Alternative name of the component.  # noqa: E501

        :param synonym: The synonym of this EmEntityAssembly.  # noqa: E501
        :type: str
        """

        self._synonym = synonym

    @property
    def type(self):
        """Gets the type of this EmEntityAssembly.  # noqa: E501

        The general type of the sample or sample subcomponent.  # noqa: E501

        :return: The type of this EmEntityAssembly.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EmEntityAssembly.

        The general type of the sample or sample subcomponent.  # noqa: E501

        :param type: The type of this EmEntityAssembly.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmEntityAssembly, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmEntityAssembly):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
