# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PdbxNmrRepresentative(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conformer_id': 'str',
        'selection_criteria': 'str'
    }

    attribute_map = {
        'conformer_id': 'conformer_id',
        'selection_criteria': 'selection_criteria'
    }

    def __init__(self, conformer_id=None, selection_criteria=None):  # noqa: E501
        """PdbxNmrRepresentative - a model defined in Swagger"""  # noqa: E501
        self._conformer_id = None
        self._selection_criteria = None
        self.discriminator = None
        if conformer_id is not None:
            self.conformer_id = conformer_id
        if selection_criteria is not None:
            self.selection_criteria = selection_criteria

    @property
    def conformer_id(self):
        """Gets the conformer_id of this PdbxNmrRepresentative.  # noqa: E501

        If a member of the ensemble has been selected as a representative  structure, identify it by its model number.  # noqa: E501

        :return: The conformer_id of this PdbxNmrRepresentative.  # noqa: E501
        :rtype: str
        """
        return self._conformer_id

    @conformer_id.setter
    def conformer_id(self, conformer_id):
        """Sets the conformer_id of this PdbxNmrRepresentative.

        If a member of the ensemble has been selected as a representative  structure, identify it by its model number.  # noqa: E501

        :param conformer_id: The conformer_id of this PdbxNmrRepresentative.  # noqa: E501
        :type: str
        """

        self._conformer_id = conformer_id

    @property
    def selection_criteria(self):
        """Gets the selection_criteria of this PdbxNmrRepresentative.  # noqa: E501

        By highlighting the appropriate choice(s), describe the criteria used to select this structure as a representative structure, or if an average structure has been calculated describe how this was done.  # noqa: E501

        :return: The selection_criteria of this PdbxNmrRepresentative.  # noqa: E501
        :rtype: str
        """
        return self._selection_criteria

    @selection_criteria.setter
    def selection_criteria(self, selection_criteria):
        """Sets the selection_criteria of this PdbxNmrRepresentative.

        By highlighting the appropriate choice(s), describe the criteria used to select this structure as a representative structure, or if an average structure has been calculated describe how this was done.  # noqa: E501

        :param selection_criteria: The selection_criteria of this PdbxNmrRepresentative.  # noqa: E501
        :type: str
        """

        self._selection_criteria = selection_criteria

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PdbxNmrRepresentative, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdbxNmrRepresentative):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
