# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RcsbAccessionInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deposit_date': 'datetime',
        'has_released_experimental_data': 'str',
        'initial_release_date': 'datetime',
        'major_revision': 'int',
        'minor_revision': 'int',
        'revision_date': 'datetime',
        'status_code': 'str'
    }

    attribute_map = {
        'deposit_date': 'deposit_date',
        'has_released_experimental_data': 'has_released_experimental_data',
        'initial_release_date': 'initial_release_date',
        'major_revision': 'major_revision',
        'minor_revision': 'minor_revision',
        'revision_date': 'revision_date',
        'status_code': 'status_code'
    }

    def __init__(self, deposit_date=None, has_released_experimental_data=None, initial_release_date=None, major_revision=None, minor_revision=None, revision_date=None, status_code=None):  # noqa: E501
        """RcsbAccessionInfo - a model defined in Swagger"""  # noqa: E501
        self._deposit_date = None
        self._has_released_experimental_data = None
        self._initial_release_date = None
        self._major_revision = None
        self._minor_revision = None
        self._revision_date = None
        self._status_code = None
        self.discriminator = None
        if deposit_date is not None:
            self.deposit_date = deposit_date
        if has_released_experimental_data is not None:
            self.has_released_experimental_data = has_released_experimental_data
        if initial_release_date is not None:
            self.initial_release_date = initial_release_date
        if major_revision is not None:
            self.major_revision = major_revision
        if minor_revision is not None:
            self.minor_revision = minor_revision
        if revision_date is not None:
            self.revision_date = revision_date
        if status_code is not None:
            self.status_code = status_code

    @property
    def deposit_date(self):
        """Gets the deposit_date of this RcsbAccessionInfo.  # noqa: E501

        The entry deposition date.  # noqa: E501

        :return: The deposit_date of this RcsbAccessionInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._deposit_date

    @deposit_date.setter
    def deposit_date(self, deposit_date):
        """Sets the deposit_date of this RcsbAccessionInfo.

        The entry deposition date.  # noqa: E501

        :param deposit_date: The deposit_date of this RcsbAccessionInfo.  # noqa: E501
        :type: datetime
        """

        self._deposit_date = deposit_date

    @property
    def has_released_experimental_data(self):
        """Gets the has_released_experimental_data of this RcsbAccessionInfo.  # noqa: E501

        A code indicating the current availibility of experimental data in the repository.  # noqa: E501

        :return: The has_released_experimental_data of this RcsbAccessionInfo.  # noqa: E501
        :rtype: str
        """
        return self._has_released_experimental_data

    @has_released_experimental_data.setter
    def has_released_experimental_data(self, has_released_experimental_data):
        """Sets the has_released_experimental_data of this RcsbAccessionInfo.

        A code indicating the current availibility of experimental data in the repository.  # noqa: E501

        :param has_released_experimental_data: The has_released_experimental_data of this RcsbAccessionInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["N", "Y"]  # noqa: E501
        if has_released_experimental_data not in allowed_values:
            raise ValueError(
                "Invalid value for `has_released_experimental_data` ({0}), must be one of {1}"  # noqa: E501
                .format(has_released_experimental_data, allowed_values)
            )

        self._has_released_experimental_data = has_released_experimental_data

    @property
    def initial_release_date(self):
        """Gets the initial_release_date of this RcsbAccessionInfo.  # noqa: E501

        The entry initial release date.  # noqa: E501

        :return: The initial_release_date of this RcsbAccessionInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._initial_release_date

    @initial_release_date.setter
    def initial_release_date(self, initial_release_date):
        """Sets the initial_release_date of this RcsbAccessionInfo.

        The entry initial release date.  # noqa: E501

        :param initial_release_date: The initial_release_date of this RcsbAccessionInfo.  # noqa: E501
        :type: datetime
        """

        self._initial_release_date = initial_release_date

    @property
    def major_revision(self):
        """Gets the major_revision of this RcsbAccessionInfo.  # noqa: E501

        The latest entry major revision number.  # noqa: E501

        :return: The major_revision of this RcsbAccessionInfo.  # noqa: E501
        :rtype: int
        """
        return self._major_revision

    @major_revision.setter
    def major_revision(self, major_revision):
        """Sets the major_revision of this RcsbAccessionInfo.

        The latest entry major revision number.  # noqa: E501

        :param major_revision: The major_revision of this RcsbAccessionInfo.  # noqa: E501
        :type: int
        """

        self._major_revision = major_revision

    @property
    def minor_revision(self):
        """Gets the minor_revision of this RcsbAccessionInfo.  # noqa: E501

        The latest entry minor revision number.  # noqa: E501

        :return: The minor_revision of this RcsbAccessionInfo.  # noqa: E501
        :rtype: int
        """
        return self._minor_revision

    @minor_revision.setter
    def minor_revision(self, minor_revision):
        """Sets the minor_revision of this RcsbAccessionInfo.

        The latest entry minor revision number.  # noqa: E501

        :param minor_revision: The minor_revision of this RcsbAccessionInfo.  # noqa: E501
        :type: int
        """

        self._minor_revision = minor_revision

    @property
    def revision_date(self):
        """Gets the revision_date of this RcsbAccessionInfo.  # noqa: E501

        The latest entry revision date.  # noqa: E501

        :return: The revision_date of this RcsbAccessionInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._revision_date

    @revision_date.setter
    def revision_date(self, revision_date):
        """Sets the revision_date of this RcsbAccessionInfo.

        The latest entry revision date.  # noqa: E501

        :param revision_date: The revision_date of this RcsbAccessionInfo.  # noqa: E501
        :type: datetime
        """

        self._revision_date = revision_date

    @property
    def status_code(self):
        """Gets the status_code of this RcsbAccessionInfo.  # noqa: E501

        The release status for the entry.  # noqa: E501

        :return: The status_code of this RcsbAccessionInfo.  # noqa: E501
        :rtype: str
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this RcsbAccessionInfo.

        The release status for the entry.  # noqa: E501

        :param status_code: The status_code of this RcsbAccessionInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["AUCO", "AUTH", "HOLD", "HPUB", "POLC", "PROC", "REFI", "REL", "REPL", "WAIT", "WDRN"]  # noqa: E501
        if status_code not in allowed_values:
            raise ValueError(
                "Invalid value for `status_code` ({0}), must be one of {1}"  # noqa: E501
                .format(status_code, allowed_values)
            )

        self._status_code = status_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RcsbAccessionInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RcsbAccessionInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
