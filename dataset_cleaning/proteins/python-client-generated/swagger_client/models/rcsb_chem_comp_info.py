# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RcsbChemCompInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'atom_count': 'int',
        'atom_count_chiral': 'int',
        'atom_count_heavy': 'int',
        'bond_count': 'int',
        'bond_count_aromatic': 'int',
        'comp_id': 'str',
        'initial_deposition_date': 'datetime',
        'initial_release_date': 'datetime',
        'release_status': 'str',
        'revision_date': 'datetime'
    }

    attribute_map = {
        'atom_count': 'atom_count',
        'atom_count_chiral': 'atom_count_chiral',
        'atom_count_heavy': 'atom_count_heavy',
        'bond_count': 'bond_count',
        'bond_count_aromatic': 'bond_count_aromatic',
        'comp_id': 'comp_id',
        'initial_deposition_date': 'initial_deposition_date',
        'initial_release_date': 'initial_release_date',
        'release_status': 'release_status',
        'revision_date': 'revision_date'
    }

    def __init__(self, atom_count=None, atom_count_chiral=None, atom_count_heavy=None, bond_count=None, bond_count_aromatic=None, comp_id=None, initial_deposition_date=None, initial_release_date=None, release_status=None, revision_date=None):  # noqa: E501
        """RcsbChemCompInfo - a model defined in Swagger"""  # noqa: E501
        self._atom_count = None
        self._atom_count_chiral = None
        self._atom_count_heavy = None
        self._bond_count = None
        self._bond_count_aromatic = None
        self._comp_id = None
        self._initial_deposition_date = None
        self._initial_release_date = None
        self._release_status = None
        self._revision_date = None
        self.discriminator = None
        if atom_count is not None:
            self.atom_count = atom_count
        if atom_count_chiral is not None:
            self.atom_count_chiral = atom_count_chiral
        if atom_count_heavy is not None:
            self.atom_count_heavy = atom_count_heavy
        if bond_count is not None:
            self.bond_count = bond_count
        if bond_count_aromatic is not None:
            self.bond_count_aromatic = bond_count_aromatic
        self.comp_id = comp_id
        if initial_deposition_date is not None:
            self.initial_deposition_date = initial_deposition_date
        if initial_release_date is not None:
            self.initial_release_date = initial_release_date
        if release_status is not None:
            self.release_status = release_status
        if revision_date is not None:
            self.revision_date = revision_date

    @property
    def atom_count(self):
        """Gets the atom_count of this RcsbChemCompInfo.  # noqa: E501

        Chemical component total atom count  # noqa: E501

        :return: The atom_count of this RcsbChemCompInfo.  # noqa: E501
        :rtype: int
        """
        return self._atom_count

    @atom_count.setter
    def atom_count(self, atom_count):
        """Sets the atom_count of this RcsbChemCompInfo.

        Chemical component total atom count  # noqa: E501

        :param atom_count: The atom_count of this RcsbChemCompInfo.  # noqa: E501
        :type: int
        """

        self._atom_count = atom_count

    @property
    def atom_count_chiral(self):
        """Gets the atom_count_chiral of this RcsbChemCompInfo.  # noqa: E501

        Chemical component chiral atom count  # noqa: E501

        :return: The atom_count_chiral of this RcsbChemCompInfo.  # noqa: E501
        :rtype: int
        """
        return self._atom_count_chiral

    @atom_count_chiral.setter
    def atom_count_chiral(self, atom_count_chiral):
        """Sets the atom_count_chiral of this RcsbChemCompInfo.

        Chemical component chiral atom count  # noqa: E501

        :param atom_count_chiral: The atom_count_chiral of this RcsbChemCompInfo.  # noqa: E501
        :type: int
        """

        self._atom_count_chiral = atom_count_chiral

    @property
    def atom_count_heavy(self):
        """Gets the atom_count_heavy of this RcsbChemCompInfo.  # noqa: E501

        Chemical component heavy atom count  # noqa: E501

        :return: The atom_count_heavy of this RcsbChemCompInfo.  # noqa: E501
        :rtype: int
        """
        return self._atom_count_heavy

    @atom_count_heavy.setter
    def atom_count_heavy(self, atom_count_heavy):
        """Sets the atom_count_heavy of this RcsbChemCompInfo.

        Chemical component heavy atom count  # noqa: E501

        :param atom_count_heavy: The atom_count_heavy of this RcsbChemCompInfo.  # noqa: E501
        :type: int
        """

        self._atom_count_heavy = atom_count_heavy

    @property
    def bond_count(self):
        """Gets the bond_count of this RcsbChemCompInfo.  # noqa: E501

        Chemical component total bond count  # noqa: E501

        :return: The bond_count of this RcsbChemCompInfo.  # noqa: E501
        :rtype: int
        """
        return self._bond_count

    @bond_count.setter
    def bond_count(self, bond_count):
        """Sets the bond_count of this RcsbChemCompInfo.

        Chemical component total bond count  # noqa: E501

        :param bond_count: The bond_count of this RcsbChemCompInfo.  # noqa: E501
        :type: int
        """

        self._bond_count = bond_count

    @property
    def bond_count_aromatic(self):
        """Gets the bond_count_aromatic of this RcsbChemCompInfo.  # noqa: E501

        Chemical component aromatic bond count  # noqa: E501

        :return: The bond_count_aromatic of this RcsbChemCompInfo.  # noqa: E501
        :rtype: int
        """
        return self._bond_count_aromatic

    @bond_count_aromatic.setter
    def bond_count_aromatic(self, bond_count_aromatic):
        """Sets the bond_count_aromatic of this RcsbChemCompInfo.

        Chemical component aromatic bond count  # noqa: E501

        :param bond_count_aromatic: The bond_count_aromatic of this RcsbChemCompInfo.  # noqa: E501
        :type: int
        """

        self._bond_count_aromatic = bond_count_aromatic

    @property
    def comp_id(self):
        """Gets the comp_id of this RcsbChemCompInfo.  # noqa: E501

        The chemical component identifier.  # noqa: E501

        :return: The comp_id of this RcsbChemCompInfo.  # noqa: E501
        :rtype: str
        """
        return self._comp_id

    @comp_id.setter
    def comp_id(self, comp_id):
        """Sets the comp_id of this RcsbChemCompInfo.

        The chemical component identifier.  # noqa: E501

        :param comp_id: The comp_id of this RcsbChemCompInfo.  # noqa: E501
        :type: str
        """
        if comp_id is None:
            raise ValueError("Invalid value for `comp_id`, must not be `None`")  # noqa: E501

        self._comp_id = comp_id

    @property
    def initial_deposition_date(self):
        """Gets the initial_deposition_date of this RcsbChemCompInfo.  # noqa: E501

        The date the chemical definition was first deposited in the PDB repository.  # noqa: E501

        :return: The initial_deposition_date of this RcsbChemCompInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._initial_deposition_date

    @initial_deposition_date.setter
    def initial_deposition_date(self, initial_deposition_date):
        """Sets the initial_deposition_date of this RcsbChemCompInfo.

        The date the chemical definition was first deposited in the PDB repository.  # noqa: E501

        :param initial_deposition_date: The initial_deposition_date of this RcsbChemCompInfo.  # noqa: E501
        :type: datetime
        """

        self._initial_deposition_date = initial_deposition_date

    @property
    def initial_release_date(self):
        """Gets the initial_release_date of this RcsbChemCompInfo.  # noqa: E501

        The initial date the chemical definition was released in the PDB repository.  # noqa: E501

        :return: The initial_release_date of this RcsbChemCompInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._initial_release_date

    @initial_release_date.setter
    def initial_release_date(self, initial_release_date):
        """Sets the initial_release_date of this RcsbChemCompInfo.

        The initial date the chemical definition was released in the PDB repository.  # noqa: E501

        :param initial_release_date: The initial_release_date of this RcsbChemCompInfo.  # noqa: E501
        :type: datetime
        """

        self._initial_release_date = initial_release_date

    @property
    def release_status(self):
        """Gets the release_status of this RcsbChemCompInfo.  # noqa: E501

        The release status of the chemical definition.  # noqa: E501

        :return: The release_status of this RcsbChemCompInfo.  # noqa: E501
        :rtype: str
        """
        return self._release_status

    @release_status.setter
    def release_status(self, release_status):
        """Sets the release_status of this RcsbChemCompInfo.

        The release status of the chemical definition.  # noqa: E501

        :param release_status: The release_status of this RcsbChemCompInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["DEL", "HOLD", "HPUB", "OBS", "REF_ONLY", "REL"]  # noqa: E501
        if release_status not in allowed_values:
            raise ValueError(
                "Invalid value for `release_status` ({0}), must be one of {1}"  # noqa: E501
                .format(release_status, allowed_values)
            )

        self._release_status = release_status

    @property
    def revision_date(self):
        """Gets the revision_date of this RcsbChemCompInfo.  # noqa: E501

        The date of last revision of the chemical definition.  # noqa: E501

        :return: The revision_date of this RcsbChemCompInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._revision_date

    @revision_date.setter
    def revision_date(self, revision_date):
        """Sets the revision_date of this RcsbChemCompInfo.

        The date of last revision of the chemical definition.  # noqa: E501

        :param revision_date: The revision_date of this RcsbChemCompInfo.  # noqa: E501
        :type: datetime
        """

        self._revision_date = revision_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RcsbChemCompInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RcsbChemCompInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
