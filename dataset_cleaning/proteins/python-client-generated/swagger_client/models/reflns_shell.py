# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReflnsShell(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rmerge_f_all': 'float',
        'rmerge_f_obs': 'float',
        'rmerge_i_all': 'float',
        'rmerge_i_obs': 'float',
        'd_res_high': 'float',
        'd_res_low': 'float',
        'mean_i_over_sig_i_all': 'float',
        'mean_i_over_sig_i_obs': 'float',
        'mean_i_over_u_i_all': 'float',
        'number_measured_all': 'int',
        'number_measured_obs': 'int',
        'number_possible': 'int',
        'number_unique_all': 'int',
        'number_unique_obs': 'int',
        'pdbx_cc_half': 'float',
        'pdbx_r_split': 'float',
        'pdbx_rpim_i_all': 'float',
        'pdbx_rrim_i_all': 'float',
        'pdbx_rsym_value': 'float',
        'pdbx_chi_squared': 'float',
        'pdbx_diffrn_id': 'list[str]',
        'pdbx_net_i_over_sigma_i_all': 'float',
        'pdbx_net_i_over_sigma_i_obs': 'float',
        'pdbx_ordinal': 'int',
        'pdbx_redundancy': 'float',
        'pdbx_rejects': 'int',
        'percent_possible_all': 'float',
        'percent_possible_obs': 'float'
    }

    attribute_map = {
        'rmerge_f_all': 'Rmerge_F_all',
        'rmerge_f_obs': 'Rmerge_F_obs',
        'rmerge_i_all': 'Rmerge_I_all',
        'rmerge_i_obs': 'Rmerge_I_obs',
        'd_res_high': 'd_res_high',
        'd_res_low': 'd_res_low',
        'mean_i_over_sig_i_all': 'meanI_over_sigI_all',
        'mean_i_over_sig_i_obs': 'meanI_over_sigI_obs',
        'mean_i_over_u_i_all': 'meanI_over_uI_all',
        'number_measured_all': 'number_measured_all',
        'number_measured_obs': 'number_measured_obs',
        'number_possible': 'number_possible',
        'number_unique_all': 'number_unique_all',
        'number_unique_obs': 'number_unique_obs',
        'pdbx_cc_half': 'pdbx_CC_half',
        'pdbx_r_split': 'pdbx_R_split',
        'pdbx_rpim_i_all': 'pdbx_Rpim_I_all',
        'pdbx_rrim_i_all': 'pdbx_Rrim_I_all',
        'pdbx_rsym_value': 'pdbx_Rsym_value',
        'pdbx_chi_squared': 'pdbx_chi_squared',
        'pdbx_diffrn_id': 'pdbx_diffrn_id',
        'pdbx_net_i_over_sigma_i_all': 'pdbx_netI_over_sigmaI_all',
        'pdbx_net_i_over_sigma_i_obs': 'pdbx_netI_over_sigmaI_obs',
        'pdbx_ordinal': 'pdbx_ordinal',
        'pdbx_redundancy': 'pdbx_redundancy',
        'pdbx_rejects': 'pdbx_rejects',
        'percent_possible_all': 'percent_possible_all',
        'percent_possible_obs': 'percent_possible_obs'
    }

    def __init__(self, rmerge_f_all=None, rmerge_f_obs=None, rmerge_i_all=None, rmerge_i_obs=None, d_res_high=None, d_res_low=None, mean_i_over_sig_i_all=None, mean_i_over_sig_i_obs=None, mean_i_over_u_i_all=None, number_measured_all=None, number_measured_obs=None, number_possible=None, number_unique_all=None, number_unique_obs=None, pdbx_cc_half=None, pdbx_r_split=None, pdbx_rpim_i_all=None, pdbx_rrim_i_all=None, pdbx_rsym_value=None, pdbx_chi_squared=None, pdbx_diffrn_id=None, pdbx_net_i_over_sigma_i_all=None, pdbx_net_i_over_sigma_i_obs=None, pdbx_ordinal=None, pdbx_redundancy=None, pdbx_rejects=None, percent_possible_all=None, percent_possible_obs=None):  # noqa: E501
        """ReflnsShell - a model defined in Swagger"""  # noqa: E501
        self._rmerge_f_all = None
        self._rmerge_f_obs = None
        self._rmerge_i_all = None
        self._rmerge_i_obs = None
        self._d_res_high = None
        self._d_res_low = None
        self._mean_i_over_sig_i_all = None
        self._mean_i_over_sig_i_obs = None
        self._mean_i_over_u_i_all = None
        self._number_measured_all = None
        self._number_measured_obs = None
        self._number_possible = None
        self._number_unique_all = None
        self._number_unique_obs = None
        self._pdbx_cc_half = None
        self._pdbx_r_split = None
        self._pdbx_rpim_i_all = None
        self._pdbx_rrim_i_all = None
        self._pdbx_rsym_value = None
        self._pdbx_chi_squared = None
        self._pdbx_diffrn_id = None
        self._pdbx_net_i_over_sigma_i_all = None
        self._pdbx_net_i_over_sigma_i_obs = None
        self._pdbx_ordinal = None
        self._pdbx_redundancy = None
        self._pdbx_rejects = None
        self._percent_possible_all = None
        self._percent_possible_obs = None
        self.discriminator = None
        if rmerge_f_all is not None:
            self.rmerge_f_all = rmerge_f_all
        if rmerge_f_obs is not None:
            self.rmerge_f_obs = rmerge_f_obs
        if rmerge_i_all is not None:
            self.rmerge_i_all = rmerge_i_all
        if rmerge_i_obs is not None:
            self.rmerge_i_obs = rmerge_i_obs
        if d_res_high is not None:
            self.d_res_high = d_res_high
        if d_res_low is not None:
            self.d_res_low = d_res_low
        if mean_i_over_sig_i_all is not None:
            self.mean_i_over_sig_i_all = mean_i_over_sig_i_all
        if mean_i_over_sig_i_obs is not None:
            self.mean_i_over_sig_i_obs = mean_i_over_sig_i_obs
        if mean_i_over_u_i_all is not None:
            self.mean_i_over_u_i_all = mean_i_over_u_i_all
        if number_measured_all is not None:
            self.number_measured_all = number_measured_all
        if number_measured_obs is not None:
            self.number_measured_obs = number_measured_obs
        if number_possible is not None:
            self.number_possible = number_possible
        if number_unique_all is not None:
            self.number_unique_all = number_unique_all
        if number_unique_obs is not None:
            self.number_unique_obs = number_unique_obs
        if pdbx_cc_half is not None:
            self.pdbx_cc_half = pdbx_cc_half
        if pdbx_r_split is not None:
            self.pdbx_r_split = pdbx_r_split
        if pdbx_rpim_i_all is not None:
            self.pdbx_rpim_i_all = pdbx_rpim_i_all
        if pdbx_rrim_i_all is not None:
            self.pdbx_rrim_i_all = pdbx_rrim_i_all
        if pdbx_rsym_value is not None:
            self.pdbx_rsym_value = pdbx_rsym_value
        if pdbx_chi_squared is not None:
            self.pdbx_chi_squared = pdbx_chi_squared
        if pdbx_diffrn_id is not None:
            self.pdbx_diffrn_id = pdbx_diffrn_id
        if pdbx_net_i_over_sigma_i_all is not None:
            self.pdbx_net_i_over_sigma_i_all = pdbx_net_i_over_sigma_i_all
        if pdbx_net_i_over_sigma_i_obs is not None:
            self.pdbx_net_i_over_sigma_i_obs = pdbx_net_i_over_sigma_i_obs
        self.pdbx_ordinal = pdbx_ordinal
        if pdbx_redundancy is not None:
            self.pdbx_redundancy = pdbx_redundancy
        if pdbx_rejects is not None:
            self.pdbx_rejects = pdbx_rejects
        if percent_possible_all is not None:
            self.percent_possible_all = percent_possible_all
        if percent_possible_obs is not None:
            self.percent_possible_obs = percent_possible_obs

    @property
    def rmerge_f_all(self):
        """Gets the rmerge_f_all of this ReflnsShell.  # noqa: E501

        Residual factor Rmerge for all reflections that satisfy the  resolution limits established by _reflns_shell.d_res_high and  _reflns_shell.d_res_low.               sum~i~(sum~j~|F~j~ - <F>|)  Rmerge(F) = --------------------------                   sum~i~(sum~j~<F>)   F~j~ = the amplitude of the jth observation of reflection i  <F>  = the mean of the amplitudes of all observations of         reflection i   sum~i~ is taken over all reflections  sum~j~ is taken over all observations of each reflection  # noqa: E501

        :return: The rmerge_f_all of this ReflnsShell.  # noqa: E501
        :rtype: float
        """
        return self._rmerge_f_all

    @rmerge_f_all.setter
    def rmerge_f_all(self, rmerge_f_all):
        """Sets the rmerge_f_all of this ReflnsShell.

        Residual factor Rmerge for all reflections that satisfy the  resolution limits established by _reflns_shell.d_res_high and  _reflns_shell.d_res_low.               sum~i~(sum~j~|F~j~ - <F>|)  Rmerge(F) = --------------------------                   sum~i~(sum~j~<F>)   F~j~ = the amplitude of the jth observation of reflection i  <F>  = the mean of the amplitudes of all observations of         reflection i   sum~i~ is taken over all reflections  sum~j~ is taken over all observations of each reflection  # noqa: E501

        :param rmerge_f_all: The rmerge_f_all of this ReflnsShell.  # noqa: E501
        :type: float
        """

        self._rmerge_f_all = rmerge_f_all

    @property
    def rmerge_f_obs(self):
        """Gets the rmerge_f_obs of this ReflnsShell.  # noqa: E501

        Residual factor Rmerge for reflections that satisfy the  resolution limits established by _reflns_shell.d_res_high and  _reflns_shell.d_res_low and the observation criterion  established by _reflns.observed_criterion.               sum~i~(sum~j~|F~j~ - <F>|)  Rmerge(F) = --------------------------                   sum~i~(sum~j~<F>)   F~j~ = the amplitude of the jth observation of reflection i  <F>  = the mean of the amplitudes of all observations of         reflection i   sum~i~ is taken over all reflections  sum~j~ is taken over all observations of each reflection  # noqa: E501

        :return: The rmerge_f_obs of this ReflnsShell.  # noqa: E501
        :rtype: float
        """
        return self._rmerge_f_obs

    @rmerge_f_obs.setter
    def rmerge_f_obs(self, rmerge_f_obs):
        """Sets the rmerge_f_obs of this ReflnsShell.

        Residual factor Rmerge for reflections that satisfy the  resolution limits established by _reflns_shell.d_res_high and  _reflns_shell.d_res_low and the observation criterion  established by _reflns.observed_criterion.               sum~i~(sum~j~|F~j~ - <F>|)  Rmerge(F) = --------------------------                   sum~i~(sum~j~<F>)   F~j~ = the amplitude of the jth observation of reflection i  <F>  = the mean of the amplitudes of all observations of         reflection i   sum~i~ is taken over all reflections  sum~j~ is taken over all observations of each reflection  # noqa: E501

        :param rmerge_f_obs: The rmerge_f_obs of this ReflnsShell.  # noqa: E501
        :type: float
        """

        self._rmerge_f_obs = rmerge_f_obs

    @property
    def rmerge_i_all(self):
        """Gets the rmerge_i_all of this ReflnsShell.  # noqa: E501

        The value of Rmerge(I) for all reflections in a given shell.               sum~i~(sum~j~|I~j~ - <I>|)  Rmerge(I) = --------------------------                  sum~i~(sum~j~<I>)   I~j~ = the intensity of the jth observation of reflection i  <I>  = the mean of the intensities of all observations of         reflection i   sum~i~ is taken over all reflections  sum~j~ is taken over all observations of each reflection  # noqa: E501

        :return: The rmerge_i_all of this ReflnsShell.  # noqa: E501
        :rtype: float
        """
        return self._rmerge_i_all

    @rmerge_i_all.setter
    def rmerge_i_all(self, rmerge_i_all):
        """Sets the rmerge_i_all of this ReflnsShell.

        The value of Rmerge(I) for all reflections in a given shell.               sum~i~(sum~j~|I~j~ - <I>|)  Rmerge(I) = --------------------------                  sum~i~(sum~j~<I>)   I~j~ = the intensity of the jth observation of reflection i  <I>  = the mean of the intensities of all observations of         reflection i   sum~i~ is taken over all reflections  sum~j~ is taken over all observations of each reflection  # noqa: E501

        :param rmerge_i_all: The rmerge_i_all of this ReflnsShell.  # noqa: E501
        :type: float
        """

        self._rmerge_i_all = rmerge_i_all

    @property
    def rmerge_i_obs(self):
        """Gets the rmerge_i_obs of this ReflnsShell.  # noqa: E501

        The value of Rmerge(I) for reflections classified as 'observed'  (see _reflns.observed_criterion) in a given shell.               sum~i~(sum~j~|I~j~ - <I>|)  Rmerge(I) = --------------------------                  sum~i~(sum~j~<I>)   I~j~ = the intensity of the jth observation of reflection i  <I>  = the mean of the intensities of all observations of         reflection i   sum~i~ is taken over all reflections  sum~j~ is taken over all observations of each reflection  # noqa: E501

        :return: The rmerge_i_obs of this ReflnsShell.  # noqa: E501
        :rtype: float
        """
        return self._rmerge_i_obs

    @rmerge_i_obs.setter
    def rmerge_i_obs(self, rmerge_i_obs):
        """Sets the rmerge_i_obs of this ReflnsShell.

        The value of Rmerge(I) for reflections classified as 'observed'  (see _reflns.observed_criterion) in a given shell.               sum~i~(sum~j~|I~j~ - <I>|)  Rmerge(I) = --------------------------                  sum~i~(sum~j~<I>)   I~j~ = the intensity of the jth observation of reflection i  <I>  = the mean of the intensities of all observations of         reflection i   sum~i~ is taken over all reflections  sum~j~ is taken over all observations of each reflection  # noqa: E501

        :param rmerge_i_obs: The rmerge_i_obs of this ReflnsShell.  # noqa: E501
        :type: float
        """

        self._rmerge_i_obs = rmerge_i_obs

    @property
    def d_res_high(self):
        """Gets the d_res_high of this ReflnsShell.  # noqa: E501

        The smallest value in angstroms for the interplanar spacings  for the reflections in this shell. This is called the highest  resolution.  # noqa: E501

        :return: The d_res_high of this ReflnsShell.  # noqa: E501
        :rtype: float
        """
        return self._d_res_high

    @d_res_high.setter
    def d_res_high(self, d_res_high):
        """Sets the d_res_high of this ReflnsShell.

        The smallest value in angstroms for the interplanar spacings  for the reflections in this shell. This is called the highest  resolution.  # noqa: E501

        :param d_res_high: The d_res_high of this ReflnsShell.  # noqa: E501
        :type: float
        """

        self._d_res_high = d_res_high

    @property
    def d_res_low(self):
        """Gets the d_res_low of this ReflnsShell.  # noqa: E501

        The highest value in angstroms for the interplanar spacings  for the reflections in this shell. This is called the lowest  resolution.  # noqa: E501

        :return: The d_res_low of this ReflnsShell.  # noqa: E501
        :rtype: float
        """
        return self._d_res_low

    @d_res_low.setter
    def d_res_low(self, d_res_low):
        """Sets the d_res_low of this ReflnsShell.

        The highest value in angstroms for the interplanar spacings  for the reflections in this shell. This is called the lowest  resolution.  # noqa: E501

        :param d_res_low: The d_res_low of this ReflnsShell.  # noqa: E501
        :type: float
        """

        self._d_res_low = d_res_low

    @property
    def mean_i_over_sig_i_all(self):
        """Gets the mean_i_over_sig_i_all of this ReflnsShell.  # noqa: E501

        The ratio of the mean of the intensities of all reflections  in this shell to the mean of the standard uncertainties of the  intensities of all reflections in this shell.  # noqa: E501

        :return: The mean_i_over_sig_i_all of this ReflnsShell.  # noqa: E501
        :rtype: float
        """
        return self._mean_i_over_sig_i_all

    @mean_i_over_sig_i_all.setter
    def mean_i_over_sig_i_all(self, mean_i_over_sig_i_all):
        """Sets the mean_i_over_sig_i_all of this ReflnsShell.

        The ratio of the mean of the intensities of all reflections  in this shell to the mean of the standard uncertainties of the  intensities of all reflections in this shell.  # noqa: E501

        :param mean_i_over_sig_i_all: The mean_i_over_sig_i_all of this ReflnsShell.  # noqa: E501
        :type: float
        """

        self._mean_i_over_sig_i_all = mean_i_over_sig_i_all

    @property
    def mean_i_over_sig_i_obs(self):
        """Gets the mean_i_over_sig_i_obs of this ReflnsShell.  # noqa: E501

        The ratio of the mean of the intensities of the reflections  classified as 'observed' (see _reflns.observed_criterion) in  this shell to the mean of the standard uncertainties of the  intensities of the 'observed' reflections in this  shell.  # noqa: E501

        :return: The mean_i_over_sig_i_obs of this ReflnsShell.  # noqa: E501
        :rtype: float
        """
        return self._mean_i_over_sig_i_obs

    @mean_i_over_sig_i_obs.setter
    def mean_i_over_sig_i_obs(self, mean_i_over_sig_i_obs):
        """Sets the mean_i_over_sig_i_obs of this ReflnsShell.

        The ratio of the mean of the intensities of the reflections  classified as 'observed' (see _reflns.observed_criterion) in  this shell to the mean of the standard uncertainties of the  intensities of the 'observed' reflections in this  shell.  # noqa: E501

        :param mean_i_over_sig_i_obs: The mean_i_over_sig_i_obs of this ReflnsShell.  # noqa: E501
        :type: float
        """

        self._mean_i_over_sig_i_obs = mean_i_over_sig_i_obs

    @property
    def mean_i_over_u_i_all(self):
        """Gets the mean_i_over_u_i_all of this ReflnsShell.  # noqa: E501

        The ratio of the mean of the intensities of all reflections  in this shell to the mean of the standard uncertainties of the  intensities of all reflections in this shell.  # noqa: E501

        :return: The mean_i_over_u_i_all of this ReflnsShell.  # noqa: E501
        :rtype: float
        """
        return self._mean_i_over_u_i_all

    @mean_i_over_u_i_all.setter
    def mean_i_over_u_i_all(self, mean_i_over_u_i_all):
        """Sets the mean_i_over_u_i_all of this ReflnsShell.

        The ratio of the mean of the intensities of all reflections  in this shell to the mean of the standard uncertainties of the  intensities of all reflections in this shell.  # noqa: E501

        :param mean_i_over_u_i_all: The mean_i_over_u_i_all of this ReflnsShell.  # noqa: E501
        :type: float
        """

        self._mean_i_over_u_i_all = mean_i_over_u_i_all

    @property
    def number_measured_all(self):
        """Gets the number_measured_all of this ReflnsShell.  # noqa: E501

        The total number of reflections measured for this  shell.  # noqa: E501

        :return: The number_measured_all of this ReflnsShell.  # noqa: E501
        :rtype: int
        """
        return self._number_measured_all

    @number_measured_all.setter
    def number_measured_all(self, number_measured_all):
        """Sets the number_measured_all of this ReflnsShell.

        The total number of reflections measured for this  shell.  # noqa: E501

        :param number_measured_all: The number_measured_all of this ReflnsShell.  # noqa: E501
        :type: int
        """

        self._number_measured_all = number_measured_all

    @property
    def number_measured_obs(self):
        """Gets the number_measured_obs of this ReflnsShell.  # noqa: E501

        The number of reflections classified as 'observed'  (see _reflns.observed_criterion) for this  shell.  # noqa: E501

        :return: The number_measured_obs of this ReflnsShell.  # noqa: E501
        :rtype: int
        """
        return self._number_measured_obs

    @number_measured_obs.setter
    def number_measured_obs(self, number_measured_obs):
        """Sets the number_measured_obs of this ReflnsShell.

        The number of reflections classified as 'observed'  (see _reflns.observed_criterion) for this  shell.  # noqa: E501

        :param number_measured_obs: The number_measured_obs of this ReflnsShell.  # noqa: E501
        :type: int
        """

        self._number_measured_obs = number_measured_obs

    @property
    def number_possible(self):
        """Gets the number_possible of this ReflnsShell.  # noqa: E501

        The number of unique reflections it is possible to measure in  this shell.  # noqa: E501

        :return: The number_possible of this ReflnsShell.  # noqa: E501
        :rtype: int
        """
        return self._number_possible

    @number_possible.setter
    def number_possible(self, number_possible):
        """Sets the number_possible of this ReflnsShell.

        The number of unique reflections it is possible to measure in  this shell.  # noqa: E501

        :param number_possible: The number_possible of this ReflnsShell.  # noqa: E501
        :type: int
        """

        self._number_possible = number_possible

    @property
    def number_unique_all(self):
        """Gets the number_unique_all of this ReflnsShell.  # noqa: E501

        The total number of measured reflections which are symmetry-  unique after merging for this shell.  # noqa: E501

        :return: The number_unique_all of this ReflnsShell.  # noqa: E501
        :rtype: int
        """
        return self._number_unique_all

    @number_unique_all.setter
    def number_unique_all(self, number_unique_all):
        """Sets the number_unique_all of this ReflnsShell.

        The total number of measured reflections which are symmetry-  unique after merging for this shell.  # noqa: E501

        :param number_unique_all: The number_unique_all of this ReflnsShell.  # noqa: E501
        :type: int
        """

        self._number_unique_all = number_unique_all

    @property
    def number_unique_obs(self):
        """Gets the number_unique_obs of this ReflnsShell.  # noqa: E501

        The total number of measured reflections classified as 'observed'  (see _reflns.observed_criterion) which are symmetry-unique  after merging for this shell.  # noqa: E501

        :return: The number_unique_obs of this ReflnsShell.  # noqa: E501
        :rtype: int
        """
        return self._number_unique_obs

    @number_unique_obs.setter
    def number_unique_obs(self, number_unique_obs):
        """Sets the number_unique_obs of this ReflnsShell.

        The total number of measured reflections classified as 'observed'  (see _reflns.observed_criterion) which are symmetry-unique  after merging for this shell.  # noqa: E501

        :param number_unique_obs: The number_unique_obs of this ReflnsShell.  # noqa: E501
        :type: int
        """

        self._number_unique_obs = number_unique_obs

    @property
    def pdbx_cc_half(self):
        """Gets the pdbx_cc_half of this ReflnsShell.  # noqa: E501

        The Pearson's correlation coefficient expressed as a decimal value               between the average intensities from randomly selected               half-datasets within the resolution shell.         Ref: Karplus & Diederichs (2012), Science 336, 1030-33  # noqa: E501

        :return: The pdbx_cc_half of this ReflnsShell.  # noqa: E501
        :rtype: float
        """
        return self._pdbx_cc_half

    @pdbx_cc_half.setter
    def pdbx_cc_half(self, pdbx_cc_half):
        """Sets the pdbx_cc_half of this ReflnsShell.

        The Pearson's correlation coefficient expressed as a decimal value               between the average intensities from randomly selected               half-datasets within the resolution shell.         Ref: Karplus & Diederichs (2012), Science 336, 1030-33  # noqa: E501

        :param pdbx_cc_half: The pdbx_cc_half of this ReflnsShell.  # noqa: E501
        :type: float
        """

        self._pdbx_cc_half = pdbx_cc_half

    @property
    def pdbx_r_split(self):
        """Gets the pdbx_r_split of this ReflnsShell.  # noqa: E501

        R split measures the agreement between the sets of intensities created by merging               odd- and even-numbered images from the data within the resolution shell.         Ref: T. A. White, R. A. Kirian, A. V. Martin, A. Aquila, K. Nass,        A. Barty and H. N. Chapman (2012), J. Appl. Cryst. 45, 335-341  # noqa: E501

        :return: The pdbx_r_split of this ReflnsShell.  # noqa: E501
        :rtype: float
        """
        return self._pdbx_r_split

    @pdbx_r_split.setter
    def pdbx_r_split(self, pdbx_r_split):
        """Sets the pdbx_r_split of this ReflnsShell.

        R split measures the agreement between the sets of intensities created by merging               odd- and even-numbered images from the data within the resolution shell.         Ref: T. A. White, R. A. Kirian, A. V. Martin, A. Aquila, K. Nass,        A. Barty and H. N. Chapman (2012), J. Appl. Cryst. 45, 335-341  # noqa: E501

        :param pdbx_r_split: The pdbx_r_split of this ReflnsShell.  # noqa: E501
        :type: float
        """

        self._pdbx_r_split = pdbx_r_split

    @property
    def pdbx_rpim_i_all(self):
        """Gets the pdbx_rpim_i_all of this ReflnsShell.  # noqa: E501

        The precision-indicating merging R factor value Rpim,  for merging all intensities in a given shell.          sum~i~ [1/(N~i~ - 1)]1/2^ sum~j~ | I~j~ - <I~i~> |  Rpim = --------------------------------------------------                       sum~i~ ( sum~j~ I~j~ )   I~j~   = the intensity of the jth observation of reflection i  <I~i~> = the mean of the intensities of all observations of           reflection i  N~i~   = the redundancy (the number of times reflection i           has been measured).   sum~i~ is taken over all reflections  sum~j~ is taken over all observations of each reflection.   Ref: Diederichs, K. & Karplus, P. A. (1997). Nature Struct.       Biol. 4, 269-275.       Weiss, M. S. & Hilgenfeld, R. (1997). J. Appl. Cryst.       30, 203-205.       Weiss, M. S. (2001). J. Appl. Cryst. 34, 130-135.  # noqa: E501

        :return: The pdbx_rpim_i_all of this ReflnsShell.  # noqa: E501
        :rtype: float
        """
        return self._pdbx_rpim_i_all

    @pdbx_rpim_i_all.setter
    def pdbx_rpim_i_all(self, pdbx_rpim_i_all):
        """Sets the pdbx_rpim_i_all of this ReflnsShell.

        The precision-indicating merging R factor value Rpim,  for merging all intensities in a given shell.          sum~i~ [1/(N~i~ - 1)]1/2^ sum~j~ | I~j~ - <I~i~> |  Rpim = --------------------------------------------------                       sum~i~ ( sum~j~ I~j~ )   I~j~   = the intensity of the jth observation of reflection i  <I~i~> = the mean of the intensities of all observations of           reflection i  N~i~   = the redundancy (the number of times reflection i           has been measured).   sum~i~ is taken over all reflections  sum~j~ is taken over all observations of each reflection.   Ref: Diederichs, K. & Karplus, P. A. (1997). Nature Struct.       Biol. 4, 269-275.       Weiss, M. S. & Hilgenfeld, R. (1997). J. Appl. Cryst.       30, 203-205.       Weiss, M. S. (2001). J. Appl. Cryst. 34, 130-135.  # noqa: E501

        :param pdbx_rpim_i_all: The pdbx_rpim_i_all of this ReflnsShell.  # noqa: E501
        :type: float
        """

        self._pdbx_rpim_i_all = pdbx_rpim_i_all

    @property
    def pdbx_rrim_i_all(self):
        """Gets the pdbx_rrim_i_all of this ReflnsShell.  # noqa: E501

        The redundancy-independent merging R factor value Rrim,               also denoted Rmeas, for merging all intensities in a               given shell.                       sum~i~ [N~i~ /( N~i~ - 1)]1/2^ sum~j~ | I~j~ - <I~i~> |               Rrim = --------------------------------------------------------                                    sum~i~ ( sum~j~ I~j~ )                I~j~   = the intensity of the jth observation of reflection i               <I~i~> = the mean of the intensities of all observations of                        reflection i        N~i~   = the redundancy (the number of times reflection i                        has been measured).                sum~i~ is taken over all reflections               sum~j~ is taken over all observations of each reflection.                Ref: Diederichs, K. & Karplus, P. A. (1997). Nature Struct.                    Biol. 4, 269-275.                    Weiss, M. S. & Hilgenfeld, R. (1997). J. Appl. Cryst.                    30, 203-205.                    Weiss, M. S. (2001). J. Appl. Cryst. 34, 130-135.  # noqa: E501

        :return: The pdbx_rrim_i_all of this ReflnsShell.  # noqa: E501
        :rtype: float
        """
        return self._pdbx_rrim_i_all

    @pdbx_rrim_i_all.setter
    def pdbx_rrim_i_all(self, pdbx_rrim_i_all):
        """Sets the pdbx_rrim_i_all of this ReflnsShell.

        The redundancy-independent merging R factor value Rrim,               also denoted Rmeas, for merging all intensities in a               given shell.                       sum~i~ [N~i~ /( N~i~ - 1)]1/2^ sum~j~ | I~j~ - <I~i~> |               Rrim = --------------------------------------------------------                                    sum~i~ ( sum~j~ I~j~ )                I~j~   = the intensity of the jth observation of reflection i               <I~i~> = the mean of the intensities of all observations of                        reflection i        N~i~   = the redundancy (the number of times reflection i                        has been measured).                sum~i~ is taken over all reflections               sum~j~ is taken over all observations of each reflection.                Ref: Diederichs, K. & Karplus, P. A. (1997). Nature Struct.                    Biol. 4, 269-275.                    Weiss, M. S. & Hilgenfeld, R. (1997). J. Appl. Cryst.                    30, 203-205.                    Weiss, M. S. (2001). J. Appl. Cryst. 34, 130-135.  # noqa: E501

        :param pdbx_rrim_i_all: The pdbx_rrim_i_all of this ReflnsShell.  # noqa: E501
        :type: float
        """

        self._pdbx_rrim_i_all = pdbx_rrim_i_all

    @property
    def pdbx_rsym_value(self):
        """Gets the pdbx_rsym_value of this ReflnsShell.  # noqa: E501

        R sym value in percent.  # noqa: E501

        :return: The pdbx_rsym_value of this ReflnsShell.  # noqa: E501
        :rtype: float
        """
        return self._pdbx_rsym_value

    @pdbx_rsym_value.setter
    def pdbx_rsym_value(self, pdbx_rsym_value):
        """Sets the pdbx_rsym_value of this ReflnsShell.

        R sym value in percent.  # noqa: E501

        :param pdbx_rsym_value: The pdbx_rsym_value of this ReflnsShell.  # noqa: E501
        :type: float
        """

        self._pdbx_rsym_value = pdbx_rsym_value

    @property
    def pdbx_chi_squared(self):
        """Gets the pdbx_chi_squared of this ReflnsShell.  # noqa: E501

        Chi-squared statistic for this resolution shell.  # noqa: E501

        :return: The pdbx_chi_squared of this ReflnsShell.  # noqa: E501
        :rtype: float
        """
        return self._pdbx_chi_squared

    @pdbx_chi_squared.setter
    def pdbx_chi_squared(self, pdbx_chi_squared):
        """Sets the pdbx_chi_squared of this ReflnsShell.

        Chi-squared statistic for this resolution shell.  # noqa: E501

        :param pdbx_chi_squared: The pdbx_chi_squared of this ReflnsShell.  # noqa: E501
        :type: float
        """

        self._pdbx_chi_squared = pdbx_chi_squared

    @property
    def pdbx_diffrn_id(self):
        """Gets the pdbx_diffrn_id of this ReflnsShell.  # noqa: E501

        An identifier for the diffraction data set corresponding to this resolution shell.   Multiple diffraction data sets specified as a comma separated list.  # noqa: E501

        :return: The pdbx_diffrn_id of this ReflnsShell.  # noqa: E501
        :rtype: list[str]
        """
        return self._pdbx_diffrn_id

    @pdbx_diffrn_id.setter
    def pdbx_diffrn_id(self, pdbx_diffrn_id):
        """Sets the pdbx_diffrn_id of this ReflnsShell.

        An identifier for the diffraction data set corresponding to this resolution shell.   Multiple diffraction data sets specified as a comma separated list.  # noqa: E501

        :param pdbx_diffrn_id: The pdbx_diffrn_id of this ReflnsShell.  # noqa: E501
        :type: list[str]
        """

        self._pdbx_diffrn_id = pdbx_diffrn_id

    @property
    def pdbx_net_i_over_sigma_i_all(self):
        """Gets the pdbx_net_i_over_sigma_i_all of this ReflnsShell.  # noqa: E501

        The mean of the ratio of the intensities to their  standard uncertainties of all reflections in the  resolution shell.   _reflns_shell.pdbx_netI_over_sigmaI_all =  <I/sigma(I)>  # noqa: E501

        :return: The pdbx_net_i_over_sigma_i_all of this ReflnsShell.  # noqa: E501
        :rtype: float
        """
        return self._pdbx_net_i_over_sigma_i_all

    @pdbx_net_i_over_sigma_i_all.setter
    def pdbx_net_i_over_sigma_i_all(self, pdbx_net_i_over_sigma_i_all):
        """Sets the pdbx_net_i_over_sigma_i_all of this ReflnsShell.

        The mean of the ratio of the intensities to their  standard uncertainties of all reflections in the  resolution shell.   _reflns_shell.pdbx_netI_over_sigmaI_all =  <I/sigma(I)>  # noqa: E501

        :param pdbx_net_i_over_sigma_i_all: The pdbx_net_i_over_sigma_i_all of this ReflnsShell.  # noqa: E501
        :type: float
        """

        self._pdbx_net_i_over_sigma_i_all = pdbx_net_i_over_sigma_i_all

    @property
    def pdbx_net_i_over_sigma_i_obs(self):
        """Gets the pdbx_net_i_over_sigma_i_obs of this ReflnsShell.  # noqa: E501

        The mean of the ratio of the intensities to their  standard uncertainties of observed reflections  (see _reflns.observed_criterion) in the resolution shell.   _reflns_shell.pdbx_netI_over_sigmaI_obs =  <I/sigma(I)>  # noqa: E501

        :return: The pdbx_net_i_over_sigma_i_obs of this ReflnsShell.  # noqa: E501
        :rtype: float
        """
        return self._pdbx_net_i_over_sigma_i_obs

    @pdbx_net_i_over_sigma_i_obs.setter
    def pdbx_net_i_over_sigma_i_obs(self, pdbx_net_i_over_sigma_i_obs):
        """Sets the pdbx_net_i_over_sigma_i_obs of this ReflnsShell.

        The mean of the ratio of the intensities to their  standard uncertainties of observed reflections  (see _reflns.observed_criterion) in the resolution shell.   _reflns_shell.pdbx_netI_over_sigmaI_obs =  <I/sigma(I)>  # noqa: E501

        :param pdbx_net_i_over_sigma_i_obs: The pdbx_net_i_over_sigma_i_obs of this ReflnsShell.  # noqa: E501
        :type: float
        """

        self._pdbx_net_i_over_sigma_i_obs = pdbx_net_i_over_sigma_i_obs

    @property
    def pdbx_ordinal(self):
        """Gets the pdbx_ordinal of this ReflnsShell.  # noqa: E501

        An ordinal identifier for this resolution shell.  # noqa: E501

        :return: The pdbx_ordinal of this ReflnsShell.  # noqa: E501
        :rtype: int
        """
        return self._pdbx_ordinal

    @pdbx_ordinal.setter
    def pdbx_ordinal(self, pdbx_ordinal):
        """Sets the pdbx_ordinal of this ReflnsShell.

        An ordinal identifier for this resolution shell.  # noqa: E501

        :param pdbx_ordinal: The pdbx_ordinal of this ReflnsShell.  # noqa: E501
        :type: int
        """
        if pdbx_ordinal is None:
            raise ValueError("Invalid value for `pdbx_ordinal`, must not be `None`")  # noqa: E501

        self._pdbx_ordinal = pdbx_ordinal

    @property
    def pdbx_redundancy(self):
        """Gets the pdbx_redundancy of this ReflnsShell.  # noqa: E501

        Redundancy for the current shell.  # noqa: E501

        :return: The pdbx_redundancy of this ReflnsShell.  # noqa: E501
        :rtype: float
        """
        return self._pdbx_redundancy

    @pdbx_redundancy.setter
    def pdbx_redundancy(self, pdbx_redundancy):
        """Sets the pdbx_redundancy of this ReflnsShell.

        Redundancy for the current shell.  # noqa: E501

        :param pdbx_redundancy: The pdbx_redundancy of this ReflnsShell.  # noqa: E501
        :type: float
        """

        self._pdbx_redundancy = pdbx_redundancy

    @property
    def pdbx_rejects(self):
        """Gets the pdbx_rejects of this ReflnsShell.  # noqa: E501

        The number of rejected reflections in the resolution  shell.  Reflections may be rejected from scaling  by setting the observation criterion,  _reflns.observed_criterion.  # noqa: E501

        :return: The pdbx_rejects of this ReflnsShell.  # noqa: E501
        :rtype: int
        """
        return self._pdbx_rejects

    @pdbx_rejects.setter
    def pdbx_rejects(self, pdbx_rejects):
        """Sets the pdbx_rejects of this ReflnsShell.

        The number of rejected reflections in the resolution  shell.  Reflections may be rejected from scaling  by setting the observation criterion,  _reflns.observed_criterion.  # noqa: E501

        :param pdbx_rejects: The pdbx_rejects of this ReflnsShell.  # noqa: E501
        :type: int
        """

        self._pdbx_rejects = pdbx_rejects

    @property
    def percent_possible_all(self):
        """Gets the percent_possible_all of this ReflnsShell.  # noqa: E501

        The percentage of geometrically possible reflections represented  by all reflections measured for this shell.  # noqa: E501

        :return: The percent_possible_all of this ReflnsShell.  # noqa: E501
        :rtype: float
        """
        return self._percent_possible_all

    @percent_possible_all.setter
    def percent_possible_all(self, percent_possible_all):
        """Sets the percent_possible_all of this ReflnsShell.

        The percentage of geometrically possible reflections represented  by all reflections measured for this shell.  # noqa: E501

        :param percent_possible_all: The percent_possible_all of this ReflnsShell.  # noqa: E501
        :type: float
        """

        self._percent_possible_all = percent_possible_all

    @property
    def percent_possible_obs(self):
        """Gets the percent_possible_obs of this ReflnsShell.  # noqa: E501

        The percentage of geometrically possible reflections represented  by reflections classified as 'observed' (see  _reflns.observed_criterion) for this shell.  # noqa: E501

        :return: The percent_possible_obs of this ReflnsShell.  # noqa: E501
        :rtype: float
        """
        return self._percent_possible_obs

    @percent_possible_obs.setter
    def percent_possible_obs(self, percent_possible_obs):
        """Sets the percent_possible_obs of this ReflnsShell.

        The percentage of geometrically possible reflections represented  by reflections classified as 'observed' (see  _reflns.observed_criterion) for this shell.  # noqa: E501

        :param percent_possible_obs: The percent_possible_obs of this ReflnsShell.  # noqa: E501
        :type: float
        """

        self._percent_possible_obs = percent_possible_obs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReflnsShell, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReflnsShell):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
