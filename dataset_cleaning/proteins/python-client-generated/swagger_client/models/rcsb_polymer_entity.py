# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RcsbPolymerEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'details': 'str',
        'formula_weight': 'float',
        'pdbx_description': 'str',
        'pdbx_ec': 'str',
        'pdbx_fragment': 'str',
        'pdbx_mutation': 'str',
        'pdbx_number_of_molecules': 'int',
        'rcsb_multiple_source_flag': 'str',
        'rcsb_source_part_count': 'int',
        'rcsb_source_taxonomy_count': 'int',
        'src_method': 'str',
        'rcsb_ec_lineage': 'list[RcsbPolymerEntityRcsbEcLineage]',
        'rcsb_macromolecular_names_combined': 'list[RcsbPolymerEntityRcsbMacromolecularNamesCombined]',
        'rcsb_enzyme_class_combined': 'list[RcsbPolymerEntityRcsbEnzymeClassCombined]',
        'rcsb_polymer_name_combined': 'RcsbPolymerEntityRcsbPolymerNameCombined'
    }

    attribute_map = {
        'details': 'details',
        'formula_weight': 'formula_weight',
        'pdbx_description': 'pdbx_description',
        'pdbx_ec': 'pdbx_ec',
        'pdbx_fragment': 'pdbx_fragment',
        'pdbx_mutation': 'pdbx_mutation',
        'pdbx_number_of_molecules': 'pdbx_number_of_molecules',
        'rcsb_multiple_source_flag': 'rcsb_multiple_source_flag',
        'rcsb_source_part_count': 'rcsb_source_part_count',
        'rcsb_source_taxonomy_count': 'rcsb_source_taxonomy_count',
        'src_method': 'src_method',
        'rcsb_ec_lineage': 'rcsb_ec_lineage',
        'rcsb_macromolecular_names_combined': 'rcsb_macromolecular_names_combined',
        'rcsb_enzyme_class_combined': 'rcsb_enzyme_class_combined',
        'rcsb_polymer_name_combined': 'rcsb_polymer_name_combined'
    }

    def __init__(self, details=None, formula_weight=None, pdbx_description=None, pdbx_ec=None, pdbx_fragment=None, pdbx_mutation=None, pdbx_number_of_molecules=None, rcsb_multiple_source_flag=None, rcsb_source_part_count=None, rcsb_source_taxonomy_count=None, src_method=None, rcsb_ec_lineage=None, rcsb_macromolecular_names_combined=None, rcsb_enzyme_class_combined=None, rcsb_polymer_name_combined=None):  # noqa: E501
        """RcsbPolymerEntity - a model defined in Swagger"""  # noqa: E501
        self._details = None
        self._formula_weight = None
        self._pdbx_description = None
        self._pdbx_ec = None
        self._pdbx_fragment = None
        self._pdbx_mutation = None
        self._pdbx_number_of_molecules = None
        self._rcsb_multiple_source_flag = None
        self._rcsb_source_part_count = None
        self._rcsb_source_taxonomy_count = None
        self._src_method = None
        self._rcsb_ec_lineage = None
        self._rcsb_macromolecular_names_combined = None
        self._rcsb_enzyme_class_combined = None
        self._rcsb_polymer_name_combined = None
        self.discriminator = None
        if details is not None:
            self.details = details
        if formula_weight is not None:
            self.formula_weight = formula_weight
        if pdbx_description is not None:
            self.pdbx_description = pdbx_description
        if pdbx_ec is not None:
            self.pdbx_ec = pdbx_ec
        if pdbx_fragment is not None:
            self.pdbx_fragment = pdbx_fragment
        if pdbx_mutation is not None:
            self.pdbx_mutation = pdbx_mutation
        if pdbx_number_of_molecules is not None:
            self.pdbx_number_of_molecules = pdbx_number_of_molecules
        if rcsb_multiple_source_flag is not None:
            self.rcsb_multiple_source_flag = rcsb_multiple_source_flag
        if rcsb_source_part_count is not None:
            self.rcsb_source_part_count = rcsb_source_part_count
        if rcsb_source_taxonomy_count is not None:
            self.rcsb_source_taxonomy_count = rcsb_source_taxonomy_count
        if src_method is not None:
            self.src_method = src_method
        if rcsb_ec_lineage is not None:
            self.rcsb_ec_lineage = rcsb_ec_lineage
        if rcsb_macromolecular_names_combined is not None:
            self.rcsb_macromolecular_names_combined = rcsb_macromolecular_names_combined
        if rcsb_enzyme_class_combined is not None:
            self.rcsb_enzyme_class_combined = rcsb_enzyme_class_combined
        if rcsb_polymer_name_combined is not None:
            self.rcsb_polymer_name_combined = rcsb_polymer_name_combined

    @property
    def details(self):
        """Gets the details of this RcsbPolymerEntity.  # noqa: E501

        A description of special aspects of the entity.  # noqa: E501

        :return: The details of this RcsbPolymerEntity.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this RcsbPolymerEntity.

        A description of special aspects of the entity.  # noqa: E501

        :param details: The details of this RcsbPolymerEntity.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def formula_weight(self):
        """Gets the formula_weight of this RcsbPolymerEntity.  # noqa: E501

        Formula mass (KDa) of the entity.  # noqa: E501

        :return: The formula_weight of this RcsbPolymerEntity.  # noqa: E501
        :rtype: float
        """
        return self._formula_weight

    @formula_weight.setter
    def formula_weight(self, formula_weight):
        """Sets the formula_weight of this RcsbPolymerEntity.

        Formula mass (KDa) of the entity.  # noqa: E501

        :param formula_weight: The formula_weight of this RcsbPolymerEntity.  # noqa: E501
        :type: float
        """

        self._formula_weight = formula_weight

    @property
    def pdbx_description(self):
        """Gets the pdbx_description of this RcsbPolymerEntity.  # noqa: E501

        A description of the polymer entity.  # noqa: E501

        :return: The pdbx_description of this RcsbPolymerEntity.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_description

    @pdbx_description.setter
    def pdbx_description(self, pdbx_description):
        """Sets the pdbx_description of this RcsbPolymerEntity.

        A description of the polymer entity.  # noqa: E501

        :param pdbx_description: The pdbx_description of this RcsbPolymerEntity.  # noqa: E501
        :type: str
        """

        self._pdbx_description = pdbx_description

    @property
    def pdbx_ec(self):
        """Gets the pdbx_ec of this RcsbPolymerEntity.  # noqa: E501

        Enzyme Commission (EC) number(s)  # noqa: E501

        :return: The pdbx_ec of this RcsbPolymerEntity.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_ec

    @pdbx_ec.setter
    def pdbx_ec(self, pdbx_ec):
        """Sets the pdbx_ec of this RcsbPolymerEntity.

        Enzyme Commission (EC) number(s)  # noqa: E501

        :param pdbx_ec: The pdbx_ec of this RcsbPolymerEntity.  # noqa: E501
        :type: str
        """

        self._pdbx_ec = pdbx_ec

    @property
    def pdbx_fragment(self):
        """Gets the pdbx_fragment of this RcsbPolymerEntity.  # noqa: E501

        Polymer entity fragment description(s).  # noqa: E501

        :return: The pdbx_fragment of this RcsbPolymerEntity.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_fragment

    @pdbx_fragment.setter
    def pdbx_fragment(self, pdbx_fragment):
        """Sets the pdbx_fragment of this RcsbPolymerEntity.

        Polymer entity fragment description(s).  # noqa: E501

        :param pdbx_fragment: The pdbx_fragment of this RcsbPolymerEntity.  # noqa: E501
        :type: str
        """

        self._pdbx_fragment = pdbx_fragment

    @property
    def pdbx_mutation(self):
        """Gets the pdbx_mutation of this RcsbPolymerEntity.  # noqa: E501

        Details about any polymer entity mutation(s).  # noqa: E501

        :return: The pdbx_mutation of this RcsbPolymerEntity.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_mutation

    @pdbx_mutation.setter
    def pdbx_mutation(self, pdbx_mutation):
        """Sets the pdbx_mutation of this RcsbPolymerEntity.

        Details about any polymer entity mutation(s).  # noqa: E501

        :param pdbx_mutation: The pdbx_mutation of this RcsbPolymerEntity.  # noqa: E501
        :type: str
        """

        self._pdbx_mutation = pdbx_mutation

    @property
    def pdbx_number_of_molecules(self):
        """Gets the pdbx_number_of_molecules of this RcsbPolymerEntity.  # noqa: E501

        The number of molecules of the entity in the entry.  # noqa: E501

        :return: The pdbx_number_of_molecules of this RcsbPolymerEntity.  # noqa: E501
        :rtype: int
        """
        return self._pdbx_number_of_molecules

    @pdbx_number_of_molecules.setter
    def pdbx_number_of_molecules(self, pdbx_number_of_molecules):
        """Sets the pdbx_number_of_molecules of this RcsbPolymerEntity.

        The number of molecules of the entity in the entry.  # noqa: E501

        :param pdbx_number_of_molecules: The pdbx_number_of_molecules of this RcsbPolymerEntity.  # noqa: E501
        :type: int
        """

        self._pdbx_number_of_molecules = pdbx_number_of_molecules

    @property
    def rcsb_multiple_source_flag(self):
        """Gets the rcsb_multiple_source_flag of this RcsbPolymerEntity.  # noqa: E501

        A code indicating the entity has multiple biological sources.  # noqa: E501

        :return: The rcsb_multiple_source_flag of this RcsbPolymerEntity.  # noqa: E501
        :rtype: str
        """
        return self._rcsb_multiple_source_flag

    @rcsb_multiple_source_flag.setter
    def rcsb_multiple_source_flag(self, rcsb_multiple_source_flag):
        """Sets the rcsb_multiple_source_flag of this RcsbPolymerEntity.

        A code indicating the entity has multiple biological sources.  # noqa: E501

        :param rcsb_multiple_source_flag: The rcsb_multiple_source_flag of this RcsbPolymerEntity.  # noqa: E501
        :type: str
        """
        allowed_values = ["N", "Y"]  # noqa: E501
        if rcsb_multiple_source_flag not in allowed_values:
            raise ValueError(
                "Invalid value for `rcsb_multiple_source_flag` ({0}), must be one of {1}"  # noqa: E501
                .format(rcsb_multiple_source_flag, allowed_values)
            )

        self._rcsb_multiple_source_flag = rcsb_multiple_source_flag

    @property
    def rcsb_source_part_count(self):
        """Gets the rcsb_source_part_count of this RcsbPolymerEntity.  # noqa: E501

        The number of biological sources for the polymer entity. Multiple source contributions  may come from the same organism (taxonomy).  # noqa: E501

        :return: The rcsb_source_part_count of this RcsbPolymerEntity.  # noqa: E501
        :rtype: int
        """
        return self._rcsb_source_part_count

    @rcsb_source_part_count.setter
    def rcsb_source_part_count(self, rcsb_source_part_count):
        """Sets the rcsb_source_part_count of this RcsbPolymerEntity.

        The number of biological sources for the polymer entity. Multiple source contributions  may come from the same organism (taxonomy).  # noqa: E501

        :param rcsb_source_part_count: The rcsb_source_part_count of this RcsbPolymerEntity.  # noqa: E501
        :type: int
        """

        self._rcsb_source_part_count = rcsb_source_part_count

    @property
    def rcsb_source_taxonomy_count(self):
        """Gets the rcsb_source_taxonomy_count of this RcsbPolymerEntity.  # noqa: E501

        The number of distinct source taxonomies for the polymer entity. Commonly used to identify chimeric polymers.  # noqa: E501

        :return: The rcsb_source_taxonomy_count of this RcsbPolymerEntity.  # noqa: E501
        :rtype: int
        """
        return self._rcsb_source_taxonomy_count

    @rcsb_source_taxonomy_count.setter
    def rcsb_source_taxonomy_count(self, rcsb_source_taxonomy_count):
        """Sets the rcsb_source_taxonomy_count of this RcsbPolymerEntity.

        The number of distinct source taxonomies for the polymer entity. Commonly used to identify chimeric polymers.  # noqa: E501

        :param rcsb_source_taxonomy_count: The rcsb_source_taxonomy_count of this RcsbPolymerEntity.  # noqa: E501
        :type: int
        """

        self._rcsb_source_taxonomy_count = rcsb_source_taxonomy_count

    @property
    def src_method(self):
        """Gets the src_method of this RcsbPolymerEntity.  # noqa: E501

        The method by which the sample for the polymer entity was produced.  Entities isolated directly from natural sources (tissues, soil  samples etc.) are expected to have further information in the  ENTITY_SRC_NAT category. Entities isolated from genetically  manipulated sources are expected to have further information in  the ENTITY_SRC_GEN category.  # noqa: E501

        :return: The src_method of this RcsbPolymerEntity.  # noqa: E501
        :rtype: str
        """
        return self._src_method

    @src_method.setter
    def src_method(self, src_method):
        """Sets the src_method of this RcsbPolymerEntity.

        The method by which the sample for the polymer entity was produced.  Entities isolated directly from natural sources (tissues, soil  samples etc.) are expected to have further information in the  ENTITY_SRC_NAT category. Entities isolated from genetically  manipulated sources are expected to have further information in  the ENTITY_SRC_GEN category.  # noqa: E501

        :param src_method: The src_method of this RcsbPolymerEntity.  # noqa: E501
        :type: str
        """
        allowed_values = ["man", "nat", "syn"]  # noqa: E501
        if src_method not in allowed_values:
            raise ValueError(
                "Invalid value for `src_method` ({0}), must be one of {1}"  # noqa: E501
                .format(src_method, allowed_values)
            )

        self._src_method = src_method

    @property
    def rcsb_ec_lineage(self):
        """Gets the rcsb_ec_lineage of this RcsbPolymerEntity.  # noqa: E501


        :return: The rcsb_ec_lineage of this RcsbPolymerEntity.  # noqa: E501
        :rtype: list[RcsbPolymerEntityRcsbEcLineage]
        """
        return self._rcsb_ec_lineage

    @rcsb_ec_lineage.setter
    def rcsb_ec_lineage(self, rcsb_ec_lineage):
        """Sets the rcsb_ec_lineage of this RcsbPolymerEntity.


        :param rcsb_ec_lineage: The rcsb_ec_lineage of this RcsbPolymerEntity.  # noqa: E501
        :type: list[RcsbPolymerEntityRcsbEcLineage]
        """

        self._rcsb_ec_lineage = rcsb_ec_lineage

    @property
    def rcsb_macromolecular_names_combined(self):
        """Gets the rcsb_macromolecular_names_combined of this RcsbPolymerEntity.  # noqa: E501


        :return: The rcsb_macromolecular_names_combined of this RcsbPolymerEntity.  # noqa: E501
        :rtype: list[RcsbPolymerEntityRcsbMacromolecularNamesCombined]
        """
        return self._rcsb_macromolecular_names_combined

    @rcsb_macromolecular_names_combined.setter
    def rcsb_macromolecular_names_combined(self, rcsb_macromolecular_names_combined):
        """Sets the rcsb_macromolecular_names_combined of this RcsbPolymerEntity.


        :param rcsb_macromolecular_names_combined: The rcsb_macromolecular_names_combined of this RcsbPolymerEntity.  # noqa: E501
        :type: list[RcsbPolymerEntityRcsbMacromolecularNamesCombined]
        """

        self._rcsb_macromolecular_names_combined = rcsb_macromolecular_names_combined

    @property
    def rcsb_enzyme_class_combined(self):
        """Gets the rcsb_enzyme_class_combined of this RcsbPolymerEntity.  # noqa: E501


        :return: The rcsb_enzyme_class_combined of this RcsbPolymerEntity.  # noqa: E501
        :rtype: list[RcsbPolymerEntityRcsbEnzymeClassCombined]
        """
        return self._rcsb_enzyme_class_combined

    @rcsb_enzyme_class_combined.setter
    def rcsb_enzyme_class_combined(self, rcsb_enzyme_class_combined):
        """Sets the rcsb_enzyme_class_combined of this RcsbPolymerEntity.


        :param rcsb_enzyme_class_combined: The rcsb_enzyme_class_combined of this RcsbPolymerEntity.  # noqa: E501
        :type: list[RcsbPolymerEntityRcsbEnzymeClassCombined]
        """

        self._rcsb_enzyme_class_combined = rcsb_enzyme_class_combined

    @property
    def rcsb_polymer_name_combined(self):
        """Gets the rcsb_polymer_name_combined of this RcsbPolymerEntity.  # noqa: E501


        :return: The rcsb_polymer_name_combined of this RcsbPolymerEntity.  # noqa: E501
        :rtype: RcsbPolymerEntityRcsbPolymerNameCombined
        """
        return self._rcsb_polymer_name_combined

    @rcsb_polymer_name_combined.setter
    def rcsb_polymer_name_combined(self, rcsb_polymer_name_combined):
        """Sets the rcsb_polymer_name_combined of this RcsbPolymerEntity.


        :param rcsb_polymer_name_combined: The rcsb_polymer_name_combined of this RcsbPolymerEntity.  # noqa: E501
        :type: RcsbPolymerEntityRcsbPolymerNameCombined
        """

        self._rcsb_polymer_name_combined = rcsb_polymer_name_combined

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RcsbPolymerEntity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RcsbPolymerEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
