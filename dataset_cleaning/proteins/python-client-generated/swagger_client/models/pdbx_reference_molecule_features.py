# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PdbxReferenceMoleculeFeatures(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'family_prd_id': 'str',
        'ordinal': 'int',
        'prd_id': 'str',
        'source': 'str',
        'source_ordinal': 'int',
        'type': 'str',
        'value': 'str'
    }

    attribute_map = {
        'family_prd_id': 'family_prd_id',
        'ordinal': 'ordinal',
        'prd_id': 'prd_id',
        'source': 'source',
        'source_ordinal': 'source_ordinal',
        'type': 'type',
        'value': 'value'
    }

    def __init__(self, family_prd_id=None, ordinal=None, prd_id=None, source=None, source_ordinal=None, type=None, value=None):  # noqa: E501
        """PdbxReferenceMoleculeFeatures - a model defined in Swagger"""  # noqa: E501
        self._family_prd_id = None
        self._ordinal = None
        self._prd_id = None
        self._source = None
        self._source_ordinal = None
        self._type = None
        self._value = None
        self.discriminator = None
        self.family_prd_id = family_prd_id
        self.ordinal = ordinal
        self.prd_id = prd_id
        if source is not None:
            self.source = source
        if source_ordinal is not None:
            self.source_ordinal = source_ordinal
        if type is not None:
            self.type = type
        if value is not None:
            self.value = value

    @property
    def family_prd_id(self):
        """Gets the family_prd_id of this PdbxReferenceMoleculeFeatures.  # noqa: E501

        The value of _pdbx_reference_molecule_features.family_prd_id is a reference to  _pdbx_reference_molecule_list.family_prd_id in category PDBX_REFERENCE_MOLECULE_FAMILY_LIST.  # noqa: E501

        :return: The family_prd_id of this PdbxReferenceMoleculeFeatures.  # noqa: E501
        :rtype: str
        """
        return self._family_prd_id

    @family_prd_id.setter
    def family_prd_id(self, family_prd_id):
        """Sets the family_prd_id of this PdbxReferenceMoleculeFeatures.

        The value of _pdbx_reference_molecule_features.family_prd_id is a reference to  _pdbx_reference_molecule_list.family_prd_id in category PDBX_REFERENCE_MOLECULE_FAMILY_LIST.  # noqa: E501

        :param family_prd_id: The family_prd_id of this PdbxReferenceMoleculeFeatures.  # noqa: E501
        :type: str
        """
        if family_prd_id is None:
            raise ValueError("Invalid value for `family_prd_id`, must not be `None`")  # noqa: E501

        self._family_prd_id = family_prd_id

    @property
    def ordinal(self):
        """Gets the ordinal of this PdbxReferenceMoleculeFeatures.  # noqa: E501

        The value of _pdbx_reference_molecule_features.ordinal distinguishes         each feature for this entity.  # noqa: E501

        :return: The ordinal of this PdbxReferenceMoleculeFeatures.  # noqa: E501
        :rtype: int
        """
        return self._ordinal

    @ordinal.setter
    def ordinal(self, ordinal):
        """Sets the ordinal of this PdbxReferenceMoleculeFeatures.

        The value of _pdbx_reference_molecule_features.ordinal distinguishes         each feature for this entity.  # noqa: E501

        :param ordinal: The ordinal of this PdbxReferenceMoleculeFeatures.  # noqa: E501
        :type: int
        """
        if ordinal is None:
            raise ValueError("Invalid value for `ordinal`, must not be `None`")  # noqa: E501

        self._ordinal = ordinal

    @property
    def prd_id(self):
        """Gets the prd_id of this PdbxReferenceMoleculeFeatures.  # noqa: E501

        The value of _pdbx_reference_molecule_features.prd_id is a reference         _pdbx_reference_molecule.prd_id in the  PDBX_REFERENCE_MOLECULE category.  # noqa: E501

        :return: The prd_id of this PdbxReferenceMoleculeFeatures.  # noqa: E501
        :rtype: str
        """
        return self._prd_id

    @prd_id.setter
    def prd_id(self, prd_id):
        """Sets the prd_id of this PdbxReferenceMoleculeFeatures.

        The value of _pdbx_reference_molecule_features.prd_id is a reference         _pdbx_reference_molecule.prd_id in the  PDBX_REFERENCE_MOLECULE category.  # noqa: E501

        :param prd_id: The prd_id of this PdbxReferenceMoleculeFeatures.  # noqa: E501
        :type: str
        """
        if prd_id is None:
            raise ValueError("Invalid value for `prd_id`, must not be `None`")  # noqa: E501

        self._prd_id = prd_id

    @property
    def source(self):
        """Gets the source of this PdbxReferenceMoleculeFeatures.  # noqa: E501

        The information source for the component feature.  # noqa: E501

        :return: The source of this PdbxReferenceMoleculeFeatures.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this PdbxReferenceMoleculeFeatures.

        The information source for the component feature.  # noqa: E501

        :param source: The source of this PdbxReferenceMoleculeFeatures.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def source_ordinal(self):
        """Gets the source_ordinal of this PdbxReferenceMoleculeFeatures.  # noqa: E501

        The value of _pdbx_reference_molecule_features.source_ordinal provides         the priority order of features from a particular source or database.  # noqa: E501

        :return: The source_ordinal of this PdbxReferenceMoleculeFeatures.  # noqa: E501
        :rtype: int
        """
        return self._source_ordinal

    @source_ordinal.setter
    def source_ordinal(self, source_ordinal):
        """Sets the source_ordinal of this PdbxReferenceMoleculeFeatures.

        The value of _pdbx_reference_molecule_features.source_ordinal provides         the priority order of features from a particular source or database.  # noqa: E501

        :param source_ordinal: The source_ordinal of this PdbxReferenceMoleculeFeatures.  # noqa: E501
        :type: int
        """

        self._source_ordinal = source_ordinal

    @property
    def type(self):
        """Gets the type of this PdbxReferenceMoleculeFeatures.  # noqa: E501

        The entity feature type.  # noqa: E501

        :return: The type of this PdbxReferenceMoleculeFeatures.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PdbxReferenceMoleculeFeatures.

        The entity feature type.  # noqa: E501

        :param type: The type of this PdbxReferenceMoleculeFeatures.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def value(self):
        """Gets the value of this PdbxReferenceMoleculeFeatures.  # noqa: E501

        The entity feature value.  # noqa: E501

        :return: The value of this PdbxReferenceMoleculeFeatures.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this PdbxReferenceMoleculeFeatures.

        The entity feature value.  # noqa: E501

        :param value: The value of this PdbxReferenceMoleculeFeatures.  # noqa: E501
        :type: str
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PdbxReferenceMoleculeFeatures, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdbxReferenceMoleculeFeatures):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
