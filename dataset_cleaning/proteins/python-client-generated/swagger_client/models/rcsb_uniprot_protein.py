# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RcsbUniprotProtein(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sequence': 'str',
        'name': 'RcsbUniprotProteinName',
        'function': 'RcsbUniprotProteinFunction',
        'gene': 'list[RcsbUniprotProteinGene]',
        'source_organism': 'RcsbUniprotProteinSourceOrganism',
        'ec': 'list[RcsbUniprotProteinEc]'
    }

    attribute_map = {
        'sequence': 'sequence',
        'name': 'name',
        'function': 'function',
        'gene': 'gene',
        'source_organism': 'source_organism',
        'ec': 'ec'
    }

    def __init__(self, sequence=None, name=None, function=None, gene=None, source_organism=None, ec=None):  # noqa: E501
        """RcsbUniprotProtein - a model defined in Swagger"""  # noqa: E501
        self._sequence = None
        self._name = None
        self._function = None
        self._gene = None
        self._source_organism = None
        self._ec = None
        self.discriminator = None
        if sequence is not None:
            self.sequence = sequence
        if name is not None:
            self.name = name
        if function is not None:
            self.function = function
        if gene is not None:
            self.gene = gene
        if source_organism is not None:
            self.source_organism = source_organism
        if ec is not None:
            self.ec = ec

    @property
    def sequence(self):
        """Gets the sequence of this RcsbUniprotProtein.  # noqa: E501

        Protein sequence data for canonical protein sequence.  # noqa: E501

        :return: The sequence of this RcsbUniprotProtein.  # noqa: E501
        :rtype: str
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this RcsbUniprotProtein.

        Protein sequence data for canonical protein sequence.  # noqa: E501

        :param sequence: The sequence of this RcsbUniprotProtein.  # noqa: E501
        :type: str
        """

        self._sequence = sequence

    @property
    def name(self):
        """Gets the name of this RcsbUniprotProtein.  # noqa: E501


        :return: The name of this RcsbUniprotProtein.  # noqa: E501
        :rtype: RcsbUniprotProteinName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RcsbUniprotProtein.


        :param name: The name of this RcsbUniprotProtein.  # noqa: E501
        :type: RcsbUniprotProteinName
        """

        self._name = name

    @property
    def function(self):
        """Gets the function of this RcsbUniprotProtein.  # noqa: E501


        :return: The function of this RcsbUniprotProtein.  # noqa: E501
        :rtype: RcsbUniprotProteinFunction
        """
        return self._function

    @function.setter
    def function(self, function):
        """Sets the function of this RcsbUniprotProtein.


        :param function: The function of this RcsbUniprotProtein.  # noqa: E501
        :type: RcsbUniprotProteinFunction
        """

        self._function = function

    @property
    def gene(self):
        """Gets the gene of this RcsbUniprotProtein.  # noqa: E501

        The name(s) of the gene(s) that code for the protein sequence(s) described in the entry.  # noqa: E501

        :return: The gene of this RcsbUniprotProtein.  # noqa: E501
        :rtype: list[RcsbUniprotProteinGene]
        """
        return self._gene

    @gene.setter
    def gene(self, gene):
        """Sets the gene of this RcsbUniprotProtein.

        The name(s) of the gene(s) that code for the protein sequence(s) described in the entry.  # noqa: E501

        :param gene: The gene of this RcsbUniprotProtein.  # noqa: E501
        :type: list[RcsbUniprotProteinGene]
        """

        self._gene = gene

    @property
    def source_organism(self):
        """Gets the source_organism of this RcsbUniprotProtein.  # noqa: E501


        :return: The source_organism of this RcsbUniprotProtein.  # noqa: E501
        :rtype: RcsbUniprotProteinSourceOrganism
        """
        return self._source_organism

    @source_organism.setter
    def source_organism(self, source_organism):
        """Sets the source_organism of this RcsbUniprotProtein.


        :param source_organism: The source_organism of this RcsbUniprotProtein.  # noqa: E501
        :type: RcsbUniprotProteinSourceOrganism
        """

        self._source_organism = source_organism

    @property
    def ec(self):
        """Gets the ec of this RcsbUniprotProtein.  # noqa: E501

        Enzyme Commission (EC) number(s).  # noqa: E501

        :return: The ec of this RcsbUniprotProtein.  # noqa: E501
        :rtype: list[RcsbUniprotProteinEc]
        """
        return self._ec

    @ec.setter
    def ec(self, ec):
        """Sets the ec of this RcsbUniprotProtein.

        Enzyme Commission (EC) number(s).  # noqa: E501

        :param ec: The ec of this RcsbUniprotProtein.  # noqa: E501
        :type: list[RcsbUniprotProteinEc]
        """

        self._ec = ec

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RcsbUniprotProtein, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RcsbUniprotProtein):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
