# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RcsbClusterFlexibility(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'link': 'str',
        'label': 'str',
        'avg_rmsd': 'float',
        'max_rmsd': 'float',
        'provenance_code': 'str'
    }

    attribute_map = {
        'link': 'link',
        'label': 'label',
        'avg_rmsd': 'avg_rmsd',
        'max_rmsd': 'max_rmsd',
        'provenance_code': 'provenance_code'
    }

    def __init__(self, link=None, label=None, avg_rmsd=None, max_rmsd=None, provenance_code=None):  # noqa: E501
        """RcsbClusterFlexibility - a model defined in Swagger"""  # noqa: E501
        self._link = None
        self._label = None
        self._avg_rmsd = None
        self._max_rmsd = None
        self._provenance_code = None
        self.discriminator = None
        if link is not None:
            self.link = link
        if label is not None:
            self.label = label
        if avg_rmsd is not None:
            self.avg_rmsd = avg_rmsd
        if max_rmsd is not None:
            self.max_rmsd = max_rmsd
        if provenance_code is not None:
            self.provenance_code = provenance_code

    @property
    def link(self):
        """Gets the link of this RcsbClusterFlexibility.  # noqa: E501

        Link to the associated PDBFlex database entry.  # noqa: E501

        :return: The link of this RcsbClusterFlexibility.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this RcsbClusterFlexibility.

        Link to the associated PDBFlex database entry.  # noqa: E501

        :param link: The link of this RcsbClusterFlexibility.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def label(self):
        """Gets the label of this RcsbClusterFlexibility.  # noqa: E501

        Structural flexibility in the cluster (95% sequence identity) where a given entity belongs.  # noqa: E501

        :return: The label of this RcsbClusterFlexibility.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this RcsbClusterFlexibility.

        Structural flexibility in the cluster (95% sequence identity) where a given entity belongs.  # noqa: E501

        :param label: The label of this RcsbClusterFlexibility.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def avg_rmsd(self):
        """Gets the avg_rmsd of this RcsbClusterFlexibility.  # noqa: E501

        Average RMSD refer to average pairwise RMSD (Root Mean Square Deviation of C-alpha atoms) between structures in the cluster (95% sequence identity) where a given entity belongs.  # noqa: E501

        :return: The avg_rmsd of this RcsbClusterFlexibility.  # noqa: E501
        :rtype: float
        """
        return self._avg_rmsd

    @avg_rmsd.setter
    def avg_rmsd(self, avg_rmsd):
        """Sets the avg_rmsd of this RcsbClusterFlexibility.

        Average RMSD refer to average pairwise RMSD (Root Mean Square Deviation of C-alpha atoms) between structures in the cluster (95% sequence identity) where a given entity belongs.  # noqa: E501

        :param avg_rmsd: The avg_rmsd of this RcsbClusterFlexibility.  # noqa: E501
        :type: float
        """

        self._avg_rmsd = avg_rmsd

    @property
    def max_rmsd(self):
        """Gets the max_rmsd of this RcsbClusterFlexibility.  # noqa: E501

        Maximal RMSD refer to maximal pairwise RMSD (Root Mean Square Deviation of C-alpha atoms) between structures in the cluster (95% sequence identity) where a given entity belongs.  # noqa: E501

        :return: The max_rmsd of this RcsbClusterFlexibility.  # noqa: E501
        :rtype: float
        """
        return self._max_rmsd

    @max_rmsd.setter
    def max_rmsd(self, max_rmsd):
        """Sets the max_rmsd of this RcsbClusterFlexibility.

        Maximal RMSD refer to maximal pairwise RMSD (Root Mean Square Deviation of C-alpha atoms) between structures in the cluster (95% sequence identity) where a given entity belongs.  # noqa: E501

        :param max_rmsd: The max_rmsd of this RcsbClusterFlexibility.  # noqa: E501
        :type: float
        """

        self._max_rmsd = max_rmsd

    @property
    def provenance_code(self):
        """Gets the provenance_code of this RcsbClusterFlexibility.  # noqa: E501


        :return: The provenance_code of this RcsbClusterFlexibility.  # noqa: E501
        :rtype: str
        """
        return self._provenance_code

    @provenance_code.setter
    def provenance_code(self, provenance_code):
        """Sets the provenance_code of this RcsbClusterFlexibility.


        :param provenance_code: The provenance_code of this RcsbClusterFlexibility.  # noqa: E501
        :type: str
        """
        allowed_values = ["PDBFlex"]  # noqa: E501
        if provenance_code not in allowed_values:
            raise ValueError(
                "Invalid value for `provenance_code` ({0}), must be one of {1}"  # noqa: E501
                .format(provenance_code, allowed_values)
            )

        self._provenance_code = provenance_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RcsbClusterFlexibility, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RcsbClusterFlexibility):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
