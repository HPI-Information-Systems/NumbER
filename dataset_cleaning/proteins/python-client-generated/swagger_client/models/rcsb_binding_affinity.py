# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RcsbBindingAffinity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comp_id': 'str',
        'type': 'str',
        'value': 'float',
        'unit': 'str',
        'symbol': 'str',
        'reference_sequence_identity': 'int',
        'provenance_code': 'str',
        'link': 'str'
    }

    attribute_map = {
        'comp_id': 'comp_id',
        'type': 'type',
        'value': 'value',
        'unit': 'unit',
        'symbol': 'symbol',
        'reference_sequence_identity': 'reference_sequence_identity',
        'provenance_code': 'provenance_code',
        'link': 'link'
    }

    def __init__(self, comp_id=None, type=None, value=None, unit=None, symbol=None, reference_sequence_identity=None, provenance_code=None, link=None):  # noqa: E501
        """RcsbBindingAffinity - a model defined in Swagger"""  # noqa: E501
        self._comp_id = None
        self._type = None
        self._value = None
        self._unit = None
        self._symbol = None
        self._reference_sequence_identity = None
        self._provenance_code = None
        self._link = None
        self.discriminator = None
        self.comp_id = comp_id
        self.type = type
        self.value = value
        self.unit = unit
        if symbol is not None:
            self.symbol = symbol
        if reference_sequence_identity is not None:
            self.reference_sequence_identity = reference_sequence_identity
        self.provenance_code = provenance_code
        self.link = link

    @property
    def comp_id(self):
        """Gets the comp_id of this RcsbBindingAffinity.  # noqa: E501

        Ligand identifier.  # noqa: E501

        :return: The comp_id of this RcsbBindingAffinity.  # noqa: E501
        :rtype: str
        """
        return self._comp_id

    @comp_id.setter
    def comp_id(self, comp_id):
        """Sets the comp_id of this RcsbBindingAffinity.

        Ligand identifier.  # noqa: E501

        :param comp_id: The comp_id of this RcsbBindingAffinity.  # noqa: E501
        :type: str
        """
        if comp_id is None:
            raise ValueError("Invalid value for `comp_id`, must not be `None`")  # noqa: E501

        self._comp_id = comp_id

    @property
    def type(self):
        """Gets the type of this RcsbBindingAffinity.  # noqa: E501

        Binding affinity measurement given in one of the following types:  The concentration constants: IC50: the concentration of ligand that reduces enzyme activity by 50%;  EC50: the concentration of compound that generates a half-maximal response;  The binding constant:  Kd: dissociation constant;  Ka: association constant;  Ki: enzyme inhibition constant;  The thermodynamic parameters:  delta G: Gibbs free energy of binding (for association reaction);  delta H: change in enthalpy associated with a chemical reaction;  delta S: change in entropy associated with a chemical reaction.  # noqa: E501

        :return: The type of this RcsbBindingAffinity.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RcsbBindingAffinity.

        Binding affinity measurement given in one of the following types:  The concentration constants: IC50: the concentration of ligand that reduces enzyme activity by 50%;  EC50: the concentration of compound that generates a half-maximal response;  The binding constant:  Kd: dissociation constant;  Ka: association constant;  Ki: enzyme inhibition constant;  The thermodynamic parameters:  delta G: Gibbs free energy of binding (for association reaction);  delta H: change in enthalpy associated with a chemical reaction;  delta S: change in entropy associated with a chemical reaction.  # noqa: E501

        :param type: The type of this RcsbBindingAffinity.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["IC50", "EC50", "Kd", "Ka", "Ki", "&Delta;G", "&Delta;H", "-T&Delta;S"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value(self):
        """Gets the value of this RcsbBindingAffinity.  # noqa: E501

        Binding affinity value between a ligand and its target molecule.  # noqa: E501

        :return: The value of this RcsbBindingAffinity.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this RcsbBindingAffinity.

        Binding affinity value between a ligand and its target molecule.  # noqa: E501

        :param value: The value of this RcsbBindingAffinity.  # noqa: E501
        :type: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def unit(self):
        """Gets the unit of this RcsbBindingAffinity.  # noqa: E501

        Binding affinity unit.  Dissociation constant Kd is normally in molar units (or millimolar , micromolar, nanomolar, etc).  Association constant Ka is normally expressed in inverse molar units (e.g. M-1).  # noqa: E501

        :return: The unit of this RcsbBindingAffinity.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this RcsbBindingAffinity.

        Binding affinity unit.  Dissociation constant Kd is normally in molar units (or millimolar , micromolar, nanomolar, etc).  Association constant Ka is normally expressed in inverse molar units (e.g. M-1).  # noqa: E501

        :param unit: The unit of this RcsbBindingAffinity.  # noqa: E501
        :type: str
        """
        if unit is None:
            raise ValueError("Invalid value for `unit`, must not be `None`")  # noqa: E501

        self._unit = unit

    @property
    def symbol(self):
        """Gets the symbol of this RcsbBindingAffinity.  # noqa: E501

        Binding affinity symbol indicating approximate or precise strength of the binding.  # noqa: E501

        :return: The symbol of this RcsbBindingAffinity.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this RcsbBindingAffinity.

        Binding affinity symbol indicating approximate or precise strength of the binding.  # noqa: E501

        :param symbol: The symbol of this RcsbBindingAffinity.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def reference_sequence_identity(self):
        """Gets the reference_sequence_identity of this RcsbBindingAffinity.  # noqa: E501

        Data point provided by BindingDB. Percent identity between PDB sequence and reference sequence.  # noqa: E501

        :return: The reference_sequence_identity of this RcsbBindingAffinity.  # noqa: E501
        :rtype: int
        """
        return self._reference_sequence_identity

    @reference_sequence_identity.setter
    def reference_sequence_identity(self, reference_sequence_identity):
        """Sets the reference_sequence_identity of this RcsbBindingAffinity.

        Data point provided by BindingDB. Percent identity between PDB sequence and reference sequence.  # noqa: E501

        :param reference_sequence_identity: The reference_sequence_identity of this RcsbBindingAffinity.  # noqa: E501
        :type: int
        """

        self._reference_sequence_identity = reference_sequence_identity

    @property
    def provenance_code(self):
        """Gets the provenance_code of this RcsbBindingAffinity.  # noqa: E501

        The resource name for the related binding affinity reference.  # noqa: E501

        :return: The provenance_code of this RcsbBindingAffinity.  # noqa: E501
        :rtype: str
        """
        return self._provenance_code

    @provenance_code.setter
    def provenance_code(self, provenance_code):
        """Sets the provenance_code of this RcsbBindingAffinity.

        The resource name for the related binding affinity reference.  # noqa: E501

        :param provenance_code: The provenance_code of this RcsbBindingAffinity.  # noqa: E501
        :type: str
        """
        if provenance_code is None:
            raise ValueError("Invalid value for `provenance_code`, must not be `None`")  # noqa: E501
        allowed_values = ["PDBBind", "Binding MOAD", "BindingDB"]  # noqa: E501
        if provenance_code not in allowed_values:
            raise ValueError(
                "Invalid value for `provenance_code` ({0}), must be one of {1}"  # noqa: E501
                .format(provenance_code, allowed_values)
            )

        self._provenance_code = provenance_code

    @property
    def link(self):
        """Gets the link of this RcsbBindingAffinity.  # noqa: E501

        Link to external resource referencing the data.  # noqa: E501

        :return: The link of this RcsbBindingAffinity.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this RcsbBindingAffinity.

        Link to external resource referencing the data.  # noqa: E501

        :param link: The link of this RcsbBindingAffinity.  # noqa: E501
        :type: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")  # noqa: E501

        self._link = link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RcsbBindingAffinity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RcsbBindingAffinity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
