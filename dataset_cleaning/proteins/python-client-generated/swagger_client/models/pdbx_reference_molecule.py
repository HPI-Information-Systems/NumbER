# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PdbxReferenceMolecule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'chem_comp_id': 'str',
        '_class': 'str',
        'class_evidence_code': 'str',
        'compound_details': 'str',
        'description': 'str',
        'formula': 'str',
        'formula_weight': 'float',
        'name': 'str',
        'prd_id': 'str',
        'release_status': 'str',
        'replaced_by': 'str',
        'replaces': 'str',
        'represent_as': 'str',
        'representative_pdb_id_code': 'str',
        'type': 'str',
        'type_evidence_code': 'str'
    }

    attribute_map = {
        'chem_comp_id': 'chem_comp_id',
        '_class': 'class',
        'class_evidence_code': 'class_evidence_code',
        'compound_details': 'compound_details',
        'description': 'description',
        'formula': 'formula',
        'formula_weight': 'formula_weight',
        'name': 'name',
        'prd_id': 'prd_id',
        'release_status': 'release_status',
        'replaced_by': 'replaced_by',
        'replaces': 'replaces',
        'represent_as': 'represent_as',
        'representative_pdb_id_code': 'representative_PDB_id_code',
        'type': 'type',
        'type_evidence_code': 'type_evidence_code'
    }

    def __init__(self, chem_comp_id=None, _class=None, class_evidence_code=None, compound_details=None, description=None, formula=None, formula_weight=None, name=None, prd_id=None, release_status=None, replaced_by=None, replaces=None, represent_as=None, representative_pdb_id_code=None, type=None, type_evidence_code=None):  # noqa: E501
        """PdbxReferenceMolecule - a model defined in Swagger"""  # noqa: E501
        self._chem_comp_id = None
        self.__class = None
        self._class_evidence_code = None
        self._compound_details = None
        self._description = None
        self._formula = None
        self._formula_weight = None
        self._name = None
        self._prd_id = None
        self._release_status = None
        self._replaced_by = None
        self._replaces = None
        self._represent_as = None
        self._representative_pdb_id_code = None
        self._type = None
        self._type_evidence_code = None
        self.discriminator = None
        if chem_comp_id is not None:
            self.chem_comp_id = chem_comp_id
        if _class is not None:
            self._class = _class
        if class_evidence_code is not None:
            self.class_evidence_code = class_evidence_code
        if compound_details is not None:
            self.compound_details = compound_details
        if description is not None:
            self.description = description
        if formula is not None:
            self.formula = formula
        if formula_weight is not None:
            self.formula_weight = formula_weight
        if name is not None:
            self.name = name
        self.prd_id = prd_id
        if release_status is not None:
            self.release_status = release_status
        if replaced_by is not None:
            self.replaced_by = replaced_by
        if replaces is not None:
            self.replaces = replaces
        if represent_as is not None:
            self.represent_as = represent_as
        if representative_pdb_id_code is not None:
            self.representative_pdb_id_code = representative_pdb_id_code
        if type is not None:
            self.type = type
        if type_evidence_code is not None:
            self.type_evidence_code = type_evidence_code

    @property
    def chem_comp_id(self):
        """Gets the chem_comp_id of this PdbxReferenceMolecule.  # noqa: E501

        For entities represented as single molecules, the identifier  corresponding to the chemical definition for the molecule.  # noqa: E501

        :return: The chem_comp_id of this PdbxReferenceMolecule.  # noqa: E501
        :rtype: str
        """
        return self._chem_comp_id

    @chem_comp_id.setter
    def chem_comp_id(self, chem_comp_id):
        """Sets the chem_comp_id of this PdbxReferenceMolecule.

        For entities represented as single molecules, the identifier  corresponding to the chemical definition for the molecule.  # noqa: E501

        :param chem_comp_id: The chem_comp_id of this PdbxReferenceMolecule.  # noqa: E501
        :type: str
        """

        self._chem_comp_id = chem_comp_id

    @property
    def _class(self):
        """Gets the _class of this PdbxReferenceMolecule.  # noqa: E501

        Broadly defines the function of the entity.  # noqa: E501

        :return: The _class of this PdbxReferenceMolecule.  # noqa: E501
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this PdbxReferenceMolecule.

        Broadly defines the function of the entity.  # noqa: E501

        :param _class: The _class of this PdbxReferenceMolecule.  # noqa: E501
        :type: str
        """
        allowed_values = ["Antagonist", "Anthelmintic", "Antibiotic", "Antibiotic, Anthelmintic", "Antibiotic, Antimicrobial", "Antibiotic, Antineoplastic", "Anticancer", "Anticoagulant", "Anticoagulant, Antithrombotic", "Antifungal", "Antigen", "Antiinflammatory", "Antimicrobial", "Antimicrobial, Antiparasitic, Antibiotic", "Antimicrobial, Antiretroviral", "Antimicrobial, Antitumor", "Antineoplastic", "Antiparasitic", "Antiretroviral", "Antithrombotic", "Antitumor", "Antiviral", "CASPASE inhibitor", "Chaperone binding", "Drug delivery", "Enzyme inhibitor", "Glycan component", "Growth factor", "Immunosuppressant", "Inducer", "Inhibitor", "Lantibiotic", "Metabolism", "Metal transport", "Nutrient", "Oxidation-reduction", "Protein binding", "Receptor", "Substrate analog", "Synthetic opioid", "Thrombin inhibitor", "Thrombin inhibitor, Trypsin inhibitor", "Toxin", "Transition state mimetic", "Transport activator", "Trypsin inhibitor", "Unknown", "Water retention"]  # noqa: E501
        if _class not in allowed_values:
            raise ValueError(
                "Invalid value for `_class` ({0}), must be one of {1}"  # noqa: E501
                .format(_class, allowed_values)
            )

        self.__class = _class

    @property
    def class_evidence_code(self):
        """Gets the class_evidence_code of this PdbxReferenceMolecule.  # noqa: E501

        Evidence for the assignment of _pdbx_reference_molecule.class  # noqa: E501

        :return: The class_evidence_code of this PdbxReferenceMolecule.  # noqa: E501
        :rtype: str
        """
        return self._class_evidence_code

    @class_evidence_code.setter
    def class_evidence_code(self, class_evidence_code):
        """Sets the class_evidence_code of this PdbxReferenceMolecule.

        Evidence for the assignment of _pdbx_reference_molecule.class  # noqa: E501

        :param class_evidence_code: The class_evidence_code of this PdbxReferenceMolecule.  # noqa: E501
        :type: str
        """

        self._class_evidence_code = class_evidence_code

    @property
    def compound_details(self):
        """Gets the compound_details of this PdbxReferenceMolecule.  # noqa: E501

        Special details about this molecule.  # noqa: E501

        :return: The compound_details of this PdbxReferenceMolecule.  # noqa: E501
        :rtype: str
        """
        return self._compound_details

    @compound_details.setter
    def compound_details(self, compound_details):
        """Sets the compound_details of this PdbxReferenceMolecule.

        Special details about this molecule.  # noqa: E501

        :param compound_details: The compound_details of this PdbxReferenceMolecule.  # noqa: E501
        :type: str
        """

        self._compound_details = compound_details

    @property
    def description(self):
        """Gets the description of this PdbxReferenceMolecule.  # noqa: E501

        Description of this molecule.  # noqa: E501

        :return: The description of this PdbxReferenceMolecule.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PdbxReferenceMolecule.

        Description of this molecule.  # noqa: E501

        :param description: The description of this PdbxReferenceMolecule.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def formula(self):
        """Gets the formula of this PdbxReferenceMolecule.  # noqa: E501

        The formula for the reference entity. Formulae are written  according to the rules:   1. Only recognised element symbols may be used.   2. Each element symbol is followed by a 'count' number. A count     of '1' may be omitted.   3. A space or parenthesis must separate each element symbol and     its count, but in general parentheses are not used.   4. The order of elements depends on whether or not carbon is     present. If carbon is present, the order should be: C, then     H, then the other elements in alphabetical order of their     symbol. If carbon is not present, the elements are listed     purely in alphabetic order of their symbol. This is the     'Hill' system used by Chemical Abstracts.  # noqa: E501

        :return: The formula of this PdbxReferenceMolecule.  # noqa: E501
        :rtype: str
        """
        return self._formula

    @formula.setter
    def formula(self, formula):
        """Sets the formula of this PdbxReferenceMolecule.

        The formula for the reference entity. Formulae are written  according to the rules:   1. Only recognised element symbols may be used.   2. Each element symbol is followed by a 'count' number. A count     of '1' may be omitted.   3. A space or parenthesis must separate each element symbol and     its count, but in general parentheses are not used.   4. The order of elements depends on whether or not carbon is     present. If carbon is present, the order should be: C, then     H, then the other elements in alphabetical order of their     symbol. If carbon is not present, the elements are listed     purely in alphabetic order of their symbol. This is the     'Hill' system used by Chemical Abstracts.  # noqa: E501

        :param formula: The formula of this PdbxReferenceMolecule.  # noqa: E501
        :type: str
        """

        self._formula = formula

    @property
    def formula_weight(self):
        """Gets the formula_weight of this PdbxReferenceMolecule.  # noqa: E501

        Formula mass in daltons of the entity.  # noqa: E501

        :return: The formula_weight of this PdbxReferenceMolecule.  # noqa: E501
        :rtype: float
        """
        return self._formula_weight

    @formula_weight.setter
    def formula_weight(self, formula_weight):
        """Sets the formula_weight of this PdbxReferenceMolecule.

        Formula mass in daltons of the entity.  # noqa: E501

        :param formula_weight: The formula_weight of this PdbxReferenceMolecule.  # noqa: E501
        :type: float
        """

        self._formula_weight = formula_weight

    @property
    def name(self):
        """Gets the name of this PdbxReferenceMolecule.  # noqa: E501

        A name of the entity.  # noqa: E501

        :return: The name of this PdbxReferenceMolecule.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PdbxReferenceMolecule.

        A name of the entity.  # noqa: E501

        :param name: The name of this PdbxReferenceMolecule.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def prd_id(self):
        """Gets the prd_id of this PdbxReferenceMolecule.  # noqa: E501

        The value of _pdbx_reference_molecule.prd_id is the unique identifier  for the reference molecule in this family.   By convention this ID uniquely identifies the reference molecule in  in the PDB reference dictionary.   The ID has the template form PRD_dddddd (e.g. PRD_000001)  # noqa: E501

        :return: The prd_id of this PdbxReferenceMolecule.  # noqa: E501
        :rtype: str
        """
        return self._prd_id

    @prd_id.setter
    def prd_id(self, prd_id):
        """Sets the prd_id of this PdbxReferenceMolecule.

        The value of _pdbx_reference_molecule.prd_id is the unique identifier  for the reference molecule in this family.   By convention this ID uniquely identifies the reference molecule in  in the PDB reference dictionary.   The ID has the template form PRD_dddddd (e.g. PRD_000001)  # noqa: E501

        :param prd_id: The prd_id of this PdbxReferenceMolecule.  # noqa: E501
        :type: str
        """
        if prd_id is None:
            raise ValueError("Invalid value for `prd_id`, must not be `None`")  # noqa: E501

        self._prd_id = prd_id

    @property
    def release_status(self):
        """Gets the release_status of this PdbxReferenceMolecule.  # noqa: E501

        Defines the current PDB release status for this molecule definition.  # noqa: E501

        :return: The release_status of this PdbxReferenceMolecule.  # noqa: E501
        :rtype: str
        """
        return self._release_status

    @release_status.setter
    def release_status(self, release_status):
        """Sets the release_status of this PdbxReferenceMolecule.

        Defines the current PDB release status for this molecule definition.  # noqa: E501

        :param release_status: The release_status of this PdbxReferenceMolecule.  # noqa: E501
        :type: str
        """
        allowed_values = ["HOLD", "OBS", "REL", "WAIT"]  # noqa: E501
        if release_status not in allowed_values:
            raise ValueError(
                "Invalid value for `release_status` ({0}), must be one of {1}"  # noqa: E501
                .format(release_status, allowed_values)
            )

        self._release_status = release_status

    @property
    def replaced_by(self):
        """Gets the replaced_by of this PdbxReferenceMolecule.  # noqa: E501

        Assigns the identifier of the reference molecule that has replaced this molecule.  # noqa: E501

        :return: The replaced_by of this PdbxReferenceMolecule.  # noqa: E501
        :rtype: str
        """
        return self._replaced_by

    @replaced_by.setter
    def replaced_by(self, replaced_by):
        """Sets the replaced_by of this PdbxReferenceMolecule.

        Assigns the identifier of the reference molecule that has replaced this molecule.  # noqa: E501

        :param replaced_by: The replaced_by of this PdbxReferenceMolecule.  # noqa: E501
        :type: str
        """

        self._replaced_by = replaced_by

    @property
    def replaces(self):
        """Gets the replaces of this PdbxReferenceMolecule.  # noqa: E501

        Assigns the identifier for the reference molecule which have been replaced  by this reference molecule.  Multiple molecule identifier codes should be separated by commas.  # noqa: E501

        :return: The replaces of this PdbxReferenceMolecule.  # noqa: E501
        :rtype: str
        """
        return self._replaces

    @replaces.setter
    def replaces(self, replaces):
        """Sets the replaces of this PdbxReferenceMolecule.

        Assigns the identifier for the reference molecule which have been replaced  by this reference molecule.  Multiple molecule identifier codes should be separated by commas.  # noqa: E501

        :param replaces: The replaces of this PdbxReferenceMolecule.  # noqa: E501
        :type: str
        """

        self._replaces = replaces

    @property
    def represent_as(self):
        """Gets the represent_as of this PdbxReferenceMolecule.  # noqa: E501

        Defines how this entity is represented in PDB data files.  # noqa: E501

        :return: The represent_as of this PdbxReferenceMolecule.  # noqa: E501
        :rtype: str
        """
        return self._represent_as

    @represent_as.setter
    def represent_as(self, represent_as):
        """Sets the represent_as of this PdbxReferenceMolecule.

        Defines how this entity is represented in PDB data files.  # noqa: E501

        :param represent_as: The represent_as of this PdbxReferenceMolecule.  # noqa: E501
        :type: str
        """
        allowed_values = ["branched", "polymer", "single molecule"]  # noqa: E501
        if represent_as not in allowed_values:
            raise ValueError(
                "Invalid value for `represent_as` ({0}), must be one of {1}"  # noqa: E501
                .format(represent_as, allowed_values)
            )

        self._represent_as = represent_as

    @property
    def representative_pdb_id_code(self):
        """Gets the representative_pdb_id_code of this PdbxReferenceMolecule.  # noqa: E501

        The PDB accession code for the entry containing a representative example of this molecule.  # noqa: E501

        :return: The representative_pdb_id_code of this PdbxReferenceMolecule.  # noqa: E501
        :rtype: str
        """
        return self._representative_pdb_id_code

    @representative_pdb_id_code.setter
    def representative_pdb_id_code(self, representative_pdb_id_code):
        """Sets the representative_pdb_id_code of this PdbxReferenceMolecule.

        The PDB accession code for the entry containing a representative example of this molecule.  # noqa: E501

        :param representative_pdb_id_code: The representative_pdb_id_code of this PdbxReferenceMolecule.  # noqa: E501
        :type: str
        """

        self._representative_pdb_id_code = representative_pdb_id_code

    @property
    def type(self):
        """Gets the type of this PdbxReferenceMolecule.  # noqa: E501

        Defines the structural classification of the entity.  # noqa: E501

        :return: The type of this PdbxReferenceMolecule.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PdbxReferenceMolecule.

        Defines the structural classification of the entity.  # noqa: E501

        :param type: The type of this PdbxReferenceMolecule.  # noqa: E501
        :type: str
        """
        allowed_values = ["Amino acid", "Aminoglycoside", "Ansamycin", "Anthracycline", "Anthraquinone", "Chalkophore", "Chalkophore, Polypeptide", "Chromophore", "Cyclic depsipeptide", "Cyclic lipopeptide", "Cyclic peptide", "Glycopeptide", "Heterocyclic", "Imino sugar", "Keto acid", "Lipoglycopeptide", "Lipopeptide", "Macrolide", "Non-polymer", "Nucleoside", "Oligopeptide", "Oligosaccharide", "Peptaibol", "Peptide-like", "Polycyclic", "Polypeptide", "Polysaccharide", "Quinolone", "Siderophore", "Thiolactone", "Thiopeptide", "Unknown"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def type_evidence_code(self):
        """Gets the type_evidence_code of this PdbxReferenceMolecule.  # noqa: E501

        Evidence for the assignment of _pdbx_reference_molecule.type  # noqa: E501

        :return: The type_evidence_code of this PdbxReferenceMolecule.  # noqa: E501
        :rtype: str
        """
        return self._type_evidence_code

    @type_evidence_code.setter
    def type_evidence_code(self, type_evidence_code):
        """Sets the type_evidence_code of this PdbxReferenceMolecule.

        Evidence for the assignment of _pdbx_reference_molecule.type  # noqa: E501

        :param type_evidence_code: The type_evidence_code of this PdbxReferenceMolecule.  # noqa: E501
        :type: str
        """

        self._type_evidence_code = type_evidence_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PdbxReferenceMolecule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdbxReferenceMolecule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
