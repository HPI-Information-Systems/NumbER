# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RcsbNonpolymerInstanceValidationScore(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rscc': 'float',
        'rsr': 'float',
        'alt_id': 'str',
        'average_occupancy': 'float',
        'completeness': 'float',
        'intermolecular_clashes': 'int',
        'is_best_instance': 'str',
        'is_subject_of_investigation': 'str',
        'is_subject_of_investigation_provenance': 'str',
        'mogul_angle_outliers': 'int',
        'mogul_angles_rmsz': 'float',
        'mogul_bond_outliers': 'int',
        'mogul_bonds_rmsz': 'float',
        'ranking_model_fit': 'float',
        'ranking_model_geometry': 'float',
        'score_model_fit': 'float',
        'score_model_geometry': 'float',
        'stereo_outliers': 'int',
        'type': 'str'
    }

    attribute_map = {
        'rscc': 'RSCC',
        'rsr': 'RSR',
        'alt_id': 'alt_id',
        'average_occupancy': 'average_occupancy',
        'completeness': 'completeness',
        'intermolecular_clashes': 'intermolecular_clashes',
        'is_best_instance': 'is_best_instance',
        'is_subject_of_investigation': 'is_subject_of_investigation',
        'is_subject_of_investigation_provenance': 'is_subject_of_investigation_provenance',
        'mogul_angle_outliers': 'mogul_angle_outliers',
        'mogul_angles_rmsz': 'mogul_angles_RMSZ',
        'mogul_bond_outliers': 'mogul_bond_outliers',
        'mogul_bonds_rmsz': 'mogul_bonds_RMSZ',
        'ranking_model_fit': 'ranking_model_fit',
        'ranking_model_geometry': 'ranking_model_geometry',
        'score_model_fit': 'score_model_fit',
        'score_model_geometry': 'score_model_geometry',
        'stereo_outliers': 'stereo_outliers',
        'type': 'type'
    }

    def __init__(self, rscc=None, rsr=None, alt_id=None, average_occupancy=None, completeness=None, intermolecular_clashes=None, is_best_instance=None, is_subject_of_investigation=None, is_subject_of_investigation_provenance=None, mogul_angle_outliers=None, mogul_angles_rmsz=None, mogul_bond_outliers=None, mogul_bonds_rmsz=None, ranking_model_fit=None, ranking_model_geometry=None, score_model_fit=None, score_model_geometry=None, stereo_outliers=None, type=None):  # noqa: E501
        """RcsbNonpolymerInstanceValidationScore - a model defined in Swagger"""  # noqa: E501
        self._rscc = None
        self._rsr = None
        self._alt_id = None
        self._average_occupancy = None
        self._completeness = None
        self._intermolecular_clashes = None
        self._is_best_instance = None
        self._is_subject_of_investigation = None
        self._is_subject_of_investigation_provenance = None
        self._mogul_angle_outliers = None
        self._mogul_angles_rmsz = None
        self._mogul_bond_outliers = None
        self._mogul_bonds_rmsz = None
        self._ranking_model_fit = None
        self._ranking_model_geometry = None
        self._score_model_fit = None
        self._score_model_geometry = None
        self._stereo_outliers = None
        self._type = None
        self.discriminator = None
        if rscc is not None:
            self.rscc = rscc
        if rsr is not None:
            self.rsr = rsr
        if alt_id is not None:
            self.alt_id = alt_id
        if average_occupancy is not None:
            self.average_occupancy = average_occupancy
        if completeness is not None:
            self.completeness = completeness
        if intermolecular_clashes is not None:
            self.intermolecular_clashes = intermolecular_clashes
        if is_best_instance is not None:
            self.is_best_instance = is_best_instance
        if is_subject_of_investigation is not None:
            self.is_subject_of_investigation = is_subject_of_investigation
        if is_subject_of_investigation_provenance is not None:
            self.is_subject_of_investigation_provenance = is_subject_of_investigation_provenance
        if mogul_angle_outliers is not None:
            self.mogul_angle_outliers = mogul_angle_outliers
        if mogul_angles_rmsz is not None:
            self.mogul_angles_rmsz = mogul_angles_rmsz
        if mogul_bond_outliers is not None:
            self.mogul_bond_outliers = mogul_bond_outliers
        if mogul_bonds_rmsz is not None:
            self.mogul_bonds_rmsz = mogul_bonds_rmsz
        if ranking_model_fit is not None:
            self.ranking_model_fit = ranking_model_fit
        if ranking_model_geometry is not None:
            self.ranking_model_geometry = ranking_model_geometry
        if score_model_fit is not None:
            self.score_model_fit = score_model_fit
        if score_model_geometry is not None:
            self.score_model_geometry = score_model_geometry
        if stereo_outliers is not None:
            self.stereo_outliers = stereo_outliers
        if type is not None:
            self.type = type

    @property
    def rscc(self):
        """Gets the rscc of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501

        The real space correlation coefficient (RSCC) for the non-polymer entity instance.  # noqa: E501

        :return: The rscc of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501
        :rtype: float
        """
        return self._rscc

    @rscc.setter
    def rscc(self, rscc):
        """Sets the rscc of this RcsbNonpolymerInstanceValidationScore.

        The real space correlation coefficient (RSCC) for the non-polymer entity instance.  # noqa: E501

        :param rscc: The rscc of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501
        :type: float
        """

        self._rscc = rscc

    @property
    def rsr(self):
        """Gets the rsr of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501

        The real space R-value (RSR) for the non-polymer entity instance.  # noqa: E501

        :return: The rsr of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501
        :rtype: float
        """
        return self._rsr

    @rsr.setter
    def rsr(self, rsr):
        """Sets the rsr of this RcsbNonpolymerInstanceValidationScore.

        The real space R-value (RSR) for the non-polymer entity instance.  # noqa: E501

        :param rsr: The rsr of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501
        :type: float
        """

        self._rsr = rsr

    @property
    def alt_id(self):
        """Gets the alt_id of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501

        Alternate conformer identifier for the non-polymer entity instance.  # noqa: E501

        :return: The alt_id of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501
        :rtype: str
        """
        return self._alt_id

    @alt_id.setter
    def alt_id(self, alt_id):
        """Sets the alt_id of this RcsbNonpolymerInstanceValidationScore.

        Alternate conformer identifier for the non-polymer entity instance.  # noqa: E501

        :param alt_id: The alt_id of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501
        :type: str
        """

        self._alt_id = alt_id

    @property
    def average_occupancy(self):
        """Gets the average_occupancy of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501

        The average heavy atom occupancy for coordinate records for the non-polymer entity instance.  # noqa: E501

        :return: The average_occupancy of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501
        :rtype: float
        """
        return self._average_occupancy

    @average_occupancy.setter
    def average_occupancy(self, average_occupancy):
        """Sets the average_occupancy of this RcsbNonpolymerInstanceValidationScore.

        The average heavy atom occupancy for coordinate records for the non-polymer entity instance.  # noqa: E501

        :param average_occupancy: The average_occupancy of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501
        :type: float
        """

        self._average_occupancy = average_occupancy

    @property
    def completeness(self):
        """Gets the completeness of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501

        The reported fraction of atomic coordinate records for the non-polymer entity instance.  # noqa: E501

        :return: The completeness of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501
        :rtype: float
        """
        return self._completeness

    @completeness.setter
    def completeness(self, completeness):
        """Sets the completeness of this RcsbNonpolymerInstanceValidationScore.

        The reported fraction of atomic coordinate records for the non-polymer entity instance.  # noqa: E501

        :param completeness: The completeness of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501
        :type: float
        """

        self._completeness = completeness

    @property
    def intermolecular_clashes(self):
        """Gets the intermolecular_clashes of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501

        The number of intermolecular MolProbity clashes cacluated for reported atomic coordinate records.  # noqa: E501

        :return: The intermolecular_clashes of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501
        :rtype: int
        """
        return self._intermolecular_clashes

    @intermolecular_clashes.setter
    def intermolecular_clashes(self, intermolecular_clashes):
        """Sets the intermolecular_clashes of this RcsbNonpolymerInstanceValidationScore.

        The number of intermolecular MolProbity clashes cacluated for reported atomic coordinate records.  # noqa: E501

        :param intermolecular_clashes: The intermolecular_clashes of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501
        :type: int
        """

        self._intermolecular_clashes = intermolecular_clashes

    @property
    def is_best_instance(self):
        """Gets the is_best_instance of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501

        This molecular instance is ranked as the best quality instance of this nonpolymer entity.  # noqa: E501

        :return: The is_best_instance of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501
        :rtype: str
        """
        return self._is_best_instance

    @is_best_instance.setter
    def is_best_instance(self, is_best_instance):
        """Sets the is_best_instance of this RcsbNonpolymerInstanceValidationScore.

        This molecular instance is ranked as the best quality instance of this nonpolymer entity.  # noqa: E501

        :param is_best_instance: The is_best_instance of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501
        :type: str
        """
        allowed_values = ["N", "Y"]  # noqa: E501
        if is_best_instance not in allowed_values:
            raise ValueError(
                "Invalid value for `is_best_instance` ({0}), must be one of {1}"  # noqa: E501
                .format(is_best_instance, allowed_values)
            )

        self._is_best_instance = is_best_instance

    @property
    def is_subject_of_investigation(self):
        """Gets the is_subject_of_investigation of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501

        This molecular entity is identified as the subject of the current study.  # noqa: E501

        :return: The is_subject_of_investigation of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501
        :rtype: str
        """
        return self._is_subject_of_investigation

    @is_subject_of_investigation.setter
    def is_subject_of_investigation(self, is_subject_of_investigation):
        """Sets the is_subject_of_investigation of this RcsbNonpolymerInstanceValidationScore.

        This molecular entity is identified as the subject of the current study.  # noqa: E501

        :param is_subject_of_investigation: The is_subject_of_investigation of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501
        :type: str
        """
        allowed_values = ["N", "Y"]  # noqa: E501
        if is_subject_of_investigation not in allowed_values:
            raise ValueError(
                "Invalid value for `is_subject_of_investigation` ({0}), must be one of {1}"  # noqa: E501
                .format(is_subject_of_investigation, allowed_values)
            )

        self._is_subject_of_investigation = is_subject_of_investigation

    @property
    def is_subject_of_investigation_provenance(self):
        """Gets the is_subject_of_investigation_provenance of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501

        The provenance for the selection of the molecular entity identified as the subject of the current study.  # noqa: E501

        :return: The is_subject_of_investigation_provenance of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501
        :rtype: str
        """
        return self._is_subject_of_investigation_provenance

    @is_subject_of_investigation_provenance.setter
    def is_subject_of_investigation_provenance(self, is_subject_of_investigation_provenance):
        """Sets the is_subject_of_investigation_provenance of this RcsbNonpolymerInstanceValidationScore.

        The provenance for the selection of the molecular entity identified as the subject of the current study.  # noqa: E501

        :param is_subject_of_investigation_provenance: The is_subject_of_investigation_provenance of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501
        :type: str
        """
        allowed_values = ["Author", "RCSB"]  # noqa: E501
        if is_subject_of_investigation_provenance not in allowed_values:
            raise ValueError(
                "Invalid value for `is_subject_of_investigation_provenance` ({0}), must be one of {1}"  # noqa: E501
                .format(is_subject_of_investigation_provenance, allowed_values)
            )

        self._is_subject_of_investigation_provenance = is_subject_of_investigation_provenance

    @property
    def mogul_angle_outliers(self):
        """Gets the mogul_angle_outliers of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501

        Number of bond angle outliers obtained from a CCDC Mogul survey of bond angles  in the CSD small    molecule crystal structure database. Outliers are defined as bond angles that have a Z-score    less than -2 or greater than 2.  # noqa: E501

        :return: The mogul_angle_outliers of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501
        :rtype: int
        """
        return self._mogul_angle_outliers

    @mogul_angle_outliers.setter
    def mogul_angle_outliers(self, mogul_angle_outliers):
        """Sets the mogul_angle_outliers of this RcsbNonpolymerInstanceValidationScore.

        Number of bond angle outliers obtained from a CCDC Mogul survey of bond angles  in the CSD small    molecule crystal structure database. Outliers are defined as bond angles that have a Z-score    less than -2 or greater than 2.  # noqa: E501

        :param mogul_angle_outliers: The mogul_angle_outliers of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501
        :type: int
        """

        self._mogul_angle_outliers = mogul_angle_outliers

    @property
    def mogul_angles_rmsz(self):
        """Gets the mogul_angles_rmsz of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501

        The root-mean-square value of the Z-scores of bond angles for the residue in degrees obtained from a CCDC Mogul survey of bond angles in the CSD small molecule crystal structure database.  # noqa: E501

        :return: The mogul_angles_rmsz of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501
        :rtype: float
        """
        return self._mogul_angles_rmsz

    @mogul_angles_rmsz.setter
    def mogul_angles_rmsz(self, mogul_angles_rmsz):
        """Sets the mogul_angles_rmsz of this RcsbNonpolymerInstanceValidationScore.

        The root-mean-square value of the Z-scores of bond angles for the residue in degrees obtained from a CCDC Mogul survey of bond angles in the CSD small molecule crystal structure database.  # noqa: E501

        :param mogul_angles_rmsz: The mogul_angles_rmsz of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501
        :type: float
        """

        self._mogul_angles_rmsz = mogul_angles_rmsz

    @property
    def mogul_bond_outliers(self):
        """Gets the mogul_bond_outliers of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501

        Number of bond distance outliers obtained from a CCDC Mogul survey of bond lengths in the CSD small    molecule crystal structure database.  Outliers are defined as bond distances that have a Z-score    less than -2 or greater than 2.  # noqa: E501

        :return: The mogul_bond_outliers of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501
        :rtype: int
        """
        return self._mogul_bond_outliers

    @mogul_bond_outliers.setter
    def mogul_bond_outliers(self, mogul_bond_outliers):
        """Sets the mogul_bond_outliers of this RcsbNonpolymerInstanceValidationScore.

        Number of bond distance outliers obtained from a CCDC Mogul survey of bond lengths in the CSD small    molecule crystal structure database.  Outliers are defined as bond distances that have a Z-score    less than -2 or greater than 2.  # noqa: E501

        :param mogul_bond_outliers: The mogul_bond_outliers of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501
        :type: int
        """

        self._mogul_bond_outliers = mogul_bond_outliers

    @property
    def mogul_bonds_rmsz(self):
        """Gets the mogul_bonds_rmsz of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501

        The root-mean-square value of the Z-scores of bond lengths for the residue in Angstroms obtained from a CCDC Mogul survey of bond lengths in the CSD small molecule crystal structure database.  # noqa: E501

        :return: The mogul_bonds_rmsz of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501
        :rtype: float
        """
        return self._mogul_bonds_rmsz

    @mogul_bonds_rmsz.setter
    def mogul_bonds_rmsz(self, mogul_bonds_rmsz):
        """Sets the mogul_bonds_rmsz of this RcsbNonpolymerInstanceValidationScore.

        The root-mean-square value of the Z-scores of bond lengths for the residue in Angstroms obtained from a CCDC Mogul survey of bond lengths in the CSD small molecule crystal structure database.  # noqa: E501

        :param mogul_bonds_rmsz: The mogul_bonds_rmsz of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501
        :type: float
        """

        self._mogul_bonds_rmsz = mogul_bonds_rmsz

    @property
    def ranking_model_fit(self):
        """Gets the ranking_model_fit of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501

        The ranking of the model fit score component.  # noqa: E501

        :return: The ranking_model_fit of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501
        :rtype: float
        """
        return self._ranking_model_fit

    @ranking_model_fit.setter
    def ranking_model_fit(self, ranking_model_fit):
        """Sets the ranking_model_fit of this RcsbNonpolymerInstanceValidationScore.

        The ranking of the model fit score component.  # noqa: E501

        :param ranking_model_fit: The ranking_model_fit of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501
        :type: float
        """

        self._ranking_model_fit = ranking_model_fit

    @property
    def ranking_model_geometry(self):
        """Gets the ranking_model_geometry of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501

        The ranking of the model geometry score component.  # noqa: E501

        :return: The ranking_model_geometry of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501
        :rtype: float
        """
        return self._ranking_model_geometry

    @ranking_model_geometry.setter
    def ranking_model_geometry(self, ranking_model_geometry):
        """Sets the ranking_model_geometry of this RcsbNonpolymerInstanceValidationScore.

        The ranking of the model geometry score component.  # noqa: E501

        :param ranking_model_geometry: The ranking_model_geometry of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501
        :type: float
        """

        self._ranking_model_geometry = ranking_model_geometry

    @property
    def score_model_fit(self):
        """Gets the score_model_fit of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501

        The value of the model fit score component.  # noqa: E501

        :return: The score_model_fit of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501
        :rtype: float
        """
        return self._score_model_fit

    @score_model_fit.setter
    def score_model_fit(self, score_model_fit):
        """Sets the score_model_fit of this RcsbNonpolymerInstanceValidationScore.

        The value of the model fit score component.  # noqa: E501

        :param score_model_fit: The score_model_fit of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501
        :type: float
        """

        self._score_model_fit = score_model_fit

    @property
    def score_model_geometry(self):
        """Gets the score_model_geometry of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501

        The value of the model geometry score component.  # noqa: E501

        :return: The score_model_geometry of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501
        :rtype: float
        """
        return self._score_model_geometry

    @score_model_geometry.setter
    def score_model_geometry(self, score_model_geometry):
        """Sets the score_model_geometry of this RcsbNonpolymerInstanceValidationScore.

        The value of the model geometry score component.  # noqa: E501

        :param score_model_geometry: The score_model_geometry of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501
        :type: float
        """

        self._score_model_geometry = score_model_geometry

    @property
    def stereo_outliers(self):
        """Gets the stereo_outliers of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501

        Number of stereochemical/chirality errors.  # noqa: E501

        :return: The stereo_outliers of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501
        :rtype: int
        """
        return self._stereo_outliers

    @stereo_outliers.setter
    def stereo_outliers(self, stereo_outliers):
        """Sets the stereo_outliers of this RcsbNonpolymerInstanceValidationScore.

        Number of stereochemical/chirality errors.  # noqa: E501

        :param stereo_outliers: The stereo_outliers of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501
        :type: int
        """

        self._stereo_outliers = stereo_outliers

    @property
    def type(self):
        """Gets the type of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501

        Score type.  # noqa: E501

        :return: The type of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RcsbNonpolymerInstanceValidationScore.

        Score type.  # noqa: E501

        :param type: The type of this RcsbNonpolymerInstanceValidationScore.  # noqa: E501
        :type: str
        """
        allowed_values = ["RCSB_LIGAND_QUALITY_SCORE_2021"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RcsbNonpolymerInstanceValidationScore, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RcsbNonpolymerInstanceValidationScore):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
