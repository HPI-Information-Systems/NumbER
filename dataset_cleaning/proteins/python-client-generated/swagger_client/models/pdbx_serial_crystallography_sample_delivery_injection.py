# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PdbxSerialCrystallographySampleDeliveryInjection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'carrier_solvent': 'str',
        'crystal_concentration': 'float',
        'description': 'str',
        'diffrn_id': 'str',
        'filter_size': 'float',
        'flow_rate': 'float',
        'injector_diameter': 'float',
        'injector_nozzle': 'str',
        'injector_pressure': 'float',
        'injector_temperature': 'float',
        'jet_diameter': 'float',
        'power_by': 'str',
        'preparation': 'str'
    }

    attribute_map = {
        'carrier_solvent': 'carrier_solvent',
        'crystal_concentration': 'crystal_concentration',
        'description': 'description',
        'diffrn_id': 'diffrn_id',
        'filter_size': 'filter_size',
        'flow_rate': 'flow_rate',
        'injector_diameter': 'injector_diameter',
        'injector_nozzle': 'injector_nozzle',
        'injector_pressure': 'injector_pressure',
        'injector_temperature': 'injector_temperature',
        'jet_diameter': 'jet_diameter',
        'power_by': 'power_by',
        'preparation': 'preparation'
    }

    def __init__(self, carrier_solvent=None, crystal_concentration=None, description=None, diffrn_id=None, filter_size=None, flow_rate=None, injector_diameter=None, injector_nozzle=None, injector_pressure=None, injector_temperature=None, jet_diameter=None, power_by=None, preparation=None):  # noqa: E501
        """PdbxSerialCrystallographySampleDeliveryInjection - a model defined in Swagger"""  # noqa: E501
        self._carrier_solvent = None
        self._crystal_concentration = None
        self._description = None
        self._diffrn_id = None
        self._filter_size = None
        self._flow_rate = None
        self._injector_diameter = None
        self._injector_nozzle = None
        self._injector_pressure = None
        self._injector_temperature = None
        self._jet_diameter = None
        self._power_by = None
        self._preparation = None
        self.discriminator = None
        if carrier_solvent is not None:
            self.carrier_solvent = carrier_solvent
        if crystal_concentration is not None:
            self.crystal_concentration = crystal_concentration
        if description is not None:
            self.description = description
        self.diffrn_id = diffrn_id
        if filter_size is not None:
            self.filter_size = filter_size
        if flow_rate is not None:
            self.flow_rate = flow_rate
        if injector_diameter is not None:
            self.injector_diameter = injector_diameter
        if injector_nozzle is not None:
            self.injector_nozzle = injector_nozzle
        if injector_pressure is not None:
            self.injector_pressure = injector_pressure
        if injector_temperature is not None:
            self.injector_temperature = injector_temperature
        if jet_diameter is not None:
            self.jet_diameter = jet_diameter
        if power_by is not None:
            self.power_by = power_by
        if preparation is not None:
            self.preparation = preparation

    @property
    def carrier_solvent(self):
        """Gets the carrier_solvent of this PdbxSerialCrystallographySampleDeliveryInjection.  # noqa: E501

        For continuous sample flow experiments, the carrier buffer used  to move the sample into the beam. Should include protein  concentration.  # noqa: E501

        :return: The carrier_solvent of this PdbxSerialCrystallographySampleDeliveryInjection.  # noqa: E501
        :rtype: str
        """
        return self._carrier_solvent

    @carrier_solvent.setter
    def carrier_solvent(self, carrier_solvent):
        """Sets the carrier_solvent of this PdbxSerialCrystallographySampleDeliveryInjection.

        For continuous sample flow experiments, the carrier buffer used  to move the sample into the beam. Should include protein  concentration.  # noqa: E501

        :param carrier_solvent: The carrier_solvent of this PdbxSerialCrystallographySampleDeliveryInjection.  # noqa: E501
        :type: str
        """

        self._carrier_solvent = carrier_solvent

    @property
    def crystal_concentration(self):
        """Gets the crystal_concentration of this PdbxSerialCrystallographySampleDeliveryInjection.  # noqa: E501

        For continuous sample flow experiments, the concentration of  crystals in the solution being injected.   The concentration is measured in million crystals/ml.  # noqa: E501

        :return: The crystal_concentration of this PdbxSerialCrystallographySampleDeliveryInjection.  # noqa: E501
        :rtype: float
        """
        return self._crystal_concentration

    @crystal_concentration.setter
    def crystal_concentration(self, crystal_concentration):
        """Sets the crystal_concentration of this PdbxSerialCrystallographySampleDeliveryInjection.

        For continuous sample flow experiments, the concentration of  crystals in the solution being injected.   The concentration is measured in million crystals/ml.  # noqa: E501

        :param crystal_concentration: The crystal_concentration of this PdbxSerialCrystallographySampleDeliveryInjection.  # noqa: E501
        :type: float
        """

        self._crystal_concentration = crystal_concentration

    @property
    def description(self):
        """Gets the description of this PdbxSerialCrystallographySampleDeliveryInjection.  # noqa: E501

        For continuous sample flow experiments, a description of the injector used  to move the sample into the beam.  # noqa: E501

        :return: The description of this PdbxSerialCrystallographySampleDeliveryInjection.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PdbxSerialCrystallographySampleDeliveryInjection.

        For continuous sample flow experiments, a description of the injector used  to move the sample into the beam.  # noqa: E501

        :param description: The description of this PdbxSerialCrystallographySampleDeliveryInjection.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def diffrn_id(self):
        """Gets the diffrn_id of this PdbxSerialCrystallographySampleDeliveryInjection.  # noqa: E501

        The data item is a pointer to _diffrn.id in the DIFFRN  category.  # noqa: E501

        :return: The diffrn_id of this PdbxSerialCrystallographySampleDeliveryInjection.  # noqa: E501
        :rtype: str
        """
        return self._diffrn_id

    @diffrn_id.setter
    def diffrn_id(self, diffrn_id):
        """Sets the diffrn_id of this PdbxSerialCrystallographySampleDeliveryInjection.

        The data item is a pointer to _diffrn.id in the DIFFRN  category.  # noqa: E501

        :param diffrn_id: The diffrn_id of this PdbxSerialCrystallographySampleDeliveryInjection.  # noqa: E501
        :type: str
        """
        if diffrn_id is None:
            raise ValueError("Invalid value for `diffrn_id`, must not be `None`")  # noqa: E501

        self._diffrn_id = diffrn_id

    @property
    def filter_size(self):
        """Gets the filter_size of this PdbxSerialCrystallographySampleDeliveryInjection.  # noqa: E501

        The size of filter in micrometres in filtering crystals  # noqa: E501

        :return: The filter_size of this PdbxSerialCrystallographySampleDeliveryInjection.  # noqa: E501
        :rtype: float
        """
        return self._filter_size

    @filter_size.setter
    def filter_size(self, filter_size):
        """Sets the filter_size of this PdbxSerialCrystallographySampleDeliveryInjection.

        The size of filter in micrometres in filtering crystals  # noqa: E501

        :param filter_size: The filter_size of this PdbxSerialCrystallographySampleDeliveryInjection.  # noqa: E501
        :type: float
        """

        self._filter_size = filter_size

    @property
    def flow_rate(self):
        """Gets the flow_rate of this PdbxSerialCrystallographySampleDeliveryInjection.  # noqa: E501

        For continuous sample flow experiments, the flow rate of  solution being injected  measured in ul/min.  # noqa: E501

        :return: The flow_rate of this PdbxSerialCrystallographySampleDeliveryInjection.  # noqa: E501
        :rtype: float
        """
        return self._flow_rate

    @flow_rate.setter
    def flow_rate(self, flow_rate):
        """Sets the flow_rate of this PdbxSerialCrystallographySampleDeliveryInjection.

        For continuous sample flow experiments, the flow rate of  solution being injected  measured in ul/min.  # noqa: E501

        :param flow_rate: The flow_rate of this PdbxSerialCrystallographySampleDeliveryInjection.  # noqa: E501
        :type: float
        """

        self._flow_rate = flow_rate

    @property
    def injector_diameter(self):
        """Gets the injector_diameter of this PdbxSerialCrystallographySampleDeliveryInjection.  # noqa: E501

        For continuous sample flow experiments, the diameter of the  injector in micrometres.  # noqa: E501

        :return: The injector_diameter of this PdbxSerialCrystallographySampleDeliveryInjection.  # noqa: E501
        :rtype: float
        """
        return self._injector_diameter

    @injector_diameter.setter
    def injector_diameter(self, injector_diameter):
        """Sets the injector_diameter of this PdbxSerialCrystallographySampleDeliveryInjection.

        For continuous sample flow experiments, the diameter of the  injector in micrometres.  # noqa: E501

        :param injector_diameter: The injector_diameter of this PdbxSerialCrystallographySampleDeliveryInjection.  # noqa: E501
        :type: float
        """

        self._injector_diameter = injector_diameter

    @property
    def injector_nozzle(self):
        """Gets the injector_nozzle of this PdbxSerialCrystallographySampleDeliveryInjection.  # noqa: E501

        The type of nozzle to deliver and focus sample jet  # noqa: E501

        :return: The injector_nozzle of this PdbxSerialCrystallographySampleDeliveryInjection.  # noqa: E501
        :rtype: str
        """
        return self._injector_nozzle

    @injector_nozzle.setter
    def injector_nozzle(self, injector_nozzle):
        """Sets the injector_nozzle of this PdbxSerialCrystallographySampleDeliveryInjection.

        The type of nozzle to deliver and focus sample jet  # noqa: E501

        :param injector_nozzle: The injector_nozzle of this PdbxSerialCrystallographySampleDeliveryInjection.  # noqa: E501
        :type: str
        """

        self._injector_nozzle = injector_nozzle

    @property
    def injector_pressure(self):
        """Gets the injector_pressure of this PdbxSerialCrystallographySampleDeliveryInjection.  # noqa: E501

        For continuous sample flow experiments, the mean pressure  in kilopascals at which the sample is injected into the beam.  # noqa: E501

        :return: The injector_pressure of this PdbxSerialCrystallographySampleDeliveryInjection.  # noqa: E501
        :rtype: float
        """
        return self._injector_pressure

    @injector_pressure.setter
    def injector_pressure(self, injector_pressure):
        """Sets the injector_pressure of this PdbxSerialCrystallographySampleDeliveryInjection.

        For continuous sample flow experiments, the mean pressure  in kilopascals at which the sample is injected into the beam.  # noqa: E501

        :param injector_pressure: The injector_pressure of this PdbxSerialCrystallographySampleDeliveryInjection.  # noqa: E501
        :type: float
        """

        self._injector_pressure = injector_pressure

    @property
    def injector_temperature(self):
        """Gets the injector_temperature of this PdbxSerialCrystallographySampleDeliveryInjection.  # noqa: E501

        For continuous sample flow experiments, the temperature in  Kelvins of the speciman injected. This may be different from  the temperature of the sample.  # noqa: E501

        :return: The injector_temperature of this PdbxSerialCrystallographySampleDeliveryInjection.  # noqa: E501
        :rtype: float
        """
        return self._injector_temperature

    @injector_temperature.setter
    def injector_temperature(self, injector_temperature):
        """Sets the injector_temperature of this PdbxSerialCrystallographySampleDeliveryInjection.

        For continuous sample flow experiments, the temperature in  Kelvins of the speciman injected. This may be different from  the temperature of the sample.  # noqa: E501

        :param injector_temperature: The injector_temperature of this PdbxSerialCrystallographySampleDeliveryInjection.  # noqa: E501
        :type: float
        """

        self._injector_temperature = injector_temperature

    @property
    def jet_diameter(self):
        """Gets the jet_diameter of this PdbxSerialCrystallographySampleDeliveryInjection.  # noqa: E501

        Diameter in micrometres of jet stream of sample delivery  # noqa: E501

        :return: The jet_diameter of this PdbxSerialCrystallographySampleDeliveryInjection.  # noqa: E501
        :rtype: float
        """
        return self._jet_diameter

    @jet_diameter.setter
    def jet_diameter(self, jet_diameter):
        """Sets the jet_diameter of this PdbxSerialCrystallographySampleDeliveryInjection.

        Diameter in micrometres of jet stream of sample delivery  # noqa: E501

        :param jet_diameter: The jet_diameter of this PdbxSerialCrystallographySampleDeliveryInjection.  # noqa: E501
        :type: float
        """

        self._jet_diameter = jet_diameter

    @property
    def power_by(self):
        """Gets the power_by of this PdbxSerialCrystallographySampleDeliveryInjection.  # noqa: E501

        Sample deliver driving force, e.g. Gas, Electronic Potential  # noqa: E501

        :return: The power_by of this PdbxSerialCrystallographySampleDeliveryInjection.  # noqa: E501
        :rtype: str
        """
        return self._power_by

    @power_by.setter
    def power_by(self, power_by):
        """Sets the power_by of this PdbxSerialCrystallographySampleDeliveryInjection.

        Sample deliver driving force, e.g. Gas, Electronic Potential  # noqa: E501

        :param power_by: The power_by of this PdbxSerialCrystallographySampleDeliveryInjection.  # noqa: E501
        :type: str
        """

        self._power_by = power_by

    @property
    def preparation(self):
        """Gets the preparation of this PdbxSerialCrystallographySampleDeliveryInjection.  # noqa: E501

        Details of crystal growth and preparation of the crystals  # noqa: E501

        :return: The preparation of this PdbxSerialCrystallographySampleDeliveryInjection.  # noqa: E501
        :rtype: str
        """
        return self._preparation

    @preparation.setter
    def preparation(self, preparation):
        """Sets the preparation of this PdbxSerialCrystallographySampleDeliveryInjection.

        Details of crystal growth and preparation of the crystals  # noqa: E501

        :param preparation: The preparation of this PdbxSerialCrystallographySampleDeliveryInjection.  # noqa: E501
        :type: str
        """

        self._preparation = preparation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PdbxSerialCrystallographySampleDeliveryInjection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdbxSerialCrystallographySampleDeliveryInjection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
