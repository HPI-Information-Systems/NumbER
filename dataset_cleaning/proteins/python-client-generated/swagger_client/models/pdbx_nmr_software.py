# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PdbxNmrSoftware(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authors': 'str',
        'classification': 'str',
        'name': 'str',
        'ordinal': 'int',
        'version': 'str'
    }

    attribute_map = {
        'authors': 'authors',
        'classification': 'classification',
        'name': 'name',
        'ordinal': 'ordinal',
        'version': 'version'
    }

    def __init__(self, authors=None, classification=None, name=None, ordinal=None, version=None):  # noqa: E501
        """PdbxNmrSoftware - a model defined in Swagger"""  # noqa: E501
        self._authors = None
        self._classification = None
        self._name = None
        self._ordinal = None
        self._version = None
        self.discriminator = None
        if authors is not None:
            self.authors = authors
        if classification is not None:
            self.classification = classification
        if name is not None:
            self.name = name
        self.ordinal = ordinal
        if version is not None:
            self.version = version

    @property
    def authors(self):
        """Gets the authors of this PdbxNmrSoftware.  # noqa: E501

        The name of the authors of the software used in this  procedure.  # noqa: E501

        :return: The authors of this PdbxNmrSoftware.  # noqa: E501
        :rtype: str
        """
        return self._authors

    @authors.setter
    def authors(self, authors):
        """Sets the authors of this PdbxNmrSoftware.

        The name of the authors of the software used in this  procedure.  # noqa: E501

        :param authors: The authors of this PdbxNmrSoftware.  # noqa: E501
        :type: str
        """

        self._authors = authors

    @property
    def classification(self):
        """Gets the classification of this PdbxNmrSoftware.  # noqa: E501

        The purpose of the software.  # noqa: E501

        :return: The classification of this PdbxNmrSoftware.  # noqa: E501
        :rtype: str
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this PdbxNmrSoftware.

        The purpose of the software.  # noqa: E501

        :param classification: The classification of this PdbxNmrSoftware.  # noqa: E501
        :type: str
        """

        self._classification = classification

    @property
    def name(self):
        """Gets the name of this PdbxNmrSoftware.  # noqa: E501

        The name of the software used for the task.  # noqa: E501

        :return: The name of this PdbxNmrSoftware.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PdbxNmrSoftware.

        The name of the software used for the task.  # noqa: E501

        :param name: The name of this PdbxNmrSoftware.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def ordinal(self):
        """Gets the ordinal of this PdbxNmrSoftware.  # noqa: E501

        An ordinal index for this category  # noqa: E501

        :return: The ordinal of this PdbxNmrSoftware.  # noqa: E501
        :rtype: int
        """
        return self._ordinal

    @ordinal.setter
    def ordinal(self, ordinal):
        """Sets the ordinal of this PdbxNmrSoftware.

        An ordinal index for this category  # noqa: E501

        :param ordinal: The ordinal of this PdbxNmrSoftware.  # noqa: E501
        :type: int
        """
        if ordinal is None:
            raise ValueError("Invalid value for `ordinal`, must not be `None`")  # noqa: E501

        self._ordinal = ordinal

    @property
    def version(self):
        """Gets the version of this PdbxNmrSoftware.  # noqa: E501

        The version of the software.  # noqa: E501

        :return: The version of this PdbxNmrSoftware.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PdbxNmrSoftware.

        The version of the software.  # noqa: E501

        :param version: The version of this PdbxNmrSoftware.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PdbxNmrSoftware, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdbxNmrSoftware):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
