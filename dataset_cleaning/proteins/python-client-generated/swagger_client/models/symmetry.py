# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Symmetry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'int_tables_number': 'int',
        'cell_setting': 'str',
        'pdbx_full_space_group_name_h_m': 'str',
        'space_group_name_h_m': 'str',
        'space_group_name_hall': 'str'
    }

    attribute_map = {
        'int_tables_number': 'Int_Tables_number',
        'cell_setting': 'cell_setting',
        'pdbx_full_space_group_name_h_m': 'pdbx_full_space_group_name_H_M',
        'space_group_name_h_m': 'space_group_name_H_M',
        'space_group_name_hall': 'space_group_name_Hall'
    }

    def __init__(self, int_tables_number=None, cell_setting=None, pdbx_full_space_group_name_h_m=None, space_group_name_h_m=None, space_group_name_hall=None):  # noqa: E501
        """Symmetry - a model defined in Swagger"""  # noqa: E501
        self._int_tables_number = None
        self._cell_setting = None
        self._pdbx_full_space_group_name_h_m = None
        self._space_group_name_h_m = None
        self._space_group_name_hall = None
        self.discriminator = None
        if int_tables_number is not None:
            self.int_tables_number = int_tables_number
        if cell_setting is not None:
            self.cell_setting = cell_setting
        if pdbx_full_space_group_name_h_m is not None:
            self.pdbx_full_space_group_name_h_m = pdbx_full_space_group_name_h_m
        if space_group_name_h_m is not None:
            self.space_group_name_h_m = space_group_name_h_m
        if space_group_name_hall is not None:
            self.space_group_name_hall = space_group_name_hall

    @property
    def int_tables_number(self):
        """Gets the int_tables_number of this Symmetry.  # noqa: E501

        Space-group number from International Tables for Crystallography  Vol. A (2002).  # noqa: E501

        :return: The int_tables_number of this Symmetry.  # noqa: E501
        :rtype: int
        """
        return self._int_tables_number

    @int_tables_number.setter
    def int_tables_number(self, int_tables_number):
        """Sets the int_tables_number of this Symmetry.

        Space-group number from International Tables for Crystallography  Vol. A (2002).  # noqa: E501

        :param int_tables_number: The int_tables_number of this Symmetry.  # noqa: E501
        :type: int
        """

        self._int_tables_number = int_tables_number

    @property
    def cell_setting(self):
        """Gets the cell_setting of this Symmetry.  # noqa: E501

        The cell settings for this space-group symmetry.  # noqa: E501

        :return: The cell_setting of this Symmetry.  # noqa: E501
        :rtype: str
        """
        return self._cell_setting

    @cell_setting.setter
    def cell_setting(self, cell_setting):
        """Sets the cell_setting of this Symmetry.

        The cell settings for this space-group symmetry.  # noqa: E501

        :param cell_setting: The cell_setting of this Symmetry.  # noqa: E501
        :type: str
        """
        allowed_values = ["cubic", "hexagonal", "monoclinic", "orthorhombic", "rhombohedral", "tetragonal", "triclinic", "trigonal"]  # noqa: E501
        if cell_setting not in allowed_values:
            raise ValueError(
                "Invalid value for `cell_setting` ({0}), must be one of {1}"  # noqa: E501
                .format(cell_setting, allowed_values)
            )

        self._cell_setting = cell_setting

    @property
    def pdbx_full_space_group_name_h_m(self):
        """Gets the pdbx_full_space_group_name_h_m of this Symmetry.  # noqa: E501

        Used for PDB space group:   Example: 'C 1 2 1'  (instead of C 2)           'P 1 2 1'  (instead of P 2)           'P 1 21 1' (instead of P 21)           'P 1 1 21' (instead of P 21 -unique C axis)           'H 3'      (instead of R 3   -hexagonal)           'H 3 2'    (instead of R 3 2 -hexagonal)  # noqa: E501

        :return: The pdbx_full_space_group_name_h_m of this Symmetry.  # noqa: E501
        :rtype: str
        """
        return self._pdbx_full_space_group_name_h_m

    @pdbx_full_space_group_name_h_m.setter
    def pdbx_full_space_group_name_h_m(self, pdbx_full_space_group_name_h_m):
        """Sets the pdbx_full_space_group_name_h_m of this Symmetry.

        Used for PDB space group:   Example: 'C 1 2 1'  (instead of C 2)           'P 1 2 1'  (instead of P 2)           'P 1 21 1' (instead of P 21)           'P 1 1 21' (instead of P 21 -unique C axis)           'H 3'      (instead of R 3   -hexagonal)           'H 3 2'    (instead of R 3 2 -hexagonal)  # noqa: E501

        :param pdbx_full_space_group_name_h_m: The pdbx_full_space_group_name_h_m of this Symmetry.  # noqa: E501
        :type: str
        """

        self._pdbx_full_space_group_name_h_m = pdbx_full_space_group_name_h_m

    @property
    def space_group_name_h_m(self):
        """Gets the space_group_name_h_m of this Symmetry.  # noqa: E501

        Hermann-Mauguin space-group symbol. Note that the  Hermann-Mauguin symbol does not necessarily contain complete  information about the symmetry and the space-group origin. If  used, always supply the FULL symbol from International Tables  for Crystallography Vol. A (2002) and indicate the origin and  the setting if it is not implicit. If there is any doubt that  the equivalent positions can be uniquely deduced from this  symbol, specify the  _symmetry_equiv.pos_as_xyz or  _symmetry.space_group_name_Hall  data items as well. Leave  spaces between symbols referring to  different axes.  # noqa: E501

        :return: The space_group_name_h_m of this Symmetry.  # noqa: E501
        :rtype: str
        """
        return self._space_group_name_h_m

    @space_group_name_h_m.setter
    def space_group_name_h_m(self, space_group_name_h_m):
        """Sets the space_group_name_h_m of this Symmetry.

        Hermann-Mauguin space-group symbol. Note that the  Hermann-Mauguin symbol does not necessarily contain complete  information about the symmetry and the space-group origin. If  used, always supply the FULL symbol from International Tables  for Crystallography Vol. A (2002) and indicate the origin and  the setting if it is not implicit. If there is any doubt that  the equivalent positions can be uniquely deduced from this  symbol, specify the  _symmetry_equiv.pos_as_xyz or  _symmetry.space_group_name_Hall  data items as well. Leave  spaces between symbols referring to  different axes.  # noqa: E501

        :param space_group_name_h_m: The space_group_name_h_m of this Symmetry.  # noqa: E501
        :type: str
        """

        self._space_group_name_h_m = space_group_name_h_m

    @property
    def space_group_name_hall(self):
        """Gets the space_group_name_hall of this Symmetry.  # noqa: E501

        Space-group symbol as described by Hall (1981). This symbol  gives the space-group setting explicitly. Leave spaces between  the separate components of the symbol.   Ref: Hall, S. R. (1981). Acta Cryst. A37, 517-525; erratum  (1981) A37, 921.  # noqa: E501

        :return: The space_group_name_hall of this Symmetry.  # noqa: E501
        :rtype: str
        """
        return self._space_group_name_hall

    @space_group_name_hall.setter
    def space_group_name_hall(self, space_group_name_hall):
        """Sets the space_group_name_hall of this Symmetry.

        Space-group symbol as described by Hall (1981). This symbol  gives the space-group setting explicitly. Leave spaces between  the separate components of the symbol.   Ref: Hall, S. R. (1981). Acta Cryst. A37, 517-525; erratum  (1981) A37, 921.  # noqa: E501

        :param space_group_name_hall: The space_group_name_hall of this Symmetry.  # noqa: E501
        :type: str
        """

        self._space_group_name_hall = space_group_name_hall

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Symmetry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Symmetry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
