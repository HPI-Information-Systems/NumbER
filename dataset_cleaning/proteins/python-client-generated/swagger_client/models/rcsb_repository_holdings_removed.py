# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RcsbRepositoryHoldingsRemoved(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'audit_authors': 'list[str]',
        'deposit_date': 'datetime',
        'details': 'str',
        'id_codes_replaced_by': 'list[str]',
        'release_date': 'datetime',
        'remove_date': 'datetime',
        'repository_content_types': 'list[str]',
        'title': 'str'
    }

    attribute_map = {
        'audit_authors': 'audit_authors',
        'deposit_date': 'deposit_date',
        'details': 'details',
        'id_codes_replaced_by': 'id_codes_replaced_by',
        'release_date': 'release_date',
        'remove_date': 'remove_date',
        'repository_content_types': 'repository_content_types',
        'title': 'title'
    }

    def __init__(self, audit_authors=None, deposit_date=None, details=None, id_codes_replaced_by=None, release_date=None, remove_date=None, repository_content_types=None, title=None):  # noqa: E501
        """RcsbRepositoryHoldingsRemoved - a model defined in Swagger"""  # noqa: E501
        self._audit_authors = None
        self._deposit_date = None
        self._details = None
        self._id_codes_replaced_by = None
        self._release_date = None
        self._remove_date = None
        self._repository_content_types = None
        self._title = None
        self.discriminator = None
        if audit_authors is not None:
            self.audit_authors = audit_authors
        if deposit_date is not None:
            self.deposit_date = deposit_date
        if details is not None:
            self.details = details
        if id_codes_replaced_by is not None:
            self.id_codes_replaced_by = id_codes_replaced_by
        if release_date is not None:
            self.release_date = release_date
        if remove_date is not None:
            self.remove_date = remove_date
        if repository_content_types is not None:
            self.repository_content_types = repository_content_types
        if title is not None:
            self.title = title

    @property
    def audit_authors(self):
        """Gets the audit_authors of this RcsbRepositoryHoldingsRemoved.  # noqa: E501

        Names of the authors of the entry.  # noqa: E501

        :return: The audit_authors of this RcsbRepositoryHoldingsRemoved.  # noqa: E501
        :rtype: list[str]
        """
        return self._audit_authors

    @audit_authors.setter
    def audit_authors(self, audit_authors):
        """Sets the audit_authors of this RcsbRepositoryHoldingsRemoved.

        Names of the authors of the entry.  # noqa: E501

        :param audit_authors: The audit_authors of this RcsbRepositoryHoldingsRemoved.  # noqa: E501
        :type: list[str]
        """

        self._audit_authors = audit_authors

    @property
    def deposit_date(self):
        """Gets the deposit_date of this RcsbRepositoryHoldingsRemoved.  # noqa: E501

        The entry deposition date.  # noqa: E501

        :return: The deposit_date of this RcsbRepositoryHoldingsRemoved.  # noqa: E501
        :rtype: datetime
        """
        return self._deposit_date

    @deposit_date.setter
    def deposit_date(self, deposit_date):
        """Sets the deposit_date of this RcsbRepositoryHoldingsRemoved.

        The entry deposition date.  # noqa: E501

        :param deposit_date: The deposit_date of this RcsbRepositoryHoldingsRemoved.  # noqa: E501
        :type: datetime
        """

        self._deposit_date = deposit_date

    @property
    def details(self):
        """Gets the details of this RcsbRepositoryHoldingsRemoved.  # noqa: E501

        The entry title.  # noqa: E501

        :return: The details of this RcsbRepositoryHoldingsRemoved.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this RcsbRepositoryHoldingsRemoved.

        The entry title.  # noqa: E501

        :param details: The details of this RcsbRepositoryHoldingsRemoved.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def id_codes_replaced_by(self):
        """Gets the id_codes_replaced_by of this RcsbRepositoryHoldingsRemoved.  # noqa: E501

        The list of superseding PDB accession codes for the removed entry.  # noqa: E501

        :return: The id_codes_replaced_by of this RcsbRepositoryHoldingsRemoved.  # noqa: E501
        :rtype: list[str]
        """
        return self._id_codes_replaced_by

    @id_codes_replaced_by.setter
    def id_codes_replaced_by(self, id_codes_replaced_by):
        """Sets the id_codes_replaced_by of this RcsbRepositoryHoldingsRemoved.

        The list of superseding PDB accession codes for the removed entry.  # noqa: E501

        :param id_codes_replaced_by: The id_codes_replaced_by of this RcsbRepositoryHoldingsRemoved.  # noqa: E501
        :type: list[str]
        """

        self._id_codes_replaced_by = id_codes_replaced_by

    @property
    def release_date(self):
        """Gets the release_date of this RcsbRepositoryHoldingsRemoved.  # noqa: E501

        The initial date the entry was released in the PDB repository.  # noqa: E501

        :return: The release_date of this RcsbRepositoryHoldingsRemoved.  # noqa: E501
        :rtype: datetime
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this RcsbRepositoryHoldingsRemoved.

        The initial date the entry was released in the PDB repository.  # noqa: E501

        :param release_date: The release_date of this RcsbRepositoryHoldingsRemoved.  # noqa: E501
        :type: datetime
        """

        self._release_date = release_date

    @property
    def remove_date(self):
        """Gets the remove_date of this RcsbRepositoryHoldingsRemoved.  # noqa: E501

        The date the entry was removed from the PDB repository.  # noqa: E501

        :return: The remove_date of this RcsbRepositoryHoldingsRemoved.  # noqa: E501
        :rtype: datetime
        """
        return self._remove_date

    @remove_date.setter
    def remove_date(self, remove_date):
        """Sets the remove_date of this RcsbRepositoryHoldingsRemoved.

        The date the entry was removed from the PDB repository.  # noqa: E501

        :param remove_date: The remove_date of this RcsbRepositoryHoldingsRemoved.  # noqa: E501
        :type: datetime
        """

        self._remove_date = remove_date

    @property
    def repository_content_types(self):
        """Gets the repository_content_types of this RcsbRepositoryHoldingsRemoved.  # noqa: E501

        The list of content types associated with this removed entry.  # noqa: E501

        :return: The repository_content_types of this RcsbRepositoryHoldingsRemoved.  # noqa: E501
        :rtype: list[str]
        """
        return self._repository_content_types

    @repository_content_types.setter
    def repository_content_types(self, repository_content_types):
        """Sets the repository_content_types of this RcsbRepositoryHoldingsRemoved.

        The list of content types associated with this removed entry.  # noqa: E501

        :param repository_content_types: The repository_content_types of this RcsbRepositoryHoldingsRemoved.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["Combined NMR data (NEF)", "Combined NMR data (NMR-STAR)", "NMR chemical shifts", "NMR restraints V1", "NMR restraints V2", "assembly PDB", "assembly mmCIF", "entry PDB", "entry PDB bundle", "entry PDBML", "entry mmCIF", "structure factors"]  # noqa: E501
        if not set(repository_content_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `repository_content_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(repository_content_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._repository_content_types = repository_content_types

    @property
    def title(self):
        """Gets the title of this RcsbRepositoryHoldingsRemoved.  # noqa: E501

        The entry title.  # noqa: E501

        :return: The title of this RcsbRepositoryHoldingsRemoved.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this RcsbRepositoryHoldingsRemoved.

        The entry title.  # noqa: E501

        :param title: The title of this RcsbRepositoryHoldingsRemoved.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RcsbRepositoryHoldingsRemoved, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RcsbRepositoryHoldingsRemoved):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
