# coding: utf-8

"""
    RCSB RESTful API

    Provides programmatic access to information and annotations stored in the Protein Data Bank. <br>Models are generated from JSON schema version: <b>1.40.0</b>. <br>API services deployed on: Sun, 2 Apr 2023 21:44:46 -0700  # noqa: E501

    OpenAPI spec version: 1.40.0
    Contact: info@rcsb.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CoreInterface(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rcsb_id': 'str',
        'rcsb_interface_container_identifiers': 'RcsbInterfaceContainerIdentifiers',
        'rcsb_interface_partner': 'list[RcsbInterfacePartner]',
        'rcsb_interface_operator': 'list[list[list[str]]]',
        'rcsb_interface_info': 'RcsbInterfaceInfo',
        'rcsb_latest_revision': 'RcsbLatestRevision'
    }

    attribute_map = {
        'rcsb_id': 'rcsb_id',
        'rcsb_interface_container_identifiers': 'rcsb_interface_container_identifiers',
        'rcsb_interface_partner': 'rcsb_interface_partner',
        'rcsb_interface_operator': 'rcsb_interface_operator',
        'rcsb_interface_info': 'rcsb_interface_info',
        'rcsb_latest_revision': 'rcsb_latest_revision'
    }

    def __init__(self, rcsb_id=None, rcsb_interface_container_identifiers=None, rcsb_interface_partner=None, rcsb_interface_operator=None, rcsb_interface_info=None, rcsb_latest_revision=None):  # noqa: E501
        """CoreInterface - a model defined in Swagger"""  # noqa: E501
        self._rcsb_id = None
        self._rcsb_interface_container_identifiers = None
        self._rcsb_interface_partner = None
        self._rcsb_interface_operator = None
        self._rcsb_interface_info = None
        self._rcsb_latest_revision = None
        self.discriminator = None
        self.rcsb_id = rcsb_id
        self.rcsb_interface_container_identifiers = rcsb_interface_container_identifiers
        self.rcsb_interface_partner = rcsb_interface_partner
        self.rcsb_interface_operator = rcsb_interface_operator
        if rcsb_interface_info is not None:
            self.rcsb_interface_info = rcsb_interface_info
        if rcsb_latest_revision is not None:
            self.rcsb_latest_revision = rcsb_latest_revision

    @property
    def rcsb_id(self):
        """Gets the rcsb_id of this CoreInterface.  # noqa: E501


        :return: The rcsb_id of this CoreInterface.  # noqa: E501
        :rtype: str
        """
        return self._rcsb_id

    @rcsb_id.setter
    def rcsb_id(self, rcsb_id):
        """Sets the rcsb_id of this CoreInterface.


        :param rcsb_id: The rcsb_id of this CoreInterface.  # noqa: E501
        :type: str
        """
        if rcsb_id is None:
            raise ValueError("Invalid value for `rcsb_id`, must not be `None`")  # noqa: E501

        self._rcsb_id = rcsb_id

    @property
    def rcsb_interface_container_identifiers(self):
        """Gets the rcsb_interface_container_identifiers of this CoreInterface.  # noqa: E501


        :return: The rcsb_interface_container_identifiers of this CoreInterface.  # noqa: E501
        :rtype: RcsbInterfaceContainerIdentifiers
        """
        return self._rcsb_interface_container_identifiers

    @rcsb_interface_container_identifiers.setter
    def rcsb_interface_container_identifiers(self, rcsb_interface_container_identifiers):
        """Sets the rcsb_interface_container_identifiers of this CoreInterface.


        :param rcsb_interface_container_identifiers: The rcsb_interface_container_identifiers of this CoreInterface.  # noqa: E501
        :type: RcsbInterfaceContainerIdentifiers
        """
        if rcsb_interface_container_identifiers is None:
            raise ValueError("Invalid value for `rcsb_interface_container_identifiers`, must not be `None`")  # noqa: E501

        self._rcsb_interface_container_identifiers = rcsb_interface_container_identifiers

    @property
    def rcsb_interface_partner(self):
        """Gets the rcsb_interface_partner of this CoreInterface.  # noqa: E501


        :return: The rcsb_interface_partner of this CoreInterface.  # noqa: E501
        :rtype: list[RcsbInterfacePartner]
        """
        return self._rcsb_interface_partner

    @rcsb_interface_partner.setter
    def rcsb_interface_partner(self, rcsb_interface_partner):
        """Sets the rcsb_interface_partner of this CoreInterface.


        :param rcsb_interface_partner: The rcsb_interface_partner of this CoreInterface.  # noqa: E501
        :type: list[RcsbInterfacePartner]
        """
        if rcsb_interface_partner is None:
            raise ValueError("Invalid value for `rcsb_interface_partner`, must not be `None`")  # noqa: E501

        self._rcsb_interface_partner = rcsb_interface_partner

    @property
    def rcsb_interface_operator(self):
        """Gets the rcsb_interface_operator of this CoreInterface.  # noqa: E501

        List of operations for each interface partner.  # noqa: E501

        :return: The rcsb_interface_operator of this CoreInterface.  # noqa: E501
        :rtype: list[list[list[str]]]
        """
        return self._rcsb_interface_operator

    @rcsb_interface_operator.setter
    def rcsb_interface_operator(self, rcsb_interface_operator):
        """Sets the rcsb_interface_operator of this CoreInterface.

        List of operations for each interface partner.  # noqa: E501

        :param rcsb_interface_operator: The rcsb_interface_operator of this CoreInterface.  # noqa: E501
        :type: list[list[list[str]]]
        """
        if rcsb_interface_operator is None:
            raise ValueError("Invalid value for `rcsb_interface_operator`, must not be `None`")  # noqa: E501

        self._rcsb_interface_operator = rcsb_interface_operator

    @property
    def rcsb_interface_info(self):
        """Gets the rcsb_interface_info of this CoreInterface.  # noqa: E501


        :return: The rcsb_interface_info of this CoreInterface.  # noqa: E501
        :rtype: RcsbInterfaceInfo
        """
        return self._rcsb_interface_info

    @rcsb_interface_info.setter
    def rcsb_interface_info(self, rcsb_interface_info):
        """Sets the rcsb_interface_info of this CoreInterface.


        :param rcsb_interface_info: The rcsb_interface_info of this CoreInterface.  # noqa: E501
        :type: RcsbInterfaceInfo
        """

        self._rcsb_interface_info = rcsb_interface_info

    @property
    def rcsb_latest_revision(self):
        """Gets the rcsb_latest_revision of this CoreInterface.  # noqa: E501


        :return: The rcsb_latest_revision of this CoreInterface.  # noqa: E501
        :rtype: RcsbLatestRevision
        """
        return self._rcsb_latest_revision

    @rcsb_latest_revision.setter
    def rcsb_latest_revision(self, rcsb_latest_revision):
        """Sets the rcsb_latest_revision of this CoreInterface.


        :param rcsb_latest_revision: The rcsb_latest_revision of this CoreInterface.  # noqa: E501
        :type: RcsbLatestRevision
        """

        self._rcsb_latest_revision = rcsb_latest_revision

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoreInterface, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoreInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
